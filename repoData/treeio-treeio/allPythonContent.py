__FILENAME__ = admin
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Account: backend admin definitions
"""

from treeio.account.models import NotificationSetting, Notification
from django.contrib import admin


class NotificationAdmin(admin.ModelAdmin):
    list_display = ('recipient', 'ntype', 'date_created')


class NotificationSettingAdmin(admin.ModelAdmin):

    "NotificationSetting backend definition"
    list_display = ('owner', 'ntype',)

admin.site.register(NotificationSetting, NotificationSettingAdmin)
admin.site.register(Notification, NotificationAdmin)

########NEW FILE########
__FILENAME__ = ajax
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core Ajax views
"""

from django.template import RequestContext
import re
from core.mail import EmailInvitation
from django.contrib.sites.models import RequestSite
from core.models import Attachment, Invitation
from core.views import user_denied
from treeio.core.rendering import render_to_string
from treeio.core.models import Comment, Object, UpdateRecord, Tag
from treeio.core.forms import TagsForm
from treeio.core.ajax import converter
from dajaxice.core import dajaxice_functions
from dajax.core import Dajax


def comments_likes(request, target, form, expand=True):
    dajax = Dajax()

    response_format = 'html'

    object_id = form.get('object_id', 0)
    update = form.get('update', 0)
    object = None
    if update:
        object = UpdateRecord.objects.get(pk=object_id)
    else:
        object = Object.objects.get(pk=object_id)

    profile = request.user.get_profile()

    if object:
        if form.get('like', 0) == unicode(object.id):
            object.likes.add(profile)
            if hasattr(object, 'score'):
                object.score += 1
                object.save()

        elif form.get('unlike', 0) == unicode(object.id):
            object.likes.remove(profile)
            if hasattr(object, 'score'):
                object.score -= 1
                object.save()

        elif form.get('dislike', 0) == unicode(object.id):
            object.dislikes.add(profile)
            if hasattr(object, 'score'):
                object.score += 1
                object.save()

        elif form.get('undislike', 0) == unicode(object.id):
            object.dislikes.remove(profile)
            if hasattr(object, 'score'):
                object.score -= 1
                object.save()

        elif form.get('commentobject', 0) == unicode(object.id) and 'comment' in form:
            comment = Comment(author=profile,
                              body=form.get('comment'))
            comment.save()
            if hasattr(object, 'score'):
                object.score += 1
                object.save()
            object.comments.add(comment)

    likes = object.likes.all()
    dislikes = object.dislikes.all()
    comments = object.comments.all()

    ilike = profile in likes
    idislike = profile in dislikes
    icommented = comments.filter(author=profile).exists() or \
        comments.filter(author__default_group__in=[
                        profile.default_group_id] + [i.id for i in profile.other_groups.all().only('id')]).exists()

    output = render_to_string('core/tags/comments_likes',
                              {'object': object,
                               'is_update': update,
                               'profile': profile,
                               'likes': likes,
                               'dislikes': dislikes,
                               'comments': comments,
                               'ilike': ilike,
                               'idislike': idislike,
                               'icommented': icommented,
                               'expand': expand},
                              context_instance=RequestContext(request),
                              response_format=response_format)

    dajax.add_data({'target': target, 'content': output}, 'treeio.add_data')
    return dajax.json()

dajaxice_functions.register(comments_likes)


def tags(request, target, object_id, edit=False, formdata={}):
    dajax = Dajax()

    response_format = 'html'
    object = Object.objects.get(pk=object_id)

    tags = object.tags.all()
    form = None
    if 'tags' in formdata and not type(formdata['tags']) == list:
        formdata['tags'] = [formdata['tags']]

    if edit or formdata:
        if formdata.get('tags_object', 0) == unicode(object.id):
            form = TagsForm(tags, formdata)
            if form.is_valid():
                if 'multicomplete_tags' in formdata:
                    tag_names = formdata.get('multicomplete_tags').split(',')
                    new_tags = []
                    for name in tag_names:
                        name = name.strip()
                        if name:
                            try:
                                tag = Tag.objects.get(name=name)
                            except Tag.DoesNotExist:
                                tag = Tag(name=name)
                                tag.save()
                            new_tags.append(tag)
                else:
                    new_tags = form.is_valid()

                object.tags.clear()
                for tag in new_tags:
                    object.tags.add(tag)
                tags = object.tags.all()
                form = None
        else:
            form = TagsForm(tags)

    context = {'object': object,
               'tags': tags,
               'form': form}

    context = converter.preprocess_context(context)

    output = render_to_string('core/ajax/tags_box', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)

    dajax.add_data({'target': target, 'content': output}, 'treeio.add_data')
    return dajax.json()

dajaxice_functions.register(tags)


def attachment(request, object_id, update_id=None):
    dajax = Dajax()

    try:

        if object_id:
            attachments = Attachment.objects.filter(
                attached_object__id=object_id)
            template = 'core/tags/attachments_block'

            object_markup = render_to_string(template,
                                             {'object_id': object_id,
                                                 'attachments': attachments},
                                             context_instance=RequestContext(
                                                 request),
                                             response_format='html')

            dajax.add_data(
                {'target': 'div.attachment-block[object="%s"]' % object_id, 'content': object_markup}, 'treeio.add_data')

        if update_id:
            attachments = Attachment.objects.filter(
                attached_record__id=update_id)
            template = 'core/tags/attachments_record_block'
            update_markup = render_to_string(template,
                                             {'update_id': update_id,
                                                 'attachments': attachments},
                                             context_instance=RequestContext(
                                                 request),
                                             response_format='html')
            dajax.add_data(
                {'target': 'div.attachment-record-block[object="%s"]' % update_id, 'content': update_markup}, 'treeio.add_data')

    except Exception, e:
        print e

    return dajax.json()

dajaxice_functions.register(attachment)


def attachment_delete(request, attachment_id):

    try:
        a = Attachment.objects.get(pk=attachment_id)
    except Attachment.DoesNotExist:
        return

    profile = request.user.get_profile()

    if a.attached_object:
        object_id = a.attached_object.id
        object = Object.objects.get(pk=object_id)
    else:
        object_id = None

    update_id = None
    if a.attached_record:
        update_id = a.attached_record.id
        update = UpdateRecord.objects.get(pk=update_id)
        if not update.author == profile:
            return user_denied(request, message="Only the author of this Update can delete attachments.")

    elif not profile.has_permission(object, mode='w'):
        return user_denied(request, message="You don't have full access to this Object")

    a.delete()

    return attachment(request, object_id, update_id)

dajaxice_functions.register(attachment_delete)


def easy_invite(request, emails=None):

    dajax = Dajax()

    try:
        emails_original = emails
        emails = emails.split(',')

        sender = request.user.get_profile()
        default_group = sender.default_group
        domain = RequestSite(request).domain

        invited = []

        for email in emails:
            email = email.strip()
            if len(email) > 7 and re.match("^.+\\@(\\[?)[a-zA-Z0-9\\-\\.]+\\.([a-zA-Z]{2,3}|[0-9]{1,3})(\\]?)$", email) is not None:
                invitation = Invitation(
                    sender=request.user.get_profile(), email=email, default_group=default_group)
                invitation.save()
                EmailInvitation(
                    invitation=invitation, sender=sender, domain=domain).send_email()
                invited.append(email)

        if invited:
            template = 'core/tags/easy_invite_success'
        else:
            template = 'core/tags/easy_invite_failure'
    except:
        template = 'core/tags/easy_invite_failure'

    invite_markup = render_to_string(template,
                                     {},
                                     context_instance=RequestContext(request),
                                     response_format='html')

    dajax.add_data({'target': "div.easy-invite[emails='%s']" %
                   (emails_original), 'content': invite_markup}, 'treeio.add_data')
    return dajax.json()

dajaxice_functions.register(easy_invite)

########NEW FILE########
__FILENAME__ = cron
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Account cron jobs
"""

import codecs
try:
    from cStringIO import StringIO
except ImportError:
    from StringIO import StringIO

from django.db.models import Q
from django.utils.html import strip_tags
from django.contrib.sites.models import Site

from datetime import datetime, timedelta
from treeio.core.mail import SystemEmail
from treeio.core.models import UpdateRecord
from treeio.account.models import NotificationSetting, Notification


class CronNotifier:

    def __init__(self):
        self.next_daily = datetime.now()

    def send_notification(self, note, records):
        message_html = codecs.getwriter("utf8")(StringIO())
        message_html.write(note.title())
        current_url = None
        for record in records:
            if current_url != record.url:
                current_url = record.url
                message_html.write(
                    u'<br /><br />\n\n<a href="%s">' % unicode(record.url))
                if record.sender:
                    message_html.write(u'%s</a> (%s):<br />\n' %
                                       (unicode(record.sender), unicode(record.sender.get_human_type())))
                else:
                    message_html.write(
                        u'%s</a>:<br />\n' % unicode(record.url))
                message_html.write('-' * 30)
                message_html.write('<br /><br />\n\n')
            message_html.write(u'%s:<br />\n%s - %s<br /><br />\n\n' %
                               (unicode(record.author), unicode(record.date_created.isoformat()), record.get_full_message()))
        signature = "This is an automated message from Tree.io service (http://tree.io). Please do not reply to this e-mail."
        subject = "%s summary of [Tree.io] %s" % (
            note.get_ntype_display(), unicode(note.owner),)

        # send email notification to recipient
        try:
            toaddr = note.owner.get_contact().get_email()
        except:
            toaddr = None
        if toaddr:
            html = message_html.getvalue()
            html = html.replace(
                'href="', 'href="http://' + Site.objects.get_current().domain)
            body = strip_tags(html)
            SystemEmail(
                toaddr, subject, body, signature, html + signature).send_email()
            Notification(
                recipient=note.owner, body=html, ntype=note.ntype).save()

    def send_notifications(self):
        "Run sending some notifications"
        now = datetime.now()

        if self.next_daily <= now:
            notes = NotificationSetting.objects.filter(
                next_date__lte=now.date(), enabled=True)
            for note in notes:
                query = Q()
                for module in note.modules.all():
                    query = query | Q(
                        about__object_type__icontains=module.name)
                query = query & Q(date_created__gte=note.last_datetime) \
                              & (Q(author=note.owner_id) | Q(recipients=note.owner_id))
                self.send_notification(note, UpdateRecord.objects.filter(
                    query).distinct().order_by('url', '-date_created'))
                note.update_date(now)
            self.next_daily = datetime(
                now.year, now.month, now.day) + timedelta(days=1)

########NEW FILE########
__FILENAME__ = forms
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core forms
"""
from django import forms
from treeio.account.models import NotificationSetting, notification_types
from treeio.core.models import User, Object, ModuleSetting, Perspective, Module
from django.utils.translation import ugettext as _
from treeio.core.decorators import preprocess_form
from treeio.core.conf import settings
from datetime import date

preprocess_form()


class MassActionForm(forms.Form):
    """ Mass action form for Accounts """

    delete = forms.ChoiceField(label=_("With selected"),
        choices=(('', '-----'), ('delete', _('Delete Completely')),
                 ('trash', _('Move to Trash'))), required=False)

    instance = None

    def __init__(self, user, *args, **kwargs):
        if 'instance' in kwargs:
            self.instance = kwargs['instance']
            del kwargs['instance']

        super(MassActionForm, self).__init__(*args, **kwargs)
        self.fields['delete'] = forms.ChoiceField(label=_("With selected"),
            choices=(('', '-----'), ('delete', _('Delete Completely')),
                     ('trash', _('Move to Trash'))), required=False)

    def save(self, *args, **kwargs):
        "Process form"
        if self.instance:
            if self.is_valid():
                if self.cleaned_data['delete']:
                    if self.cleaned_data['delete'] == 'delete':
                        self.instance.delete()
                    if self.cleaned_data['delete'] == 'trash':
                        self.instance.trash = True
                        self.instance.save()


class AccountForm(forms.ModelForm):

    """ Account form """

    def __init__(self, *args, **kwargs):
        self.instance = kwargs['instance']
        super(AccountForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Username")

    def save(self, *args, **kwargs):
        "Form processor"
        super(AccountForm, self).save(*args, **kwargs)

        self.instance.user.username = self.instance.name
        self.instance.user.save()

    def clean_name(self):
        "Clean name"
        data = self.cleaned_data['name']
        existing = User.objects.filter(name=data).exclude(pk=self.instance.id)
        if existing:
            raise forms.ValidationError(
                _("User with username %s already exists.") % data)
        return data

    class Meta:

        "Account Form"
        model = User
        fields = ('name', 'default_group', 'other_groups')


class AccountPasswordForm(forms.Form):

    """ Password form """

    old_password = forms.CharField(max_length=255,
                                   widget=forms.PasswordInput(render_value=False))
    new_password = forms.CharField(max_length=255,
                                   widget=forms.PasswordInput(render_value=False))
    new_password_again = forms.CharField(max_length=255,
                                         widget=forms.PasswordInput(render_value=False))

    user = None

    def __init__(self, user, *args, **kwargs):
        super(AccountPasswordForm, self).__init__(*args, **kwargs)
        self.fields['old_password'].label = _("Current Password")
        self.fields['new_password'].label = _("New Password")
        self.fields['new_password_again'].label = _("Confirm Password")

        self.user = user

    def clean_old_password(self):
        "Clean old password"
        data = self.cleaned_data['old_password']
        if not self.user.check_password(data):
            raise forms.ValidationError(_("Current password is wrong"))
        return data

    def clean_new_password_again(self):
        "Clean new password again"
        password1 = self.cleaned_data['new_password']
        password2 = self.cleaned_data['new_password_again']
        if not password1 == password2:
            raise forms.ValidationError(_("Passwords do not match"))
        return password2

    def save(self):
        "Save"
        password1 = self.cleaned_data['new_password']
        self.user.set_password(password1)
        return self.user.save()


class SettingsForm(forms.Form):

    """ User Account settings form """

    default_perspective = forms.ModelChoiceField(
        label='Default Perspective', queryset=[])
    language = forms.ChoiceField(label='Language', choices=[])
    default_timezone = forms.ChoiceField(label='Time Zone', choices=[])
    user = None
    email_notifications = forms.ChoiceField(
        label="E-mail Notifications", choices=(('never', _('Never (disabled)')), ('True', _('As-it-happens'))) + notification_types, required=False)
    notifications_for_modules = forms.MultipleChoiceField(
        label="Receive notifications for modules", required=False)

    def __init__(self, user, *args, **kwargs):
        "Sets choices and initial value"
        super(SettingsForm, self).__init__(*args, **kwargs)

        self.fields['default_perspective'].label = _("Default Perspective")
        self.fields['language'].label = _("Language")
        self.fields['default_timezone'].label = _("Time Zone")
        self.fields['email_notifications'].label = _("E-mail Notifications")

        self.user = user

        self.fields['default_perspective'].queryset = Object.filter_permitted(
            user, Perspective.objects)
        try:
            conf = ModuleSetting.get_for_module(
                'treeio.core', 'default_perspective', user=self.user)[0]
            default_perspective = Perspective.objects.get(pk=long(conf.value))
            self.fields['default_perspective'].initial = default_perspective.id
        except:
            pass

        self.fields['default_timezone'].choices = getattr(
            settings, 'HARDTREE_SERVER_TIMEZONE')
        timezone = settings.HARDTREE_SERVER_DEFAULT_TIMEZONE
        try:
            conf = ModuleSetting.get('default_timezone', user=user)[0]
            timezone = conf.value
        except:
            pass
        self.fields['default_timezone'].initial = timezone

        self.fields['language'].choices = getattr(
            settings, 'HARDTREE_LANGUAGES', [('en', 'English')])
        language = getattr(settings, 'HARDTREE_LANGUAGES_DEFAULT', '')
        try:
            conf = ModuleSetting.get('language', user=user)[0]
            language = conf.value
        except IndexError:
            pass
        self.fields['language'].initial = language

        try:
            conf = ModuleSetting.get('email_notifications', user=user)[0]
            self.fields['email_notifications'].initial = conf.value
        except:
            self.fields[
                'email_notifications'].initial = settings.HARDTREE_ALLOW_EMAIL_NOTIFICATIONS

        perspective = user.get_perspective()

        modules = perspective.modules.filter(display=True).order_by('title')
        if not modules:
            modules = Module.objects.filter(display=True).order_by('title')
        self.fields['notifications_for_modules'].choices = [
            (module.pk, module.title) for module in modules]

        try:
            modules = NotificationSetting.objects.get(
                owner=self.user).modules.all()
            self.fields['notifications_for_modules'].initial = [
                m.pk for m in modules]
        except (NotificationSetting.DoesNotExist, NotificationSetting.MultipleObjectsReturned):
            pass

    def save(self):
        "Form processor"
        try:
            ModuleSetting.set_for_module('default_perspective',
                                         self.cleaned_data[
                                             'default_perspective'].id,
                                         'treeio.core', user=self.user)
            ModuleSetting.set_for_module('default_timezone',
                                         self.cleaned_data['default_timezone'],
                                         'treeio.core', user=self.user)
            ModuleSetting.set_for_module('language',
                                         self.cleaned_data['language'],
                                         'treeio.core', user=self.user)
            # notification settings
            email_notifications = self.cleaned_data['email_notifications']
            notification, created = NotificationSetting.objects.get_or_create(
                owner=self.user)
            if email_notifications in ('d', 'w', 'm'):
                notification.ntype = email_notifications
                if not notification.enabled:
                    notification.enabled = True
                    notification.update_date(date.today())
                notification.save()
                notification.modules.clear()
                for m in Module.objects.filter(pk__in=self.cleaned_data['notifications_for_modules']):
                    notification.modules.add(m)
            else:
                notification.enabled = False
                notification.save()
            ModuleSetting.set_for_module('email_notifications',
                                         email_notifications,
                                         'treeio.core', user=self.user)
            return True

        except:
            return False

########NEW FILE########
__FILENAME__ = hmodule
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Account: Hardtree module definition
"""

PROPERTIES = {
    'title': 'Account',
    'details': 'User Account',
    'url': '/account/',
    'system': True,
    'type': 'user',
}

URL_PATTERNS = [
    '^/account/',
]

#
# Cron
#
from treeio.account.cron import CronNotifier
cron_notifier = CronNotifier()

CRON = [cron_notifier.send_notifications]

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        pass

    def backwards(self, orm):
        pass

    models = {

    }

    complete_apps = ['account']

########NEW FILE########
__FILENAME__ = 0002_auto__add_notification__add_notificationsetting
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding model 'Notification'
        db.create_table('account_notification', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('recipient', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['core.User'])),
            ('body', self.gf('django.db.models.fields.TextField')
             (default='', null=True, blank=True)),
            ('ntype', self.gf('django.db.models.fields.CharField')
             (max_length=1)),
            ('date_created', self.gf('django.db.models.fields.DateTimeField')
             (default=datetime.datetime.now)),
        ))
        db.send_create_signal('account', ['Notification'])

        # Adding model 'NotificationSetting'
        db.create_table('account_notificationsetting', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('owner', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['core.User'], unique=True)),
            ('ntype', self.gf('django.db.models.fields.CharField')
             (max_length=1)),
            ('next_date', self.gf('django.db.models.fields.DateField')
             (null=True, blank=True)),
            ('last_datetime', self.gf('django.db.models.fields.DateTimeField')
             (default=datetime.datetime.now)),
            ('enabled', self.gf(
                'django.db.models.fields.BooleanField')(default=True)),
        ))
        db.send_create_signal('account', ['NotificationSetting'])

        # Adding M2M table for field modules on 'NotificationSetting'
        db.create_table('account_notificationsetting_modules', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('notificationsetting', models.ForeignKey(
                orm['account.notificationsetting'], null=False)),
            ('module', models.ForeignKey(orm['core.module'], null=False))
        ))
        db.create_unique(
            'account_notificationsetting_modules', ['notificationsetting_id', 'module_id'])

    def backwards(self, orm):

        # Deleting model 'Notification'
        db.delete_table('account_notification')

        # Deleting model 'NotificationSetting'
        db.delete_table('account_notificationsetting')

        # Removing M2M table for field modules on 'NotificationSetting'
        db.delete_table('account_notificationsetting_modules')

    models = {
        'account.notification': {
            'Meta': {'object_name': 'Notification'},
            'body': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'ntype': ('django.db.models.fields.CharField', [], {'max_length': '1'}),
            'recipient': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"})
        },
        'account.notificationsetting': {
            'Meta': {'object_name': 'NotificationSetting'},
            'enabled': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'modules': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['core.Module']", 'symmetrical': 'False'}),
            'next_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'ntype': ('django.db.models.fields.CharField', [], {'max_length': '1'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'unique': 'True'})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.module': {
            'Meta': {'ordering': "['name']", 'object_name': 'Module', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'display': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'system': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        }
    }

    complete_apps = ['account']

########NEW FILE########
__FILENAME__ = models
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Account module objects
"""

import calendar
from django.db import models
from treeio.core.models import User, Module
from datetime import datetime, date, timedelta
from django.utils.translation import ugettext as _

notification_types = (('d', _('Daily')),
                      ('w', _('Weekly')),
                      ('m', _('Monthly')))


class Notification(models.Model):
    recipient = models.ForeignKey(User)
    body = models.TextField(default='', blank=True, null=True)
    ntype = models.CharField(max_length=1, choices=notification_types)
    date_created = models.DateTimeField(default=datetime.now)


class NotificationSetting(models.Model):
    owner = models.ForeignKey(User, unique=True)
    modules = models.ManyToManyField(Module)
    ntype = models.CharField(
        max_length=1, choices=notification_types, verbose_name='Type')
    next_date = models.DateField(null=True, blank=True)
    last_datetime = models.DateTimeField(default=datetime.now)
    enabled = models.BooleanField(default=True)

    def __unicode__(self):
        if self.module:
            return '%s of %s' % (self.get_ntype_display(), self.module.title)
        return self.get_ntype_display()

    def save(self, *args, **kwargs):
        if not (self.id and self.next_date):
            self.next_date = date.today() + timedelta(days=1)
        return super(NotificationSetting, self).save(*args, **kwargs)

    def update_date(self, now):
        if isinstance(now, datetime):
            today = now.date()
            self.last_datetime = now
        elif isinstance(now, date):
            today = now
        else:
            raise ValueError('now must be datetime or date')
        if self.ntype == 'd':
            self.next_date = today + timedelta(days=1)
        elif self.ntype == 'w':
            self.next_date = today + timedelta(days=7 - today.weekday())
        elif self.ntype == 'm':
            self.next_date = today + \
                timedelta(days=calendar.mdays[today.month] - today.day + 1)
        self.save()

    def title(self):
        if self.ntype == 'd':
            return '<h1>Today</h1>'
        elif self.ntype == 'w':
            return '<h1>%s week</h1>' % self.next_date.isocalendar()[1]
        elif self.ntype == 'm':
            return '<h1>%s</h1>' % calendar.month_name[self.next_date.month]

########NEW FILE########
__FILENAME__ = account
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
User Account templatetags
"""
from coffin import template
from django.template import RequestContext
from jinja2 import contextfunction, Markup
from treeio.core.rendering import render_to_string

register = template.Library()


@contextfunction
def account_notification_count(context):
    "Account notification count"
    request = context['request']
    user = None
    if request.user.username:
        try:
            user = request.user.get_profile()
        except Exception:
            pass

    notifications = 0
    account = None
    if user:
        modules = user.get_perspective().get_modules()
        account = modules.filter(name='treeio.account')
        if account:
            notifications = user.notification_set.count()

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('account/tags/notification_count',
                  {'account': account, 'notifications': notifications},
                  response_format=response_format))

register.object(account_notification_count)


@contextfunction
def notification_setting_list(context, notification_settings, skip_group=False):
    "Print a list of settings"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('account/tags/notification_setting_list',
                                   {'settings': notification_settings,
                                       'skip_group': skip_group},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(notification_setting_list)

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core Account module URLs
"""

from django.conf.urls.defaults import patterns, url

urlpatterns = patterns('treeio.account.views',
                       url(r'^(\.(?P<response_format>\w+))?/?$',
                           'account_view', name='account'),
                       url(r'^view(\.(?P<response_format>\w+))?/?$',
                           'account_view', name='account_view'),
                       url(r'^password(\.(?P<response_format>\w+))?/?$',
                           'account_password', name='account_password'),
                       url(r'^watchlist(\.(?P<response_format>\w+))?/?$',
                           'watchlist', name='account_watchlist'),

                       # Settings
                       url(r'^settings(\.(?P<response_format>\w+))?/?$',
                           'settings_view', name='account_settings'),
                       url(r'^settings/view(\.(?P<response_format>\w+))?/?$',
                           'settings_view', name='account_settings_view'),
                       url(r'^settings/edit(\.(?P<response_format>\w+))?/?$',
                           'settings_edit', name='account_settings_edit'),
                       )

########NEW FILE########
__FILENAME__ = views
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core module views
"""

from treeio.core.rendering import render_to_response
from django.template import RequestContext
from django.http import HttpResponseRedirect
from django.core.urlresolvers import reverse
from treeio.account.forms import AccountForm, AccountPasswordForm, SettingsForm, MassActionForm
from treeio.core.decorators import treeio_login_required, handle_response_format
from treeio.core.models import ModuleSetting, Perspective
from treeio.account.models import NotificationSetting
from treeio.core.conf import settings
from jinja2 import Markup


@treeio_login_required
def account_view(request, response_format='html'):
    "Account view"

    profile = request.user.get_profile()
    try:
        contacts = profile.contact_set.exclude(trash=True)
    except:
        contacts = []

    return render_to_response('account/account_view',
                              {'profile': profile, 'contacts': contacts},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def watchlist(request, response_format='html'):
    "Displays all objects a User is subscribed to"

    profile = request.user.get_profile()
    watchlist = profile.subscriptions.all()

    context = {'profile': profile, 'watchlist': watchlist}

    return render_to_response('account/watchlist', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def account_edit(request, response_format='html'):
    "Account edit"

    profile = request.user.get_profile()
    if request.POST:
        form = AccountForm(request.POST, instance=profile)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect(reverse('account_view'))
    else:
        form = AccountForm(instance=profile)

    return render_to_response('account/account_edit',
                              {'profile': profile,
                                  'form': Markup(form.as_ul())},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def account_password(request, response_format='html'):
    "Change password form"

    profile = request.user.get_profile()
    if request.POST:
        if not 'cancel' in request.POST:
            form = AccountPasswordForm(request.user, request.POST)
            if form.is_valid():
                form.save()
                return HttpResponseRedirect(reverse('account_view'))
        else:
            return HttpResponseRedirect(reverse('account_view'))
    else:
        form = AccountPasswordForm(request.user)

    return render_to_response('account/account_password',
                              {'profile': profile,
                               'form': Markup(form.as_ul())},
                              context_instance=RequestContext(request), response_format=response_format)


#
# Settings
#
@treeio_login_required
def settings_view(request, response_format='html'):
    "Settings view"
    user = request.user.get_profile()

    # default permissions
    try:
        conf = ModuleSetting.get_for_module(
            'treeio.core', 'default_permissions', user=user)[0]
        default_permissions = conf.value
    except:
        default_permissions = settings.HARDTREE_DEFAULT_PERMISSIONS

    # default perspective
    try:
        conf = ModuleSetting.get_for_module(
            'treeio.core', 'default_perspective', user=user)[0]
        default_perspective = Perspective.objects.get(pk=long(conf.value))
    except:
        default_perspective = None

    # language
    language = getattr(settings, 'HARDTREE_LANGUAGES_DEFAULT', '')
    try:
        conf = ModuleSetting.get('language', user=user)[0]
        language = conf.value
    except IndexError:
        pass
    all_languages = getattr(
        settings, 'HARDTREE_LANGUAGES', [('en', 'English')])

    # time zone
    default_timezone = settings.HARDTREE_SERVER_DEFAULT_TIMEZONE
    try:
        conf = ModuleSetting.get('default_timezone')[0]
        default_timezone = conf.value
    except:
        pass

    try:
        conf = ModuleSetting.get('default_timezone', user=user)[0]
        default_timezone = conf.value
    except:
        default_timezone = getattr(
            settings, 'HARDTREE_SERVER_TIMEZONE')[default_timezone][0]

    all_timezones = getattr(settings, 'HARDTREE_SERVER_TIMEZONE')

    # email notifications e.g. new task assigned to you
    email_notifications = getattr(
        settings, 'HARDTREE_ALLOW_EMAIL_NOTIFICATIONS', False)
    try:
        conf = ModuleSetting.get('email_notifications', user=user)[0]
        email_notifications = conf.value
    except:
        pass

    try:
        ns = NotificationSetting.objects.get(owner=user, enabled=True)
        notifications_for_modules = [m.title for m in ns.modules.all()]
    except NotificationSetting.DoesNotExist:
        notifications_for_modules = []

    return render_to_response('account/settings_view',
                              {
                                  'default_permissions': default_permissions,
                                  'default_perspective': default_perspective,
                                  'language': language,
                                  'all_languages': all_languages,
                                  'default_timezone': default_timezone,
                                  'all_timezones': all_timezones,
                                  'email_notifications': email_notifications,
                                  'notifications_for_modules': notifications_for_modules,
                              },
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def settings_edit(request, response_format='html'):
    "Settings edit"

    if request.POST:
        if not 'cancel' in request.POST:
            form = SettingsForm(request.user.get_profile(), request.POST)
            if form.is_valid():
                form.save()
                return HttpResponseRedirect(reverse('account_settings_view'))
        else:
            return HttpResponseRedirect(reverse('account_settings_view'))
    else:
        form = SettingsForm(request.user.get_profile())

    return render_to_response('account/settings_edit',
                              {'form': Markup(form.as_ul())},
                              context_instance=RequestContext(request), response_format=response_format)

#
# Notification settings
#


def _process_mass_form(f):
    "Pre-process request to handle mass action form for NotificationSetting"

    def wrap(request, *args, **kwargs):
        "Wrap"
        user = request.user.get_profile()
        if 'massform' in request.POST:
            for key in request.POST:
                if 'mass-setting' in key:
                    try:
                        report = NotificationSetting.objects.get(pk=request.POST[key])
                        form = MassActionForm(
                            user, request.POST, instance=report)
                        if form.is_valid() and user.has_permission(report, mode='w'):
                            form.save()
                    except:
                        pass

        return f(request, *args, **kwargs)

    # can use functools.update_wrapper instead
    wrap.__doc__ = f.__doc__
    wrap.__name__ = f.__name__

    return wrap

########NEW FILE########
__FILENAME__ = admin
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Change management: admin page
"""
from treeio.changes.models import Change, ChangeSet
from django.contrib import admin


class ChangeAdmin(admin.ModelAdmin):

    """ Change admin """
    list_display = (
        'change_set', 'change_type', 'field', 'change_from', 'change_to')


class ChangeSetAdmin(admin.ModelAdmin):

    """ Change request admin """
    list_display = (
        'object', 'author', 'resolved_by', 'resolved_on', 'status', 'name')
    list_filter = ['status']

admin.site.register(Change, ChangeAdmin)
admin.site.register(ChangeSet, ChangeSetAdmin)

########NEW FILE########
__FILENAME__ = forms
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Changes module forms
"""
from django import forms
from django.core.urlresolvers import reverse
from django.utils.translation import ugettext as _
from treeio.changes.models import ChangeSet, ChangeSetStatus
from treeio.core.models import Object, ModuleSetting
from treeio.core.decorators import preprocess_form
from jinja2 import filters
from datetime import datetime
preprocess_form()


class MassActionForm(forms.Form):

    """ Mass action form for Reports """

    delete = forms.ChoiceField(label=_("Delete"), choices=(('', '-----'), ('delete', _('Delete Completely')),
                                                           ), required=False)

    instance = None

    def __init__(self, user, *args, **kwargs):
        if 'instance' in kwargs:
            self.instance = kwargs['instance']
            del kwargs['instance']

        super(MassActionForm, self).__init__(*args, **kwargs)
        self.fields['delete'] = forms.ChoiceField(label=_("Delete"), choices=(('', '-----'),
                                                                              ('delete', _(
                                                                                  'Delete Completely')),
                                                                              ('trash', _('Move to Trash'))), required=False)

    def save(self, *args, **kwargs):
        "Process form"

        if self.instance:
            if self.is_valid():
                if self.cleaned_data['delete']:
                    if self.cleaned_data['delete'] == 'delete':
                        self.instance.delete()


class ObjectModelChoiceField(forms.ModelChoiceField):

    "Object Model Choice Field"

    def label_from_instance(self, obj):
        "Label From Instance"
        name = unicode(obj)
        obj_type = obj.get_human_type()
        label = filters.do_truncate(filters.do_striptags(name), 30)
        if obj_type:
            label += " (" + obj_type + ")"
        return label


class ChangeSetStatusForm(forms.ModelForm):

    """ ChangeSetStatus form """

    def __init__(self, user, *args, **kwargs):
        super(ChangeSetStatusForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")
        self.fields['active'].label = _("Active")
        self.fields['hidden'].label = _("Hidden")
        self.fields['details'].label = _("Details")

    class Meta:

        "ChangeSetStatus"
        model = ChangeSetStatus
        fields = ['name', 'active', 'hidden', 'details']


class ChangeSetForm(forms.ModelForm):

    """ ChangeSet form """

    def __init__(self, user, *args, **kwargs):
        super(ChangeSetForm, self).__init__(*args, **kwargs)

        self.user = None
        if user:
            self.user = user

        self.fields['name'].label = _("Name")
        self.fields['name'].widget.attrs.update({'size': 50})

        self.fields['object'].label = _("Object")
        self.fields['object'] = ObjectModelChoiceField(label=_("Object"),
                                                       queryset=Object.filter_permitted(user,
                                                                                        Object.objects))
        self.fields['object'].widget.attrs.update({'class': 'autocomplete',
                                                   'callback': reverse('core_ajax_object_lookup')})
        if 'object_id' in kwargs:
            self.fields['parent'].initial = kwargs['object_id']
            del kwargs['object_id']

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.changes', 'default_changeset_status')[0]
            default_changeset_status = ChangeSetStatus.objects.get(
                pk=long(conf.value))
            if not default_changeset_status.trash:
                self.fields['status'].initial = default_changeset_status.id
        except Exception:
            pass

        self.fields['status'].label = _("Status")
        self.fields['details'].label = _("Details")

    def save(self, *args, **kwargs):
        "Override Save to mark .resolved*"

        instance = getattr(self, 'instance', None)
        user = getattr(self, 'user', None)

        if instance and user:
            try:
                old_changeset = ChangeSet.objects.get(pk=instance.id)
                if not old_changeset.status == instance.status and not instance.status.active and instance.status.hidden:
                    instance.resolved_by = user
                    instance.resolved_on = datetime.now()
            except ChangeSet.DoesNotExist:
                pass

        return super(ChangeSetForm, self).save(*args, **kwargs)

    class Meta:

        "ChangeSet"
        model = ChangeSet
        fields = ['name', 'object', 'status', 'details']

#
# Filters
#


class FilterForm(forms.ModelForm):

    """ FilterForm definition """

    def __init__(self, user, skip=[], *args, **kwargs):
        super(FilterForm, self).__init__(*args, **kwargs)

        if 'author' in skip:
            del self.fields['author']
        else:
            self.fields['author'].required = False
            self.fields['author'].widget.attrs.update({'class': 'autocomplete',
                                                       'callback': reverse('identities_ajax_user_lookup')})
            self.fields['author'].label = _("Author")

        if 'object' in skip:
            del self.fields['object']
        else:
            self.fields['object'] = ObjectModelChoiceField(label=_("Object"),
                                                           queryset=Object.filter_permitted(user,
                                                                                            Object.objects))
            self.fields['object'].required = False
            self.fields['object'].widget.attrs.update({'class': 'autocomplete',
                                                       'callback': reverse('core_ajax_object_lookup')})
            self.fields['object'].label = _("Object")

        if 'resolved_by' in skip:
            del self.fields['resolved_by']
        else:
            self.fields['resolved_by'].required = False
            self.fields['resolved_by'].widget.attrs.update({'class': 'autocomplete',
                                                            'callback': reverse('identities_ajax_user_lookup')})
            self.fields['resolved_by'].label = _("Resolved by")

        if 'status' in skip:
            del self.fields['status']
        else:
            self.fields['status'].queryset = Object.filter_permitted(
                user, ChangeSetStatus.objects)
            self.fields['status'].required = False
            self.fields['status'].label = _("Status")

    class Meta:

        "FilterForm"
        model = ChangeSet
        fields = ('author', 'object', 'resolved_by', 'status')


class SettingsForm(forms.Form):

    """ Administration settings form """

    default_changeset_status = forms.ModelChoiceField(
        label='Default Change Set Status', queryset=[])

    def __init__(self, user, *args, **kwargs):
        "Sets choices and initial value"
        super(SettingsForm, self).__init__(*args, **kwargs)

        self.fields['default_changeset_status'].queryset = ChangeSetStatus.objects.filter(
            trash=False)

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.changes', 'default_changeset_status')[0]
            default_changeset_status = ChangeSetStatus.objects.get(
                pk=long(conf.value))
            if not default_changeset_status.trash:
                self.fields[
                    'default_changeset_status'].initial = default_changeset_status.id
        except Exception:
            pass

    def save(self):
        "Form processor"
        try:
            ModuleSetting.set_for_module('default_changeset_status',
                                         self.cleaned_data[
                                             'default_changeset_status'].id,
                                         'treeio.changes')
            return True

        except Exception:
            return False

########NEW FILE########
__FILENAME__ = hmodule
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Change Control: Hardtree module definition
"""

"""
PROPERTIES = {
              'title': 'Changes',
              'details': 'Changes',
              'url': '/changes/',
              'system': False,
              'type': 'minor',
              }
"""

URL_PATTERNS = [
    '^/changes/',
]

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding model 'ChangeSetStatus'
        db.create_table('changes_changesetstatus', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('active', self.gf('django.db.models.fields.BooleanField')
             (default=True)),
            ('hidden', self.gf('django.db.models.fields.BooleanField')
             (default=False)),
        ))
        db.send_create_signal('changes', ['ChangeSetStatus'])

        # Adding model 'ChangeSet'
        db.create_table('changes_changeset', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=255)),
            ('object', self.gf('django.db.models.fields.related.ForeignKey')
             (related_name='changeset_object_set', to=orm['core.Object'])),
            ('author', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='author', null=True, to=orm['core.User'])),
            ('resolved_by', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['core.User'], null=True, blank=True)),
            ('resolved_on', self.gf('django.db.models.fields.DateTimeField')
             (null=True, blank=True)),
            ('status', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['changes.ChangeSetStatus'])),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('date_created', self.gf('django.db.models.fields.DateTimeField')
             (default=datetime.datetime.now)),
        ))
        db.send_create_signal('changes', ['ChangeSet'])

        # Adding model 'Change'
        db.create_table('changes_change', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('change_set', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['changes.ChangeSet'])),
            ('change_type', self.gf('django.db.models.fields.CharField')
             (max_length=255, null=True, blank=True)),
            ('field', self.gf('django.db.models.fields.CharField')
             (max_length=255, null=True, blank=True)),
            ('change_from', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('change_to', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('date_created', self.gf('django.db.models.fields.DateTimeField')
             (default=datetime.datetime.now)),
        ))
        db.send_create_signal('changes', ['Change'])

    def backwards(self, orm):

        # Deleting model 'ChangeSetStatus'
        db.delete_table('changes_changesetstatus')

        # Deleting model 'ChangeSet'
        db.delete_table('changes_changeset')

        # Deleting model 'Change'
        db.delete_table('changes_change')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'changes.change': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'Change'},
            'change_from': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'change_set': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['changes.ChangeSet']"}),
            'change_to': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'change_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'field': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
        },
        'changes.changeset': {
            'Meta': {'ordering': "('-date_created', 'name')", 'object_name': 'ChangeSet'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'author'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'changeset_object_set'", 'to': "orm['core.Object']"}),
            'resolved_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'resolved_on': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['changes.ChangeSetStatus']"})
        },
        'changes.changesetstatus': {
            'Meta': {'ordering': "('hidden', '-active', 'name')", 'object_name': 'ChangeSetStatus', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'everybody_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']"}),
            'group_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"}),
            'user_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        }
    }

    complete_apps = ['changes']

########NEW FILE########
__FILENAME__ = models
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Change Control models
"""
from django.db import models
from django.core.urlresolvers import reverse
from treeio.core.models import User, Object
from datetime import datetime


class ChangeSetStatus(Object):

    "State information about a ChangeSet"
    name = models.CharField(max_length=256)
    details = models.TextField(blank=True, null=True)
    active = models.BooleanField(default=True)
    hidden = models.BooleanField(default=False)

    searchable = False

    def __unicode__(self):
        return self.name

    def get_absolute_url(self):
        "Returns absolute URL of the object"
        return reverse('changes_status_view', args=[self.id])

    class Meta:

        "ChangeSetStatus"
        ordering = ('hidden', '-active', 'name')

# ChangeSet model


class ChangeSet(models.Model):

    """ Change Set model"""
    name = models.CharField(max_length=255)
    object = models.ForeignKey(Object, related_name='changeset_object_set')
    author = models.ForeignKey(
        User, null=True, blank=True, related_name='author', on_delete=models.SET_NULL)
    resolved_by = models.ForeignKey(
        User, null=True, blank=True, on_delete=models.SET_NULL)
    resolved_on = models.DateTimeField(null=True, blank=True)
    status = models.ForeignKey(ChangeSetStatus)
    details = models.TextField(null=True, blank=True)
    date_created = models.DateTimeField(default=datetime.now)

    def __unicode__(self):
        return self.name

    def get_absolute_url(self):
        "Returns absolute URL of the object"
        return reverse('changes_set_view', args=[self.id])

    class Meta:

        "ChangeSet"
        ordering = ('-date_created', 'name')

# Change Model


class Change(models.Model):

    """ Change model """
    change_set = models.ForeignKey(ChangeSet)
    change_type = models.CharField(max_length=255, null=True, blank=True)
    field = models.CharField(max_length=255, null=True, blank=True)
    change_from = models.TextField(null=True, blank=True)
    change_to = models.TextField(null=True, blank=True)
    date_created = models.DateTimeField(default=datetime.now)

    def __unicode__(self):
        return self.status

    def get_absolute_url(self):
        "Returns absolute URL of the object"
        return reverse('changes_change_view', args=[self.id])

    class Meta:

        "Change"
        ordering = ['-date_created']

########NEW FILE########
__FILENAME__ = changes
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Changes templatetags
"""
from coffin import template
from treeio.core.rendering import render_to_string
from jinja2 import contextfunction, Markup
from django.template import RequestContext

register = template.Library()


@contextfunction
def changes_set_list(context, changesets):
    "Print a list of ChangeSets"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('changes/tags/changeset_list',
                                   {'changesets': changesets},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(changes_set_list)

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Change Control module URLs
"""
from django.conf.urls import patterns, url

urlpatterns = patterns('treeio.changes.views',
    url(r'^(\.(?P<response_format>\w+))?$',
        'index', name='changes_index'),
    url(r'^owned(\.(?P<response_format>\w+))?$',
        'index_owned', name='changes_index_owned'),
    url(r'^resolved(\.(?P<response_format>\w+))?$',
        'index_resolved', name='changes_index_resolved'),

    # Statuses
    url(r'^status/view/(?P<status_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'status_view', name='changes_status_view'),
    url(r'^status/edit/(?P<status_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'status_edit', name='changes_status_edit'),
    url(r'^status/delete/(?P<status_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'status_delete', name='changes_status_delete'),
    url(r'^status/add(\.(?P<response_format>\w+))?/?$',
        'status_add', name='changes_status_add'),

    # Sets
    url(r'^set/view/(?P<set_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'set_view', name='changes_set_view'),
    url(r'^set/edit/(?P<set_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'set_edit', name='changes_set_edit'),
    url(r'^set/delete/(?P<set_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'set_delete', name='changes_set_delete'),
    url(r'^set/add(\.(?P<response_format>\w+))?/?$',
        'set_add', name='changes_set_add'),

    # Settings
    url(r'^settings/view(\.(?P<response_format>\w+))?/?$',
        'settings_view', name='changes_settings_view'),
    url(r'^settings/edit(\.(?P<response_format>\w+))?/?$',
        'settings_edit', name='changes_settings_edit'),
)

########NEW FILE########
__FILENAME__ = views
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Change Control module views
"""
from django.shortcuts import get_object_or_404
from django.template import RequestContext
from django.http import HttpResponseRedirect
from django.core.urlresolvers import reverse
from django.db.models import Q
from treeio.core.models import Object, ModuleSetting
from treeio.core.rendering import render_to_response
from treeio.core.views import user_denied
from treeio.core.decorators import handle_response_format, treeio_login_required, module_admin_required
from treeio.changes.forms import ChangeSetForm, ChangeSetStatusForm, FilterForm, SettingsForm, \
    MassActionForm
from treeio.changes.models import ChangeSet, ChangeSetStatus


def _get_filter_query(args):
    "Creates a query to filter Documents and Tasks based on FilterForm arguments"
    query = Q()

    for arg in args:
        if hasattr(ChangeSet, arg) and args[arg]:
            kwargs = {str(arg + '__id'): long(args[arg])}
            query = query & Q(**kwargs)

    if not 'status' in args:
        query = query & Q(status__hidden=False)

    return query


def _get_default_context(request):
    "Returns Default context applicable to all views"

    all_statuses = Object.filter_by_request(request, ChangeSetStatus.objects)
    massform = MassActionForm(request.user.get_profile())

    context = {'all_statuses': all_statuses,
               'massform': massform}

    return context


def _process_mass_form(f):
    "Pre-process request to handle mass action form for Change Sets"

    def wrap(request, *args, **kwargs):
        "Wrap"
        user = request.user.get_profile()
        if 'massform' in request.POST:
            for key in request.POST:
                if 'mass-changeset' in key:
                    try:
                        changeset = ChangeSet.objects.get(pk=request.POST[key])
                        form = MassActionForm(
                            request.user.get_profile(), request.POST, instance=changeset)
                        if form.is_valid() and user.has_permission(changeset, mode='w'):
                            form.save()
                    except Exception:
                        pass

        return f(request, *args, **kwargs)

    wrap.__doc__ = f.__doc__
    wrap.__name__ = f.__name__

    return wrap


@handle_response_format
@treeio_login_required
@_process_mass_form
def index(request, response_format='html'):
    "Change Control index page"

    query = Q(object__in=Object.filter_by_request(request, Object.objects))
    if request.GET:
        query = query & _get_filter_query(request.GET)
        filters = FilterForm(request.user.get_profile(), [], request.GET)
    else:
        query = query & Q(status__hidden=False)
        filters = FilterForm(request.user.get_profile())

    changesets = ChangeSet.objects.filter(query)

    context = _get_default_context(request)
    context.update({'changesets': changesets, 'filters': filters})

    return render_to_response('changes/index', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_form
def index_owned(request, response_format='html'):
    "Change Control owned by me page"

    query = Q(object__in=Object.filter_by_request(request,
                                                  Object.objects)) & Q(author=request.user.get_profile())
    if request.GET:
        query = query & _get_filter_query(request.GET)
        filters = FilterForm(request.user.get_profile(), 'author', request.GET)
    else:
        query = query & Q(status__hidden=False)
        filters = FilterForm(request.user.get_profile(), 'author')

    changesets = ChangeSet.objects.filter(query)

    context = _get_default_context(request)
    context.update({'filters': filters,
                    'changesets': changesets})

    return render_to_response('changes/index_owned', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_form
def index_resolved(request, response_format='html'):
    "Change Control resolved by me page"

    query = Q(object__in=Object.filter_by_request(request,
                                                  Object.objects)) & Q(resolved_by=request.user.get_profile())
    if request.GET:
        query = query & _get_filter_query(request.GET)
        filters = FilterForm(
            request.user.get_profile(), 'resolved_by', request.GET)
    else:
        filters = FilterForm(request.user.get_profile(), 'resolved_by')

    changesets = ChangeSet.objects.filter(query)

    context = _get_default_context(request)
    context.update({'filters': filters,
                    'changesets': changesets})

    return render_to_response('changes/index_resolved', context,
                              context_instance=RequestContext(request), response_format=response_format)

#
# ChangeSetStatus
#


@handle_response_format
@treeio_login_required
@_process_mass_form
def status_view(request, status_id, response_format='html'):
    "Status view"

    status = get_object_or_404(ChangeSetStatus, pk=status_id)

    if not request.user.get_profile().has_permission(status) \
            and not request.user.get_profile().is_admin('treeio.changes'):
        return user_denied(request, "You don't have access to this Change Set Status.",
                           response_format=response_format)

    query = Q(object__in=Object.filter_by_request(request, Object.objects)) & Q(
        status=status)
    if request.GET:
        query = query & _get_filter_query(request.GET)
        filters = FilterForm(request.user.get_profile(), 'status', request.GET)
    else:
        filters = FilterForm(request.user.get_profile(), 'status')

    changesets = ChangeSet.objects.filter(query)

    context = _get_default_context(request)
    context.update({'status': status,
                    'changesets': changesets,
                    'filters': filters})

    return render_to_response('changes/status_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required('treeio.changes')
def status_edit(request, status_id, response_format='html'):
    "Status edit"

    status = get_object_or_404(ChangeSetStatus, pk=status_id)

    if request.POST:
        form = ChangeSetStatusForm(
            request.user.get_profile(), request.POST, instance=status)
        if form.is_valid():
            status = form.save()
            return HttpResponseRedirect(reverse('changes_status_view', args=[status.id]))
    else:
        form = ChangeSetStatusForm(request.user.get_profile(), instance=status)

    context = _get_default_context(request)
    context.update({'status': status, 'form': form})

    return render_to_response('changes/status_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required('treeio.changes')
def status_delete(request, status_id, response_format='html'):
    "Status delete"

    status = get_object_or_404(ChangeSetStatus, pk=status_id)

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                status.trash = True
                status.save()
            else:
                status.delete()
            return HttpResponseRedirect(reverse('changes_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('changes_status_view', args=[status.id]))

    context = _get_default_context(request)
    context.update({'status': status})

    return render_to_response('changes/status_delete', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required('treeio.changes')
def status_add(request, response_format='html'):
    "Status add"

    if request.POST:
        form = ChangeSetStatusForm(request.user.get_profile(), request.POST)
        if form.is_valid():
            status = form.save()
            return HttpResponseRedirect(reverse('changes_status_view', args=[status.id]))
    else:
        form = ChangeSetStatusForm(request.user.get_profile())

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('changes/status_add', context,
                              context_instance=RequestContext(request), response_format=response_format)


#
# ChangeSet
#
@handle_response_format
@treeio_login_required
def set_view(request, set_id, response_format='html'):
    "ChangeSet view"

    changeset = get_object_or_404(ChangeSet, pk=set_id)

    if not request.user.get_profile().has_permission(changeset.object) \
            and not request.user.get_profile().is_admin('treeio.changes'):
        return user_denied(request, "You don't have access to this Change Set.",
                           response_format=response_format)

    context = _get_default_context(request)
    context.update({'changeset': changeset})

    return render_to_response('changes/set_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def set_edit(request, set_id, response_format='html'):
    "ChangeSet edit"

    changeset = get_object_or_404(ChangeSet, pk=set_id)

    if not request.user.get_profile().has_permission(changeset.object, mode='w') \
            and not request.user.get_profile().is_admin('treeio.changes'):
        return user_denied(request, "You don't have access to this Change Set.",
                           response_format=response_format)

    if request.POST:
        form = ChangeSetForm(
            request.user.get_profile(), request.POST, instance=changeset)
        if form.is_valid():
            changeset = form.save()
            return HttpResponseRedirect(reverse('changes_set_view', args=[changeset.id]))
    else:
        form = ChangeSetForm(request.user.get_profile(), instance=changeset)

    context = _get_default_context(request)
    context.update({'changeset': changeset,
                    'form': form})

    return render_to_response('changes/set_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def set_delete(request, set_id, response_format='html'):
    "ChangeSet delete"

    changeset = get_object_or_404(ChangeSet, pk=set_id)

    if not request.user.get_profile().has_permission(changeset.object, mode='w') \
            and not request.user.get_profile().is_admin('treeio.changes'):
        return user_denied(request, "You don't have access to this Change Set.",
                           response_format=response_format)

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                changeset.trash = True
                changeset.save()
            else:
                changeset.delete()
            return HttpResponseRedirect(reverse('changes_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('changes_set_view', args=[changeset.id]))

    context = _get_default_context(request)
    context.update({'changeset': changeset})

    return render_to_response('changes/set_delete', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def set_add(request, response_format='html'):
    "ChangeSet add"

    if request.POST:
        changeset = ChangeSet(author=request.user.get_profile())
        form = ChangeSetForm(
            request.user.get_profile(), request.POST, instance=changeset)
        if form.is_valid():
            set = form.save()
            return HttpResponseRedirect(reverse('changes_set_view', args=[set.id]))
    else:
        form = ChangeSetForm(request.user.get_profile())

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('changes/set_add', context,
                              context_instance=RequestContext(request), response_format=response_format)


#
# Settings
#
@handle_response_format
@treeio_login_required
@module_admin_required('treeio.changes')
def settings_view(request, response_format='html'):
    "Settings"

    # default changeset status
    try:
        conf = ModuleSetting.get_for_module(
            'treeio.changes', 'default_changeset_status')[0]
        default_changeset_status = ChangeSetStatus.objects.get(
            pk=long(conf.value))

    except Exception:
        default_changeset_status = None

    # check not trashed
    if default_changeset_status:
        if default_changeset_status.trash:
            default_changeset_status = None

    settings_statuses = ChangeSetStatus.objects.filter(trash=False)

    context = _get_default_context(request)
    context.update({'default_changeset_status': default_changeset_status,
                    'settings_statuses': settings_statuses})

    return render_to_response('changes/settings_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required('treeio.changes')
def settings_edit(request, response_format='html'):
    "Settings"

    if request.POST:
        form = SettingsForm(request.user.get_profile(), request.POST)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect(reverse('changes_settings_view'))
    else:
        form = SettingsForm(request.user.get_profile())

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('changes/settings_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)

########NEW FILE########
__FILENAME__ = admin
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core: backend admin definitions
"""

from treeio.core.models import User, Group, Object, Module, Perspective, ModuleSetting
from treeio.core.models import PageFolder, Page, UpdateRecord, Widget
from django.contrib import admin


class UserAdmin(admin.ModelAdmin):

    "User backend definition"
    list_display = ('user', 'default_group')


class GroupAdmin(admin.ModelAdmin):

    "Group backend definition"
    list_display = ['name']


class ObjectAdmin(admin.ModelAdmin):

    "Object backend definition"
    list_display = ('__unicode__', 'object_type', 'last_updated')
    list_filter = ['object_type']


class ModuleAdmin(admin.ModelAdmin):

    "Module backend definition"
    list_display = ('name', 'title', 'url', 'display', 'system')
    list_filter = ['display']


class PerspectiveAdmin(admin.ModelAdmin):

    "Perspective backend definition"
    list_display = ['name']


class ModuleSettingAdmin(admin.ModelAdmin):

    "Module settings backend definition"
    list_display = ('label', 'name', 'user', 'perspective', 'module')
    list_filter = ['perspective', 'module']


class PageFolderAdmin(admin.ModelAdmin):

    "PageFolder backend definition"
    list_display = ['name']


class PageAdmin(admin.ModelAdmin):

    "Page backend definition"
    list_display = ('name', 'title', 'folder', 'published')
    list_filter = ['folder', 'published']


class UpdateRecordAdmin(admin.ModelAdmin):

    "UpdateRecord backend definition"
    list_display = ('record_type', 'body')
    list_filter = ['recipients']


class WidgetAdmin(admin.ModelAdmin):

    "Widget backend definition"
    list_display = ('widget_name', 'module_name', 'user', 'perspective')
    list_filter = ['widget_name', 'perspective']


admin.site.register(User, UserAdmin)
admin.site.register(Group, GroupAdmin)
admin.site.register(Object, ObjectAdmin)

admin.site.register(Module, ModuleAdmin)
admin.site.register(Perspective, PerspectiveAdmin)
admin.site.register(ModuleSetting, ModuleSettingAdmin)

admin.site.register(PageFolder, PageFolderAdmin)
admin.site.register(Page, PageAdmin)

admin.site.register(UpdateRecord, UpdateRecordAdmin)
admin.site.register(Widget, WidgetAdmin)

########NEW FILE########
__FILENAME__ = handlers
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

from __future__ import absolute_import, with_statement

__all__ = ['GroupHandler',
           'UserHandler',
           'ModuleHandler',
           'PerspectiveHandler',
           'PageFolderHandler',
           'PageHandler',
           ]

from django.utils.translation import ugettext as _

from treeio.core.api.utils import rc
from piston.handler import BaseHandler
from django.db.models import Q
from treeio.core.api.handlers import AccessHandler, ObjectHandler
from treeio.core.api.decorators import module_admin_required
from treeio.core.models import User, Group, Perspective, Module, Page, PageFolder
from treeio.core.administration.forms import PerspectiveForm, UserForm, GroupForm, PageForm, PageFolderForm


class GroupHandler(AccessHandler):

    "Entrypoint for Group model."

    model = Group
    form = GroupForm
    fields = ('id', 'name', 'parent', 'perspective', 'details')

    @staticmethod
    def resource_uri():
        return ('api_admin_groups', ['id'])

    @staticmethod
    def perspective(data):
        return data.get_perspective()


class UserHandler(AccessHandler):

    "Entrypoint for User model."

    model = User
    form = UserForm
    allowed_methods = ('GET', 'DELETE')
    fields = ('id', 'name', 'default_group', 'other_groups',
              'disabled', 'last_access', 'perspective')

    @staticmethod
    def resource_uri():
        return ('api_admin_users', ['id'])

    @staticmethod
    def perspective(data):
        return data.get_perspective()

    def create(self, request, *args, **kwargs):
        return rc.NOT_IMPLEMENTED

    def update(self, request, *args, **kwargs):
        return rc.NOT_IMPLEMENTED

    @module_admin_required()
    def delete(self, request, *args, **kwargs):
        pkfield = self.model._meta.pk.name

        if pkfield in kwargs:
            try:
                profile = self.model.objects.get(pk=kwargs.get(pkfield))

                if profile == request.user.get_profile():
                    self.status = 401
                    return _("This is you!")
                else:
                    profile.delete()
                    return rc.DELETED
            except self.model.MultipleObjectsReturned:
                return rc.DUPLICATE_ENTRY
            except self.model.DoesNotExist:
                return rc.NOT_HERE
        else:
            rc.BAD_REQUEST


class ModuleHandler(BaseHandler):

    "Entrypoint for Module model."

    allowed_methods = ('GET',)
    model = Module
    exclude = ('object_type', 'object_ptr', 'object_name')

    read = module_admin_required()(BaseHandler.read)

    @staticmethod
    def resource_uri():
        return ('api_admin_modules', ['id'])


class PerspectiveHandler(ObjectHandler):

    "Entrypoint for Perspective model."

    model = Perspective
    form = PerspectiveForm

    fields = ('id',) + form._meta.fields

    @staticmethod
    def resource_uri():
        return ('api_admin_perspectives', ['id'])

    def check_create_permission(self, request, mode):
        return request.user.get_profile().is_admin('treeio.core')

    def check_instance_permission(self, request, inst, mode):
        return request.user.get_profile().is_admin('treeio.core')

    @module_admin_required()
    def delete_instance(self, request, inst):
        # Don't let users delete their last perspective
        other_perspectives = Perspective.objects.filter(
            trash=False).exclude(id=inst.id)
        admin_module = Module.objects.all().filter(name='treeio.core')[0]
        if not other_perspectives:
            self.status = 401
            return _("This is your only Perspective.")
        elif not other_perspectives.filter(Q(modules=admin_module) | Q(modules__isnull=True)):
            self.status = 401
            return _("This is your only Perspective with Administration module. You would be locked out!")
        elif 'trash' in request.REQUEST:
            inst.trash = True
            inst.save()
            return inst
        else:
            inst.delete()
            return rc.DELETED

    @module_admin_required()
    def update(self, request, *args, **kwargs):
        if request.data is None:
            return rc.BAD_REQUEST

        pkfield = kwargs.get(self.model._meta.pk.name) or request.data.get(
            self.model._meta.pk.name)

        if not pkfield:
            return rc.BAD_REQUEST

        try:
            obj = self.model.objects.get(pk=pkfield)
        except self.model.ObjectDoesNotExist:
            return rc.NOT_FOUND

        attrs = self.flatten_dict(request)

        form = self.form(instance=obj, **attrs)
        if form.is_valid():
            perspective = form.save()

            admin_module = Module.objects.filter(name='treeio.core')[0]
            other_perspectives = Perspective.objects.filter(
                trash=False).exclude(id=perspective.id)
            modules = perspective.modules.all()
            if modules and not admin_module in modules:
                if not other_perspectives.filter(Q(modules=admin_module) | Q(modules__isnull=True)):
                    perspective.modules.add(admin_module)
                    request.session['message'] = _(
                        "This is your only Perspective with Administration module. You would be locked out!")
            return obj
        else:
            self.status = 400
            return form.errors


class PageFolderHandler(ObjectHandler):

    "Entrypoint for PageFolder model."
    model = PageFolder
    form = PageFolderForm

    @staticmethod
    def resource_uri():
        return ('api_admin_folders', ['id'])

    def check_instance_permission(self, request, inst, mode):
        return request.user.get_profile().is_admin('treeio.core')

    def flatten_dict(self, request):
        return {'data': super(ObjectHandler, self).flatten_dict(request.data)}


class PageHandler(ObjectHandler):

    "Entrypoint for Page model."
    model = Page
    form = PageForm

    @staticmethod
    def resource_uri():
        return ('api_admin_pages', ['id'])

    def check_instance_permission(self, request, inst, mode):
        return request.user.get_profile().is_admin('treeio.core')

    def flatten_dict(self, request):
        return {'data': super(ObjectHandler, self).flatten_dict(request.data)}

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core: test api
"""
import json
from django.test import TestCase
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser
from treeio.core.models import User, Group, ModuleSetting, Object, Perspective


class CoreAPITest(TestCase):

    "Core api tests"

    username = "api_test"
    password = "api_password"
    prepared = False
    authentication_headers = {"CONTENT_TYPE": "application/json",
                              "HTTP_AUTHORIZATION": "Basic YXBpX3Rlc3Q6YXBpX3Bhc3N3b3Jk"}
    content_type = 'application/json'
    prepared = False

    def setUp(self):
        "Initial Setup"

        if not self.prepared:
            Object.objects.all().delete()

            # Create objects
            self.group, created = Group.objects.get_or_create(name='test')
            duser, created = DjangoUser.objects.get_or_create(
                username=self.username)
            duser.set_password(self.password)
            duser.save()
            self.user, created = User.objects.get_or_create(user=duser)
            self.user.save()
            perspective, created = Perspective.objects.get_or_create(
                name='default')
            perspective.set_default_user()
            perspective.save()
            ModuleSetting.set('default_perspective', perspective.id)

            self.perspective = Perspective(name='test')
            self.perspective.set_default_user()
            self.perspective.save()

            self.group = Group(name='test')
            self.group.save()

            self.client = Client()

            self.prepared = True

    def test_unauthenticated_access(self):
        "Test index page at /admin/api/users"
        response = self.client.get('/admin/api/users')
        # Redirects as unauthenticated
        self.assertEquals(response.status_code, 404)

    def test_get_ticket_groups_list(self):
        """ Test index page api /admin/api/groups """
        response = self.client.get(
            path=reverse('api_admin_groups'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_group(self):
        response = self.client.get(path=reverse('api_admin_groups', kwargs={
                                   'accessentity_ptr': self.group.id}), **self.authentication_headers)
        print response.content
        self.assertEquals(response.status_code, 200)

    def test_update_group(self):
        updates = {'name': 'Api group name', 'details':
                   '<p>api details</p>', 'perspective': self.perspective.id}
        response = self.client.put(path=reverse('api_admin_groups', kwargs={'accessentity_ptr': self.group.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        print response.content
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        self.assertEquals(data['details'], updates['details'])
        self.assertEquals(data['perspective']['id'], updates['perspective'])

    def test_get_ticket_users_list(self):
        """ Test index page api /admin/api/users """
        response = self.client.get(
            path=reverse('api_admin_users'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_user(self):
        response = self.client.get(path=reverse('api_admin_users', kwargs={
                                   'accessentity_ptr': self.user.id}), **self.authentication_headers)
        print response.content
        self.assertEquals(response.status_code, 200)

    def test_update_user(self):
        updates = {'name': 'Api user name', 'default_group': self.group.id, 'disabled': False,
                   'perspective': self.perspective.id}
        response = self.client.put(path=reverse('api_admin_users', kwargs={'accessentity_ptr': self.user.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 405)

        #data = json.loads(response.content)
        #self.assertEquals(data['name'], updates['name'])
        #self.assertEquals(data['disabled'], updates['disabled'])
        #self.assertEquals(data['default_group']['id'], updates['default_group'])
        #self.assertEquals(data['perspective']['id'], updates['perspective'])

    def test_delete_self(self):
        response = self.client.delete(path=reverse('api_admin_users', kwargs={
                                      'accessentity_ptr': self.user.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 401)

    def test_get_ticket_modules_list(self):
        """ Test index page api /admin/api/modules """
        response = self.client.get(
            path=reverse('api_admin_modules'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_ticket_perspectives_list(self):
        """ Test index page api /admin/api/perspectives """
        response = self.client.get(
            path=reverse('api_admin_perspectives'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_perspective(self):
        response = self.client.get(path=reverse('api_admin_perspectives', kwargs={
                                   'object_ptr': self.perspective.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_perspective(self):
        updates = {'name': 'Api perspective', 'details': 'Api details'}
        response = self.client.put(path=reverse('api_admin_perspectives', kwargs={'object_ptr': self.perspective.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        self.assertEquals(data['details'], updates['details'])

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

import handlers
from django.conf.urls.defaults import patterns, url
from treeio.core.api.auth import auth_engine
from treeio.core.api.doc import documentation_view
from treeio.core.api.resource import CsrfExemptResource

ad = {'authentication': auth_engine}

# admin resources
groupResource = CsrfExemptResource(handler=handlers.GroupHandler, **ad)
userResource = CsrfExemptResource(handler=handlers.UserHandler, **ad)
moduleResource = CsrfExemptResource(handler=handlers.ModuleHandler, **ad)
perspectiveResource = CsrfExemptResource(
    handler=handlers.PerspectiveHandler, **ad)
#folderResource = CsrfExemptResource(handler = handlers.PageFolderHandler, **ad)
#pageResource = CsrfExemptResource(handler = handlers.PageHandler, **ad)

urlpatterns = patterns('',
    # Resources
    url(r'^doc$', documentation_view, kwargs={
        'module': handlers}, name="api_admin_doc"),
    url(r'^groups$', groupResource,
        name="api_admin_groups"),
    url(r'^group/(?P<accessentity_ptr>\d+)',
        groupResource, name="api_admin_groups"),
    url(r'^users$', userResource, name="api_admin_users"),
    url(r'^user/(?P<accessentity_ptr>\d+)',
        userResource, name="api_admin_users"),
    url(r'^modules$', moduleResource,
        name="api_admin_modules"),
    url(r'^module/(?P<object_ptr>\d+)',
        moduleResource, name="api_admin_modules"),
    url(r'^perspectives$', perspectiveResource,
        name="api_admin_perspectives"),
    url(r'^perspective/(?P<object_ptr>\d+)',
        perspectiveResource, name="api_admin_perspectives"),
    #url(r'^folders$', folderResource, name="api_admin_folders"),
    #url(r'^folder/(?P<object_ptr>\d+)', folderResource, name="api_admin_folders"),
    #url(r'^pages$', pageResource, name="api_admin_pages"),
    #url(r'^page/(?P<object_ptr>\d+)', pageResource, name="api_admin_pages"),
)

########NEW FILE########
__FILENAME__ = forms
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Administration module forms
"""
from django import forms
from django.forms import ModelChoiceField
from treeio.core.conf import settings
from django.db.models import Q
from django.core.files.storage import default_storage
import django.contrib.auth.models as django_auth
from django.utils.translation import ugettext as _
from treeio.core.decorators import preprocess_form
from treeio.core.models import User, Group, Perspective, ModuleSetting, Page, PageFolder
import hashlib
import random
import re

preprocess_form()

PERMISSION_CHOICES = (
    ('everyone', 'Everyone'),
    ('usergroup', 'Automatic, User and Default Group'),
    ('usergroupreadonly', 'Automatic, User and Default Group. READ ONLY'),
    ('userallgroups', 'Automatic, User and All Their Groups'),
    ('userallgroupsreadonly',
     'Automatic, User and All Their Groups. READ ONLY'),
    ('user', 'Automatic, User Only'),
    ('userreadonly', 'Automatic, User Only. READ ONLY'),
    ('nomoduleusergroup', 'Automatic, Skip Module, User and Default Group'),
    ('nomoduleusergroupreadonly',
     'Automatic, Skip Module, User and Default Group. READ ONLY'),
    ('nomoduleuserallgroups',
     'Automatic, Skip Module, User and All Their Groups'),
    ('nomoduleuserallgroupsreadonly',
     'Automatic, Skip Module, User and All Their Groups. READ ONLY'),
    ('nomoduleuser', 'Automatic, Skip Module, User Only'),
    ('nomoduleuserreadonly', 'Automatic, Skip Module, User Only. READ ONLY'),
    ('forceusergroup', 'Force User and Default Group'),
    ('forceuserallgroups', 'Force User and All Their Groups'),
    ('forceuser', 'Force User Only'),
)


class SettingsForm(forms.Form):

    """ Global settings form """

    default_perspective = forms.ModelChoiceField(
        label='Default Perspective', queryset=[])
    default_permissions = forms.ChoiceField(label='Default Permissions',
                                            choices=PERMISSION_CHOICES)
    language = forms.ChoiceField(label='Language', choices=[])
    default_timezone = forms.ChoiceField(label='Time Zone', choices=[])
    logo = forms.ImageField(
        label='Logo', required=False, widget=forms.FileInput)

    def __init__(self, user, *args, **kwargs):
        "Sets choices and initial value"
        super(SettingsForm, self).__init__(*args, **kwargs)

        self.fields['default_perspective'].queryset = Perspective.objects.all()
        try:
            conf = ModuleSetting.get_for_module(
                'treeio.core', 'default_perspective')[0]
            default_perspective = Perspective.objects.get(pk=long(conf.value))
            self.fields['default_perspective'].initial = default_perspective.id
        except:
            pass

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.core', 'default_permissions')[0]
            self.fields['default_permissions'].initial = conf.value
        except:
            self.fields['default_permissions'].initial = getattr(
                settings, 'HARDTREE_DEFAULT_PERMISSIONS', 'everyone')

        self.fields['default_timezone'].choices = getattr(
            settings, 'HARDTREE_SERVER_TIMEZONE')
        timezone = settings.HARDTREE_SERVER_DEFAULT_TIMEZONE
        try:
            conf = ModuleSetting.get_for_module(
                'treeio.core', 'default_timezone')[0]
            timezone = conf.value
        except Exception:
            pass
        self.fields['default_timezone'].initial = timezone

        self.fields['language'].choices = getattr(
            settings, 'HARDTREE_LANGUAGES', [('en', 'English')])
        language = getattr(settings, 'HARDTREE_LANGUAGES_DEFAULT', '')
        try:
            conf = ModuleSetting.get_for_module('treeio.core', 'language')[0]
            language = conf.value
        except IndexError:
            pass
        self.fields['language'].initial = language

        if getattr(settings, 'HARDTREE_SUBSCRIPTION_CUSTOMIZATION', True):
            logopath = ''
            try:
                conf = ModuleSetting.get_for_module(
                    'treeio.core', 'logopath')[0]
                logopath = conf.value
            except:
                pass

            if logopath:
                match = re.match('.*[a-z0-9]{32}__(?P<filename>.+)$', logopath)
                if match:
                    logopath = match.group('filename')
                form_field = forms.ChoiceField(
                    label=_("Logo"), widget=forms.RadioSelect())
                form_field.choices = ((logopath, _("Keep existing: ") + unicode(logopath)),
                                      ('delete', "Delete "))
                form_field.initial = logopath
                form_field.required = False
                self.fields['logo'] = form_field
            self.fields['logo'].label = _("Logo")
        else:
            del self.fields['logo']

        self.fields['default_perspective'].label = _("Default Perspective")
        self.fields['default_permissions'].label = _("Default Permissions")
        self.fields['default_timezone'].label = _("Time Zone")
        self.fields['language'].label = _("Language")

    def _get_upload_name(self, filename):
        "Returns an upload_to path to a new file"
        while True:
            hasher = hashlib.md5()
            hasher.update(str(random.random()))
            filepath = u"core/" + hasher.hexdigest() + u"__" + filename
            fullpath = settings.MEDIA_ROOT + filepath
            if not default_storage.exists(fullpath):
                return filepath

    def _handle_uploaded_file(self, field_name):
        "Process an uploaded file"
        try:
            file = self.files[field_name]
            filepath = self._get_upload_name(file.name)
        except KeyError:
            return ''
        destination = open(settings.MEDIA_ROOT + filepath, 'wb+')
        for chunk in file.chunks():
            destination.write(chunk)
        destination.close()
        return filepath

    def save(self):
        "Form processor"
        try:
            ModuleSetting.set_for_module('default_perspective',
                                         self.cleaned_data[
                                             'default_perspective'].id,
                                         'treeio.core')
            ModuleSetting.set_for_module('default_permissions',
                                         self.cleaned_data[
                                             'default_permissions'],
                                         'treeio.core')
            ModuleSetting.set_for_module('default_timezone',
                                         self.cleaned_data['default_timezone'],
                                         'treeio.core')
            ModuleSetting.set_for_module('language',
                                         self.cleaned_data['language'],
                                         'treeio.core')
            if getattr(settings, 'HARDTREE_SUBSCRIPTION_CUSTOMIZATION', True):
                if isinstance(self.fields['logo'], forms.FileField):
                    logopath = self._handle_uploaded_file('logo')
                    ModuleSetting.set_for_module(
                        'logopath', logopath, 'treeio.core')

                elif isinstance(self.fields['logo'], forms.ChoiceField):
                    if self.cleaned_data['logo'] == 'delete':
                        try:
                            ModuleSetting.get_for_module(
                                'treeio.core', 'logopath').delete()
                        except:
                            pass

            return True

        except:
            return False


class PerspectiveForm(forms.ModelForm):

    """ Perspective form """
    name = forms.CharField(widget=forms.TextInput(attrs={'size': '50'}))

    def __init__(self, user, *args, **kwargs):
        super(PerspectiveForm, self).__init__(*args, **kwargs)

        self.fields['modules'].help_text = ""
        self.fields['name'].label = _("Name")
        self.fields['modules'].label = _("Modules")
        self.fields['details'].label = _("Details")

    class Meta:

        "Perspective Form"
        model = Perspective
        fields = ('name', 'modules', 'details')


class UserForm(forms.ModelForm):

    """ User form """
    perspective = ModelChoiceField(
        label='Perspective', queryset=[], required=False)

    def __init__(self, *args, **kwargs):

        super(UserForm, self).__init__(*args, **kwargs)

        if 'instance' in kwargs:
            self.instance = kwargs['instance']
        else:
            self.fields['password'] = forms.CharField(max_length=255, label=_("Password"),
                                                      widget=forms.PasswordInput(render_value=False))
            self.fields['password_again'] = forms.CharField(max_length=255, label=_("Confirm Password"),
                                                            widget=forms.PasswordInput(render_value=False))

        self.fields['name'].label = _("Username")
        self.fields['name'].help_text = _("Used to log in")
        self.fields['default_group'].label = _("Default group")
        self.fields['other_groups'].label = _("Other groups")
        self.fields['other_groups'].help_text = ""
        self.fields['perspective'].label = _("Perspective")
        self.fields['perspective'].queryset = Perspective.objects.all()
        if self.instance:
            try:
                self.fields[
                    'perspective'].initial = self.instance.get_perspective()
            except:
                pass

    def clean_name(self):
        "Clean Name"
        data = self.cleaned_data['name']
        query = Q(name=data)
        if self.instance and self.instance.id:
            query = query & ~Q(id=self.instance.id)
        existing = User.objects.filter(query)
        if existing:
            raise forms.ValidationError(
                _("User with username %s already exists.") % data)
        if self.instance and not self.instance.id:
            # Check Hardtree Subscription user limit
            user_limit = getattr(
                settings, 'HARDTREE_SUBSCRIPTION_USER_LIMIT', 0)
            if user_limit > 0:
                user_number = User.objects.filter(disabled=False).count()
                if user_number >= user_limit:
                    raise forms.ValidationError(
                        _("Sorry, but your subscription does not allow more than %d users. You're currently at your limit.") % (user_limit))
        return data

    def clean_password_again(self):
        "Clean password again"
        password1 = self.cleaned_data['password']
        password2 = self.cleaned_data['password_again']
        if not password1 == password2:
            raise forms.ValidationError(_("Passwords do not match"))
        return password2

    def clean_disabled(self):
        "Ensure the admin does not go over subscription limit by re-enabling users"
        enable = not self.cleaned_data['disabled']
        if self.instance and self.instance.id and enable and self.instance.disabled:
            user_limit = getattr(
                settings, 'HARDTREE_SUBSCRIPTION_USER_LIMIT', 0)
            if user_limit > 0:
                user_number = User.objects.filter(disabled=False).count()
                if user_number >= user_limit:
                    raise forms.ValidationError(
                        _("Sorry, but your subscription does not allow more than %d users. You're currently at your limit.") % (user_limit))
        return self.cleaned_data['disabled']

    def save(self, *args, **kwargs):
        "Form processor"

        if self.instance.id:
            self.instance.user.username = self.instance.name
            self.instance.user.save()
            super(UserForm, self).save(*args, **kwargs)
        else:
            new_user = django_auth.User(
                username=self.cleaned_data['name'], password='')
            new_user.set_password(self.cleaned_data['password'])
            new_user.save()
            self.instance.user = new_user
            super(UserForm, self).save(*args, **kwargs)

        if self.cleaned_data['perspective']:
            self.instance.set_perspective(self.cleaned_data['perspective'])

        return self.instance

    class Meta:

        "User Form"
        model = User
        fields = ('name', 'default_group', 'other_groups', 'disabled')


class PasswordForm(forms.Form):

    """ Password form """

    new_password = forms.CharField(max_length=255, label=_("New Password"),
                                   widget=forms.PasswordInput(render_value=False))
    new_password_again = forms.CharField(max_length=255, label=_("Confirm Password"),
                                         widget=forms.PasswordInput(render_value=False))

    user = None

    def __init__(self, user, *args, **kwargs):
        super(PasswordForm, self).__init__(*args, **kwargs)
        self.user = user
        self.fields['new_password'].label = _("New Password")
        self.fields['new_password_again'].label = _("Confirm Password")

    def clean_new_password_again(self):
        "Clean New Password Again"
        password1 = self.cleaned_data['new_password']
        password2 = self.cleaned_data['new_password_again']
        if not password1 == password2:
            raise forms.ValidationError(_("Passwords do not match"))
        return password2

    def save(self):
        "Save"
        password1 = self.cleaned_data['new_password']
        self.user.set_password(password1)
        return self.user.save()


class GroupForm(forms.ModelForm):

    """ Group form """
    perspective = ModelChoiceField(
        label=_('Perspective'), queryset=[], required=False)

    def __init__(self, *args, **kwargs):
        super(GroupForm, self).__init__(*args, **kwargs)

        self.fields['perspective'].label = _('Perspective')
        self.fields['perspective'].queryset = Perspective.objects.all()
        if self.instance:
            try:
                self.fields[
                    'perspective'].initial = self.instance.get_perspective()
            except:
                pass

    def save(self, *args, **kwargs):
        instance = super(GroupForm, self).save(*args, **kwargs)
        if instance.id and self.cleaned_data['perspective']:
            instance.set_perspective(self.cleaned_data['perspective'])
        return instance

    class Meta:

        "Group Form"
        model = Group
        fields = ('name', 'parent', 'details')


class PageForm(forms.ModelForm):

    """ Static Page form """
    title = forms.CharField(widget=forms.TextInput(attrs={'size': '50'}))

    def __init__(self, *args, **kwargs):
        super(PageForm, self).__init__(*args, **kwargs)

    class Meta:

        "Page Form"
        model = Page
        fields = ('name', 'title', 'folder', 'published', 'body')


class PageFolderForm(forms.ModelForm):

    """ PageFolder for Static Pages form """
    name = forms.CharField(widget=forms.TextInput(attrs={'size': '50'}))

    def __init__(self, *args, **kwargs):
        super(PageFolderForm, self).__init__(*args, **kwargs)

    class Meta:

        "Page Folder Form"
        model = PageFolder
        fields = ('name', 'details')


class FilterForm(forms.ModelForm):

    """ Filter form for Modules definition """

    def __init__(self, user, type=[], *args, **kwargs):
        super(FilterForm, self).__init__(*args, **kwargs)

        if 'perspective' in type:
            del self.fields['name']
            self.fields['modules'].help_text = ""

        if 'module' in type:
            del self.fields['name']
            self.fields['modules'].help_text = ""

    class Meta:

        "Filter"
        model = Perspective
        fields = ('name', 'modules')

from treeio.identities.forms import ContactForm


class ContactSetupForm(ContactForm):

    """ ContactSetupForm """

    name = forms.CharField(
        max_length=256, widget=forms.TextInput(attrs={'size': '50'}))
    instance = None
    files = {}

    def __init__(self, contact_type, instance=None, *args, **kwargs):
        "Populates form with fields from given ContactType"

        if instance:
            self.instance = instance
            values = instance.contactvalue_set.all()

        super(ContactForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _('Name')

        if 'files' in kwargs:
            self.files = kwargs['files']

        for field in contact_type.fields.all():
            if self.instance:
                initial_field_name = self._get_free_field_name(field)
                self.fields[initial_field_name] = self._get_form_field(field)
                for value in values:
                    if value.field == field:
                        field_name = self._get_free_field_name(field)
                        self.fields[field_name] = self._get_form_field(
                            field, value)
                        if initial_field_name in self.fields:
                            del self.fields[initial_field_name]
            else:
                field_name = self._get_free_field_name(field)
                self.fields[field_name] = self._get_form_field(field)

        if self.instance:
            self.fields['name'].initial = self.instance.name

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core module Administration panel URLs
"""

from django.conf.urls import patterns, url

urlpatterns = patterns('treeio.core.administration.views',
    url(r'^(\.(?P<response_format>\w+))?$',
        'index_perspectives', name='core_admin'),

    # Perspectives
    url(r'^perspectives(\.(?P<response_format>\w+))?/?$',
        'index_perspectives', name='core_admin_index_perspectives'),
    url(r'^perspective/view/(?P<perspective_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'perspective_view', name='core_admin_perspective_view'),
    url(r'^perspective/edit/(?P<perspective_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'perspective_edit', name='core_admin_perspective_edit'),
    url(r'^perspective/delete/(?P<perspective_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'perspective_delete', name='core_admin_perspective_delete'),
    url(r'^perspective/add(\.(?P<response_format>\w+))?/?$',
        'perspective_add', name='core_admin_perspective_add'),

    # Modules
    url(r'^modules(\.(?P<response_format>\w+))?/?$',
        'index_modules', name='core_admin_index_modules'),
    url(r'^module/view/(?P<module_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'module_view', name='core_admin_module_view'),

    # Users
    url(r'^users(\.(?P<response_format>\w+))?/?$',
        'index_users', name='core_admin_index_users'),
    url(r'^user/view/(?P<user_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'user_view', name='core_admin_user_view'),
    url(r'^user/edit/(?P<user_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'user_edit', name='core_admin_user_edit'),
    url(r'^user/password/(?P<user_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'user_password', name='core_admin_user_password'),
    url(r'^user/delete/(?P<user_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'user_delete', name='core_admin_user_delete'),
    url(r'^user/add(\.(?P<response_format>\w+))?/?$',
        'user_add', name='core_admin_user_add'),
    url(r'^user/invite(\.(?P<response_format>\w+))?/?$',
        'user_invite', name='core_admin_user_invite'),

    url(r'^contact/setup(\.(?P<response_format>\w+))?/?$',
        'contact_setup', name='core_admin_contact_setup'),

    # Groups
    url(r'^groups(\.(?P<response_format>\w+))?/?$',
        'index_groups', name='core_admin_index_groups'),
    url(r'^group/view/(?P<group_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'group_view', name='core_admin_group_view'),
    url(r'^group/edit/(?P<group_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'group_edit', name='core_admin_group_edit'),
    url(r'^group/delete/(?P<group_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'group_delete', name='core_admin_group_delete'),
    url(r'^group/add(\.(?P<response_format>\w+))?/?$',
        'group_add', name='core_admin_group_add'),

    # Pages
    url(r'^pages(\.(?P<response_format>\w+))?/?$',
        'index_pages', name='core_admin_index_pages'),
    url(r'^page/add(\.(?P<response_format>\w+))?/?$',
        'page_add', name='core_admin_page_add'),
    url(r'^page/view/(?P<page_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'page_view', name='core_admin_page_view'),
    url(r'^page/edit/(?P<page_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'page_edit', name='core_admin_page_edit'),
    url(r'^page/delete/(?P<page_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'page_delete', name='core_admin_page_delete'),

    # Folders
    url(r'^folder/add(\.(?P<response_format>\w+))?/?$',
        'pagefolder_add', name='core_admin_pagefolder_add'),
    url(r'^folder/view/(?P<folder_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'pagefolder_view', name='core_admin_pagefolder_view'),
    url(r'^folder/edit/(?P<folder_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'pagefolder_edit', name='core_admin_pagefolder_edit'),
    url(r'^folder/delete/(?P<folder_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'pagefolder_delete', name='core_admin_pagefolder_delete'),

    # Setup
    url(r'^setup(\.(?P<response_format>\w+))?/?$',
        'setup', name='core_setup'),

    # Settings
    url(r'^settings/edit(\.(?P<response_format>\w+))?/?$',
        'settings_edit', name='core_settings_edit'),
    url(r'^settings/view(\.(?P<response_format>\w+))?/?$',
        'settings_view', name='core_settings_view'),
)

########NEW FILE########
__FILENAME__ = views
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core module views
"""

from django.shortcuts import get_object_or_404
from django.template import RequestContext
from django.http import HttpResponseRedirect
from django.core.urlresolvers import reverse
from django.contrib.sites.models import RequestSite
from django.utils.translation import ugettext as _
from treeio.core.conf import settings
from django.db.models import Q
from treeio.core.rendering import render_to_response
from treeio.core.models import User, Group, Invitation, Perspective, Module, ModuleSetting, Page, PageFolder
from treeio.core.administration.forms import PerspectiveForm, UserForm, PasswordForm, \
    GroupForm, PageForm, PageFolderForm, FilterForm, SettingsForm, PERMISSION_CHOICES
from treeio.core.mail import EmailInvitation
from treeio.core.decorators import module_admin_required, treeio_login_required, handle_response_format

from treeio.identities.models import ContactType
from treeio.core.administration.forms import ContactSetupForm
import re


def _get_filter_query(args):
    "Creates a query to filter Modules based on FilterForm arguments"
    query = Q(trash=False)

    for arg in args:
        if hasattr(Perspective, arg) and args[arg]:
            kwargs = {unicode(arg + '__id'): long(args[arg])}
            query = query & Q(**kwargs)

    return query


@handle_response_format
@treeio_login_required
@module_admin_required()
def index_perspectives(request, response_format='html'):
    "Perspective list"

    query = _get_filter_query(request.GET)
    perspectives = Perspective.objects.filter(query).order_by('name')

    filters = FilterForm(
        request.user.get_profile(), 'perspective', request.GET)

    message = request.session.pop('message', '')

    return render_to_response('core/administration/index_perspectives',
                              {'perspectives': perspectives,
                               'filters': filters,
                               'message': message},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required()
def index_modules(request, response_format='html'):
    "Module list"
    modules = Module.objects.all().order_by('title')

    return render_to_response('core/administration/index_modules',
                              {'modules': modules},
                              context_instance=RequestContext(request), response_format=response_format)

#
# Perspectives
#


@handle_response_format
@treeio_login_required
@module_admin_required()
def perspective_view(request, perspective_id, response_format='html'):
    "Perspective view"
    perspective = get_object_or_404(Perspective, pk=perspective_id)

    all_modules = Module.objects.all()

    message = request.session.pop('message', '')

    return render_to_response('core/administration/perspective_view',
                              {'perspective': perspective,
                               'all_modules': all_modules,
                               'message': message},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required()
def perspective_edit(request, perspective_id, response_format='html'):
    "Perspective edit"
    perspective = get_object_or_404(Perspective, pk=perspective_id)
    # Don't let users delete their last perspective
    other_perspectives = Perspective.objects.filter(
        trash=False).exclude(id=perspective_id)
    admin_module = Module.objects.filter(name='treeio.core')[0]

    if request.POST:
        if not 'cancel' in request.POST:
            form = PerspectiveForm(
                request.user.get_profile(), request.POST, instance=perspective)
            if form.is_valid():
                perspective = form.save()
                modules = perspective.modules.all()
                if modules and not admin_module in modules:
                    if not other_perspectives.filter(Q(modules=admin_module) | Q(modules__isnull=True)):
                        perspective.modules.add(admin_module)
                        request.session['message'] = _(
                            "This is your only Perspective with Administration module. You would be locked out!")
                return HttpResponseRedirect(reverse('core_admin_perspective_view', args=[perspective.id]))
        else:
            return HttpResponseRedirect(reverse('core_admin_perspective_view', args=[perspective.id]))
    else:
        form = PerspectiveForm(
            request.user.get_profile(), instance=perspective)

    request.session.pop('message', '')

    return render_to_response('core/administration/perspective_edit',
                              {'perspective': perspective,
                               'form': form},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required()
def perspective_delete(request, perspective_id, response_format='html'):
    "Perspective delete"

    perspective = get_object_or_404(Perspective, pk=perspective_id)
    all_modules = Module.objects.all()
    message = ""

    # Don't let users delete their last perspective
    other_perspectives = Perspective.objects.filter(
        trash=False).exclude(id=perspective_id)
    admin_module = all_modules.filter(name='treeio.core')[0]
    if not other_perspectives:
        message = _("This is your only Perspective.")
    elif not other_perspectives.filter(Q(modules=admin_module) | Q(modules__isnull=True)):
        message = _(
            "This is your only Perspective with Administration module. You would be locked out!")
    else:
        if request.POST:
            if 'delete' in request.POST:
                if 'trash' in request.POST:
                    perspective.trash = True
                    perspective.save()
                else:
                    perspective.delete()
                return HttpResponseRedirect(reverse('core_admin_index_perspectives'))
            elif 'cancel' in request.POST:
                return HttpResponseRedirect(reverse('core_admin_perspective_view', args=[perspective.id]))

    return render_to_response('core/administration/perspective_delete',
                              {'perspective': perspective,
                               'all_modules': all_modules,
                               'message': message},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required()
def perspective_add(request, response_format='html'):
    "Perspective add"

    if request.POST:
        if not 'cancel' in request.POST:
            perspective = Perspective()
            form = PerspectiveForm(
                request.user.get_profile(), request.POST, instance=perspective)
            if form.is_valid():
                perspective = form.save()
                perspective.set_user_from_request(request)
                return HttpResponseRedirect(reverse('core_admin_perspective_view', args=[perspective.id]))
        else:
            return HttpResponseRedirect(reverse('core_admin_index_perspectives'))
    else:
        form = PerspectiveForm(request.user.get_profile())

    return render_to_response('core/administration/perspective_add',
                              {'form': form.as_ul()},
                              context_instance=RequestContext(request), response_format=response_format)

#
# Modules
#


@handle_response_format
@treeio_login_required
@module_admin_required()
def module_view(request, module_id, response_format='html'):
    "Module view"
    module = get_object_or_404(Module, pk=module_id)

    return render_to_response('core/administration/module_view',
                              {'module': module},
                              context_instance=RequestContext(request), response_format=response_format)

#
# Users
#


@handle_response_format
@treeio_login_required
@module_admin_required()
def index_users(request, response_format='html'):
    "User List"

    users = User.objects.order_by('user__username')

    return render_to_response('core/administration/index_users',
                              {'users': users},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required()
def user_view(request, user_id, response_format='html'):
    "User view"

    user = get_object_or_404(User, pk=user_id)
    try:
        contacts = user.contact_set.exclude(trash=True)
    except:
        contacts = []

    modules = user.get_perspective().get_modules()

    return render_to_response('core/administration/user_view',
                              {'profile': user, 'contacts': contacts,
                                  'modules': modules},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required()
def user_edit(request, user_id, response_format='html'):
    "User edit"

    profile = get_object_or_404(User, pk=user_id)
    if request.POST:
        if not 'cancel' in request.POST:
            form = UserForm(request.POST, instance=profile)
            if form.is_valid():
                profile = form.save()
                return HttpResponseRedirect(reverse('core_admin_user_view', args=[profile.id]))
        else:
            return HttpResponseRedirect(reverse('core_admin_user_view', args=[profile.id]))
    else:
        form = UserForm(instance=profile)

    return render_to_response('core/administration/user_edit',
                              {'profile': profile,
                               'form': form},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required()
def contact_setup(request, response_format='html'):

    profile = request.user.get_profile()
    contact = profile.get_contact()

    def get_contact_type(description):
        c_type = None
        slug = description.lower()
        name = slug.capitalize()
        try:
            c_type = ContactType.objects.get(Q(name=name) | Q(slug=slug))
        except:
            contact_types = ContactType.objects.all()
            if contact_types.count():
                c_type = contact_types[0]
        return c_type

    company_type = get_contact_type('company')

    company = None
    if contact:
        person_type = contact.contact_type
        if contact.parent and contact.parent.contact_type == company_type:
            company = contact.parent
    else:
        person_type = get_contact_type('person')

    if person_type and request.POST:
        contact_form = ContactSetupForm(
            person_type, instance=contact, data=request.POST, files=request.FILES, prefix='person')
        company_form = ContactSetupForm(
            company_type, instance=company, data=request.POST, files=request.FILES, prefix='company')
        if contact_form.is_valid() and company_form.is_valid():
            company = company_form.save(request, company_type)
            contact_form.cleaned_data['parent'] = company
            contact_form.cleaned_data['related_user'] = profile
            contact_form.save(request, person_type)
            return HttpResponseRedirect(reverse('identities_contact_me'))
    else:
        contact_form = ContactSetupForm(
            person_type, instance=contact, prefix='person') if person_type else None
        company_form = ContactSetupForm(
            company_type, instance=company, prefix='company') if company_type else None

    return render_to_response('core/administration/contact_settings',
                              {'contact_form': contact_form,
                               'company_form': company_form},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def user_password(request, user_id, response_format='html'):
    "User change password form"

    profile = get_object_or_404(User, pk=user_id)
    if request.POST:
        if not 'cancel' in request.POST:
            form = PasswordForm(profile.user, request.POST)
            if form.is_valid():
                form.save()
                return HttpResponseRedirect(reverse('core_admin_user_view', args=[profile.id]))
        else:
            return HttpResponseRedirect(reverse('core_admin_user_view', args=[profile.id]))
    else:
        form = PasswordForm(profile.user)

    return render_to_response('core/administration/user_password',
                              {'profile': profile, 'form': form},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required()
def user_delete(request, user_id, response_format='html'):
    "User delete"

    profile = get_object_or_404(User, pk=user_id)
    message = ""

    if profile == request.user.get_profile():
        message = _("This is you!")
    else:
        if request.POST:
            if 'delete' in request.POST:
                profile.delete()
                return HttpResponseRedirect(reverse('core_admin_index_users'))
            elif 'cancel' in request.POST:
                return HttpResponseRedirect(reverse('core_admin_user_view', args=[profile.id]))

    return render_to_response('core/administration/user_delete',
                              {'profile': profile,
                               'message': message},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required()
def user_add(request, response_format='html'):
    "User add"

    user_limit = getattr(settings, 'HARDTREE_SUBSCRIPTION_USER_LIMIT', 0)

    if user_limit > 0:
        user_number = User.objects.filter(disabled=False).count()
        if user_number >= user_limit:
            return HttpResponseRedirect(reverse('core_billing_upgrade'))

    if request.POST:
        if not 'cancel' in request.POST:
            form = UserForm(request.POST)
            if form.is_valid():
                profile = form.save()
                return HttpResponseRedirect(reverse('core_admin_user_view', args=[profile.id]))
        else:
            return HttpResponseRedirect(reverse('core_admin_index_users'))
    else:
        form = UserForm()

    return render_to_response('core/administration/user_add',
                              {'form': form},
                              context_instance=RequestContext(request), response_format=response_format)

#
# Invites
#


@handle_response_format
@treeio_login_required
@module_admin_required()
def user_invite(request, emails=None, response_format='html'):
    "Invite people to Hardtree"

    user_limit = getattr(settings, 'HARDTREE_SUBSCRIPTION_USER_LIMIT', 0)

    # Check whether any invites can be made at all
    if user_limit > 0:
        user_number = User.objects.filter(disabled=False).count()
        invites_left = user_limit - user_number
        if user_number >= user_limit:
            return HttpResponseRedirect(reverse('core_billing_upgrade'))
    else:
        invites_left = 100000000000000

    invited = []
    if request.POST or emails:
        sender = request.user.get_profile()
        default_group = sender.default_group
        domain = RequestSite(request).domain
        if not emails:
            emails = request.POST.get('emails').split(',')

        # Check whether the number of invites + current users exceeds the limit
        if user_limit > 0:
            user_number = User.objects.filter(disabled=False).count()
            if len(emails) + user_number > user_limit:
                return HttpResponseRedirect(reverse('core_billing_upgrade'))

        for email in emails:
            email = email.strip()
            if len(email) > 7 and re.match("^.+\\@(\\[?)[a-zA-Z0-9\\-\\.]+\\.([a-zA-Z]{2,3}|[0-9]{1,3})(\\]?)$", email) is not None:
                if user_limit > 0 and user_number >= user_limit:
                    break
                invitation = Invitation(
                    sender=request.user.get_profile(), email=email, default_group=default_group)
                invitation.save()
                EmailInvitation(
                    invitation=invitation, sender=sender, domain=domain).send_email()
                invited.append(email)

    return render_to_response('core/administration/user_invite',
                              {'user_limit': user_limit,
                               'emails': emails,
                               'invites_left': invites_left,
                               'invited': invited},
                              context_instance=RequestContext(request), response_format=response_format)

#
# Groups
#


@handle_response_format
@treeio_login_required
@module_admin_required()
def index_groups(request, response_format='html'):
    "Group List"

    groups = Group.objects.order_by('parent', 'name')

    return render_to_response('core/administration/index_groups',
                              {'groups': groups},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required()
def group_view(request, group_id, response_format='html'):
    "Group view"

    group = get_object_or_404(Group, pk=group_id)
    members = User.objects.filter(
        Q(default_group=group) | Q(other_groups=group)).distinct()
    subgroups = Group.objects.filter(parent=group)

    return render_to_response('core/administration/group_view',
                              {'group': group,
                               'subgroups': subgroups,
                               'members': members},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required()
def group_edit(request, group_id, response_format='html'):
    "Group edit"

    group = get_object_or_404(Group, pk=group_id)

    if request.POST:
        if not 'cancel' in request.POST:
            form = GroupForm(request.POST, instance=group)
            if form.is_valid():
                group = form.save()
                return HttpResponseRedirect(reverse('core_admin_group_view', args=[group.id]))
        else:
            return HttpResponseRedirect(reverse('core_admin_group_view', args=[group.id]))
    else:
        form = GroupForm(instance=group)

    return render_to_response('core/administration/group_edit',
                              {'group': group,
                               'form': form},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required()
def group_delete(request, group_id, response_format='html'):
    "Group delete"

    group = get_object_or_404(Group, pk=group_id)
    members = User.objects.filter(
        Q(default_group=group) | Q(other_groups=group)).distinct()
    subgroups = Group.objects.filter(parent=group)

    if request.POST:
        if 'delete' in request.POST:
            group.delete()
            return HttpResponseRedirect(reverse('core_admin_index_groups'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('core_admin_group_view', args=[group.id]))

    return render_to_response('core/administration/group_delete',
                              {'group': group,
                               'members': members,
                               'subgroups': subgroups},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required()
def group_add(request, response_format='html'):
    "Group add"

    if request.POST:
        if not 'cancel' in request.POST:
            form = GroupForm(request.POST)
            if form.is_valid():
                group = form.save()
                return HttpResponseRedirect(reverse('core_admin_group_view', args=[group.id]))
        else:
            return HttpResponseRedirect(reverse('core_admin_index_groups'))

    else:
        form = GroupForm()

    return render_to_response('core/administration/group_add',
                              {'form': form},
                              context_instance=RequestContext(request), response_format=response_format)

#
# Pages
#


@handle_response_format
@treeio_login_required
@module_admin_required()
def index_pages(request, response_format='html'):
    "Static Pages list"
    pages = Page.objects.all().order_by('name')
    folders = PageFolder.objects.all().order_by('name')

    return render_to_response('core/administration/index_pages',
                              {'pages': pages, 'folders': folders},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required()
def pagefolder_view(request, folder_id, response_format='html'):
    "Folder for Static Pages view"

    folder = get_object_or_404(PageFolder, pk=folder_id)
    pages = Page.objects.filter(folder=folder).order_by('name')

    return render_to_response('core/administration/pagefolder_view',
                              {'folder': folder, 'pages': pages},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required()
def pagefolder_edit(request, folder_id, response_format='html'):
    "Folder for Static Pages edit"

    folder = get_object_or_404(PageFolder, pk=folder_id)
    if request.POST:
        form = PageFolderForm(request.POST, instance=folder)
        if form.is_valid():
            folder = form.save()
            return HttpResponseRedirect(reverse('core_admin_pagefolder_view', args=[folder.id]))
    else:
        form = PageFolderForm(instance=folder)

    return render_to_response('core/administration/pagefolder_edit',
                              {'folder': folder, 'form': form},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required()
def pagefolder_delete(request, folder_id, response_format='html'):
    "Folder for Static Pages delete"

    folder = get_object_or_404(PageFolder, pk=folder_id)
    pages = Page.objects.filter(folder=folder).order_by('name')
    if request.POST:
        if 'delete' in request.POST:
            folder.delete()
            return HttpResponseRedirect(reverse('core_admin_index_pages'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('core_admin_pagefolder_view', args=[folder.id]))

    return render_to_response('core/administration/pagefolder_delete',
                              {'folder': folder, 'pages': pages},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required()
def pagefolder_add(request, response_format='html'):
    "Folder for Static Pages add"

    if request.POST:
        form = PageFolderForm(request.POST)
        if form.is_valid():
            folder = form.save()
            return HttpResponseRedirect(reverse('core_admin_pagefolder_view', args=[folder.id]))
    else:
        form = PageFolderForm()

    return render_to_response('core/administration/pagefolder_add',
                              {'form': form},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@module_admin_required()
def page_view(request, page_id, response_format='html'):
    "Static Page view"
    page = get_object_or_404(Page, pk=page_id)

    return render_to_response('core/administration/page_view',
                              {'page': page},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required()
def page_edit(request, page_id, response_format='html'):
    "Static Page edit"

    page = get_object_or_404(Page, pk=page_id)
    if request.POST:
        form = PageForm(request.POST, instance=page)
        if form.is_valid():
            page = form.save()
            return HttpResponseRedirect(reverse('core_admin_page_view', args=[page.id]))
    else:
        form = PageForm(instance=page)

    return render_to_response('core/administration/page_edit',
                              {'page': page, 'form': form},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required()
def page_delete(request, page_id, response_format='html'):
    "Static Page delete"

    page = get_object_or_404(Page, pk=page_id)
    if request.POST:
        if 'delete' in request.POST:
            page.delete()
            return HttpResponseRedirect(reverse('core_admin_index_pages'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('core_admin_page_view', args=[page.id]))

    return render_to_response('core/administration/page_delete',
                              {'page': page},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required()
def page_add(request, response_format='html'):
    "Static Page add"

    if request.POST:
        form = PageForm(request.POST)
        if form.is_valid():
            page = form.save()
            return HttpResponseRedirect(reverse('core_admin_page_view', args=[page.id]))
    else:
        form = PageForm()

    return render_to_response('core/administration/page_add',
                              {'form': form},
                              context_instance=RequestContext(request), response_format=response_format)

#
# Setup Guide
#


@treeio_login_required
@module_admin_required()
def setup(request, response_format='html'):
    "Quick set-up page"

    modules = Module.objects.all()

    for module in modules:
        if module.name in ('treeio.projects', 'treeio.sales', 'treeio.services'):
            module.major = True
        else:
            module.major = False

    context = {'modules': modules}

    return render_to_response('core/administration/setup', context,
                              context_instance=RequestContext(request), response_format=response_format)


#
# Settings
#
@handle_response_format
@treeio_login_required
@module_admin_required()
def settings_view(request, response_format='html'):
    "Settings view"

    # default permissions
    try:
        conf = ModuleSetting.get_for_module(
            'treeio.core', 'default_permissions')[0]
        default_permissions = conf.value
    except:
        default_permissions = settings.HARDTREE_DEFAULT_PERMISSIONS

    default_permissions_display = default_permissions
    for key, value in PERMISSION_CHOICES:
        if key == default_permissions:
            default_permissions_display = _(value)

    # default perspective
    try:
        conf = ModuleSetting.get_for_module(
            'treeio.core', 'default_perspective')[0]
        default_perspective = Perspective.objects.get(pk=long(conf.value))
    except:
        default_perspective = None

    # language
    language = getattr(settings, 'HARDTREE_LANGUAGES_DEFAULT', '')
    try:
        conf = ModuleSetting.get_for_module('treeio.core', 'language')[0]
        language = conf.value
    except IndexError:
        pass
    all_languages = getattr(
        settings, 'HARDTREE_LANGUAGES', [('en', 'English')])

    logopath = ''
    try:
        conf = ModuleSetting.get_for_module('treeio.core', 'logopath')[0]
        logopath = conf.value
        match = re.match('.*[a-z0-9]{32}__(?P<filename>.+)$', logopath)
        if match:
            logopath = match.group('filename')
    except:
        pass

    # time zone
    default_timezone = settings.HARDTREE_SERVER_DEFAULT_TIMEZONE
    try:
        conf = ModuleSetting.get_for_module(
            'treeio.core', 'default_timezone')[0]
        default_timezone = conf.value
    except Exception:
        default_timezone = getattr(
            settings, 'HARDTREE_SERVER_TIMEZONE')[default_timezone][0]
    all_timezones = getattr(settings, 'HARDTREE_SERVER_TIMEZONE', [
                            (1, '(GMT-11:00) International Date Line West')])

    return render_to_response('core/administration/settings_view',
                              {
                                  'default_permissions': default_permissions,
                                  'default_permissions_display': default_permissions_display,
                                  'default_perspective': default_perspective,
                                  'language': language,
                                  'all_languages': all_languages,
                                  'logopath': logopath,
                                  'default_timezone': default_timezone,
                                  'all_timezones': all_timezones
                              },
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required()
def settings_edit(request, response_format='html'):
    "Settings edit"

    if request.POST:
        if not 'cancel' in request.POST:
            form = SettingsForm(
                request.user.get_profile(), request.POST, request.FILES)
            if form.is_valid():
                form.save()
                return HttpResponseRedirect(reverse('core_settings_view'))
        else:
            return HttpResponseRedirect(reverse('core_settings_view'))

    else:
        form = SettingsForm(request.user.get_profile())

    return render_to_response('core/administration/settings_edit',
                              {
                                  'form': form,
                              },
                              context_instance=RequestContext(request), response_format=response_format)

########NEW FILE########
__FILENAME__ = converter
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Converter for AJAX response

Takes HTML rendered response from Django and return JSON-serializable dict
"""
from django.forms import BaseForm, TextInput, CharField, HiddenInput, MultiValueField, MultiWidget
from django.utils.safestring import mark_safe

from treeio.core.ajax.rules import apply_rules


class MultiHiddenWidget(MultiWidget):

    "Renders multiple hidden widgets for initial values to use in autocomplete"

    def __init__(self, initial=[], choices=[], attrs={}):
        widgets = []
        if initial:
            for i in initial:
                if i:
                    initial_label = ''
                    for choice in choices:
                        if choice[0] == i:
                            initial_label = choice[1]
                            break
                    widgets.append(
                        HiddenInput(attrs=dict(attrs, label=initial_label)))
        super(MultiHiddenWidget, self).__init__(widgets=widgets, attrs=attrs)

    def render(self, name, value, attrs=None):
        if self.is_localized:
            for widget in self.widgets:
                widget.is_localized = self.is_localized
        # value is a list of values, each corresponding to a widget
        # in self.widgets.
        if not isinstance(value, list):
            value = self.decompress(value)
        output = [u'<span id="%s_%s">' % (u'multi', name)]
        final_attrs = self.build_attrs(attrs)
        id_ = final_attrs.get('id', None)
        for i, widget in enumerate(self.widgets):
            try:
                widget_value = value[i]
            except IndexError:
                widget_value = None
            if id_:
                final_attrs = dict(final_attrs, id=id_)
            output.append(widget.render(name, widget_value, final_attrs))
        output.append(u'</span>')
        return mark_safe(self.format_output(output))

    def decompress(self, value):
        if not value:
            value = []
        else:
            value = [value]
        return value


class MultiHiddenField(MultiValueField):

    "Multiple choice hidden field"
    widget = MultiHiddenWidget

    def __init__(self, required=False, widget=None, initial=None, choices=[], fields=[]):
        widget = MultiHiddenWidget(initial=initial, choices=choices)
        super(MultiHiddenField, self).__init__(fields=fields, widget=widget, initial=initial,
                                               required=required, label='', help_text='')

    def compress(self, data_list):
        return data_list


def convert_to_ajax(page, context_instance):
    "Converts Django HTML response into AJAX response represented by a dict()"

    response = apply_rules(page)

    # The following is Deprecated for Django 1.3
    # if 'module_content' in response:
    #    module_content = HttpResponse(response['module_content'], mimetype='text/html')
    #    response['module_content'] = csrf().process_response(context_instance['request'], module_content).content

    return response


def preprocess_context(context):
    "Prepares context to be rendered for AJAX"

    # Process autocomplete-multiple fields
    for key in context:
        if isinstance(context[key], BaseForm):
            form = context[key]
            for fname in form.fields:
                # skip newly added fields to avoid looping infinitely
                if not "autocomplete" in fname:
                    field = form.fields[fname]
                    try:
                        # find autocomplete fields
                        if field.widget.attrs and 'callback' in field.widget.attrs and 'autocomplete' in field.widget.attrs['class']:

                            # save existing attributes
                            old_attrs = field.widget.attrs

                            # replace current widget with hidden input
                            field.widget = HiddenInput()

                            # get the current field value
                            if not field.initial and fname in form.initial:
                                field.initial = form.initial[fname]

                            # if the field has choices replace value with it's
                            # actual label
                            initial_name = field.initial
                            if field.initial and field.choices:
                                for choice in field.choices:
                                    if choice[0] == field.initial:
                                        initial_name = choice[1]
                                        break

                            # create new field
                            new_field = CharField(widget=TextInput(attrs=old_attrs),
                                                  label=field.label,
                                                  required=field.required,
                                                  help_text=field.help_text,
                                                  initial=initial_name)

                            # update fields in context
                            form.fields.update(
                                {fname: field, "autocomplete_" + fname: new_field})
                            if fname in form.errors:
                                form.errors[
                                    "autocomplete_" + fname] = form.errors[fname]
                                del form.errors[fname]

                            # restore original field order
                            order = form.fields.keyOrder
                            order.insert(order.index(fname),
                                         order.pop(order.index("autocomplete_" + fname)))

                    except:
                        pass

    # Process autocomplete fields
    for key in context:
        if isinstance(context[key], BaseForm):
            form = context[key]
            for fname in form.fields:
                # skip newly added fields to avoid looping infinitely
                if not "autocomplete" in fname:
                    field = form.fields[fname]
                    try:
                        # find autocomplete fields
                        if field.widget.attrs and 'callback' in field.widget.attrs and 'multicomplete' in field.widget.attrs['class']:

                            # save existing attributes
                            old_attrs = field.widget.attrs

                            # replace current widget with hidden input
                            field.widget = HiddenInput()

                            # get the current field value
                            if not field.initial and fname in form.initial:
                                field.initial = form.initial[fname]

                            # if the field has choices replace value with it's
                            # actual label
                            initial_name = ''
                            if field.initial and field.choices:
                                for choice in field.choices:
                                    if choice[0] in field.initial:
                                        initial_name += choice[1] + u', '

                            # create new field
                            new_field = CharField(widget=TextInput(attrs=old_attrs),
                                                  label=field.label,
                                                  required=field.required,
                                                  help_text=field.help_text,
                                                  initial=initial_name)

                            # hidden fields
                            hidden_field = MultiHiddenField(fields=[field],
                                                            required=field.required,
                                                            initial=field.initial,
                                                            choices=field.choices)

                            # update fields in context
                            form.fields.update(
                                {fname: hidden_field, "multicomplete_" + fname: new_field})
                            if fname in form.errors:
                                form.errors[
                                    "multicomplete_" + fname] = form.errors[fname]
                                del form.errors[fname]

                            # restore original field order
                            order = form.fields.keyOrder
                            order.insert(order.index(fname),
                                         order.pop(order.index("multicomplete_" + fname)))

                    except:
                        raise

    return context

########NEW FILE########
__FILENAME__ = rules
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Conversion rules for AJAX response
"""

import re


def title(page, response):
    "Extract <title></title>"

    regexp = r"<head>.*?<title>(?P<title>.*?)</title>.*?</head>"
    blocks = re.finditer(regexp, page, re.DOTALL)
    for block in blocks:
        response['title'] = block.group('title')

    return response


def module_content(page, response):
    "Extract module_content"

    regexp = r"<!-- module_content -->(?P<module_content>.*?)<!-- /module_content -->"
    blocks = re.finditer(regexp, page, re.DOTALL)
    for block in blocks:
        response['module_content'] = block.group('module_content').strip()

    return response

RULESET = [title,
           module_content,
           ]


def apply_rules(page, response={}):
    "Applies all rules"

    for rule in RULESET:
        response = rule(page, response)

    return response

########NEW FILE########
__FILENAME__ = admin
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
API admin definitions
"""

from django.contrib import admin
from treeio.core.api.models import Consumer, Token, Nonce

admin.site.register(Consumer)
admin.site.register(Token)
admin.site.register(Nonce)

########NEW FILE########
__FILENAME__ = forms
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

from django import forms


class AuthorizeRequestTokenForm(forms.Form):
    oauth_token = forms.CharField(widget=forms.HiddenInput)
    authorize_access = forms.BooleanField(required=True)

########NEW FILE########
__FILENAME__ = db
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

import oauth2 as oauth

from treeio.core.api.auth.store import InvalidConsumerError, InvalidTokenError, Store
from treeio.core.api.models import Nonce, Token, Consumer, VERIFIER_SIZE
from treeio.core.conf import settings


class ModelStore(Store):

    """
    Store implementation using the Django models defined in `piston.models`.
    """

    def get_consumer(self, request, oauth_request, consumer_key):
        try:
            consumer_db = getattr(
                settings, 'HARDTREE_API_CONSUMER_DB', 'default')
            return Consumer.objects.using(consumer_db).get(key=consumer_key)
        except Consumer.DoesNotExist:
            raise InvalidConsumerError()

    def get_consumer_for_request_token(self, request, oauth_request, request_token):
        consumer_db = getattr(settings, 'HARDTREE_API_CONSUMER_DB', 'default')
        return Consumer.objects.using(consumer_db).get(pk=request_token.consumer_id)

    def get_consumer_for_access_token(self, request, oauth_request, access_token):
        consumer_db = getattr(settings, 'HARDTREE_API_CONSUMER_DB', 'default')
        return Consumer.objects.using(consumer_db).get(pk=access_token.consumer_id)

    def create_request_token(self, request, oauth_request, consumer, callback):
        consumer_db = getattr(settings, 'HARDTREE_API_CONSUMER_DB', 'default')
        token = Token.objects.create_token(
            token_type=Token.REQUEST,
            consumer_id=Consumer.objects.using(consumer_db).get(
                key=oauth_request['oauth_consumer_key']).id,
            timestamp=oauth_request['oauth_timestamp'],
            using=consumer_db
        )
        token.set_callback(callback)
        token.save()

        return token

    def fetch_request_token(self, request, oauth_request, request_token_key):
        try:
            consumer_db = getattr(
                settings, 'HARDTREE_API_CONSUMER_DB', 'default')
            token = Token.objects.using(consumer_db).get(
                key=request_token_key, token_type=Token.REQUEST)
            token.save(
                using=getattr(settings, 'CURRENT_DATABASE_NAME', 'default'))
            return token
        except Token.DoesNotExist:
            raise InvalidTokenError()

    def get_request_token(self, request, oauth_request, request_token_key):
        try:
            consumer_db = getattr(
                settings, 'HARDTREE_API_CONSUMER_DB', 'default')
            return Token.objects.using(consumer_db).get(key=request_token_key, token_type=Token.REQUEST)
        except Token.DoesNotExist:
            raise InvalidTokenError()

    def authorize_request_token(self, request, oauth_request, request_token):
        request_token.is_approved = True
        request_token.user = request.user
        request_token.verifier = oauth.generate_verifier(VERIFIER_SIZE)
        request_token.save()
        return request_token

    def create_access_token(self, request, oauth_request, consumer, request_token):
        consumer_db = getattr(settings, 'HARDTREE_API_CONSUMER_DB', 'default')
        access_token = Token.objects.create_token(
            token_type=Token.ACCESS,
            timestamp=oauth_request['oauth_timestamp'],
            consumer_id=Consumer.objects.using(
                consumer_db).get(key=consumer.key).id,
            user=request_token.user,
        )
        request_token.delete()
        return access_token

    def get_access_token(self, request, oauth_request, consumer, access_token_key):
        try:
            return Token.objects.get(key=access_token_key, token_type=Token.ACCESS)
        except Token.DoesNotExist:
            raise InvalidTokenError()

    def get_user_for_access_token(self, request, oauth_request, access_token):
        return access_token.user

    def get_user_for_consumer(self, request, oauth_request, consumer):
        return consumer.user

    def check_nonce(self, request, oauth_request, nonce):
        nonce, created = Nonce.objects.get_or_create(
            consumer_key=oauth_request['oauth_consumer_key'],
            token_key=oauth_request.get('oauth_token', ''),
            key=nonce
        )
        return created

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

from django.conf.urls.defaults import patterns, url


urlpatterns = patterns('treeio.core.api.auth.views',
    url(r'^get_request_token$', 'get_request_token',
        name="api_get_request_token"),
    url(r'^authorize_request_token$', 'authorize_request_token',
        name="api_authorize_request_token"),
    url(r'^get_access_token$', 'get_access_token',
        name="api_get_access_token"),
)

########NEW FILE########
__FILENAME__ = utils
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

import oauth2 as oauth
from django.http import HttpResponse


def get_oauth_request(request):
    """ Converts a Django request object into an `oauth2.Request` object. """
    headers = {}
    if 'HTTP_AUTHORIZATION' in request.META:
        headers['Authorization'] = request.META['HTTP_AUTHORIZATION']
    return oauth.Request.from_request(request.method, request.build_absolute_uri(request.path), headers, dict(request.REQUEST))


def verify_oauth_request(request, oauth_request, consumer, token=None):
    """ Helper function to verify requests. """
    from treeio.core.api.auth.store import store

    # Check nonce
    if not store.check_nonce(request, oauth_request, oauth_request['oauth_nonce']):
        return False

    # Verify request
    try:
        oauth_server = oauth.Server()
        oauth_server.add_signature_method(oauth.SignatureMethod_HMAC_SHA1())
        oauth_server.add_signature_method(oauth.SignatureMethod_PLAINTEXT())

        # Ensure the passed keys and secrets are ascii, or HMAC will complain.
        consumer = oauth.Consumer(consumer.key.encode(
            'ascii', 'ignore'), consumer.secret.encode('ascii', 'ignore'))
        if token is not None:
            token = oauth.Token(
                token.key.encode('ascii', 'ignore'), token.secret.encode('ascii', 'ignore'))

        oauth_server.verify_request(oauth_request, consumer, token)
    except oauth.Error:
        return False

    return True


def require_params(oauth_request, parameters=[]):
    """ Ensures that the request contains all required parameters. """
    params = [
        'oauth_consumer_key',
        'oauth_nonce',
        'oauth_signature',
        'oauth_signature_method',
        'oauth_timestamp'
    ]
    params.extend(parameters)

    missing = list(
        param for param in params if not oauth_request or param not in oauth_request)
    if missing:
        response = HttpResponse(
            'Missing OAuth parameters: %s' % (', '.join(missing)))
        response.status_code = 401
        return response

    return None

########NEW FILE########
__FILENAME__ = views
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

from urllib import urlencode

from django.contrib.auth.decorators import login_required
from django.contrib.sites.models import RequestSite
from django.http import HttpResponse, HttpResponseBadRequest, HttpResponseRedirect
from django.template import RequestContext
from django.views.decorators.csrf import csrf_exempt

from treeio.core.rendering import render_to_response
from treeio.core.api.auth.forms import AuthorizeRequestTokenForm
from treeio.core.api.auth.store import store, InvalidConsumerError, InvalidTokenError
from treeio.core.api.auth.utils import verify_oauth_request, get_oauth_request, require_params


@csrf_exempt
def get_request_token(request):
    oauth_request = get_oauth_request(request)

    missing_params = require_params(oauth_request, ('oauth_callback',))
    if missing_params is not None:
        return missing_params

    try:
        consumer = store.get_consumer(
            request, oauth_request, oauth_request['oauth_consumer_key'])
    except InvalidConsumerError:
        return HttpResponseBadRequest('Invalid Consumer.')

    if not verify_oauth_request(request, oauth_request, consumer):
        return HttpResponseBadRequest('Could not verify OAuth request.')

    request_token = store.create_request_token(
        request, oauth_request, consumer, oauth_request['oauth_callback'])

    ret = urlencode({
        'oauth_token': request_token.key,
        'oauth_token_secret': request_token.secret,
        'oauth_callback_confirmed': 'true'
    })
    return HttpResponse(ret, content_type='application/x-www-form-urlencoded')


@login_required
def authorize_request_token(request, form_class=AuthorizeRequestTokenForm, template_name='core/api/auth/authorize', verification_template_name='core/api/auth/authorize_verification_code'):
    if 'oauth_token' not in request.REQUEST:
        return HttpResponseBadRequest('No request token specified.')

    oauth_request = get_oauth_request(request)

    try:
        request_token = store.fetch_request_token(
            request, oauth_request, request.REQUEST['oauth_token'])
    except InvalidTokenError:
        return HttpResponseBadRequest('Invalid request token.')

    consumer = store.get_consumer_for_request_token(
        request, oauth_request, request_token)

    if request.method == 'POST':
        form = form_class(request.POST)
        if form.is_valid() and form.cleaned_data['authorize_access']:
            request_token = store.authorize_request_token(
                request, oauth_request, request_token)
            if request_token.callback is not None and request_token.callback != 'oob':
                domain = RequestSite(request).domain
                return HttpResponseRedirect('%s&%s' % (request_token.get_callback_url(), urlencode({'oauth_token': request_token.key, 'domain': domain})))
            else:
                return render_to_response(verification_template_name,
                                          {'consumer': consumer,
                                              'verification_code': request_token.verifier},
                                          context_instance=RequestContext(request), response_format='html')
    else:
        form = form_class(initial={'oauth_token': request_token.key})

    return render_to_response(template_name, {'consumer': consumer, 'form': form},
                              context_instance=RequestContext(request), response_format='html')


@csrf_exempt
def get_access_token(request):
    oauth_request = get_oauth_request(request)

    missing_params = require_params(
        oauth_request, ('oauth_token', 'oauth_verifier'))
    if missing_params is not None:
        return missing_params

    try:
        consumer = store.get_consumer(
            request, oauth_request, oauth_request['oauth_consumer_key'])
        request_token = store.get_request_token(
            request, oauth_request, oauth_request['oauth_token'])
    except InvalidTokenError:
        return HttpResponseBadRequest('Invalid consumer.')
    except InvalidConsumerError:
        return HttpResponseBadRequest('Invalid request token.')

    if not verify_oauth_request(request, oauth_request, consumer, request_token):
        return HttpResponseBadRequest('Could not verify OAuth request.')

    if oauth_request.get('oauth_verifier', None) != request_token.verifier:
        return HttpResponseBadRequest('Invalid OAuth verifier.')

    access_token = store.create_access_token(
        request, oauth_request, consumer, request_token)

    ret = urlencode({
        'oauth_token': access_token.key,
        'oauth_token_secret': access_token.secret
    })
    return HttpResponse(ret, content_type='application/x-www-form-urlencoded')

########NEW FILE########
__FILENAME__ = decorators
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Hardtree Core decorators for api
"""

from utils import rc


def module_admin_required(module_name=None):
    """ Check that the user has write access to the treeio.core module """

    if not module_name:
        module_name = 'treeio.core'

    def wrap(f):
        "Wrap"
        def wrapped_f(cls, request, *args, **kwargs):
            "Wrapped"

            if request.user.get_profile().is_admin(module_name):
                return f(cls, request, *args, **kwargs)
            else:
                return rc.FORBIDDEN

        wrapped_f.__doc__ = f.__doc__
        wrapped_f.__name__ = f.__name__

        return wrapped_f

    return wrap

########NEW FILE########
__FILENAME__ = doc
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

import re
import sys
import inspect
import piston.handler as handler

from types import ModuleType
from resource import CsrfExemptResource
from handlers import ObjectHandlerMetaClass

from django.core.urlresolvers import get_resolver, get_callable, get_script_prefix
from django.utils.translation import ugettext_lazy as _
from django.shortcuts import render_to_response
from django.template import RequestContext
from django.db import models


def get_module(mdl):
    if isinstance(mdl, basestring):
        __import__(mdl)
        return sys.modules[mdl]
    elif isinstance(mdl, ModuleType):
        return mdl
    else:
        raise ValueError("mdl must be string or module type.")


def generate_doc(handler_cls):
    """
    Returns a `HandlerDocumentation` object
    for the given handler. Use this to generate
    documentation for your API.
    """
    if not (type(handler_cls) is ObjectHandlerMetaClass
            or type(handler_cls) is handler.HandlerMetaClass):
        raise ValueError("Give me handler, not %s" % type(handler_cls))

    return HandlerDocumentation(handler_cls)


def get_field_data_type(field):
    """Returns the description for a given field type, if it exists,
    Fields' descriptions can contain format strings, which will be interpolated
    against the values of field.__dict__ before being output."""

    return field.description % field.__dict__


class HandlerMethod(object):

    def __init__(self, method, stale=False):
        self.method = method
        self.stale = stale

    def iter_args(self):
        args, _, _, defaults = inspect.getargspec(self.method)  # NOQA

        for idx, arg in enumerate(args):
            if arg in ('self', 'request', 'form'):
                continue

            didx = len(args) - idx

            if defaults and len(defaults) >= didx:
                yield (arg, str(defaults[-didx]))
            else:
                yield (arg, None)

    def get_signature(self, parse_optional=True):
        spec = ""

        for argn, argdef in self.iter_args():
            spec += argn

            if argdef:
                spec += '=%s' % argdef

            spec += ', '

        spec = spec.rstrip(", ")

        if parse_optional:
            return spec.replace("=None", "=<optional>")

        return spec

    signature = property(get_signature)

    def get_fields(self):
        to_update = False
        doc = inspect.getdoc(self.method)
        if not doc and issubclass(self.method.im_class.model, models.Model):
            fields = None
            if self.method.__name__ == 'read':
                fields = self.method.im_class.fields if self.method.im_class.fields else tuple(
                    attr.name for attr in self.method.im_class.model._meta.local_fields)
            elif self.method.__name__ in ('create', 'update'):
                to_update = True
                if hasattr(self.method.im_class, 'form') and \
                   hasattr(self.method.im_class.form, '_meta'):
                    fields = self.method.im_class.form._meta.fields
                else:
                    fields = self.method.im_class.fields
            if fields:
                for field in fields:
                    for mfield in self.method.im_class.model._meta.fields:
                        if mfield.name == field:
                            yield {'name': mfield.name,
                                   'required': not mfield.blank if to_update else False,
                                   'type': get_field_data_type(mfield),
                                   'verbose': mfield.verbose_name,
                                   'help_text': mfield.help_text, }
                            break

    def get_doc(self):
        doc = inspect.getdoc(self.method)
        if not doc and issubclass(self.method.im_class.model, models.Model):
            if self.method.__name__ == 'delete':
                doc = _(
                    'Function deletes object with object_ptr. If you declare "trash" parameter as true, object is marked as trash.')
            elif self.method.__name__ == 'read':
                doc = _(
                    'Function gets info about object and returns following fields:')
            elif hasattr(self.method.im_class, 'form'):
                if self.method.__name__ == 'create':
                    doc = _('Function creates entry with following fields:')
                elif self.method.__name__ == 'update':
                    doc = _('Function updates following fields:')
        return doc

    doc = property(get_doc)

    def get_name(self):
        return self.method.__name__

    name = property(get_name)

    def __repr__(self):
        return "<Method: %s>" % self.name


def _convert(template, params=[]):
    """URI template converter"""
    paths = template % dict([p, "{%s}" % p] for p in params)
    return u'/api%s%s' % (get_script_prefix(), paths)


class HandlerDocumentation(object):

    def __init__(self, handler):
        self.handler = handler

    def get_methods(self, include_default=False):
        for method in self.handler.allowed_methods:
            met = getattr(self.handler, CsrfExemptResource.callmap.get(method))
            stale = inspect.getmodule(met) is handler

            if not self.handler.is_anonymous:
                if met and (not stale or include_default):
                    yield HandlerMethod(met, stale)
            else:
                if not stale or met.__name__ == "read" \
                        and 'GET' in self.allowed_methods:

                    yield HandlerMethod(met, stale)

    def get_all_methods(self):
        return self.get_methods(include_default=True)

    @property
    def is_anonymous(self):
        return handler.is_anonymous

    def get_model(self):
        return getattr(self, 'model', None)

    def get_doc(self):
        return self.handler.__doc__

    doc = property(get_doc)

    @property
    def name(self):
        return self.handler.__name__

    @property
    def display_name(self):
        name = self.handler.__name__.replace('Handler', '')
        try:
            pattern = re.compile('([A-Z][A-Z][a-z])|([a-z][A-Z])')
            name = pattern.sub(
                lambda m: m.group()[:1] + " " + m.group()[1:], name)
        except:
            pass
        return name

    @property
    def allowed_methods(self):
        return self.handler.allowed_methods

    def get_resource_uri_template(self):
        """
        URI template processor.

        See http://bitworking.org/projects/URI-Templates/
        """
        try:
            resource_uri = self.handler.resource_uri()

            components = [None, [], {}]

            for i, value in enumerate(resource_uri):
                components[i] = value

            lookup_view, args, kwargs = components
            lookup_view = get_callable(lookup_view, True)

            possibilities = get_resolver(
                'treeio.core.api.urls').reverse_dict.getlist(lookup_view)

            for possibility, pattern in possibilities:
                for result, params in possibility:
                    if args:
                        if len(args) != len(params):
                            continue
                        return _convert(result, params)
                    else:
                        if set(kwargs.keys()) != set(params):
                            continue
                        return _convert(result, params)

        except:
            return None

    def get_resource_uri_index(self):
        """
        INDEX URI template processor.
        """
        try:
            resource_uri = self.handler.resource_uri()

            components = [None, [], {}]

            for i, value in enumerate(resource_uri):
                components[i] = value

            lookup_view, args, kwargs = components
            # else this url will be in get_resource_uri_template
            if args or kwargs:
                lookup_view = get_callable(lookup_view, True)

                possibilities = get_resolver(
                    'treeio.core.api.urls').reverse_dict.getlist(lookup_view)

                for possibility, pattern in possibilities:
                    for result, params in possibility:
                        if not params:
                            return _convert(result)
        except:
            return None

    resource_uri_template = property(get_resource_uri_template)

    def __repr__(self):
        return u'<Documentation for "%s">' % self.name


def documentation_view(request, module):
    docs = []

    for name, clsmember in inspect.getmembers(get_module(module), inspect.isclass):
        if issubclass(clsmember, handler.BaseHandler) and getattr(clsmember, 'model', None):
            docs.append(generate_doc(clsmember))

    return render_to_response('api/reference.html', {'docs': docs}, RequestContext(request))

########NEW FILE########
__FILENAME__ = handlers
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license
from django.core.exceptions import ObjectDoesNotExist, MultipleObjectsReturned
from django.core.files.uploadedfile import InMemoryUploadedFile
from django.db.models import Q

from piston.handler import BaseHandler, HandlerMetaClass, typemapper
import base64
from utils import rc
from decorators import module_admin_required
from cStringIO import StringIO


class ObjectHandlerMetaClass(HandlerMetaClass):

    def __new__(cls, name, bases, attrs):
        new_cls = type.__new__(cls, name, bases, attrs)

        if hasattr(new_cls, 'model'):
            typemapper[new_cls] = (new_cls.model, new_cls.is_anonymous)

        new_cls.__dir = dir(new_cls)
        for field in ('fields', 'model', 'exclude', 'allowed_methods', 'anonymous', 'is_anonymous',
                      'read', 'create', 'update', 'delete'):
            try:
                new_cls.__dir.remove(field)
            except ValueError:
                pass
        new_cls.__class__.__dir__ = lambda x: x.__dir

        return new_cls


class ObjectHandler(BaseHandler):

    # I use metaclass to give a chance to show model's fields with names in
    # tuple
    __metaclass__ = ObjectHandlerMetaClass

    form = None
    exclude = ('object_type', 'object_ptr', 'object_name')

    def has_form(self):
        return hasattr(self, 'form')

    def check_create_permission(self, request, mode):
        return True

    def create_instance(self, request, *args, **kwargs):
        return self.model()

    def check_instance_permission(self, request, inst, mode):
        return request.user.get_profile().has_permission(inst, mode=mode)

    def delete_instance(self, request, inst):
        if not self.check_instance_permission(request, inst, mode='w'):
            return rc.FORBIDDEN
        if 'trash' in request.REQUEST:
            inst.trash = True
            inst.save()
            return inst
        else:
            inst.delete()
            return rc.DELETED

    def flatten_dict(self, request):
        files, data = {}, {}
        for key, value in request.data.items():
            if isinstance(value, dict) and value.get('type') == 'base64':
                content = base64.decodestring(value.get('content', ''))
                files[str(key)] = InMemoryUploadedFile(file=StringIO(content),
                                                       field_name=str(key),
                                                       name=value.get(
                                                           'name', ''),
                                                       content_type=value.get(
                                                           'content_type'),
                                                       size=len(content),
                                                       charset=None)
            else:
                data[str(key)] = value
        return {'data': data,
                'files': files,
                'user': request.user.get_profile()}

    def get_filter_query(self, args):
        query = Q()
        fields = self.model._meta.get_all_field_names()
        for arg in args:
            if hasattr(self.model, arg) and args[arg]:
                kwargs = {str(arg + '__id'): long(args[arg])}
                query = query & Q(**kwargs)
            elif arg in fields:
                kwargs = {arg: args[arg]}
                query = query & Q(**kwargs)
        return query

    def read(self, request, *args, **kwargs):
        if not self.has_model():
            return rc.NOT_IMPLEMENTED

        pkfield = kwargs.get(self.model._meta.pk.name)

        if pkfield:
            try:
                obj = self.model.objects.get(pk=pkfield)
                if not self.check_instance_permission(request, obj, 'r'):
                    return rc.FORBIDDEN
                else:
                    return obj
            except ObjectDoesNotExist:
                return rc.NOT_FOUND
            # should never happen, since we're using a PK
            except MultipleObjectsReturned:
                return rc.BAD_REQUEST
        else:
            query = self.get_filter_query(request.GET)
            return self.model.filter_by_request(request, self.model.objects.filter(query))

    def create(self, request, *args, **kwargs):
        if not self.has_model() or not self.has_form():
            return rc.NOT_IMPLEMENTED

        if request.data is None:
            return rc.BAD_REQUEST

        if not self.check_create_permission(request, "x"):
            return rc.FORBIDDEN

        attrs = self.flatten_dict(request)

        inst = self.create_instance(request, *args, **kwargs)
        form = self.form(instance=inst, **attrs)
        if form.is_valid():
            obj = form.save()
            obj.set_user_from_request(request)
            return obj
        else:
            self.status = 400
            return form.errors

    def update(self, request, *args, **kwargs):
        if not self.has_model() or not self.has_form():
            return rc.NOT_IMPLEMENTED

        pkfield = kwargs.get(self.model._meta.pk.name) or request.data.get(
            self.model._meta.pk.name)

        if not pkfield or request.data is None:
            return rc.BAD_REQUEST

        try:
            obj = self.model.objects.get(pk=pkfield)
        except ObjectDoesNotExist:
            return rc.NOT_FOUND

        if not self.check_instance_permission(request, obj, "w"):
            return rc.FORBIDDEN

        attrs = self.flatten_dict(request)

        form = self.form(instance=obj, **attrs)
        if form.is_valid():
            obj = form.save()
            return obj
        else:
            self.status = 400
            return form.errors

    def delete(self, request, *args, **kwargs):
        if not self.has_model():
            raise NotImplementedError

        if not args and not kwargs:
            return rc.BAD_REQUEST

        pkfield = self.model._meta.pk.name

        try:
            if pkfield in kwargs:
                inst = self.model.objects.get(pk=kwargs.get(pkfield))
            else:
                inst = self.model.objects.get(*args, **kwargs)
            return self.delete_instance(request, inst)
        except self.model.MultipleObjectsReturned:
            return rc.DUPLICATE_ENTRY
        except self.model.DoesNotExist:
            return rc.NOT_HERE


class AccessHandler(BaseHandler):
    form = None

    def has_form(self):
        return hasattr(self, 'form')

    read = module_admin_required()(BaseHandler.read)

    delete = module_admin_required()(BaseHandler.delete)

    @module_admin_required()
    def create(self, request, *args, **kwargs):
        if not self.has_model() or not self.has_form():
            return rc.NOT_IMPLEMENTED

        if request.data is None:
            return rc.BAD_REQUEST

        form = self.form(self.flatten_dict(request.data))
        if form.is_valid():
            obj = form.save()
            return obj
        else:
            self.status = 400
            return form.errors

    @module_admin_required()
    def update(self, request, *args, **kwargs):
        if not self.has_model() or not self.has_form():
            return rc.NOT_IMPLEMENTED

        pkfield = kwargs.get(self.model._meta.pk.name) or request.data.get(
            self.model._meta.pk.name)

        if not pkfield or request.data is None:
            return rc.BAD_REQUEST

        obj = getOrNone(self.model, pk=pkfield)
        if obj is None:
            return rc.NOT_FOUND

        attrs = self.flatten_dict(request.data)

        form = self.form(attrs, instance=obj)
        if form.is_valid():
            obj = form.save()
            return obj
        else:
            self.status = 400
            return form.errors


def getOrNone(model, pk):
    try:
        return model.objects.get(pk=pk)
    except model.DoesNotExist:
        return None

########NEW FILE########
__FILENAME__ = managers
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

from django.db import models
from django.contrib.auth.models import User
from treeio.core.conf import settings

KEY_SIZE = 18
SECRET_SIZE = 32

CONSUMER_DB = getattr(settings, 'HARDTREE_API_CONSUMER_DB', 'default')


class KeyManager(models.Manager):

    '''Add support for random key/secret generation
    '''

    def generate_random_codes(self):
        key = User.objects.make_random_password(length=KEY_SIZE)
        secret = User.objects.make_random_password(length=SECRET_SIZE)

        while self.filter(key__exact=key, secret__exact=secret).count():
            secret = User.objects.make_random_password(length=SECRET_SIZE)

        return key, secret


class ConsumerManager(KeyManager):

    def create_consumer(self, name, description=None, user=None, using=CONSUMER_DB):
        """
        Shortcut to create a consumer with random key/secret.
        """
        consumer, created = self.using(using).get_or_create(name=name)

        if user:
            consumer.user = user

        if description:
            consumer.description = description

        if created:
            consumer.key, consumer.secret = self.generate_random_codes()
            consumer.save()

        return consumer

    _default_consumer = None


class ResourceManager(models.Manager):
    _default_resource = None

    def get_default_resource(self, name):
        """
        Add cache if you use a default resource.
        """
        if not self._default_resource:
            self._default_resource = self.get(name=name)

        return self._default_resource


class TokenManager(KeyManager):

    def create_token(self, consumer_id, token_type, timestamp, user=None, using=None):
        """
        Shortcut to create a token with random key/secret.
        """
        if using:
            manager = self.using(using)
        else:
            manager = self

        token, created = manager.get_or_create(consumer_id=consumer_id,
                                               token_type=token_type,
                                               timestamp=timestamp,
                                               user=user)

        if created:
            token.key, token.secret = self.generate_random_codes()
            token.save()

        return token

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding model 'Nonce'
        db.create_table('api_nonce', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('token_key', self.gf(
                'django.db.models.fields.CharField')(max_length=18)),
            ('consumer_key', self.gf(
                'django.db.models.fields.CharField')(max_length=18)),
            ('key', self.gf('django.db.models.fields.CharField')
             (max_length=255)),
        ))
        db.send_create_signal('api', ['Nonce'])

        # Adding model 'Consumer'
        db.create_table('api_consumer', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=255)),
            ('description', self.gf('django.db.models.fields.TextField')()),
            ('key', self.gf('django.db.models.fields.CharField')
             (unique=True, max_length=18)),
            ('secret', self.gf('django.db.models.fields.CharField')
             (max_length=32)),
            ('status', self.gf('django.db.models.fields.CharField')
             (default='pending', max_length=16)),
        ))
        db.send_create_signal('api', ['Consumer'])

        # Adding model 'Token'
        db.create_table('api_token', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('key', self.gf('django.db.models.fields.CharField')
             (max_length=18)),
            ('secret', self.gf('django.db.models.fields.CharField')
             (max_length=32)),
            ('verifier', self.gf(
                'django.db.models.fields.CharField')(max_length=10)),
            ('token_type', self.gf('django.db.models.fields.IntegerField')()),
            ('timestamp', self.gf('django.db.models.fields.IntegerField')
             (default=1303299544L)),
            ('is_approved', self.gf(
                'django.db.models.fields.BooleanField')(default=False)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='tokens', null=True, to=orm['auth.User'])),
            ('consumer_id', self.gf('django.db.models.fields.IntegerField')
             (null=True, blank=True)),
            ('callback', self.gf('django.db.models.fields.CharField')
             (max_length=255, null=True, blank=True)),
            ('callback_confirmed', self.gf(
                'django.db.models.fields.BooleanField')(default=False)),
        ))
        db.send_create_signal('api', ['Token'])

    def backwards(self, orm):

        # Deleting model 'Nonce'
        db.delete_table('api_nonce')

        # Deleting model 'Consumer'
        db.delete_table('api_consumer')

        # Deleting model 'Token'
        db.delete_table('api_token')

    models = {
        'api.consumer': {
            'Meta': {'object_name': 'Consumer'},
            'description': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '18'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'pending'", 'max_length': '16'})
        },
        'api.nonce': {
            'Meta': {'object_name': 'Nonce'},
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '18'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'key': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'token_key': ('django.db.models.fields.CharField', [], {'max_length': '18'})
        },
        'api.token': {
            'Meta': {'object_name': 'Token'},
            'callback': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'callback_confirmed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'consumer_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_approved': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'key': ('django.db.models.fields.CharField', [], {'max_length': '18'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'timestamp': ('django.db.models.fields.IntegerField', [], {'default': '1303299544L'}),
            'token_type': ('django.db.models.fields.IntegerField', [], {}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'tokens'", 'null': 'True', 'to': "orm['auth.User']"}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '10'})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['api']

########NEW FILE########
__FILENAME__ = 0002_auto__add_field_consumer_owner
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding field 'Consumer.owner'
        db.add_column('api_consumer', 'owner', self.gf('django.db.models.fields.related.ForeignKey')(
            to=orm['auth.User'], null=True, blank=True), keep_default=False)

    def backwards(self, orm):

        # Deleting field 'Consumer.owner'
        db.delete_column('api_consumer', 'owner_id')

    models = {
        'api.consumer': {
            'Meta': {'object_name': 'Consumer'},
            'description': ('django.db.models.fields.TextField', [], {}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '18'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True', 'blank': 'True'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'status': ('django.db.models.fields.CharField', [], {'default': "'pending'", 'max_length': '16'})
        },
        'api.nonce': {
            'Meta': {'object_name': 'Nonce'},
            'consumer_key': ('django.db.models.fields.CharField', [], {'max_length': '18'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'key': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'token_key': ('django.db.models.fields.CharField', [], {'max_length': '18'})
        },
        'api.token': {
            'Meta': {'object_name': 'Token'},
            'callback': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'callback_confirmed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'consumer_id': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_approved': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'key': ('django.db.models.fields.CharField', [], {'max_length': '18'}),
            'secret': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'timestamp': ('django.db.models.fields.IntegerField', [], {'default': '1311780361L'}),
            'token_type': ('django.db.models.fields.IntegerField', [], {}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'tokens'", 'null': 'True', 'to': "orm['auth.User']"}),
            'verifier': ('django.db.models.fields.CharField', [], {'max_length': '10'})
        },
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['api']

########NEW FILE########
__FILENAME__ = models
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

import urllib
import time
import urlparse

# Django imports
from django.db.models.signals import post_save, post_delete
from django.db import models
from django.contrib.auth.models import User

# API imports
from treeio.core.api.managers import TokenManager, ConsumerManager
from treeio.core.api.signals import consumer_post_save, consumer_post_delete

KEY_SIZE = 18
SECRET_SIZE = 32
VERIFIER_SIZE = 10

CONSUMER_STATES = (
    ('pending', 'Pending'),
    ('accepted', 'Accepted'),
    ('canceled', 'Canceled'),
    ('rejected', 'Rejected')
)


def generate_random(length=SECRET_SIZE):
    return User.objects.make_random_password(length=length)


class Nonce(models.Model):
    token_key = models.CharField(max_length=KEY_SIZE)
    consumer_key = models.CharField(max_length=KEY_SIZE)
    key = models.CharField(max_length=255)

    def __unicode__(self):
        return u"Nonce %s for %s" % (self.key, self.consumer_key)


class Consumer(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True)

    key = models.CharField(max_length=KEY_SIZE, unique=True)
    secret = models.CharField(max_length=SECRET_SIZE)

    status = models.CharField(
        max_length=16, choices=CONSUMER_STATES, default='accepted')
    owner = models.ForeignKey(User, null=True, blank=True)

    objects = ConsumerManager()

    def __unicode__(self):
        return u"Consumer %s with key %s" % (self.name, self.key)

    def generate_random_codes(self):
        """
        Used to generate random key/secret pairings. Use this after you've
        added the other data in place of save().

        c = Consumer()
        c.name = "My consumer"
        c.description = "An app that makes ponies from the API."
        c.user = some_user_object
        c.generate_random_codes()
        """
        key = User.objects.make_random_password(length=KEY_SIZE)
        secret = generate_random(SECRET_SIZE)

        while Consumer.objects.filter(key__exact=key, secret__exact=secret).count():
            secret = generate_random(SECRET_SIZE)

        self.key = key
        self.secret = secret
        self.save()


class Token(models.Model):
    REQUEST = 1
    ACCESS = 2
    TOKEN_TYPES = ((REQUEST, u'Request'), (ACCESS, u'Access'))

    key = models.CharField(max_length=KEY_SIZE)
    secret = models.CharField(max_length=SECRET_SIZE)
    verifier = models.CharField(max_length=VERIFIER_SIZE)
    token_type = models.IntegerField(choices=TOKEN_TYPES)
    timestamp = models.IntegerField(default=long(time.time()))
    is_approved = models.BooleanField(default=False)

    user = models.ForeignKey(
        User, null=True, blank=True, related_name='tokens')
    consumer_id = models.IntegerField(blank=True, null=True)

    callback = models.CharField(max_length=255, null=True, blank=True)
    callback_confirmed = models.BooleanField(default=False)

    objects = TokenManager()

    def __unicode__(self):
        return u"%s Token %s for %s" % (self.get_token_type_display(), self.key, self.consumer_id)

    def to_string(self, only_key=False):
        token_dict = {
            'oauth_token': self.key,
            'oauth_token_secret': self.secret,
            'oauth_callback_confirmed': 'true',
        }

        if self.verifier:
            token_dict.update({'oauth_verifier': self.verifier})

        if only_key:
            del token_dict['oauth_token_secret']

        return urllib.urlencode(token_dict)

    def generate_random_codes(self):
        key = User.objects.make_random_password(length=KEY_SIZE)
        secret = generate_random(SECRET_SIZE)

        while Token.objects.filter(key__exact=key, secret__exact=secret).count():
            secret = generate_random(SECRET_SIZE)

        self.key = key
        self.secret = secret
        self.save()

    # -- OAuth 1.0a stuff

    def get_callback_url(self):
        if self.callback and self.verifier:
            # Append the oauth_verifier.
            parts = urlparse.urlparse(self.callback)
            scheme, netloc, path, params, query, fragment = parts[:6]
            if query:
                query = '%s&oauth_verifier=%s' % (query, self.verifier)
            else:
                query = 'oauth_verifier=%s' % self.verifier
            return urlparse.urlunparse((scheme, netloc, path, params,
                                        query, fragment))
        return self.callback

    def set_callback(self, callback):
        if callback != "oob":  # out of band, says "we can't do this!"
            self.callback = callback
            self.callback_confirmed = True
            self.save()

# Attach our signals
post_save.connect(consumer_post_save, sender=Consumer)
post_delete.connect(consumer_post_delete, sender=Consumer)

########NEW FILE########
__FILENAME__ = resource
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

import sys
import utils
sys.modules['piston.utils'] = utils

from piston.resource import Resource


class CsrfExemptResource(Resource):

    """A Custom Resource that is csrf exempt"""

    def __init__(self, handler, authentication=None):
        super(CsrfExemptResource, self).__init__(handler, authentication)
        self.csrf_exempt = getattr(self.handler, 'csrf_exempt', True)

    def __call__(self, request, *args, **kwargs):
        res = super(CsrfExemptResource, self).__call__(
            request, *args, **kwargs)
        if hasattr(self.handler, 'status'):
            res.status_code = self.handler.status
            del self.handler.status
        return res

########NEW FILE########
__FILENAME__ = signals
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license


def consumer_post_save(sender, instance, created, **kwargs):
    pass


def consumer_post_delete(sender, instance, **kwargs):
    instance.status = 'canceled'
    pass

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

from django.conf.urls import patterns, include

urlpatterns = patterns('',
    (r'^auth/', include('treeio.core.api.auth.urls')),
    (r'^news/', include('treeio.news.api.urls')),
    (r'^core/', include('treeio.core.administration.api.urls')),
    (r'^projects/', include('treeio.projects.api.urls')),
    (r'^services/', include('treeio.services.api.urls')),
    (r'^sales/', include('treeio.sales.api.urls')),
    (r'^finance/', include('treeio.finance.api.urls')),
    (r'^knowledge/', include('treeio.knowledge.api.urls')),
    (r'^messaging/', include('treeio.messaging.api.urls')),
    (r'^infrastructure/', include('treeio.infrastructure.api.urls')),
    (r'^calendar/', include('treeio.events.api.urls')),
    (r'^documents/', include('treeio.documents.api.urls')),
    (r'^identities/', include('treeio.identities.api.urls')),
)

########NEW FILE########
__FILENAME__ = utils
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

import time
from django.http import HttpResponse
from django.core.cache import cache
from django import get_version as django_version
from django.core.mail import send_mail, mail_admins
from django.conf import settings
from django.utils.translation import ugettext as _
from django.template import loader, TemplateDoesNotExist
from django.contrib.sites.models import Site
from piston.decorator import decorator

__version__ = '0.3dev'


def get_version():
    return __version__


def format_error(error):
    return u"Piston/%s (Django %s) crash report:\n\n%s" % \
        (get_version(), django_version(), error)


class rc_factory(object):

    """
    Status codes.
    """
    CODES = dict(ALL_OK=('OK', 200),
                 CREATED = ('Created', 201),
                 DELETED = ('', 204),  # 204 says "Don't send a body!"
                 BAD_REQUEST = ('Bad Request', 400),
                 FORBIDDEN = ('Forbidden', 401),
                 NOT_FOUND = ('Not Found', 404),
                 DUPLICATE_ENTRY = ('Conflict/Duplicate', 409),
                 NOT_HERE = ('Gone', 410),
                 INTERNAL_ERROR = ('Internal Error', 500),
                 NOT_IMPLEMENTED = ('Not Implemented', 501),
                 THROTTLED = ('Throttled', 503))

    def __getattr__(self, attr):
        """
        Returns a fresh `HttpResponse` when getting
        an "attribute". This is backwards compatible
        with 0.2, which is important.
        """
        try:
            (r, c) = self.CODES.get(attr)
        except TypeError:
            raise AttributeError(attr)

        class HttpResponseWrapper(HttpResponse):

            """
            Wrap HttpResponse and make sure that the internal _is_string
            flag is updated when the _set_content method (via the content
            property) is called
            """

            def _set_content(self, content):
                """
                Set the _container and _is_string properties based on the
                type of the value parameter. This logic is in the construtor
                for HttpResponse, but doesn't get repeated when setting
                HttpResponse.content although this bug report (feature request)
                suggests that it should: http://code.djangoproject.com/ticket/9403
                """
                if not isinstance(content, basestring) and hasattr(content, '__iter__'):
                    self._container = content
                    self._is_string = False
                else:
                    self._container = [content]
                    self._is_string = True

            content = property(HttpResponse._get_content, _set_content)

        return HttpResponseWrapper(r, content_type='text/plain', status=c)

rc = rc_factory()


class FormValidationError(Exception):

    def __init__(self, form):
        self.form = form


class HttpStatusCode(Exception):

    def __init__(self, response):
        self.response = response


def validate(v_form, operation='POST'):
    @decorator
    def wrap(f, self, request, *a, **kwa):
        form = v_form(getattr(request, operation))

        if form.is_valid():
            setattr(request, 'form', form)
            return f(self, request, *a, **kwa)
        else:
            raise FormValidationError(form)
    return wrap


def throttle(max_requests, timeout=60 * 60, extra=''):
    """
    Simple throttling decorator, caches
    the amount of requests made in cache.

    If used on a view where users are required to
    log in, the username is used, otherwise the
    IP address of the originating request is used.

    Parameters::
     - `max_requests`: The maximum number of requests
     - `timeout`: The timeout for the cache entry (default: 1 hour)
    """
    @decorator
    def wrap(f, self, request, *args, **kwargs):
        if request.user.is_authenticated():
            ident = request.user.username
        else:
            ident = request.META.get('REMOTE_ADDR', None)

        if hasattr(request, 'throttle_extra'):
            """
            Since we want to be able to throttle on a per-
            application basis, it's important that we realize
            that `throttle_extra` might be set on the request
            object. If so, append the identifier name with it.
            """
            ident += ':%s' % str(request.throttle_extra)

        if ident:
            """
            Preferrably we'd use incr/decr here, since they're
            atomic in memcached, but it's in django-trunk so we
            can't use it yet. If someone sees this after it's in
            stable, you can change it here.
            """
            ident += ':%s' % extra

            now = time.time()
            count, expiration = cache.get(ident, (1, None))

            if expiration is None:
                expiration = now + timeout

            if count >= max_requests and expiration > now:
                t = rc.THROTTLED
                wait = int(expiration - now)
                t.content = 'Throttled, wait %d seconds.' % wait
                t['Retry-After'] = wait
                return t

            cache.set(ident, (count + 1, expiration), (expiration - now))

        return f(self, request, *args, **kwargs)
    return wrap


def coerce_put_post(request):
    """
    Django doesn't particularly understand REST.
    In case we send data over PUT, Django won't
    actually look at the data and load it. We need
    to twist its arm here.

    The try/except abominiation here is due to a bug
    in mod_python. This should fix it.
    """
    if request.method == "PUT":
        # Bug fix: if _load_post_and_files has already been called, for
        # example by middleware accessing request.POST, the below code to
        # pretend the request is a POST instead of a PUT will be too late
        # to make a difference. Also calling _load_post_and_files will result
        # in the following exception:
        #   AttributeError: You cannot set the upload handlers after the upload has been processed.
        # The fix is to check for the presence of the _post field which is set
        # the first time _load_post_and_files is called (both by wsgi.py and
        # modpython.py). If it's set, the request has to be 'reset' to redo
        # the query value parsing in POST mode.
        if hasattr(request, '_post'):
            del request._post
            del request._files

        try:
            request.method = "POST"
            request._load_post_and_files()
            request.method = "PUT"
        except AttributeError:
            request.META['REQUEST_METHOD'] = 'POST'
            request._load_post_and_files()
            request.META['REQUEST_METHOD'] = 'PUT'

        request.PUT = request.POST


class MimerDataException(Exception):

    """
    Raised if the content_type and data don't match
    """
    pass


class Mimer(object):
    TYPES = dict()

    def __init__(self, request):
        self.request = request

    def is_multipart(self):
        content_type = self.content_type()

        if content_type is not None:
            return content_type.lstrip().startswith('multipart')

        return False

    def loader_for_type(self, ctype):
        """
        Gets a function ref to deserialize content
        for a certain mimetype.
        """
        for loadee, mimes in Mimer.TYPES.iteritems():
            for mime in mimes:
                if ctype.startswith(mime):
                    return loadee

    def content_type(self):
        """
        Returns the content type of the request in all cases where it is
        different than a submitted form - application/x-www-form-urlencoded
        """
        type_formencoded = "application/x-www-form-urlencoded"

        ctype = self.request.META.get('CONTENT_TYPE', type_formencoded)

        if type_formencoded in ctype:
            return None

        return ctype

    def translate(self):
        """
        Will look at the `Content-type` sent by the client, and maybe
        deserialize the contents into the format they sent. This will
        work for JSON, YAML, XML and Pickle. Since the data is not just
        key-value (and maybe just a list), the data will be placed on
        `request.data` instead, and the handler will have to read from
        there.

        It will also set `request.content_type` so the handler has an easy
        way to tell what's going on. `request.content_type` will always be
        None for form-encoded and/or multipart form data (what your browser sends.)
        """
        ctype = self.content_type()
        self.request.content_type = ctype

        if not self.is_multipart() and ctype:
            loadee = self.loader_for_type(ctype)

            if loadee:
                try:
                    self.request.data = loadee(self.request.raw_post_data)

                    # Reset both POST and PUT from request, as its
                    # misleading having their presence around.
                    self.request.POST = self.request.PUT = dict()
                except (TypeError, ValueError):
                    # This also catches if loadee is None.
                    raise MimerDataException
            else:
                self.request.data = None

        return self.request

    @classmethod
    def register(cls, loadee, types):
        cls.TYPES[loadee] = types

    @classmethod
    def unregister(cls, loadee):
        return cls.TYPES.pop(loadee)


def translate_mime(request):
    request = Mimer(request).translate()


def require_mime(*mimes):
    """
    Decorator requiring a certain mimetype. There's a nifty
    helper called `require_extended` below which requires everything
    we support except for post-data via form.
    """
    @decorator
    def wrap(f, self, request, *args, **kwargs):
        m = Mimer(request)
        realmimes = set()

        rewrite = {'json': 'application/json',
                   'yaml': 'application/x-yaml',
                   'xml': 'text/xml',
                   'pickle': 'application/python-pickle'}

        for idx, mime in enumerate(mimes):
            realmimes.add(rewrite.get(mime, mime))

        if not m.content_type() in realmimes:
            return rc.BAD_REQUEST

        return f(self, request, *args, **kwargs)
    return wrap

require_extended = require_mime('json', 'yaml', 'xml', 'pickle')


def send_consumer_mail(consumer):
    """
    Send a consumer an email depending on what their status is.
    """
    try:
        subject = settings.PISTON_OAUTH_EMAIL_SUBJECTS[consumer.status]
    except AttributeError:
        subject = "Your API Consumer for %s " % Site.objects.get_current().name
        if consumer.status == "accepted":
            subject += "was accepted!"
        elif consumer.status == "canceled":
            subject += "has been canceled."
        elif consumer.status == "rejected":
            subject += "has been rejected."
        else:
            subject += "is awaiting approval."

    template = "piston/mails/consumer_%s.txt" % consumer.status

    try:
        body = loader.render_to_string(template,
                                       {'consumer': consumer, 'user': consumer.user})
    except TemplateDoesNotExist:
        """
        They haven't set up the templates, which means they might not want
        these emails sent.
        """
        return

    try:
        sender = settings.PISTON_FROM_EMAIL
    except AttributeError:
        sender = settings.DEFAULT_FROM_EMAIL

    if consumer.user:
        send_mail(
            _(subject), body, sender, [consumer.user.email], fail_silently=True)

    if consumer.status == 'pending' and len(settings.ADMINS):
        mail_admins(_(subject), body, fail_silently=True)

    if settings.DEBUG and consumer.user:
        print "Mail being sent, to=%s" % consumer.user.email
        print "Subject: %s" % _(subject)
        print body

########NEW FILE########
__FILENAME__ = auth
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Hardtree support authentication backend
"""
from django.contrib.auth.models import User
from treeio.identities.models import ContactValue


class EmailBackend:

    "Log a user in using email instead of their username"

    def authenticate(self, username, password):
        # The user entered an email, so try to log them in by e-mail
        emails = ContactValue.objects.filter(value=username,
                                             field__field_type='email',
                                             contact__trash=False,
                                             contact__related_user__isnull=False)
        for email in emails:
            try:
                user = email.contact.related_user.user.user
                if user.check_password(password):
                    return user
            except:
                pass
        return None

    def get_user(self, user_id):
        try:
            return User.objects.get(pk=user_id)
        except User.DoesNotExist:
            return None


class HashBackend:

    "Log a user in using their password as a hash"

    def authenticate(self, authkey):
        try:
            return User.objects.get(password=authkey)
        except:
            pass
        return None

    def get_user(self, user_id):
        try:
            return User.objects.get(pk=user_id)
        except User.DoesNotExist:
            return None

########NEW FILE########
__FILENAME__ = conf
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Multitenancy settings
"""

from django.conf import LazySettings
from pandora import box


class Settings(LazySettings):

    def __getattr__(self, key):
        if key in box:
            return box[key]
        else:
            return super(Settings, self).__getattr__(key)

settings = Settings()

########NEW FILE########
__FILENAME__ = cache
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# -*- coding:utf-8 -*-

from treeio.core.conf import settings
from django.contrib.messages.storage.base import BaseStorage
from django.core.cache import cache
import cPickle


def lock(key):
    while True:
        if cache.add(key + '_lock', '1', 10):  # lifetime lock 10 seconds
            break


def unlock(key):
    cache.delete(key + '_lock')


class CacheStorage(BaseStorage):

    """
    Stores messages in a cache.
    """

    def __init__(self, request, *args, **kwargs):
        super(CacheStorage, self).__init__(request, *args, **kwargs)
        self.user = request.user.id
        self.domain = getattr(settings, 'CURRENT_DOMAIN', 'default')
        self.prefix = 'treeio_%s_storage_messages_%s'
        self.key = self.prefix % (self.domain, self.user)

    def _get(self, *args, **kwargs):
        """
        Retrieves a list of stored messages. Returns a tuple of the messages
        and a flag indicating whether or not all the messages originally
        intended to be stored in this storage were, in fact, stored and
        retrieved; e.g., ``(messages, all_retrieved)``.
        """
        lock(self.key)
        try:
            data = cache.get(self.key)
            if not data:
                data = cPickle.dumps([])
            messages = cPickle.loads(data)
        except:
            pass
        unlock(self.key)
        return messages, True

    def update(self, response, *args, **kwargs):
        "Update flew by - don't pass response to avoid Exceptions being thrown by Django middleware"
        super(CacheStorage, self).update(response, *args, **kwargs)
        return []

    def _store(self, messages, *args, **kwargs):
        """
        Stores a list of messages, returning a list of any messages which could
        not be stored.

        One type of object must be able to be stored, ``Message``.
        """
        lock(self.key)
        try:
            if messages:
                data = cache.get(self.key)
                if not data:  # if not data in cache
                    data = cPickle.dumps(([], True))
                data = cPickle.loads(data)
                data.append(messages)
                cache.set(self.key, cPickle.dumps(messages), 2592000)
            else:
                cache.set(self.key, cPickle.dumps([]), 2592000)
        except:
            pass
        unlock(self.key)
        return messages

    def _add(self, messages, *args, **kwargs):
        """
        adds to the message store
        """
        lock(self.key)
        try:
            if messages:
                data = cache.get(self.key)
                if not data:
                    data = cPickle.dumps([])
                data = cPickle.loads(data)
                data.append(messages)
                cache.set(self.key, cPickle.dumps(data), 2592000)
        except:
            pass
        unlock(self.key)

########NEW FILE########
__FILENAME__ = cron
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core Cron jobs
"""

import re
import random

from os.path import join
from treeio.core.conf import settings
from treeio.core.views import save_upload
from treeio.core.mail import EmailReceiver
from treeio.identities.models import Contact
from treeio.core.models import Object, UpdateRecord, Attachment


class EmailReplier(EmailReceiver):
    subject_regex = re.compile(
        "(Re:\s*)*\[Tree.io \#(?P<id>\d+)\] .+: .+ '.+' - .+", re.IGNORECASE | re.MULTILINE)

    def process_msg(self, msg, attrs, attachments):
        # get user profile by author email
        contact = Contact.objects.filter(contactvalue__value=attrs.author_email, contactvalue__field__field_type='email',
                                         related_user__isnull=False)[:1]
        contact = contact[0] if contact else None
        author = contact.related_user if contact else None

        # check subject and get Object, subject should be fit subject's regex
        # in Object.notify_subscribers
        regex = self.subject_regex.match(attrs.subject)
        if regex and author:
            try:
                obj = Object.objects.get(id=regex.group('id'))
                # create UpdateRecord sceleton
                note, created = UpdateRecord.objects.get_or_create(author=author.user, sender=contact,
                                                                   record_type='manual', date_created=attrs.email_date)
                if created:
                    # find and wrap a quotation into div container
                    def find_quotation(string):
                        n = 0
                        i = iter(string)
                        try:
                            while i.next() == u'>':
                                n += 1
                        except StopIteration:
                            pass
                        return n
                    body = []
                    nesting = 0
                    lines = re.split(
                        u'<br\s*/?>\n?', attrs.body, re.IGNORECASE | re.MULTILINE | re.VERBOSE)
                    for line in lines:
                        line_start = find_quotation(line)
                        if line_start > nesting:
                            for i in range(line_start - nesting):
                                body.append(u'<div class="reply-quote">\n')
                        elif line_start < nesting:
                            for i in range(nesting - line_start):
                                body.append(u'</div>\n')
                        else:
                            body.append(u'<br />\n')
                        body.append(line[line_start:])
                        nesting = line_start
                    note.url = obj.get_absolute_url()
                    note.body = u''.join(body)
                    note.save()
                    # associate new UpdateRecord with object
                    for subscriber in obj.subscribers.all():
                        note.recipients.add(subscriber)
                    note.recipients.add(author)
                    note.about.add(obj)
                    # append attachments
                    for file in attachments:
                        random.seed()
                        filehash = str(random.getrandbits(128))
                        savefile = join(
                            getattr(settings, 'MEDIA_ROOT'), 'attachments', filehash)
                        # save a file
                        file_body = file.get_payload(decode=True)
                        success = save_upload(file_body, savefile, True)
                        if success:
                            Attachment(uploaded_by=author.user, filename=file.get_filename(), attached_file=filehash,
                                       attached_record=note, attached_object=obj).save()

            except (Object.DoesNotExist, UpdateRecord.DoesNotExist):
                pass


def email_reply():
    "Fetches emails"
    from treeio.core.mail import IMAP_SERVER, EMAIL_USERNAME, EMAIL_PASSWORD
    emailreplier = EmailReplier('IMAP-SSL', IMAP_SERVER, EMAIL_USERNAME, EMAIL_PASSWORD,
                                getattr(settings, 'HARDTREE_MESSAGING_IMAP_DEFAULT_FOLDER_NAME', 'UNSEEN'))
    emailreplier.get_emails()

########NEW FILE########
__FILENAME__ = forms
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core Dashboard module forms
"""
from django import forms
from treeio.core.models import Object, Widget, Perspective
from django.utils.translation import ugettext as _
from treeio.core.decorators import preprocess_form
preprocess_form()


class WidgetForm(forms.ModelForm):

    """ Perspective form """

    def __init__(self, user, *args, **kwargs):
        super(WidgetForm, self).__init__(*args, **kwargs)

        self.fields['perspective'].queryset = Object.filter_permitted(
            user, Perspective.objects)
        self.fields['perspective'].label = _("Perspective")
        self.fields['weight'].label = _("Weight")

    class Meta:

        "Widget Form"
        model = Widget
        fields = ('perspective', 'weight')

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core module Dashboard URLs
"""

from django.conf.urls.defaults import patterns, url

urlpatterns = patterns('treeio.core.dashboard.views',
                       url(r'^(\.(?P<response_format>\w+))?$',
                           'index', name='core_dashboard_index'),

                       # Widgets
                       url(r'^widget/add(\.(?P<response_format>\w+))?$',
                           'dashboard_widget_add', name='core_dashboard_widget_add'),
                       url(r'^widget/add/(?P<module_name>[a-z\.]+)/(?P<widget_name>\w+)(\.(?P<response_format>\w+))?$',
                           'dashboard_widget_add', name='core_dashboard_widget_add_selected'),
                       url(r'^widget/edit/(?P<widget_id>\d+)(\.(?P<response_format>\w+))?$',
                           'dashboard_widget_edit', name='core_dashboard_widget_edit'),
                       url(r'^widget/delete/(?P<widget_id>\d+)(\.(?P<response_format>\w+))?$',
                           'dashboard_widget_delete', name='core_dashboard_widget_delete'),

                       url(r'^widget/arrange/(?P<panel>\w+)?(\.(?P<response_format>\w+))?$',
                           'dashboard_widget_arrange', name='core_dashboard_widget_arrange'),


                       )

########NEW FILE########
__FILENAME__ = views
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core module Dashboard views
"""

from treeio.core.rendering import render_to_response
from django.shortcuts import get_object_or_404
from django.template import RequestContext
from django.http import HttpResponseRedirect
from django.core.urlresolvers import reverse
from treeio.core.decorators import treeio_login_required, handle_response_format
from treeio.core.models import Object, Widget
from treeio.core.dashboard.forms import WidgetForm
from treeio.core.conf import settings
from jinja2 import Markup
import json
import re
import copy


def _preprocess_widget(widget, name):
    "Populates widget with missing fields"

    module_name = widget['module_name']
    import_name = module_name + ".views"
    module_views = __import__(import_name, fromlist=[str(module_name)])
    if hasattr(module_views, name):
        if not 'title' in widget:
            widget['title'] = getattr(module_views, name).__doc__
        widget = copy.deepcopy(widget)

        if not 'view' in widget:
            widget['view'] = getattr(module_views, name)

    return widget


def _get_all_widgets(request):
    "Retrieve widgets from all available modules"

    user = request.user.get_profile()
    perspective = user.get_perspective()
    modules = perspective.get_modules()

    widgets = {}

    # For each Module in the Perspective get widgets
    for module in modules:
        try:
            import_name = module.name + ".widgets"
            module_widget_lib = __import__(
                import_name, fromlist=[str(module.name)])
            module_widgets = module_widget_lib.get_widgets(request)

            # Preprocess widget, ensure it has all required fields
            for name in module_widgets:
                if not 'module_name' in module_widgets[name]:
                    module_widgets[name]['module_name'] = module.name
                if not 'module_title' in module_widgets[name]:
                    module_widgets[name]['module_title'] = module.title
                module_widgets[name] = _preprocess_widget(
                    module_widgets[name], name)

            widgets.update(module_widgets)

        except ImportError:
            pass
        except AttributeError:
            pass

    return widgets


def _get_widget(request, module, widget_name):
    "Gets a widget by name"

    import_name = module.name + ".widgets"
    module_widget_lib = __import__(import_name, fromlist=[str(module.name)])
    module_widgets = module_widget_lib.get_widgets(request)

    widget = {}
    # Preprocess widget, ensure it has all required fields
    for name in module_widgets:
        if name == widget_name:
            widget = module_widgets[name]
            if not 'module_name' in widget:
                widget['module_name'] = module.name
            if not 'module_title' in widget:
                widget['module_title'] = module.title
            widget = _preprocess_widget(widget, widget_name)
            break

    return widget


def _create_widget_object(request, module_name, widget_name):
    "Create a Widget object if one is available for the current user Perspective"

    user = request.user.get_profile()
    perspective = user.get_perspective()
    modules = perspective.get_modules()

    obj = None

    current_module = modules.filter(name=module_name)
    widget = None
    if current_module:
        current_module = current_module[0]
        widget = _get_widget(request, current_module, widget_name)
    if widget:
        obj = Widget(user=user, perspective=perspective)
        obj.module_name = widget['module_name']
        obj.widget_name = widget_name
        obj.save()

    # except Exception:
    #    pass

    return obj


def _get_widget_content(content, response_format='html'):
    "Extracts widget content from rendred HTML"

    widget_content = ""
    regexp = r"<!-- widget_content -->(?P<widget_content>.*?)<!-- /widget_content -->"

    if response_format == 'ajax':
        try:
            ajax_content = json.loads(content)
            widget_content = ajax_content['response'][
                'content']['module_content']
        except:
            blocks = re.finditer(regexp, content, re.DOTALL)
            for block in blocks:
                widget_content = block.group('widget_content').strip()
    else:
        blocks = re.finditer(regexp, content, re.DOTALL)
        for block in blocks:
            widget_content = block.group('widget_content').strip()

    return Markup(widget_content)


@handle_response_format
@treeio_login_required
def index(request, response_format='html'):
    "Homepage"
    trash = Object.filter_by_request(request, manager=Object.objects.filter(trash=True),
                                     mode='r', filter_trash=False).count()
    user = request.user.get_profile()
    perspective = user.get_perspective()
    widget_objects = Widget.objects.filter(user=user, perspective=perspective)
    clean_widgets = []

    for widget_object in widget_objects:
        try:
            module = perspective.get_modules().filter(
                name=widget_object.module_name)[0]
            widget = _get_widget(request, module, widget_object.widget_name)
            if 'view' in widget:
                try:
                    content = unicode(
                        widget['view'](request, response_format=response_format).content, 'utf_8')
                    widget_content = _get_widget_content(
                        content, response_format=response_format)
                except Exception, e:
                    widget_content = ""
                    if settings.DEBUG:
                        widget_content = str(e)

                widget['content'] = widget_content
            if widget:
                widget_object.widget = widget
                clean_widgets.append(widget_object)
        except IndexError:
            widget_object.delete()

    return render_to_response('core/dashboard/index',
                              {'trash': trash,
                               'widgets': clean_widgets},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def dashboard_widget_add(request, module_name=None, widget_name=None, response_format='html'):
    "Add a Widget to the Dashboard"
    trash = Object.filter_by_request(request, manager=Object.objects.filter(trash=True),
                                     mode='r', filter_trash=False).count()

    if module_name and widget_name:
        widget = _create_widget_object(request, module_name, widget_name)
        if widget:
            return HttpResponseRedirect(reverse('core_dashboard_index'))

    widgets = _get_all_widgets(request)

    return render_to_response('core/dashboard/widget_add',
                              {'trash': trash,
                               'widgets': widgets},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def dashboard_widget_edit(request, widget_id, response_format='html'):
    "Edit an existing Widget on the Dashboard"

    user = request.user.get_profile()

    widget_object = get_object_or_404(Widget, pk=widget_id)
    if widget_object.user == user:
        perspective = user.get_perspective()
        module = perspective.get_modules().filter(
            name=widget_object.module_name)[0]
        widget = _get_widget(request, module, widget_object.widget_name)
        widget_object.widget = widget
        if 'view' in widget:
            try:
                content = unicode(
                    widget['view'](request, response_format=response_format).content, 'utf_8')
                widget_content = _get_widget_content(
                    content, response_format=response_format)
            except Exception:
                widget_content = ""
            widget['content'] = widget_content
        if request.POST:
            form = WidgetForm(user, request.POST, instance=widget_object)
            if form.is_valid():
                form.save()
                return HttpResponseRedirect(reverse('core_dashboard_index'))
        else:
            form = WidgetForm(user, instance=widget_object)
        return render_to_response('core/dashboard/widget_edit',
                                  {'widget': widget_object,
                                   'form': form},
                                  context_instance=RequestContext(request), response_format=response_format)

    return HttpResponseRedirect(reverse('home'))


@handle_response_format
@treeio_login_required
def dashboard_widget_delete(request, widget_id, response_format='html'):
    "Delete an existing Widget from the Dashboard"

    widget = get_object_or_404(Widget, pk=widget_id)

    if widget.user == request.user.get_profile():
        widget.delete()

    return HttpResponseRedirect(reverse('core_dashboard_index'))


@handle_response_format
@treeio_login_required
def dashboard_widget_arrange(request, panel='left', response_format='html'):
    "Arrange widgets with AJAX request"
    user = request.user.get_profile()

    if panel == 'left' or not panel:
        shift = -100
    else:
        shift = 100

    if request.GET and 'id_widget[]' in request.GET:
        widget_ids = request.GET.getlist('id_widget[]')
        widgets = Widget.objects.filter(user=user, pk__in=widget_ids)
        for widget in widgets:
            if unicode(widget.id) in widget_ids:
                widget.weight = shift + widget_ids.index(unicode(widget.id))
                widget.save()

    return HttpResponseRedirect(reverse('core_dashboard_index'))

########NEW FILE########
__FILENAME__ = creation
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- encoding: utf-8 -*-
"""
Database creator
"""
__author__ = 'Kirill Yakovenko, crystalnix'
__email__ = 'kirill.yakovenko@gmail.com'

from django.conf import settings
from django.db import connections
from django.utils.importlib import import_module


def DatabaseCreation(domain):
    connection = connections[domain]
    try:
        BaseDatabaseCreation = import_module(
            '.creation', connection.settings_dict['ENGINE']).DatabaseCreation
    except:
        BaseDatabaseCreation = import_module(
            '.creation', 'django.db.backends').BaseDatabaseCreation

    class DBCreation(BaseDatabaseCreation):

        def __init__(self, connection):
            super(DBCreation, self).__init__(connection)
            self.database_name = self.connection.settings_dict.get(
                'NAME') or super(DBCreation, self)._get_test_db_name()

        def _get_test_db_name(self):
            return self.database_name

        def create_db(self, load_initial):
            from django.core.management import call_command

            # Deletes database name because if database doesn't exist,
            # django orm isn't able to connect to it.
            self.connection.settings_dict["NAME"] = None
            self._create_test_db(0, True)
            self.connection.settings_dict["NAME"] = self.database_name

            self.connection.close()
            # Confirm the feature set of the database
            self.connection.features.confirm()

            # Report syncdb messages at one level lower than that requested.
            # This ensures we don't get flooded with messages during testing
            # (unless you really ask to be flooded)
            call_command('syncdb',
                         verbosity=0,
                         interactive=False,
                         database=domain,
                         load_initial_data=load_initial,
                         migrate_all=True)

            from django.core.cache import get_cache
            from django.core.cache.backends.db import BaseDatabaseCache
            for cache_alias in settings.CACHES:
                cache = get_cache(cache_alias)
                if isinstance(cache, BaseDatabaseCache):
                    from django.db import router
                    if router.allow_syncdb(self.connection.alias, cache.cache_model_class):
                        call_command(
                            'createcachetable', cache._table, database=self.connection.alias)

            # Get a cursor (even though we don't need one yet). This has
            # the side effect of initializing the test database.
            cursor = self.connection.cursor()  # NOQA
            return self.database_name

    return DBCreation(connection)

########NEW FILE########
__FILENAME__ = db
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Database manipulations

Dynamically identifies the correct database to use for the current domain
"""
from pandora import box
from django.utils import simplejson as json
import UserDict

from os import path

FILE_ROOT = path.abspath(path.dirname(__file__))

HARDTREE_DB_SETTINGS_FILE = path.join(FILE_ROOT, 'dbsettings.json')
NO_DEFAULT = False


class DatabaseNotFound(Exception):
    pass


class DatabaseDict(UserDict.DictMixin, dict):

    """A dictionary which applies an arbitrary key-altering function before accessing the keys"""

    def _ensure_defaults(self):
        for db in self.values():
            db.setdefault('ENGINE', 'django.db.backends.dummy')
            if db['ENGINE'] == 'django.db.backends.' or not db['ENGINE']:
                db['ENGINE'] = 'django.db.backends.dummy'
            db.setdefault('OPTIONS', {})
            db.setdefault('TEST_CHARSET', None)
            db.setdefault('TEST_COLLATION', None)
            db.setdefault('TEST_NAME', None)
            db.setdefault('TEST_MIRROR', None)
            db.setdefault('TIME_ZONE', 'UTC0')
            for setting in ('NAME', 'USER', 'PASSWORD', 'HOST', 'PORT'):
                db.setdefault(setting, '')

    def __init__(self, *args, **kwargs):
        self._load_databases(*args, **kwargs)

    def _load_databases(self, *args, **kwargs):
        dbfile = open(HARDTREE_DB_SETTINGS_FILE, 'r')
        self.store = json.load(dbfile)
        self.update(dict(*args, **kwargs))  # use the free update to set keys
        self._ensure_defaults()

    def _save_databases(self):
        f = open(HARDTREE_DB_SETTINGS_FILE, 'w')
        json.dump(self.store, f)
        f.close()

    def __getitem__(self, key):
        try:
            return self.store[key]
        except KeyError:
            self._load_databases()
            try:
                return self.store[key]
            except KeyError:
                try:
                    if NO_DEFAULT:
                        raise DatabaseNotFound(
                            'No database found for %s' % key)
                    return self.store['default']
                except KeyError:
                    raise RuntimeError(
                        'Default database is not specified in the config file and the current database is unavailable')

    def __setitem__(self, key, value):
        self.store[key] = value
        self._save_databases()

    def __delitem__(self, key):
        del self.store[key]
        self._save_databases()

    def __iter__(self):
        return iter(self.store)

    def __len__(self):
        return len(self.store)


class DBRouter(object):

    """A router to control all database operations and dynamically select the correct database"""

    def _get_current_database(self):
        "Returns the database that should be used for the current request"
        if 'request' in box and not 'CURRENT_DATABASE_NAME' in box:
            current_db = box['request'].get_host().split('.')[0]
        else:
            current_db = box.get('CURRENT_DATABASE_NAME', 'default')
        return current_db

    def db_for_read(self, model, **hints):
        "Point all operations to the current database"
        if hints.has_key('instance'):
            return hints['instance']._state.db
        return self._get_current_database()

    def db_for_write(self, model, **hints):
        "Point all operations to the current database"
        return self._get_current_database()

    def allow_relation(self, obj1, obj2, **hints):
        "Allow any relation"
        return True

    def allow_syncdb(self, db, model):
        "Allow syncdb"
        return True

########NEW FILE########
__FILENAME__ = decorators
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Hardtree Core decorators for views
"""

from django.http import HttpResponseRedirect, HttpResponse, Http404
from django.core.urlresolvers import reverse, NoReverseMatch
from treeio.core.conf import settings
from django.utils.html import escape
from jinja2.loaders import TemplateNotFound
from treeio.core.models import Module
from treeio.core.rss import verify_secret_key
import json
import re


def treeio_login_required(f):
    """ Check that the user has write access to the treeio.core module """

    def wrap(request, *args, **kwargs):
        "Wrap"
        if request.user.is_authenticated():
            user = request.user.get_profile()
            user_modules = user.get_perspective().get_modules()
            all_modules = Module.objects.all()
            active = None
            for module in all_modules:
                try:
                    import_name = module.name + "." + \
                        settings.HARDTREE_MODULE_IDENTIFIER
                    hmodule = __import__(
                        import_name, fromlist=[str(module.name)])
                    urls = hmodule.URL_PATTERNS
                    for regexp in urls:
                        if re.match(regexp, request.path):
                            active = module
                except ImportError:
                    pass
                except AttributeError:
                    pass
            if active:
                if active in user_modules:
                    if user.has_permission(active):
                        return f(request, *args, **kwargs)
                    else:
                        if request.path[:3] == '/m/':
                            return HttpResponseRedirect('/m/user/denied')
                        return HttpResponseRedirect('/user/denied')
                else:
                    if request.path[:3] == '/m/':
                        return HttpResponseRedirect('/m/user/denied')
                    return HttpResponseRedirect('/user/denied')
            else:
                return f(request, *args, **kwargs)
        else:
            if request.path[:3] == '/m/':
                return HttpResponseRedirect('/m/accounts/login')
            if 'response_format' in kwargs and kwargs['response_format'] == 'rss':
                if 'secret' in request.GET and verify_secret_key(request):
                    return f(request, *args, **kwargs)
            return HttpResponseRedirect('/accounts/login')

    wrap.__doc__ = f.__doc__
    wrap.__name__ = f.__name__

    return wrap


def module_admin_required(module_name=None):
    """ Check that the user has write access to the treeio.core module """

    if not module_name:
        module_name = 'treeio.core'

    def wrap(f):
        "Wrap"
        def wrapped_f(request, *args, **kwargs):
            "Wrapped"

            if request.user.get_profile().is_admin(module_name):
                return f(request, *args, **kwargs)
            else:
                return HttpResponseRedirect(reverse('user_denied'))

        wrapped_f.__doc__ = f.__doc__
        wrapped_f.__name__ = f.__name__

        return wrapped_f

    return wrap


def _is_full_redirect(redirect_url):
    "Returns True if this page requires full reload with AJAX enabled"
    redirect_views = getattr(
        settings, 'HARDTREE_AJAX_RELOAD_ON_REDIRECT', ['user_login'])
    for view in redirect_views:
        url = ''
        try:
            url = reverse(view)
        except NoReverseMatch:
            pass
        if url and url == redirect_url:
            return True
    return False


def handle_response_format(f):
    """ Handle response format for a view """

    def wrap(request, *args, **kwargs):
        "Wrap"
        try:
            if 'response_format' in kwargs:
                response_format = kwargs['response_format']
                if not response_format:
                    response_format = 'html'
                    kwargs['response_format'] = response_format

                response = f(request, *args, **kwargs)
                if response_format == 'ajax':
                    if response.__class__ == HttpResponseRedirect:
                        location = response['Location']
                        if not _is_full_redirect(location):
                            response = HttpResponse(json.dumps({'redirect': location}),
                                                    mimetype=settings.HARDTREE_RESPONSE_FORMATS['ajax'])
                        else:
                            if '.ajax' in location:
                                location = str(location).replace('.ajax', '')
                            response = HttpResponse(json.dumps({'redirect_out': location}),
                                                    mimetype=settings.HARDTREE_RESPONSE_FORMATS['ajax'])
                    elif hasattr(request, 'redirect'):
                        location = request.redirect
                        response = HttpResponse(json.dumps({'redirect': location}),
                                                mimetype=settings.HARDTREE_RESPONSE_FORMATS['ajax'])
                    elif 'Content-Disposition' in response and not response['Content-Type'] in settings.HARDTREE_RESPONSE_FORMATS.values():
                        location = request.get_full_path()
                        if '.ajax' in location:
                            location = str(location).replace('.ajax', '')
                        response = HttpResponse(json.dumps({'redirect_out': location}),
                                                mimetype=settings.HARDTREE_RESPONSE_FORMATS['ajax'])

                return response
            else:
                return f(request, *args, **kwargs)
        except TemplateNotFound:
            response_format = None
            if 'response_format' in kwargs:
                response_format = kwargs['response_format']
            if not response_format:
                response_format = 'html'
                kwargs['response_format'] = response_format
            if settings.DEBUG:
                raise
            raise Http404(
                'This page is not available in ' + response_format.upper() + ' format')

    wrap.__doc__ = f.__doc__
    wrap.__name__ = f.__name__

    return wrap


# Forms pre-processing

from django.forms.forms import BoundField


def add_required_label_tag(original_function):
    """Adds the 'required' CSS class and an asterisks to required field labels."""

    def required_label_tag(self, contents=None, attrs=None):
        "Required label tag"
        contents = contents or escape(self.label)
        if self.field.required:
            if not self.label.endswith(" *"):
                self.label += " *"
                contents += " *"
            attrs = {'class': 'required'}
        return original_function(self, contents, attrs)
    return required_label_tag


def preprocess_form():
    "Add Asterisk To Field Labels"
    BoundField.label_tag = add_required_label_tag(BoundField.label_tag)

########NEW FILE########
__FILENAME__ = domains
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Utilities to deal with multitenancy within a single Hardtree
"""
from django.conf import settings
from treeio.core.models import ConfigSetting
from pandora import box


def setup_domain(domain):
    box['CURRENT_DOMAIN'] = domain
    box['CURRENT_DATABASE_NAME'] = domain

    word = getattr(settings, 'HARDTREE_MULTITENANCY_REPLACE_WORD', 'seed')
    box['STATIC_DOC_ROOT'] = getattr(
        settings, 'STATIC_DOC_ROOT', './static').replace(word, domain)
    if hasattr(settings, 'MEDIA_ROOT_SEED'):
        box['MEDIA_ROOT'] = getattr(
            settings, 'MEDIA_ROOT_SEED').replace(word, domain)
    else:
        box['MEDIA_ROOT'] = getattr(
            settings, 'MEDIA_ROOT', './static/media/').replace(word, domain)

    #box['TEMPLATE_DIRS'] = (dir.replace(word, domain) for dir in settings.TEMPLATE_DIRS)

    #box['JOHNNY_MIDDLEWARE_KEY_PREFIX'] = getattr(settings, 'JOHNNY_MIDDLEWARE_KEY_PREFIX', 'jc_treeio_seed').replace(word, domain)

    box['WHOOSH_INDEX'] = getattr(
        settings, 'WHOOSH_INDEX', '/srv/vhosts/treeio.com/subdomains/seed/treeio/storage/search').replace(word, domain)

    box['WKPATH'] = getattr(
        settings, 'WKPATH', '/srv/vhosts/treeio.com/treeio/bin/wkhtmltopdf').replace(word, domain)
    box['WKCWD'] = getattr(
        settings, 'WKCWD', '/srv/vhosts/treeio.com/subdomains/seed/treeio/').replace(word, domain)

    for setting in ConfigSetting.objects.all():
        box[setting.name] = setting.loads()
    return box


def setup_domain_database(domain, load_initial=False):
    #from treeio.core.db.creation import DatabaseCreation
    pass
    #dc = DatabaseCreation(domain)
    # dc.create_db(load_initial)
    # dc.connection.close()

########NEW FILE########
__FILENAME__ = forms
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core module forms
"""

import os
import sys
from django import forms
from django.db import router
from django.core.exceptions import ValidationError
from django.core.urlresolvers import reverse
from treeio.core.models import Object
from captcha.fields import CaptchaField
from django.utils.translation import ugettext as _
from treeio.core.conf import settings
from django.db.models import Q
import django.contrib.auth.models as django_auth
from jinja2.filters import do_striptags, do_truncate
from treeio.core.models import Location, User, Widget, Tag, ConfigSetting
from treeio.core.mail import EmailPassword
from treeio.identities.models import Contact, ContactType, ContactValue


class PermissionForm(forms.ModelForm):

    "Permission Form"

    def __init__(self, *args, **kwargs):
        "Prepare form"
        super(PermissionForm, self).__init__(*args, **kwargs)

        self.fields['read_access'].help_text = ""
        self.fields['read_access'].required = False
        self.fields['read_access'].widget.attrs.update({'class': 'multicomplete',
                                                        'callback': reverse('identities_ajax_access_lookup')})

        self.fields['full_access'].help_text = ""
        self.fields['full_access'].required = False
        self.fields['full_access'].widget.attrs.update({'class': 'multicomplete',
                                                        'callback': reverse('identities_ajax_access_lookup')})

    class Meta:

        "Permission Form"
        model = Object
        fields = ('read_access', 'full_access')


class SubscribeForm(forms.Form):

    "Subscribe Form"

    subscriber = forms.ModelChoiceField(queryset=User.objects.all())

    def __init__(self, instance, *args, **kwargs):
        "Prepare form"
        subscriptions = instance.subscribers.all()

        super(SubscribeForm, self).__init__(*args, **kwargs)
        self.subscriptions = subscriptions
        self.instance = instance

        self.fields['subscriber'].label = ""
        self.fields['subscriber'].queryset = User.objects.exclude(
            pk__in=subscriptions)
        self.fields['subscriber'].widget.attrs.update({'class': 'autocomplete',
                                                       'callback': reverse('identities_ajax_user_lookup')})

    def save(self):
        "Subscribe"

        user = self.cleaned_data['subscriber']
        object = self.instance

        if not user in self.subscriptions:
            object.subscribers.add(user)
        self.subscriptions = object.subscribers.all()

        return self.subscriptions


class ObjectLinksForm(forms.Form):

    """ Object Links Form """

    links = forms.ModelChoiceField(queryset=[], empty_label=None, label='')

    def __init__(self, user, response_format, instance, *args, **kwargs):

        super(ObjectLinksForm, self).__init__(*args, **kwargs)

        queryset = Object.filter_permitted(user, Object.objects)
        self.fields['links'].queryset = queryset

        if not 'ajax' in response_format:
            if instance:
                queryset = queryset.exclude(pk__in=instance.links.all())

            choices = []
            for obj in queryset:
                human_type = obj.get_human_type()
                name = do_truncate(
                    do_striptags(unicode(obj.object_name)), 20, True)
                if human_type:
                    name += u" (" + human_type + u")"
                choices.append((obj.id, name))
            self.fields['links'].choices = choices

        self.fields['links'].label = ""
        self.fields['links'].initial = ""
        self.fields['links'].widget.attrs.update({'class': 'autocomplete',
                                                  'callback': reverse('core_ajax_object_lookup')})


class TagsForm(forms.Form):

    tags = forms.ModelMultipleChoiceField(queryset=Tag.objects.all())

    def __init__(self, tags, *args, **kwargs):
        super(TagsForm, self).__init__(*args, **kwargs)

        self.fields['tags'].label = ""
        self.fields['tags'].initial = [tag.id for tag in tags]
        self.fields['tags'].required = False
        self.fields['tags'].widget.attrs.update({'class': 'multicomplete',
                                                 'callback': reverse('core_ajax_tag_lookup')})

    def save(self):
        return self.cleaned_data['tags']


class LoginForm(forms.Form):

    """ Login form"""

    captcha = CaptchaField(label=_("Enter text from the image"))

    def __init__(self, *args, **kwargs):
        super(LoginForm, self).__init__(*args, **kwargs)
        if settings.CAPTCHA_DISABLE:
            del self.fields['captcha']


class PasswordResetForm(forms.Form):

    "Password reset form"

    username = forms.CharField(label=("Username or E-mail"), max_length=75)

    def __init__(self, *args, **kwargs):
        super(PasswordResetForm, self).__init__(*args, **kwargs)
        self.fields['username'].label = _("Username or E-mail")

    def clean_username(self):
        """
        Validates that a user exists with the given e-mail address.
        """
        username = self.cleaned_data["username"]
        if '@' in username:
            # The user entered an email, so try to log them in by e-mail
            emails = ContactValue.objects.filter(value=username,
                                                 field__field_type='email',
                                                 contact__trash=False,
                                                 contact__related_user__isnull=False)
            users = [email.contact.related_user.user for email in emails]
        else:
            users = User.objects.filter(user__username=username)
        if len(users) == 0:
            raise forms.ValidationError(
                _("Sorry, we don't know that user or e-mail."))
        else:
            username = users[0]
        return username

    def save(self):
        "Send e-mail"
        user = self.cleaned_data["username"]
        if user:
            toaddr = user.get_contact().get_email()
            if toaddr:
                password = user.generate_new_password()
                email = EmailPassword(toaddr, user.user.username, password)
                email.send_email()


class InvitationForm(forms.Form):

    """ Create account from Invitation form """

    invitation = None

    def __init__(self, invitation=None, *args, **kwargs):

        super(InvitationForm, self).__init__(*args, **kwargs)

        self.fields['username'] = forms.CharField(
            max_length=255, label=_("Username"))
        self.fields['name'] = forms.CharField(
            max_length=255, label=_("Your name"))
        self.fields['password'] = forms.CharField(max_length=255, label=_("Password"),
                                                  widget=forms.PasswordInput(render_value=False))
        self.fields['password_again'] = forms.CharField(max_length=255, label=_("Confirm Password"),
                                                        widget=forms.PasswordInput(render_value=False))

        self.invitation = invitation

    def clean_username(self):
        "Clean Name"
        data = self.cleaned_data['username']
        query = Q(name=data)
        existing = User.objects.filter(query)
        if existing:
            raise forms.ValidationError(
                _("User with username %s already exists.") % data)
        # Check Hardtree Subscription user limit
        user_limit = getattr(settings, 'HARDTREE_SUBSCRIPTION_USER_LIMIT', 0)
        if user_limit > 0:
            user_number = User.objects.filter(disabled=False).count()
            if user_number >= user_limit:
                raise forms.ValidationError(
                    _("Sorry, but your subscription does not allow more than %d users. You're currently at your limit.") % (user_limit))
        return data

    def clean_password_again(self):
        "Clean password again"
        password1 = self.cleaned_data['password']
        password2 = self.cleaned_data['password_again']
        if not password1 == password2:
            raise forms.ValidationError(_("Passwords do not match"))
        return password2

    def save(self, *args, **kwargs):
        "Form processor"

        profile = None

        if self.invitation:
            # Create DjangoUser
            django_user = django_auth.User(
                username=self.cleaned_data['username'], password='')
            django_user.set_password(self.cleaned_data['password'])
            django_user.save()

            # Crate profile
            try:
                profile = django_user.get_profile()
            except:
                profile = User()
                profile.user = django_user

            profile.name = django_user.username
            profile.default_group = self.invitation.default_group
            profile.save()

            # Create contact
            try:
                contact_type = ContactType.objects.get(
                    Q(name='Person') | Q(slug='person'))
            except:
                contact_type = ContactType.objects.all()[0]

            try:
                # Check if contact has already been created (e.g. by a signals
                contact = profile.get_contact()
                if not contact:
                    contact = Contact()
            except:
                contact = Contact()

            contact.name = self.cleaned_data['name']
            contact.contact_type = contact_type
            contact.related_user = profile
            contact.save()

            # Set email
            try:
                emailfield = contact_type.fields.filter(field_type='email')[0]
                email = ContactValue(
                    value=self.invitation.email, field=emailfield, contact=contact)
                email.save()
            except:
                pass

            # Add quick start widget
            widget = Widget(user=profile,
                            perspective=profile.get_perspective(),
                            module_name='treeio.core',
                            widget_name='widget_welcome')
            widget.save()

        return profile


class LocationForm(forms.ModelForm):

    """ Item location form """

    def __init__(self, user, location_id, *args, **kwargs):
        super(LocationForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")

        self.fields['parent'].label = _("Parent")
        self.fields['parent'].queryset = Object.filter_permitted(
            user, Location.objects, mode='x')
        if location_id:
            self.fields['parent'].initial = location_id

    class Meta:

        "Location Form"
        model = Location
        fields = ('name', 'parent')


class SqlSettingsForm(forms.Form):
    sql_engine = forms.ChoiceField(choices=(("postgresql", _('PostgreSQL'),), ("postgresql_psycopg2", _("Psycopg")),
                                            ("sqlite3", _("SQLite")), ("mysql", _('MySql')), ("oracle", _("Oracle"))))
    sql_database = forms.CharField(max_length=256)
    sql_user = forms.CharField(max_length=30)
    sql_password = forms.CharField(
        max_length=128, required=False, widget=forms.PasswordInput)

    def clean_sql_engine(self):
        engine = self.cleaned_data['sql_engine']
        return "django.db.backends.%s" % engine

    def create_database(self):
        if not self._errors:
            from django.db import connections
            from django.core.exceptions import ImproperlyConfigured
            from treeio.core.domains import setup_domain_database
            database = {
                'ENGINE': self.cleaned_data['sql_engine'],
                'NAME': self.cleaned_data['sql_database'],
                'USER': self.cleaned_data['sql_user'],
                'PASSWORD': self.cleaned_data['sql_password'],
            }
            # creates database
            settings.DATABASES['treeio_new_db'] = database
            try:
                setup_domain_database('treeio_new_db', True)
            except ImproperlyConfigured as exc:
                self._errors['sql_engine'] = self.error_class(
                    [_("Can't connect to engine. Error is ") + exc.message])
                del self.cleaned_data['sql_engine']
            except Exception as exc:
                del connections._connections['treeio_new_db']
                raise ValidationError(
                    _("Can't create database. SQL error is") + ' %s' % exc)
            finally:
                del settings.DATABASES['treeio_new_db']

            # save database settings
            settings.DATABASES[router.db_for_read(ConfigSetting)] = database
            connections._connections.clear()
            if not getattr(settings, 'HARDTREE_MULTITENANCY', False):
                settings_filepath = sys.modules[
                    os.environ['DJANGO_SETTINGS_MODULE']].__file__
                if settings_filepath.endswith('.pyc'):
                    settings_filepath = settings_filepath[:-1]
                with open(settings_filepath, 'r') as fl:
                    lines = fl.readlines()
                with open(settings_filepath, 'w') as fl:
                    lines = iter(lines)
                    for line in lines:
                        if 'DATABASES' not in line:
                            fl.write(line)
                        else:
                            fl.write('DATABASES = ')
                            break
                    fl.write(repr(settings.DATABASES))
                    fl.write('\n\n')
                    for line in lines:
                        if '=' in line:
                            fl.write(line)
                            break
                    for line in lines:
                        fl.write(line)

########NEW FILE########
__FILENAME__ = hmodule
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core: Hardtree module definition
"""

PROPERTIES = {
    'title': 'Administration',
    'details': 'Core Administration',
    'url': '/admin/',
    'system': True,
    'type': 'user',
}

URL_PATTERNS = [
    '^/admin/',
]

#from treeio.core.cron import email_reply
#CRON = [email_reply, ]
CRON = []

########NEW FILE########
__FILENAME__ = mail
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core Mail Framework
"""
from treeio.core.conf import settings

import re
import time
import base64
import smtplib
import imaplib
import email
import poplib
from datetime import datetime

from email.MIMEText import MIMEText
from email.header import decode_header
from email.MIMEMultipart import MIMEMultipart

from threading import Thread
from django.utils.encoding import smart_unicode
from django.utils.translation import ugettext as _
from django.template.defaultfilters import removetags

EMAIL_SERVER = getattr(settings, 'EMAIL_SERVER', '127.0.0.1')
IMAP_SERVER = getattr(settings, 'IMAP_SERVER', '')
EMAIL_USERNAME = getattr(settings, 'EMAIL_USERNAME', None)
EMAIL_PASSWORD = getattr(settings, 'EMAIL_PASSWORD', None)
EMAIL_FROM = getattr(settings, 'EMAIL_FROM', 'noreply@tree.io')
DEFAULT_SIGNATURE = getattr(settings, 'DEFAULT_SIGNATURE', '')


class BaseEmail(Thread):

    "Generic e-mail class to send any emails"

    def __init__(self, server, username, password, fromaddr,
                 toaddr, subject, body, signature=None, html=None,
                 port=None, ssl=False):
        Thread.__init__(self)
        self.server = server
        self.port = port
        self.ssl = ssl
        self.username = username
        self.password = password
        self.toaddr = toaddr
        self.fromaddr = fromaddr
        self.subject = subject
        self.body = body
        self.signature = signature
        self.html = html
        self.multipart = self.body and self.html

    def run(self):
        "Run"
        self.process_email()

    def send_email(self):
        "Send email"
        self.start()

    def get_smtp_port(self, server):
        "Returns appropriate SMTP port number depending on incoming server name and boolean ssl"
        # http://www.emailaddressmanager.com/tips/mail-settings.html

        port = 25  # default
        ssl = False

        if "gmail.com" in server or "googlemail.com" in server:
            port = 587
            ssl = False
        elif server == "plus.smtp.mail.yahoo.com":
            if hasattr(smtplib, 'SMTP_SSL'):
                port = 465
            ssl = True
        if server == "smtp.live.com" or server == "smtp.isp.netscape.com":
            ssl = True

        return port, ssl

    def process_email(self):
        "Create a message and send it"
        try:
            msg = MIMEMultipart('alternative')

            msg['From'] = self.fromaddr
            msg['To'] = self.toaddr
            msg['Subject'] = self.subject

            text = self.body
            html = self.html

            # adding signature
            if self.signature:
                text += self.signature

            # Record the MIME types of both parts - text/plain and text/html.
            part1 = MIMEText(text.encode('utf-8'), 'plain', 'utf-8')
            msg.attach(part1)

            if html:
                part2 = MIMEText(html.encode('utf-8'), 'html', 'utf-8')
                msg.attach(part2)

            if not self.port:
                self.port, self.ssl = self.get_smtp_port(self.server)

            if self.ssl and hasattr(smtplib, 'SMTP_SSL'):
                s = smtplib.SMTP_SSL(self.server, self.port)
            else:
                s = smtplib.SMTP(self.server, self.port)
            s.set_debuglevel(0)
            s.ehlo()
            try:
                s.starttls()
            except smtplib.SMTPException:
                pass
            s.ehlo()
            if self.username is not None:
                s.login(self.username, self.password)
            s.sendmail(self.fromaddr, self.toaddr, msg.as_string())
            s.close()
            return True
        except:
            if settings.DEBUG:
                raise
            else:
                import traceback
                import sys
                from treeio import core
                from django.core.mail import mail_admins
                exc_type, exc_value, exc_traceback = sys.exc_info()
                domain = getattr(settings, 'CURRENT_DOMAIN', 'default')
                subject = "Exception for %s: %s %s" % (
                    domain, unicode(exc_type), unicode(exc_value))
                body = subject + "\n\n"
                body += unicode(core.__file__) + "\n\n"
                body += u"Server: %s\n\n" % self.server
                body += u"Port: %s\n\n" % unicode(self.port)
                body += u"Username: %s\n\n" % self.username
                body += u"From: %s\n\n" % self.fromaddr
                body += u"To: %s\n\n" % self.toaddr
                for s in traceback.format_tb(exc_traceback):
                    body += s + '\n'
                mail_admins(subject, body)


class SystemEmail(BaseEmail):

    "E-mail class to send messages on behalf of Tree.io team"

    def __init__(self, toaddr, subject, body, signature=None, html=None):

        if not signature:
            signature = _(DEFAULT_SIGNATURE)

        BaseEmail.__init__(self, EMAIL_SERVER, EMAIL_USERNAME, EMAIL_PASSWORD, EMAIL_FROM,
                           toaddr, subject, body, signature, html)

#
# Specific email classes
#


class EmailInvitation(SystemEmail):

    "Email Invitation"

    invitation = None
    sender = None

    def __init__(self, invitation, sender, domain):
        self.invitation = invitation
        self.sender = sender
        self.domain = domain

        subject = '%s has invited you to Tree.io' % (self.sender)

        toaddr = self.invitation.email

        signature = """
\r\n
- %s""" % unicode(self.sender)

        body = """
Hi!
\r\n
I've invited you to Tree.io.
\r\n
Tree.io is a new online service that helps you manage your business online.
\r\n
Use this link to join me:
\r\n
http://%s/accounts/invitation/?email=%s&key=%s
        """ % (unicode(self.domain),
               unicode(self.invitation.email),
               unicode(self.invitation.key))

        super(EmailInvitation, self).__init__(toaddr, subject, body, signature)


class EmailPassword(SystemEmail):

    "Email Message"

    def __init__(self, toaddr, username, password):

        subject = "Password reset on Tree.io"

        body = """
Hello!
\r\n
You have requested a password reset for your Tree.io account.
\r\n
New password for: %s\r\n\r\n Password: %s\r\n\r\n
""" % (username, password)

        super(EmailPassword, self).__init__(toaddr, subject, body)


#
# Abstract email receiver
#

def intcmp(a, b):
    try:
        return cmp(int(a), int(b))
    except:
        return cmp(a, b)


class EmailReceiver(Thread):

    """EmailReceiver fetches email from imap and pop email servers.
       This class can be used only as parent. You should redefine
       the process_msg method.
    """

    def __init__(self, server_type, server_name, username, password, folder_name=None):
        Thread.__init__(self)
        self.incoming_server_type = server_type
        self.incoming_server_name = server_name
        self.incoming_server_username = username
        self.incoming_password = password
        self.folder_name = folder_name or getattr(
            settings, 'HARDTREE_MESSAGING_IMAP_DEFAULT_FOLDER_NAME', 'UNSEEN')

        default_timezone = settings.HARDTREE_SERVER_DEFAULT_TIMEZONE
        all_timezones = getattr(settings, 'HARDTREE_SERVER_TIMEZONE', [
                                (1, '(GMT-11:00) International Date Line West')])
        title = all_timezones[int(default_timezone)][1]
        GMT = title[4:10]  # with sign e.g. +06:00
        sign = GMT[0:1]  # + or -
        hours = int(GMT[1:3])  # e.g. 06
        mins = int(GMT[4:6])
        self.tzoffset = hours * 3600 + mins * 60
        if sign == "-":
            self.tzoffset = self.tzoffset * -1

    def run(self):
        "Run"
        self.get_emails()

    def get_pop_port(self):
        "Returns appropriate POP port number depending on incoming server name"

        port = 110  # default
        ssl = False

        if self.incoming_server_type == 'POP3-SSL':
            port = 995
            ssl = True

        return port, ssl

    def get_imap_port(self):
        "Returns appropriate IMAP port number depending on incoming server name"

        port = 143  # default
        ssl = False

        if self.incoming_server_type == 'IMAP-SSL':
            port = 993
            ssl = True

        return port, ssl

    def get_emails(self):
        "Fetches emails"

        if self.incoming_server_type == 'IMAP' or self.incoming_server_type == 'IMAP-SSL':

            HARDTREE_MESSAGING_IMAP_LIMIT = getattr(
                settings, 'HARDTREE_MESSAGING_IMAP_LIMIT', 100)
            # connect to the server
            port, ssl = self.get_imap_port()

            if ssl:
                M = imaplib.IMAP4_SSL(self.incoming_server_name, port)
            else:
                M = imaplib.IMAP4(self.incoming_server_name, port)
            M.login(self.incoming_server_username, self.incoming_password)
            M.select()

            msgnums = []
            try:
                # fetch mail from ALL or UNSEEN]
                typ, data = M.sort('REVERSE DATE', 'UTF-8', self.folder_name)
                msgnums = data[0].split() if data[0] else []
            except:
                # fetch mail from ALL or UNSEEN]
                typ, data = M.search(None, self.folder_name)
                msgnums = data[0].split() if data[0] else []
                msgnums = sorted(msgnums, cmp=intcmp, reverse=True)

            for num in msgnums[:HARDTREE_MESSAGING_IMAP_LIMIT]:
                resp, msg = M.fetch(num, '(RFC822)')
                mail = email.message_from_string(msg[0][1])
                self.process_mail(mail)
                if self.folder_name == 'UNSEEN':
                    M.store(num, '+FLAGS', '\\Seen')

            M.close()
            M.logout()

        if self.incoming_server_type == 'POP3' or self.incoming_server_type == 'POP3-SSL':

            HARDTREE_MESSAGING_POP3_LIMIT = getattr(
                settings, 'HARDTREE_MESSAGING_POP3_LIMIT', 100)
            # connect to the server
            port, ssl = self.get_pop_port()

            if ssl:
                M = poplib.POP3_SSL(self.incoming_server_name, port)
            else:
                M = poplib.POP3(self.incoming_server_name, port)
            M.user(self.incoming_server_username)
            M.pass_(self.incoming_password)

            numMessages = len(M.list()[1])

            # Select correct limit for range(limit, numMessages)
            if numMessages >= HARDTREE_MESSAGING_POP3_LIMIT:
                limit = numMessages - HARDTREE_MESSAGING_POP3_LIMIT
            else:
                limit = 0

            # select new emails
            for i in range(limit, numMessages):
                lines = M.retr(i)[1]
                mail = email.message_from_string("\n".join(lines))
                self.process_mail(mail)
            M.quit()

    def process_mail(self, mail):
        # process message
        body = None
        attachments = []

        if mail.is_multipart():
            text = None
            html = None
            for part in mail.walk():
                # multipart are just containers, so we skip them
                if part.get_content_maintype() == 'multipart':
                    continue

                if part.get_filename() and part.get('Content-Transfer-Encoding', '') == 'base64':
                    attachments.append(part)
                    continue

                if part.get_content_type() == 'text/plain':
                    text = part.get_payload(decode=True)

                if part.get_content_type() == 'text/html':
                    html = part.get_payload(decode=True)

            body = html if html else text
        else:
            body = mail.get_payload(decode=True)

        class MailAttrs:
            pass
        attrs = MailAttrs()
        attrs.subject, encoding = self.decode_subject(mail['subject'])
        # replace annoying characters
        attrs.body = self.decode(body, encoding)
        if not mail.is_multipart() and not mail.get_content_type().endswith('html'):
            attrs.body = attrs.body.replace('&', '&amp;').replace('<', '&lt;').replace(
                '>', '&gt;').replace('"', '&quot;').replace("'", '&#39;')
        attrs.body = self.parse_email_body(attrs.body)
        attrs.author_name, attrs.author_email = self.get_email_author(mail)

        attrs.email_date = None
        try:
            date_tuple = email.utils.parsedate_tz(mail['Date'])
            email_ts = time.mktime(
                date_tuple[:9]) - int(date_tuple[9]) + self.tzoffset
            attrs.email_date = datetime.fromtimestamp(email_ts)
        except:
            pass

        self.process_msg(mail, attrs, attachments)

    def process_msg(self, msg, attrs, attachments):
        raise NotImplementedError

    def decode(self, string, encoding):
        if encoding:
            return smart_unicode(string, encoding, errors='ignore')
        else:
            return self.make_unicode(string)

    def make_unicode(self, string):
        "Detects string encoding and make it unicode"

        utf8_detector = re.compile(r"""^(?:
            [\x09\x0A\x0D\x20-\x7E]            # ASCII
          | [\xC2-\xDF][\x80-\xBF]             # non-overlong 2-byte
          |  \xE0[\xA0-\xBF][\x80-\xBF]        # excluding overlongs
          | [\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}  # straight 3-byte
          |  \xED[\x80-\x9F][\x80-\xBF]        # excluding surrogates
          |  \xF0[\x90-\xBF][\x80-\xBF]{2}     # planes 1-3
          | [\xF1-\xF3][\x80-\xBF]{3}          # planes 4-15
          |  \xF4[\x80-\x8F][\x80-\xBF]{2}     # plane 16
         )*$""", re.X)

        cp1252_detector = re.compile(r'^(?:[\x80-\xBF])*$', re.X)
        xa4_detector = re.compile(r'^(?:\xA4)*$', re.X)

        try:
            if re.match(utf8_detector, string):
                return unicode(string, 'utf_8')
            if re.match(cp1252_detector, string):
                if re.match(xa4_detector, string):
                    return smart_unicode(string, 'iso8859_15')
                else:
                    return smart_unicode(string, 'cp1252')
            return smart_unicode(string, 'koi8-r', errors='ignore')
        except:
            return smart_unicode(string, 'utf-8', errors='ignore')

    def decode_subject(self, subject):
        "Decodes email subjects"
        if not subject:
            subject = 'No subject'
            encoding = None
        else:
            subject, encoding = decode_header(subject)[0]
            subject = self.decode(subject, encoding)
        return subject, encoding

    def decode_body(self, body):
        "Decodes Base64-encoded string"
        if body is None:
            body = 'No message'
        else:
            body = str(body)
            body = base64.b64decode(body)

        return body

    def parse_email_body(self, body):
        "Removes all the dangerous and useless staff"

        # Replace annoying characters
        body = body.replace('\r', '').replace('=\n', '').replace('=\n\r', '')
        body = body.replace('=20\n', '\n\n')

        HARDTREE_MESSAGING_UNSAFE_BLOCKS = getattr(settings, 'HARDTREE_MESSAGING_UNSAFE_BLOCKS',
                                                   ('head', 'object', 'embed', 'applet', 'noframes',
                                                    'noscript', 'noembed', 'iframe', 'frame', 'frameset'))

        # Strip unsafe tags
        tags_str = ' '.join(HARDTREE_MESSAGING_UNSAFE_BLOCKS)
        body = removetags(body, tags_str)

        # Remove multiple <br /> tags
        rules = [
            {r'\s*<br\s*/?>\s*': u'\n'}
        ]

        for rule in rules:
            for (k, v) in rule.items():
                regex = re.compile(k)
                body = regex.sub(v, body)

        # displaying messages correctly
        if body.startswith('<!DOCTYPE') or body.startswith('<html') or body.startswith('<meta'):
            body = body.replace('\n\n\n', '\n').replace(
                '\n\n', '\n').replace('>\n<', '><')
        elif not '<html' in body:
            body = body.replace('\n', '<br />\n')

        return body

    def get_email_author(self, msg):
        "Returns author's name and email if any"
        try:
            header_from = msg['From']
            splits = header_from.split('<', 1)
            name, email = splits if len(splits) == 2 else ('', header_from)
            email = email.split('>', 1)[0]
            if name:
                name, encoding = decode_header(name.strip(' "\''))[0]
                name = self.decode(name, encoding)
                name = name.strip(' \'"')
        except:
            email = name = None

        if not email:
            try:
                email = msg['Return-path']
                email.strip(' \'"<>')
            except Exception:
                email = None

        return name, email

########NEW FILE########
__FILENAME__ = installdb
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

from django.core.management.base import BaseCommand, CommandError
from treeio.core.conf import settings
import json
import subprocess
from os import path
import sys

PROJECT_ROOT = getattr(settings, 'PROJECT_ROOT')
HARDTREE_DB_SETTINGS_FILE = path.join(PROJECT_ROOT, 'core/db/dbsettings.json')


class Command(BaseCommand):
    args = ''
    help = 'Installs the database prompting the user for all details'

    def handle(self, *args, **options):

        initial_db = {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': './initial.db',
            'HOST': '',
            'USER': '',
            'PASSWORD': ''
        }

        db = {}
        db['ENGINE'] = raw_input(
            'Enter database engine <mysql,postgresql,postgresql_psycopg2,oracle,sqlite3> (defaults to sqlite3): ')
        if not db['ENGINE']:
            db['ENGINE'] = 'sqlite3'

        if db['ENGINE'] in ('mysql', 'postgresql', 'postgresql_psycopg2', 'oracle', 'sqlite3'):
            db['ENGINE'] = 'django.db.backends.' + db['ENGINE']
        else:
            raise CommandError('Unknown database engine: %s' % db['ENGINE'])

        if db['ENGINE'].endswith('sqlite3'):
            db['NAME'] = raw_input(
                'Enter database name (defaults to treeio.db): ')
            if not db['NAME']:
                db['NAME'] = 'treeio.db'

        if not db['ENGINE'].endswith('sqlite3'):
            db['NAME'] = raw_input(
                'Enter database name (defaults to treeio): ')
            if not db['NAME']:
                db['NAME'] = 'treeio'

            db['USER'] = raw_input('Database user (defaults to treeio): ')
            if not db['USER']:
                db['USER'] = 'treeio'

            db['PASSWORD'] = raw_input('Database password: ')

            db['HOST'] = raw_input('Hostname (empty for default): ')
            db['PORT'] = raw_input('Port (empty for default): ')

        self.stdout.write('\n-- Installing database...\n')
        self.stdout.flush()

        f = open(HARDTREE_DB_SETTINGS_FILE, 'w')
        json.dump({'default': db}, f)
        f.close()

        exit_code = subprocess.call(
            [sys.executable, 'manage.py', 'syncdb', '--all', '--noinput'])
        if not exit_code == 0:
            self.stdout.flush()
            f = open(HARDTREE_DB_SETTINGS_FILE, 'w')
            json.dump({'default': initial_db}, f)
            f.close()
            raise CommandError('Failed to install database.')

        exit_code = subprocess.call(
            [sys.executable, 'manage.py', 'migrate', '--all', '--fake', '--noinput', '--no-initial-data'])

        self.stdout.write(
            '\n-- Successfully installed database. \n-- You\'re ready to go!\n\n')

########NEW FILE########
__FILENAME__ = runcron
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Cron commands
"""
from django.core.management.base import BaseCommand
from django.conf import settings
from django.core.cache import cache
from core.domains import setup_domain
from optparse import make_option
import multiprocessing
import logging
import logging.handlers
import signal
import time
import sys

LOG_LEVELS = {'debug': logging.DEBUG,
              'info': logging.INFO,
              'warning': logging.WARNING,
              'error': logging.ERROR,
              'critical': logging.CRITICAL}

cronlogger = logging.getLogger('CronLogger')
cronlogger.setLevel(logging.DEBUG)


class CronJob(multiprocessing.Process):

    "Single Cron job"

    job = None
    database = 'default'
    priority = 5

    def __init__(self, job, database='default', priority=5, *args, **kwargs):
        super(CronJob, self).__init__(*args, **kwargs)
        self.job = job
        self.priority = priority
        self.database = database
        self._stopped = False

    def sigterm(self, *args, **kwargs):
        cronlogger = logging.getLogger('CronLogger')
        if self._stopped:
            cronlogger.critical('JOB - Terminated ' + unicode(self))
            sys.exit(1)
        else:
            self._stopped = True
            cronlogger.warning('JOB - Early shutdown ' + unicode(self))
            raise KeyboardInterrupt()

    def run(self):
        signal.signal(signal.SIGTERM, self.sigterm)
        setup_domain(self.database)
        cronlogger = logging.getLogger('CronLogger')
        cronlogger.debug('JOB - Starting ' + unicode(self))
        try:
            self.job()
        except KeyboardInterrupt:
            self._stopped = True
        except SystemExit:
            self._stopped = True
        except:
            import traceback
            from hardtree import core
            from django.core.mail import mail_admins
            exc_type, exc_value, exc_traceback = sys.exc_info()
            subject = "CRON Exception for " + \
                unicode(self) + ": " + unicode(exc_type) + \
                " " + unicode(exc_value)
            body = subject + "\n\n"
            body += unicode(core.__file__) + "\n\n"
            for s in traceback.format_tb(exc_traceback):
                body += s + '\n'
            cronlogger.error(subject + '\n' + body)
            mail_admins(subject, body)
        cronlogger.debug('JOB - Finished ' + unicode(self))

    def __repr__(self):
        return 'CronJob ' + unicode(self.database) + ': ' + unicode(self.job)

    def __unicode__(self):
        return self.__repr__()


class CronRunner():

    "Cron runner"

    pool = []
    queue = []
    jobs = []
    sleeptime = 60
    cycle = 1
    _stopped = False

    def __init__(self, databases=[], noloop=False, *args, **kwargs):
        "Capture all cron jobs"

        signal.signal(signal.SIGTERM, self.stop)

        self.databases = databases or []
        self.jobs = []
        self.sleeptime = getattr(settings, 'HARDTREE_CRON_PERIOD', 60)
        self.priority_high = getattr(
            settings, 'HARDTREE_CRON_HIGH_PRIORITY', 10)
        self.priority_low = getattr(settings, 'HARDTREE_CRON_LOW_PRIORITY', 3)
        self.qualify_high = getattr(settings, 'HARDTREE_CRON_QUALIFY_HIGH', 10)
        self.qualify_run = getattr(
            settings, 'HARDTREE_CRON_QUALIFY_RUN', 86400)
        self.poolsize = getattr(settings, 'HARDTREE_CRON_POOL_SIZE', 10)
        self.softkill = getattr(settings, 'HARDTREE_CRON_SOFT_KILL', 0)
        self.hardkill = getattr(settings, 'HARDTREE_CRON_HARD_KILL', -1)
        self.gracewait = getattr(settings, 'HARDTREE_CRON_GRACE_WAIT', 5)
        self.noloop = noloop

        for module in settings.INSTALLED_APPS:
            import_name = str(
                module) + "." + settings.HARDTREE_MODULE_IDENTIFIER
            try:
                hmodule = __import__(import_name, fromlist=[str(module)])
                self.jobs.extend(hmodule.CRON)
            except ImportError:
                pass
            except AttributeError:
                pass

        if not self.databases:
            self.databases = [db for db in settings.DATABASES]

        cronlogger.info('Starting cron...')
        cronlogger.debug('DATABASES: ' + unicode(self.databases))
        cronlogger.debug('CRON_PERIOD: ' + unicode(self.sleeptime))
        cronlogger.debug('CRON_HIGH_PRIORITY: ' + unicode(self.priority_high))
        cronlogger.debug('CRON_LOW_PRIORITY: ' + unicode(self.priority_low))
        cronlogger.debug('CRON_QUALIFY_HIGH: ' + unicode(self.qualify_high))
        cronlogger.debug('CRON_POOL_SIZE: ' + unicode(self.poolsize))
        cronlogger.debug('CRON_SOFT_KILL: ' + unicode(self.softkill))
        cronlogger.debug('CRON_HARD_KILL: ' + unicode(self.hardkill))
        cronlogger.debug('CRON_GRACE_WAIT: ' + unicode(self.gracewait))
        cronlogger.debug('CRON_NO_LOOP: ' + unicode(self.noloop))

    def add_jobs(self):
        "Adds all jobs to the queue"
        cronlogger.info(
            'Adding ' + unicode(len(self.jobs)) + ' jobs to the queue.')
        for db in self.databases:
            cronlogger.debug('ADDING JOBS FOR ' + unicode(db))
            cache_key = 'hardtree_' + db + '_last'
            last_accessed = cache.get(cache_key)
            if last_accessed:
                if last_accessed >= time.time() - int(self.qualify_run):
                    for job in self.jobs:
                        cron = CronJob(job, db, self.priority_low)
                        self.queue.append(cron)
                        cronlogger.debug('JOB ADDED ' + unicode(cron))
                else:
                    cronlogger.debug(
                        'JOB DOES NOT QUALIFY ' + unicode(db) + ': NOT USED in last ' + unicode(self.qualify_run))
            else:
                cronlogger.debug(
                    'JOB DOES NOT QUALIFY ' + unicode(db) + ': NO KEY IN cache')
        cronlogger.debug('Queue: ' + unicode(self.jobs))

    def start(self):
        "Start cron runner"
        self.add_jobs()
        try:
            while not self._stopped:
                if len(self.pool) < self.poolsize:
                    while len(self.queue) > 0 and len(self.pool) < self.poolsize:
                        cron = self.queue.pop()
                        self.pool.append(cron)
                        if cache.has_key('hardtree_%s_last' % (cron.database)):
                            last_accessed = cache.get(
                                'hardtree_%s_last' % (cron.database))
                            if last_accessed > (time.time() - int(self.qualify_high)):
                                cron.priority = self.priority_high
                                cronlogger.debug(
                                    'HIGH PRIORITY set to ' + unicode(cron))
                        cron.start()
                if len(self.queue) == 0:
                    cronlogger.info(
                        'Cron cycle ' + unicode(self.cycle) + ' completed.')
                    self.cycle += 1
                    if self.noloop:
                        self._stopped = True
                    else:
                        self.add_jobs()
                        time.sleep(self.sleeptime)
                cronlogger.debug("POOL SIZE: " + unicode(len(self.pool)))
                for cron in self.pool:
                    cronlogger.debug("POOL JOB: " + unicode(cron) + ', PRIORITY ' +
                                     unicode(cron.priority) + ', ACTIVE: ' + unicode(cron.is_alive()))
                    if not cron.is_alive():
                        self.pool.remove(cron)
                        continue
                    if cron.priority == self.softkill:
                        cron.terminate()
                    elif cron.priority <= self.hardkill:
                        cron.terminate()
                    cron.priority -= 1
                time.sleep(self.sleeptime)
        except KeyboardInterrupt:
            self.stop()

    def stop(self, *args, **kwargs):
        cronlogger.info('Stopping...')
        self._stopped = True
        for cron in self.pool:
            while cron.is_alive():
                cron.terminate()
                time.sleep(self.gracewait)
        cronlogger.debug('Stopped.')
        sys.exit(0)


class Command(BaseCommand):
    args = '[database database ...]'
    help = 'Starts cron runner'
    option_list = BaseCommand.option_list + (
        make_option('-l', '--logfile',
                    action='store',
                    dest='logfile',
                    default='/tmp/hardtree-cron.log',
                    help='Cron log file'
                    ),
        make_option('-d', '--loglevel',
                    type='choice',
                    action='store',
                    dest='loglevel',
                    default='info',
                    choices=[i for i in LOG_LEVELS],
                    help='Logging level'
                    ),
        make_option('-n', '--noloop',
                    action='store_true',
                    dest='noloop',
                    default=False,
                    help='Exit after all jobs are finished'
                    )

    )

    def handle(self, *args, **options):
        loghandler = logging.handlers.RotatingFileHandler(
            options.get('logfile'), maxBytes=100 * 1024 * 1024, backupCount=5)
        formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s")
        loghandler.setFormatter(formatter)
        loghandler.setLevel(LOG_LEVELS[options.get('loglevel')])
        cronlogger.setLevel(LOG_LEVELS[options.get('loglevel')])
        cronlogger.addHandler(loghandler)
        self.runner = CronRunner(args, noloop=options.get('noloop'))
        self.runner.start()

########NEW FILE########
__FILENAME__ = chat
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# -*- coding:utf-8 -*-

import json
from time import sleep
from django.http import HttpResponse, HttpRequest
from treeio.core.conf import settings
import threading
from datetime import datetime
from time import strftime
from hashlib import md5
import sys
from django.core.cache import cache
import cPickle
from django.contrib.messages.storage import default_storage


def get_key(postfix=""):
    """
    Return key for memcached
    :param postfix: postfix key
    :type postfix: basestring
    """
    domain = getattr(settings, 'CURRENT_DOMAIN', 'default')
    key = "treeio_%s_chat_%s" % (domain, postfix)
    return key


def create_lock(key):
    try:
        while True:
            if cache.add(key + '_lock', '1', 10):  # lifetime lock 10 seconds
                break
        return True
    except:
        print "Error: ", sys.exc_info()
        return False


def delete_lock(key):
    cache.delete(key + '_lock')


def set_memcached(key, obj, lock=True):
    """
    Serialization object and add his in memcached
    """
    if lock:
        if create_lock(key):
            # 60 sec * 60 min * 24 hour * 30 day = 2 592 000 sec
            cache.set(key, cPickle.dumps(obj), 2592000)
            delete_lock(key)
    else:
        cache.set(key, cPickle.dumps(obj), 2592000)


def get_memcached(key):
    """
    Return deserialize object from memcached
    """
    data = cache.get(key)
    if not data:
        set_memcached(key, {})
    obj = cPickle.loads(cache.get(key))
    return obj


def get_notifications(user):
    """
    Return list notifications
    :param user: object user
    """
    notifications = []
    try:
        user.id
    except:
        return []
    try:
        if not getattr(settings, 'HARDTREE_ALLOW_GRITTER_NOTIFICATIONS', False):
            return notifications
        request = HttpRequest()
        request.user = user
        storage = default_storage(request)
        for msg in storage._get()[0]:
            notifications.append({'message': msg.message,
                                  'tags': msg._get_tags()})
        storage._store(None)
    except:
        pass
    return notifications


def get_user_profile(user):
    """
    return user profile
    """
    try:
        listeners = get_memcached(get_key("listeners"))
        return listeners[user]["profile"]
    except:
        return user


def update_user(user, location):
    """
    update location and the last time request Users
    :param user: object user
    :param location: location user on site
    :type location: basestring
    """
    try:
        listeners = get_memcached(get_key("listeners"))
        _user_profile = str(user.get_profile())
        _user = str(user)
        listeners[_user] = {
            "datetime": datetime.now(), "locations": location, "profile": _user_profile}
        set_memcached(get_key("listeners"), listeners)
    except:
        print "Error: ", sys.exc_info()


def remove_user(id, user):
    """
    Remove user from conference
    :param id: ID conference
    :type id: basestring
    :type user: basestring
    """
    conferences = get_memcached(get_key("conferences"))
    if verification_user(id, user):
        del conferences[id]["users"][user]
        set_memcached(get_key("conferences"), conferences)
    return get_new_message_for_user(user)


def verification_user(id, user):
    """
    Verification user in conference
    return True if the user is present in conference, else return False
    :param id: ID conference
    :type id: basestring
    :type user: basestring
    """
    conferences = get_memcached(get_key("conferences"))
    if not user in conferences[id]["users"].keys():
        return False
    return True


def checking_conference(id_conference):
    """
    Checking for the existence of the conference
    :param id_conference: ID conference
    :type id_conference: basestring
    """
    conferences = get_memcached(get_key("conferences"))
    if id_conference in conferences.keys():
        return True
    return False


def is_owner_user(id, user):
    """
    Checks whether user is owner of conferences
    :param id: ID conference
    :type id: basestring
    :type user: basestring
    """
    conferences = get_memcached(get_key("conferences"))
    if conferences[id]["info"]["creator"] == user:
        return True
    return False


def exit_from_conference(id, user):
    """
    Remove user from conference if user exited from conference
    :param id: ID conference
    :type id: basestring
    :type user: basestring
    """
    if checking_conference(id):
        if verification_user(id, user):
            conferences = get_memcached(get_key("conferences"))
            if is_owner_user(id, user):
                delete_conference(id, user)
            del conferences[id]["users"][user]
            set_memcached(get_key("conferences"), conferences)
    return get_new_message_for_user(user)


def delete_conference(id, user):
    """
    Delete conference (if user is owner conference)
    :param id: ID conference
    :type id: basestring
    :type user: basestring
    """
    if is_owner_user(id, user):
        conferences = get_memcached(get_key("conferences"))
        del conferences[id]
        set_memcached(get_key("conferences"), conferences)
    return get_new_message_for_user(user)


def remove_users_in_conference(id, user, users):
    """
    Remove users from conference (if user is owner conference)
    :param id: ID conference
    :type id: basestring
    :type user: basestring
    :type users: baselist
    :param users: List of users to remove from conferences
    """
    if checking_conference(id) and is_owner_user(id, user):
        conferences = get_memcached(get_key("conferences"))
        for val in users:
            del conferences[id]["users"][val]
        set_memcached(get_key("conferences"), conferences)
    return get_new_message_for_user(user)


def add_users_in_conference(id, user, users):
    """
    Add users in conference (if user is owner conference)
    :param id: ID conference
    :type id: basestring
    :type user: basestring
    :type users: baselist
    :param users: List of users to add in conference
    """
    if checking_conference(id):
        conferences = get_memcached(get_key("conferences"))
        for val in users:
            conferences[id]["users"][val] = {"messages": [], "locations": []}
        set_memcached(get_key("conferences"), conferences)
    return get_new_message_for_user(user)


def create_conference(user, users, title):
    """
    Create conference
    :type user: basestring
    :type users: baselist
    :param users: List of users to add in conference
    :type title: basestring
    """
    id = md5()
    id.update(str(datetime.now()))
    id = user + "_" + id.hexdigest()
    users.append(user)
    conferences = get_memcached(get_key("conferences"))
    if id in conferences.keys():
        return get_new_message_for_user(user)
    conferences[id] = {}
    conferences[id]["users"] = {}
    conferences[id]["info"] = {
        "creator": user,
        "title": title,
        "creation_date": datetime.now()
    }
    set_memcached(get_key("conferences"), conferences)
    add_users_in_conference(id, user, users)
    return get_new_message_for_user(user)


def get_active_conferences(user):
    """
    get_active_conferences(user) -> list active conferences
    Return active conferences
    :type user: basestring
    :return: list
    """
    conferences = get_memcached(get_key("conferences"))
    list_conferences = []
    for key in conferences.keys():
        if user in conferences[key]["users"].keys():
            list_conferences.append(
                dict(id=key,
                     title=conferences[key]["info"]["title"],
                     creator=conferences[key]["info"]["creator"],
                     creation_date=str(
                         conferences[key]["info"]["creation_date"]),
                     users=[dict(username=username, profile=get_user_profile(username)) for username in conferences[key]["users"].keys() if not username == user])
            )
    return list_conferences


def get_new_message_for_user(user, **kwargs):
    """
    get_new_message_for_user(user, **kwargs) -> HTTPResponse(json(new_data))
    Return HTTP response to new data
    :type user: basestring
    """
    def __update_data(_data):
        conferences = get_memcached(get_key("conferences"))
        for key in conferences.keys():
            if user in conferences[key]["users"].keys():
                try:
                    msg = conferences[key]["users"][user]["messages"]
                except:
                    msg = []
                if msg:
                    _data["new_data"].append({key: {"messages": msg}})
                    conferences[key]["users"][user]["messages"] = []
                    set_memcached(get_key("conferences"), conferences)
        notifications = get_notifications(kwargs["user_obj"])
        if notifications:
            _data["notifications"] = _data["notifications"] + notifications
        return _data

    def __get_new_data():
        listeners = get_memcached(get_key("listeners"))
        _new_data = {
            "users": [dict(name=key,
                           location=listeners[key]["locations"],
                           profile=listeners[key]["profile"]) for key in listeners.keys() if not key == str(user)],
            "new_data": [],
            "conferences": get_active_conferences(user),
            "notifications": get_notifications(kwargs["user_obj"])
        }
        return _new_data.copy()

    if not "flag" in kwargs.keys():
        kwargs["flag"] = None
    if not "long_polling" in kwargs.keys():
        kwargs["long_polling"] = False
    if "user_obj" in kwargs.keys() and "location" in kwargs.keys():
        _location = kwargs['location']
    else:
        kwargs["user_obj"] = None

    data = __get_new_data()

    if settings.CHAT_LONG_POLLING and kwargs["long_polling"]:

        out_time = 0
        while not data["new_data"] and out_time < settings.CHAT_TIMEOUT:

            if kwargs["user_obj"]:
                if _location:
                    update_user(kwargs["user_obj"], _location)

            out_time += 1

            _temp_data = __get_new_data()
            _temp_data = __update_data(_temp_data)

            if not _temp_data == data:
                data = _temp_data.copy()
                break

            if kwargs["flag"] == "connect":
                break

            if not _temp_data["new_data"]:
                sleep(settings.CHAT_TIME_SLEEP_NEWDATA)
            else:
                data = _temp_data.copy()

    data = json.dumps(data)
    return HttpResponse(data, mimetype='application/json', status=200)


def add_new_message(id, user, user_profile, text):
    """
    Add new message
    :param id: ID conference
    :type id: basestring
    :type user: basestring
    :type user_profile: basestring
    :type text: basestring
    """
    try:
        if not verification_user(id, user):
            return get_new_message_for_user(user)
        if checking_conference(id):
            conferences = get_memcached(get_key("conferences"))
            for key in conferences[id]["users"].keys():
                conferences[id]["users"][key]["messages"].append(
                    dict(user=user,
                         text=text,
                         time=strftime("%H:%M:%S"),
                         date=strftime("%Y-%m-%d"),
                         profile=user_profile)
                )
            set_memcached(get_key("conferences"), conferences)
    except:
        data = json.dumps(
            {"cmd": "Error", "data": {"msg": str(sys.exc_info())}})
        return HttpResponse(data, mimetype='application/json', status=200)

    return get_new_message_for_user(user)


def connect(user, location):
    update_user(user, location)
    # if first response, then long_polling = False
    return get_new_message_for_user(str(user).lower(), location=location, long_polling=False, user_obj=user)


def disconnect(user):
    listeners = get_memcached(get_key("listeners"))
    del listeners[user]
    set_memcached(get_key("listeners"), listeners)
    return HttpResponse(json.dumps({"cmd": "Disconnect"}), mimetype='application/json', status=200)


def cmd(message, user):
    """
    Handler AJAX query
    :param user: object user
    :param message: content POST
    :type message: basedict
    """
    try:
        user_obj = user
        user_profile = str(user.get_profile())
        user = str(user).lower()
        data = json.loads(message["json"])
    except:
        print "error: ", sys.exc_info()
        data = json.dumps(
            {"cmd": "Error", "data": {"msg": str(sys.exc_info())}})
        return HttpResponse(data, mimetype='application/json', status=200)

    try:

        update_user(user_obj, data['location'])

        if data['cmd'] == 'Connect':
            return connect(user_obj, data['location'])

        if data['cmd'] == 'Disconnect':
            return disconnect(user)

        if data['cmd'] == 'Get':
            return get_new_message_for_user(user, user_obj=user_obj, location=data['location'], long_polling=True)

        if data['cmd'] == 'Message':
            return add_new_message(data["data"]["id"], user, user_profile, data["data"]["text"])

        if data['cmd'] == 'Exit':
            return exit_from_conference(data["data"]["id"], user)

        if data['cmd'] == 'Delete':
            return delete_conference(data['data']['id'], user)

        if data['cmd'] == 'Remove':
            return remove_users_in_conference(data['data']['id'], user, data['data']['users'])

        if data['cmd'] == 'Add':
            return add_users_in_conference(data['data']['id'], user, data['data']['users'])

        if data['cmd'] == 'Create':
            return create_conference(user, data['data']['users'], data['data']['title'])

    except:
        print "Error: ", sys.exc_info()
        data = json.dumps(
            {"cmd": "Error", "data": {"msg": str(sys.exc_info())}})
        return HttpResponse(data, mimetype='application/json', status=200)

    return HttpResponse(json.dumps({"cmd": "Error", "data": {"msg": "unknown command"}}), mimetype='application/json', status=200)


class Search_Inactive_Users(threading.Thread):

    """
    Delete inactive users
    """

    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        while True:
            try:
                sleep(settings.CHAT_TIME_SLEEP_THREAD)
                listeners = get_memcached(get_key("listeners"))
                for user in listeners.keys():
                    time = datetime.now() - listeners[user]['datetime']
                    if time.seconds > settings.CHAT_TIMEOUT:
                        del listeners[user]
                set_memcached(get_key("listeners"), listeners)
            except:
                print "error: ", sys.exc_info()


class ChatAjaxMiddleware(object):

    def __init__(self, *args, **kwargs):
        if not settings.HARDTREE_CRON_DISABLED:
            Search_Inactive_Users().start()
            pass
        # noinspection PyArgumentList
        super(ChatAjaxMiddleware, self).__init__(*args, **kwargs)

    def process_request(self, request):

        if not request.META['PATH_INFO'] == '/chat':
            return

        if not request.user.is_authenticated():
            data = json.dumps(
                {"cmd": "Error", "data": "User is not authenticated"})
            response = HttpResponse(mimetype='application/json')
            response.write(data)
            return response

        if request.method == "POST":
            return cmd(request.POST, request.user)

        return

########NEW FILE########
__FILENAME__ = compress
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Compression middleware
"""
from django.utils.html import strip_spaces_between_tags as short
from treeio.core.conf import settings


def _minify_json(data):
    "Compress JSON"
    import json
    return json.dumps(json.loads(data))


class SpacelessMiddleware(object):

    "Spaceless Middleware"

    def process_response(self, request, response):
        "Process response"
        if 'text/html' in response['Content-Type']:
            response.content = short(response.content)
        if settings.HARDTREE_MINIFY_JSON and settings.HARDTREE_RESPONSE_FORMATS['json'] in response['Content-Type']:
            response.content = _minify_json(response.content)
        return response

########NEW FILE########
__FILENAME__ = cron
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Cron middleware
"""
from treeio.core.conf import settings
from threading import Thread
import time


class CronRunner(Thread):

    "Cron runner"

    jobs = []
    sleeptime = 60

    def __init__(self, *args, **kwargs):
        "Capture all cron_jobs"
        super(CronRunner, self).__init__(*args, **kwargs)

        self.jobs = []
        self.sleeptime = settings.HARDTREE_CRON_PERIOD

        for module in settings.INSTALLED_APPS:
            import_name = str(
                module) + "." + settings.HARDTREE_MODULE_IDENTIFIER
            try:
                hmodule = __import__(import_name, fromlist=[str(module)])
                self.jobs.extend(hmodule.CRON)
            except ImportError:
                pass
            except AttributeError:
                if settings.DEBUG:
                    pass

    def run(self):
        "Run cron"

        while True:
            for job in self.jobs:
                try:
                    job()
                except:
                    if settings.DEBUG:
                        raise
                    else:
                        import traceback
                        import sys
                        from treeio import core
                        from django.core.mail import mail_admins
                        exc_type, exc_value, exc_traceback = sys.exc_info()
                        subject = "Exception: " + \
                            unicode(exc_type) + " " + unicode(exc_value)
                        body = subject + "\n\n"
                        body += unicode(core.__file__) + "\n\n"
                        for s in traceback.format_tb(exc_traceback):
                            body += s + '\n'
                        mail_admins(subject, body)

            time.sleep(self.sleeptime)


class CronMiddleware(object):

    "Cron jobs Middleware"

    runner = None

    def __init__(self):
        if not getattr(settings, "HARDTREE_CRON_DISABLED", False):
            self.runner = CronRunner()
            self.runner.start()

########NEW FILE########
__FILENAME__ = domain
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Domain middleware: enables multi-tenancy in a single Tree.io process
"""
from treeio.core.domains import setup_domain, setup_domain_database
from treeio.core.db import DatabaseNotFound
from treeio.core.conf import settings
from django.http import HttpResponseRedirect
from django.db.utils import DatabaseError
from django.core.urlresolvers import reverse
from pandora import box


class DomainMiddleware():

    "Handles multiple domains within the same Django process"

    def process_request(self, request):
        "Identify the current domain and database, set up appropriate variables in the pandora box"

        domain = request.get_host().split('.')[0]
        try:
            setup_domain(domain)
        except DatabaseNotFound:
            evergreen_url = getattr(
                settings, 'EVERGREEN_BASE_URL', 'http://tree.io/')
            return HttpResponseRedirect(evergreen_url)
        except DatabaseError:
            from django.db import router
            from treeio.core.models import ConfigSetting
            setup_domain_database(router.db_for_read(ConfigSetting))
            return HttpResponseRedirect(reverse('database_setup'))
        box['request'] = request

    def process_exception(self, request, exception):
        if isinstance(exception, DatabaseNotFound):
            evergreen_url = getattr(
                settings, 'EVERGREEN_BASE_URL', 'http://tree.io/')
            return HttpResponseRedirect(evergreen_url)

########NEW FILE########
__FILENAME__ = modules
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Modules middleware: handles modular behavior of the system
"""

from treeio.core.conf import settings
from treeio.core.models import Module

# This must be fired after Django processes request
# i.e. after Django's own middleware has been fired


class ModuleDetect():

    "Handles Hardtree automatic modules detection"

    def process_request(self, request):
        "Process request"
        hmodules = dict()
        for module in settings.INSTALLED_APPS:
            import_name = str(
                module) + "." + settings.HARDTREE_MODULE_IDENTIFIER
            try:
                hmodule = __import__(import_name, fromlist=[str(module)])
                hmodules[str(module)] = hmodule.PROPERTIES
            except ImportError:
                pass
            except AttributeError:
                pass

        dbmodules = Module.objects.all()

        for dbmodule in dbmodules:
            if dbmodule.name not in hmodules:
                dbmodule.delete()
            else:
                differ = False
                hmodule = dbmodule.name
                if dbmodule.title != hmodules[hmodule]['title']:
                    dbmodule.title = hmodules[hmodule]['title']
                    differ = True
                if dbmodule.url != hmodules[hmodule]['url']:
                    dbmodule.url = hmodules[hmodule]['url']
                    differ = True
                if dbmodule.details != hmodules[hmodule]['details']:
                    dbmodule.details = hmodules[hmodule]['details']
                    differ = True
                if dbmodule.system != hmodules[hmodule]['system']:
                    dbmodule.system = hmodules[hmodule]['system']
                    differ = True
                if differ:
                    dbmodule.save()

        for hmodule in hmodules:
            dbmodule = None
            try:
                dbmodule = Module.objects.get(name=hmodule)
            except Module.DoesNotExist:
                pass
            except Module.MultipleObjectsReturned:
                # Broken database, delete all matching modules
                Module.objects.filter(name=hmodule).delete()
            if not dbmodule:
                dbmodule = Module(name=hmodule, title=hmodules[hmodule]['title'],
                                  url=hmodules[hmodule]['url'],
                                  details=hmodules[hmodule]['details'], system=hmodules[hmodule]['system'])
                dbmodule.save()
                dbmodule.set_default_user()

    def process_response(self, request, response):
        "Process response"

        if settings.QUERY_DEBUG:
            from django.db import connection
            totaltime = float(0)
            for q in connection.queries:
                totaltime += float(q['time'])
            if len(connection.queries) > 3:
                if settings.QUERY_DEBUG_FULL:
                    print "=== DB Queries:"
                    for q in connection.queries:
                        print q
                print "=== DB Query report:"
                print "---  Total time: " + str(totaltime)
                print "---  Total queries: " + str(len(connection.queries))
        return response

########NEW FILE########
__FILENAME__ = user
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
User middleware: performs user-specific request pre-processing
"""
import urllib
import urlparse

from django.db.models import signals
from django.utils.functional import curry
from django.core.urlresolvers import resolve
from django.contrib.auth import logout, login, authenticate
from django.http import HttpResponse, HttpResponseRedirect
from django.utils import translation
from treeio.core.models import Object, ModuleSetting, UpdateRecord
from treeio.core.views import ajax_popup
from treeio.core.conf import settings
from django.db import models
from django.core.cache import cache
import json
import time


class CommonMiddleware():

    "Set up Object notifications"

    objects = {}

    def process_request(self, request):
        "Process request"

        # check mobile:
        if getattr(request, 'mobile', False) and \
                not request.POST and \
                not '/m' in request.path[:2] and \
                not '/static' in request.path[:7]:

            if request.GET.get('nomobile', False):
                request.session['nomobile'] = True
            elif not 'nomobile' in request.session:
                return HttpResponseRedirect('/m' + request.path)

        if hasattr(request, 'user') and request.user.is_authenticated():

            domain = getattr(settings, 'CURRENT_DOMAIN', 'default')
            cache.set('treeio_%s_last' % (domain), time.time())
            if getattr(settings, 'HARDTREE_SUBSCRIPTION_BLOCKED', False) and not '/accounts' in request.path:
                return HttpResponseRedirect('/accounts/logout')

            user = None
            try:
                user = request.user.get_profile()
                self.objects[unicode(user.id)] = {}
            except Exception:
                pass

            if not user:
                logout(request)
                return HttpResponseRedirect('/')

            do_fresh_subscribers = curry(
                self.do_fresh_subscribers, user, request)
            send_notifications_on_save = curry(
                self.send_notifications_on_save, user, request)
            send_notifications_on_delete = curry(
                self.send_notifications_on_delete, user, request)
            send_notifications_on_m2m = curry(
                self.send_notifcations_on_m2m, user, request)

            signals.pre_save.connect(
                send_notifications_on_save, dispatch_uid=request, weak=False)
            signals.post_save.connect(
                do_fresh_subscribers, dispatch_uid=request, weak=False)
            signals.pre_delete.connect(
                send_notifications_on_delete, dispatch_uid=request, weak=False)
            signals.m2m_changed.connect(
                send_notifications_on_m2m, dispatch_uid=request, weak=False)

    def do_fresh_subscribers(self, user, request, sender, instance, created, **kwargs):
        "Adds current user to Subscribers of an Object on creation"
        auto_notify = getattr(instance, 'auto_notify', True)
        if auto_notify and created:
            if isinstance(instance, Object) and instance.is_searchable():
                instance.subscribers.add(user)
                try:
                    instance.create_notification('create', user)
                except:
                    pass

    def send_notifications_on_save(self, user, request, sender, instance, **kwargs):
        "Send notifications to subscribers of an Object on Object change"
        auto_notify = getattr(instance, 'auto_notify', True)
        if auto_notify and isinstance(instance, Object) and instance.id:
            try:
                instance.create_notification('update', user)
            except:
                pass
        if isinstance(instance, Object):
            process_timezone_field(user, instance)

    def send_notifications_on_delete(self, user, request, sender, instance, **kwargs):
        "Send notifications to subscribers of an Object on Object delete"
        auto_notify = getattr(instance, 'auto_notify', True)
        if auto_notify and isinstance(instance, Object) and instance.get_related_object():
            try:
                instance.create_notification('delete', user)
            except:
                pass
            instance.subscribers.clear()

    def send_notifcations_on_m2m(self, user, request, sender, instance, action, reverse, model, pk_set, **kwargs):
        "Send notification on changes ManyToMany field (needs to be handled separately due to Django design)"

        if isinstance(instance, Object):
            attr = sender._meta.object_name.split('_', 1)[1]
            if attr in settings.HARDTREE_OBJECT_BLACKLIST:
                return

            if action == "pre_clear" or action == "pre_remove":
                original = list(getattr(instance, attr).all())
                self.objects[unicode(user.id)].update(
                    {unicode(instance.id): original})
            elif action == "post_add" or action == "post_remove":
                updated = list(getattr(instance, attr).all())
                if unicode(user.id) in self.objects and unicode(instance.id) in self.objects[unicode(user.id)]:
                    original = self.objects[
                        unicode(user.id)][unicode(instance.id)]
                    if not original == updated:
                        try:
                            instance.create_notification(
                                'm2m', user, field=attr, original=original, updated=updated)
                        except:
                            pass
                    del self.objects[unicode(user.id)][unicode(instance.id)]
        elif isinstance(instance, UpdateRecord):
            attr = sender._meta.object_name.split('_', 1)[1]
            if action == "post_add" and attr == 'about':
                obj_query = model.objects.filter(pk__in=pk_set)
                subscribers = set()
                # Send notifications to author Contact's subscribers too
                if instance.author:
                    contact = instance.author.get_contact()
                    if contact:
                        subscribers.update(contact.subscribers.all())
                    subscribers.add(instance.author)
                for obj in obj_query:
                    # add object's subscribes to update record
                    subscribers.update(obj.subscribers.all())
                for subscriber in subscribers:
                    instance.recipients.add(subscriber)
                for obj in obj_query:
                    instance.notify_subscribers(obj, request=request)

    def process_response(self, request, response):
        "Process response"
        signals.pre_save.disconnect(dispatch_uid=request)
        signals.post_save.disconnect(dispatch_uid=request)
        signals.m2m_changed.disconnect(dispatch_uid=request)
        signals.pre_delete.disconnect(dispatch_uid=request)

        try:
            user = request.user.get_profile()
            self.objects[unicode[user.id]] = {}
        except:
            pass

        return response


class PopupMiddleware():

    "Tracks Object creation for popups"

    objects = {}

    def __init__(self):
        "Initialize objects"
        self.objects = {}

    def process_request(self, request):
        "Process request"

        view = None
        try:
            view, args, kwargs = resolve(request.path)
        except Exception:
            pass

        if view == ajax_popup:
            process_created_object = curry(
                self.process_created_object, request)
            signals.post_save.connect(
                process_created_object, dispatch_uid=request.user, weak=False)

    def process_created_object(self, request, sender, instance, created, **kwargs):
        "Store a newly created object and request during which it was created"
        if isinstance(instance, Object) and created and not instance.is_attached():
            self.objects.update(
                {unicode(instance.id): {'object': instance, 'request': request}})

    def process_response(self, request, response):
        "Process response"
        if not getattr(request, 'user', None) or not request.user.username:
            return response

        try:
            signals.post_save.disconnect(dispatch_uid=request.user)
        except AttributeError:
            pass

        view = None
        try:
            view, args, kwargs = resolve(request.path)
        except Exception:
            pass

        if view == ajax_popup and response.status_code == 302:
            for obj in self.objects:
                if self.objects[obj]['request'] == request:
                    hobject = self.objects[obj]['object']
                    content = json.loads(response.content)
                    content['popup'].update({'object': {'name': unicode(hobject),
                                                        'id': obj}})
                    response = HttpResponse(json.dumps(content),
                                            mimetype=settings.HARDTREE_RESPONSE_FORMATS['json'])
                    break

            content = json.loads(response.content)
            content['popup'].update({'redirect': True})
            response = HttpResponse(json.dumps(content),
                                    mimetype=settings.HARDTREE_RESPONSE_FORMATS['json'])

        return response


class LanguageMiddleware():

    "Automatically set chosen language"

    def process_request(self, request):
        "Set language for the current user"

        lang = getattr(settings, 'HARDTREE_LANGUAGES_DEFAULT', 'en')

        if request.user.username:
            try:
                user = request.user.get_profile()
                conf = ModuleSetting.get('language', user=user)[0]
                lang = conf.value
            except IndexError:
                pass
            except AttributeError:
                pass
        else:
            try:
                conf = ModuleSetting.get(
                    'language', user__isnull=True, strict=True)[0]
                lang = conf.value
            except IndexError:
                pass
        translation.activate(lang)
        request.session['django_language'] = lang


def process_timezone_field(user, instance):
    "Processes date and datetime fields according to the selected time zone"
    from datetime import date, datetime, timedelta

    default_timezone = settings.HARDTREE_SERVER_DEFAULT_TIMEZONE
    try:
        conf = ModuleSetting.get('default_timezone')[0]
        default_timezone = conf.value
    except Exception:
        pass

    try:
        conf = ModuleSetting.get('default_timezone', user=user)[0]
        default_timezone = conf.value
    except Exception:
        default_timezone = getattr(
            settings, 'HARDTREE_SERVER_TIMEZONE')[default_timezone][0]

    all_timezones = getattr(settings, 'HARDTREE_SERVER_TIMEZONE', [
                            (1, '(GMT-11:00) International Date Line West')])
    title = all_timezones[int(default_timezone)][1]
    GMT = title[4:10]  # with sign e.g. +06:00
    sign = GMT[0:1]  # + or -
    hours = int(GMT[1:3])  # e.g. 06
    mins = int(GMT[4:6])

    for field in instance.get_fields():
        if field.name not in getattr(settings, 'HARDTREE_TIMEZONE_BLACKLIST', []):
            if isinstance(field, models.DateTimeField) or \
                    isinstance(field, models.DateField):
                if getattr(instance, field.name):
                    cur_date = getattr(instance, field.name)
                    if sign == "-":
                        new_date = cur_date + \
                            timedelta(hours=hours, minutes=mins)
                    else:
                        new_date = cur_date - \
                            timedelta(hours=hours, minutes=mins)
                    setattr(instance, field.name, new_date)
            elif isinstance(field, models.TimeField):
                if getattr(instance, field.name):
                    datetime.combine(date.today(), getattr(
                        instance, field.name)) + timedelta(hours=hours, minutes=mins)


class SSLMiddleware(object):

    """ Keep protocol the same on redirects """

    def process_request(self, request):
        """ Revert to SSL/no SSL depending on settings """
        if getattr(settings, 'HARDTREE_SUBSCRIPTION_SSL_ENABLED', True):
            if getattr(settings, 'HARDTREE_SUBSCRIPTION_SSL_ENFORCE', False) and not request.is_secure():
                redirect_url = request.build_absolute_uri()
                return HttpResponseRedirect(redirect_url.replace('https://', 'http://'))
        else:
            if request.is_secure():
                redirect_url = request.build_absolute_uri()
                return HttpResponseRedirect(redirect_url.replace('https://', 'http://'))

    def process_response(self, request, response):
        """ Keep protocol """
        if getattr(settings, 'HARDTREE_SUBSCRIPTION_SSL_ENABLED', True):
            if response.status_code == 302:
                redirect_url = request.build_absolute_uri(response['Location'])
                if request.is_secure() or getattr(settings, 'HARDTREE_SUBSCRIPTION_SSL_ENFORCE', False):
                    response['Location'] = redirect_url.replace(
                        'http://', 'https://')
        return response


class AuthMiddleware(object):

    """ Log in by hash """

    def process_request(self, request):
        authkey = request.GET.get('authkey', '')
        user = authenticate(authkey=authkey)

        if user:
            login(request, user)
            url = request.build_absolute_uri()
            p = urlparse.urlparse(url)
            params = urlparse.parse_qs(p.query)
            del params['authkey']
            url = urlparse.urlunparse(
                (p.scheme, p.netloc, p.path, p.params, urllib.urlencode(params, doseq=True), p.fragment))
            return HttpResponseRedirect(url)

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding model 'Group'
        db.create_table('core_group', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('parent', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='child_set', null=True, to=orm['core.Group'])),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')
             (auto_now=True, blank=True)),
        ))
        db.send_create_signal('core', ['Group'])

        # Adding model 'User'
        db.create_table('core_user', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['auth.User'])),
            ('default_group', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='default_user_set', null=True, to=orm['core.Group'])),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')
             (auto_now=True, blank=True)),
        ))
        db.send_create_signal('core', ['User'])

        # Adding M2M table for field other_groups on 'User'
        db.create_table('core_user_other_groups', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('user', models.ForeignKey(orm['core.user'], null=False)),
            ('group', models.ForeignKey(orm['core.group'], null=False))
        ))
        db.create_unique('core_user_other_groups', ['user_id', 'group_id'])

        # Adding model 'Object'
        db.create_table('core_object', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['core.User'])),
            ('group', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['core.Group'])),
            ('object_name', self.gf('django.db.models.fields.CharField')
             (max_length=512, null=True, blank=True)),
            ('object_type', self.gf('django.db.models.fields.CharField')
             (max_length=512, null=True, blank=True)),
            ('trash', self.gf('django.db.models.fields.BooleanField')
             (default=False)),
            ('user_read', self.gf(
                'django.db.models.fields.BooleanField')(default=False)),
            ('user_write', self.gf(
                'django.db.models.fields.BooleanField')(default=False)),
            ('user_execute', self.gf(
                'django.db.models.fields.BooleanField')(default=False)),
            ('group_read', self.gf(
                'django.db.models.fields.BooleanField')(default=False)),
            ('group_write', self.gf(
                'django.db.models.fields.BooleanField')(default=False)),
            ('group_execute', self.gf(
                'django.db.models.fields.BooleanField')(default=False)),
            ('everybody_read', self.gf(
                'django.db.models.fields.BooleanField')(default=False)),
            ('everybody_write', self.gf(
                'django.db.models.fields.BooleanField')(default=False)),
            ('everybody_execute', self.gf(
                'django.db.models.fields.BooleanField')(default=False)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')
             (auto_now=True, blank=True)),
            ('date_created', self.gf('django.db.models.fields.DateTimeField')
             (default=datetime.datetime.now)),
            ('nuvius_resource', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('core', ['Object'])

        # Adding M2M table for field links on 'Object'
        db.create_table('core_object_links', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('from_object', models.ForeignKey(orm['core.object'], null=False)),
            ('to_object', models.ForeignKey(orm['core.object'], null=False))
        ))
        db.create_unique(
            'core_object_links', ['from_object_id', 'to_object_id'])

        # Adding M2M table for field subscribers on 'Object'
        db.create_table('core_object_subscribers', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('object', models.ForeignKey(orm['core.object'], null=False)),
            ('user', models.ForeignKey(orm['core.user'], null=False))
        ))
        db.create_unique('core_object_subscribers', ['object_id', 'user_id'])

        # Adding model 'Module'
        db.create_table('core_module', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('title', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('details', self.gf(
                'django.db.models.fields.TextField')(blank=True)),
            ('url', self.gf('django.db.models.fields.CharField')
             (max_length=512)),
            ('display', self.gf(
                'django.db.models.fields.BooleanField')(default=True)),
            ('system', self.gf('django.db.models.fields.BooleanField')
             (default=True)),
        ))
        db.send_create_signal('core', ['Module'])

        # Adding model 'Perspective'
        db.create_table('core_perspective', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('details', self.gf(
                'django.db.models.fields.TextField')(blank=True)),
        ))
        db.send_create_signal('core', ['Perspective'])

        # Adding M2M table for field modules on 'Perspective'
        db.create_table('core_perspective_modules', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('perspective', models.ForeignKey(
                orm['core.perspective'], null=False)),
            ('module', models.ForeignKey(orm['core.module'], null=False))
        ))
        db.create_unique(
            'core_perspective_modules', ['perspective_id', 'module_id'])

        # Adding model 'ModuleSetting'
        db.create_table('core_modulesetting', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=512)),
            ('label', self.gf('django.db.models.fields.CharField')
             (max_length=512)),
            ('perspective', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['core.Perspective'], null=True, blank=True)),
            ('module', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['core.Module'], null=True, blank=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['core.User'], null=True, blank=True)),
            ('group', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['core.Group'], null=True, blank=True)),
            ('value', self.gf('django.db.models.fields.TextField')()),
        ))
        db.send_create_signal('core', ['ModuleSetting'])

        # Adding model 'Location'
        db.create_table('core_location', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=512)),
            ('parent', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='child_set', null=True, to=orm['core.Location'])),
        ))
        db.send_create_signal('core', ['Location'])

        # Adding model 'PageFolder'
        db.create_table('core_pagefolder', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('details', self.gf(
                'django.db.models.fields.TextField')(blank=True)),
        ))
        db.send_create_signal('core', ['PageFolder'])

        # Adding model 'Page'
        db.create_table('core_page', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('title', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('folder', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['core.PageFolder'])),
            ('body', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('published', self.gf(
                'django.db.models.fields.BooleanField')(default=True)),
        ))
        db.send_create_signal('core', ['Page'])

        # Adding model 'Notification'
        db.create_table('core_notification', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['core.User'])),
            ('sender', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='notification_sent_set', null=True, to=orm['core.User'])),
            ('type', self.gf('django.db.models.fields.CharField')
             (max_length=32)),
            ('object', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['core.Object'], null=True, blank=True)),
            ('object_type', self.gf('django.db.models.fields.CharField')
             (max_length=512, null=True, blank=True)),
            ('url', self.gf('django.db.models.fields.CharField')
             (max_length=512, null=True, blank=True)),
            ('message', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('format_message', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('format_strings', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('date_created', self.gf('django.db.models.fields.DateTimeField')
             (auto_now=True, blank=True)),
        ))
        db.send_create_signal('core', ['Notification'])

        # Adding model 'Widget'
        db.create_table('core_widget', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['core.User'])),
            ('perspective', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['core.Perspective'])),
            ('module_name', self.gf(
                'django.db.models.fields.CharField')(max_length=256)),
            ('widget_name', self.gf(
                'django.db.models.fields.CharField')(max_length=256)),
            ('weight', self.gf(
                'django.db.models.fields.IntegerField')(default=0)),
        ))
        db.send_create_signal('core', ['Widget'])

    def backwards(self, orm):

        # Deleting model 'Group'
        db.delete_table('core_group')

        # Deleting model 'User'
        db.delete_table('core_user')

        # Removing M2M table for field other_groups on 'User'
        db.delete_table('core_user_other_groups')

        # Deleting model 'Object'
        db.delete_table('core_object')

        # Removing M2M table for field links on 'Object'
        db.delete_table('core_object_links')

        # Removing M2M table for field subscribers on 'Object'
        db.delete_table('core_object_subscribers')

        # Deleting model 'Module'
        db.delete_table('core_module')

        # Deleting model 'Perspective'
        db.delete_table('core_perspective')

        # Removing M2M table for field modules on 'Perspective'
        db.delete_table('core_perspective_modules')

        # Deleting model 'ModuleSetting'
        db.delete_table('core_modulesetting')

        # Deleting model 'Location'
        db.delete_table('core_location')

        # Deleting model 'PageFolder'
        db.delete_table('core_pagefolder')

        # Deleting model 'Page'
        db.delete_table('core_page')

        # Deleting model 'Notification'
        db.delete_table('core_notification')

        # Deleting model 'Widget'
        db.delete_table('core_widget')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.location': {
            'Meta': {'object_name': 'Location', '_ormbases': ['core.Object']},
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Location']"})
        },
        'core.module': {
            'Meta': {'ordering': "['name']", 'object_name': 'Module', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'display': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'system': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.modulesetting': {
            'Meta': {'object_name': 'ModuleSetting'},
            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'module': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Module']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'perspective': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Perspective']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {})
        },
        'core.notification': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'Notification'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'format_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'format_strings': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Object']", 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'notification_sent_set'", 'null': 'True', 'to': "orm['core.User']"}),
            'type': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'everybody_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']"}),
            'group_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"}),
            'user_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.page': {
            'Meta': {'ordering': "['name']", 'object_name': 'Page', '_ormbases': ['core.Object']},
            'body': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.PageFolder']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'core.pagefolder': {
            'Meta': {'object_name': 'PageFolder', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'core.perspective': {
            'Meta': {'object_name': 'Perspective', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'modules': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Module']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'core.widget': {
            'Meta': {'ordering': "['weight']", 'object_name': 'Widget'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'module_name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'perspective': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Perspective']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"}),
            'weight': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'widget_name': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        }
    }

    complete_apps = ['core']

########NEW FILE########
__FILENAME__ = 0002_auto__del_notification__add_comment__add_tag__add_revisionfield__add_r
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Deleting model 'Notification'
        db.delete_table('core_notification')

        # Adding model 'Comment'
        db.create_table('core_comment', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('author', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['core.User'], null=True, blank=True)),
            ('body', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('date_created', self.gf('django.db.models.fields.DateTimeField')
             (default=datetime.datetime.now)),
        ))
        db.send_create_signal('core', ['Comment'])

        # Adding M2M table for field likes on 'Comment'
        db.create_table('core_comment_likes', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('comment', models.ForeignKey(orm['core.comment'], null=False)),
            ('user', models.ForeignKey(orm['core.user'], null=False))
        ))
        db.create_unique('core_comment_likes', ['comment_id', 'user_id'])

        # Adding M2M table for field dislikes on 'Comment'
        db.create_table('core_comment_dislikes', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('comment', models.ForeignKey(orm['core.comment'], null=False)),
            ('user', models.ForeignKey(orm['core.user'], null=False))
        ))
        db.create_unique('core_comment_dislikes', ['comment_id', 'user_id'])

        # Adding model 'Tag'
        db.create_table('core_tag', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=512)),
            ('date_created', self.gf('django.db.models.fields.DateTimeField')
             (default=datetime.datetime.now)),
        ))
        db.send_create_signal('core', ['Tag'])

        # Adding model 'RevisionField'
        db.create_table('core_revisionfield', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('revision', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['core.Revision'])),
            ('field_type', self.gf('django.db.models.fields.CharField')
             (max_length=512, null=True, blank=True)),
            ('field', self.gf('django.db.models.fields.CharField')
             (max_length=512, null=True, blank=True)),
            ('value', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('value_key', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='revisionfield_key', null=True, to=orm['core.Object'])),
            ('value_key_acc', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='revisionfield_key_acc', null=True, to=orm['core.AccessEntity'])),
        ))
        db.send_create_signal('core', ['RevisionField'])

        # Adding M2M table for field value_m2m on 'RevisionField'
        db.create_table('core_revisionfield_value_m2m', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('revisionfield', models.ForeignKey(
                orm['core.revisionfield'], null=False)),
            ('object', models.ForeignKey(orm['core.object'], null=False))
        ))
        db.create_unique(
            'core_revisionfield_value_m2m', ['revisionfield_id', 'object_id'])

        # Adding M2M table for field value_m2m_acc on 'RevisionField'
        db.create_table('core_revisionfield_value_m2m_acc', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('revisionfield', models.ForeignKey(
                orm['core.revisionfield'], null=False)),
            ('accessentity', models.ForeignKey(
                orm['core.accessentity'], null=False))
        ))
        db.create_unique(
            'core_revisionfield_value_m2m_acc', ['revisionfield_id', 'accessentity_id'])

        # Adding model 'Revision'
        db.create_table('core_revision', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('previous', self.gf('django.db.models.fields.related.OneToOneField')(
                blank=True, related_name='next_set', unique=True, null=True, to=orm['core.Revision'])),
            ('object', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['core.Object'])),
            ('change_type', self.gf('django.db.models.fields.CharField')
             (max_length=512, null=True, blank=True)),
            ('date_created', self.gf('django.db.models.fields.DateTimeField')
             (default=datetime.datetime.now)),
        ))
        db.send_create_signal('core', ['Revision'])

        # Adding model 'Invitation'
        db.create_table('core_invitation', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('email', self.gf('django.db.models.fields.EmailField')
             (max_length=75)),
            ('key', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('sender', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['core.User'], null=True, blank=True)),
            ('default_group', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['core.Group'], null=True, blank=True)),
            ('date_created', self.gf('django.db.models.fields.DateTimeField')
             (default=datetime.datetime.now)),
        ))
        db.send_create_signal('core', ['Invitation'])

        # Adding model 'AccessEntity'
        db.create_table('core_accessentity', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')
             (auto_now=True, blank=True)),
        ))
        db.send_create_signal('core', ['AccessEntity'])

        # Adding model 'UpdateRecord'
        db.create_table('core_updaterecord', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('author', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='sent_updates', null=True, to=orm['core.User'])),
            ('sender', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='sent_updates', null=True, to=orm['core.Object'])),
            ('record_type', self.gf(
                'django.db.models.fields.CharField')(max_length=32)),
            ('url', self.gf('django.db.models.fields.CharField')
             (max_length=512, null=True, blank=True)),
            ('body', self.gf('django.db.models.fields.TextField')
             (default='', null=True, blank=True)),
            ('score', self.gf(
                'django.db.models.fields.IntegerField')(default=0)),
            ('format_message', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('format_strings', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('date_created', self.gf('django.db.models.fields.DateTimeField')
             (default=datetime.datetime.now)),
        ))
        db.send_create_signal('core', ['UpdateRecord'])

        # Adding M2M table for field about on 'UpdateRecord'
        db.create_table('core_updaterecord_about', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('updaterecord', models.ForeignKey(
                orm['core.updaterecord'], null=False)),
            ('object', models.ForeignKey(orm['core.object'], null=False))
        ))
        db.create_unique(
            'core_updaterecord_about', ['updaterecord_id', 'object_id'])

        # Adding M2M table for field recipients on 'UpdateRecord'
        db.create_table('core_updaterecord_recipients', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('updaterecord', models.ForeignKey(
                orm['core.updaterecord'], null=False)),
            ('accessentity', models.ForeignKey(
                orm['core.accessentity'], null=False))
        ))
        db.create_unique(
            'core_updaterecord_recipients', ['updaterecord_id', 'accessentity_id'])

        # Adding M2M table for field comments on 'UpdateRecord'
        db.create_table('core_updaterecord_comments', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('updaterecord', models.ForeignKey(
                orm['core.updaterecord'], null=False)),
            ('comment', models.ForeignKey(orm['core.comment'], null=False))
        ))
        db.create_unique(
            'core_updaterecord_comments', ['updaterecord_id', 'comment_id'])

        # Adding M2M table for field likes on 'UpdateRecord'
        db.create_table('core_updaterecord_likes', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('updaterecord', models.ForeignKey(
                orm['core.updaterecord'], null=False)),
            ('user', models.ForeignKey(orm['core.user'], null=False))
        ))
        db.create_unique(
            'core_updaterecord_likes', ['updaterecord_id', 'user_id'])

        # Adding M2M table for field dislikes on 'UpdateRecord'
        db.create_table('core_updaterecord_dislikes', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('updaterecord', models.ForeignKey(
                orm['core.updaterecord'], null=False)),
            ('user', models.ForeignKey(orm['core.user'], null=False))
        ))
        db.create_unique(
            'core_updaterecord_dislikes', ['updaterecord_id', 'user_id'])

        # Deleting field 'Group.last_updated'
        db.delete_column('core_group', 'last_updated')

        # Adding field 'Group.accessentity_ptr'
        db.add_column('core_group', 'accessentity_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
            to=orm['core.AccessEntity'], unique=True, null=True, blank=True), keep_default=False)

        # Deleting field 'Object.group_read'
        db.delete_column('core_object', 'group_read')

        # Deleting field 'Object.user_write'
        db.delete_column('core_object', 'user_write')

        # Deleting field 'Object.group'
        db.delete_column('core_object', 'group_id')

        # Deleting field 'Object.everybody_execute'
        db.delete_column('core_object', 'everybody_execute')

        # Deleting field 'Object.user_execute'
        db.delete_column('core_object', 'user_execute')

        # Deleting field 'Object.user_read'
        db.delete_column('core_object', 'user_read')

        # Deleting field 'Object.everybody_write'
        db.delete_column('core_object', 'everybody_write')

        # Deleting field 'Object.group_write'
        db.delete_column('core_object', 'group_write')

        # Deleting field 'Object.group_execute'
        db.delete_column('core_object', 'group_execute')

        # Deleting field 'Object.everybody_read'
        db.delete_column('core_object', 'everybody_read')

        # Adding field 'Object.creator'
        db.add_column('core_object', 'creator', self.gf('django.db.models.fields.related.ForeignKey')(
            blank=True, related_name='objects_created', null=True, to=orm['core.User']), keep_default=False)

        # Adding M2M table for field read_access on 'Object'
        db.create_table('core_object_read_access', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('object', models.ForeignKey(orm['core.object'], null=False)),
            ('accessentity', models.ForeignKey(
                orm['core.accessentity'], null=False))
        ))
        db.create_unique(
            'core_object_read_access', ['object_id', 'accessentity_id'])

        # Adding M2M table for field full_access on 'Object'
        db.create_table('core_object_full_access', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('object', models.ForeignKey(orm['core.object'], null=False)),
            ('accessentity', models.ForeignKey(
                orm['core.accessentity'], null=False))
        ))
        db.create_unique(
            'core_object_full_access', ['object_id', 'accessentity_id'])

        # Adding M2M table for field tags on 'Object'
        db.create_table('core_object_tags', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('object', models.ForeignKey(orm['core.object'], null=False)),
            ('tag', models.ForeignKey(orm['core.tag'], null=False))
        ))
        db.create_unique('core_object_tags', ['object_id', 'tag_id'])

        # Adding M2M table for field comments on 'Object'
        db.create_table('core_object_comments', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('object', models.ForeignKey(orm['core.object'], null=False)),
            ('comment', models.ForeignKey(orm['core.comment'], null=False))
        ))
        db.create_unique('core_object_comments', ['object_id', 'comment_id'])

        # Adding M2M table for field likes on 'Object'
        db.create_table('core_object_likes', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('object', models.ForeignKey(orm['core.object'], null=False)),
            ('user', models.ForeignKey(orm['core.user'], null=False))
        ))
        db.create_unique('core_object_likes', ['object_id', 'user_id'])

        # Adding M2M table for field dislikes on 'Object'
        db.create_table('core_object_dislikes', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('object', models.ForeignKey(orm['core.object'], null=False)),
            ('user', models.ForeignKey(orm['core.user'], null=False))
        ))
        db.create_unique('core_object_dislikes', ['object_id', 'user_id'])

        # Changing field 'Object.user'
        db.alter_column('core_object', 'user_id', self.gf(
            'django.db.models.fields.related.ForeignKey')(to=orm['core.User'], null=True))

        # Deleting field 'User.last_updated'
        db.delete_column('core_user', 'last_updated')

        # Adding field 'User.accessentity_ptr'
        db.add_column('core_user', 'accessentity_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
            to=orm['core.AccessEntity'], unique=True, null=True, blank=True), keep_default=False)

        # Adding field 'User.disabled'
        db.add_column('core_user', 'disabled', self.gf(
            'django.db.models.fields.BooleanField')(default=False), keep_default=False)

        # Adding field 'User.last_access'
        db.add_column('core_user', 'last_access', self.gf('django.db.models.fields.DateTimeField')(
            default=datetime.datetime.now), keep_default=False)

        # Changing field 'User.default_group'
        db.alter_column('core_user', 'default_group_id', self.gf(
            'django.db.models.fields.related.ForeignKey')(null=True, to=orm['core.AccessEntity']))

    def backwards(self, orm):

        # Adding model 'Notification'
        db.create_table('core_notification', (
            ('object', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['core.Object'], null=True, blank=True)),
            ('format_strings', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('object_type', self.gf('django.db.models.fields.CharField')
             (max_length=512, null=True, blank=True)),
            ('user', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['core.User'])),
            ('message', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('format_message', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('sender', self.gf('django.db.models.fields.related.ForeignKey')(
                related_name='notification_sent_set', null=True, to=orm['core.User'], blank=True)),
            ('url', self.gf('django.db.models.fields.CharField')
             (max_length=512, null=True, blank=True)),
            ('date_created', self.gf('django.db.models.fields.DateTimeField')
             (auto_now=True, blank=True)),
            ('type', self.gf('django.db.models.fields.CharField')
             (max_length=32)),
        ))
        db.send_create_signal('core', ['Notification'])

        # Deleting model 'Comment'
        db.delete_table('core_comment')

        # Removing M2M table for field likes on 'Comment'
        db.delete_table('core_comment_likes')

        # Removing M2M table for field dislikes on 'Comment'
        db.delete_table('core_comment_dislikes')

        # Deleting model 'Tag'
        db.delete_table('core_tag')

        # Deleting model 'RevisionField'
        db.delete_table('core_revisionfield')

        # Removing M2M table for field value_m2m on 'RevisionField'
        db.delete_table('core_revisionfield_value_m2m')

        # Removing M2M table for field value_m2m_acc on 'RevisionField'
        db.delete_table('core_revisionfield_value_m2m_acc')

        # Deleting model 'Revision'
        db.delete_table('core_revision')

        # Deleting model 'Invitation'
        db.delete_table('core_invitation')

        # Deleting model 'AccessEntity'
        db.delete_table('core_accessentity')

        # Deleting model 'UpdateRecord'
        db.delete_table('core_updaterecord')

        # Removing M2M table for field about on 'UpdateRecord'
        db.delete_table('core_updaterecord_about')

        # Removing M2M table for field recipients on 'UpdateRecord'
        db.delete_table('core_updaterecord_recipients')

        # Removing M2M table for field comments on 'UpdateRecord'
        db.delete_table('core_updaterecord_comments')

        # Removing M2M table for field likes on 'UpdateRecord'
        db.delete_table('core_updaterecord_likes')

        # Removing M2M table for field dislikes on 'UpdateRecord'
        db.delete_table('core_updaterecord_dislikes')

        # User chose to not deal with backwards NULL issues for
        # 'Group.last_updated'
        raise RuntimeError(
            "Cannot reverse this migration. 'Group.last_updated' and its values cannot be restored.")

        # Deleting field 'Group.accessentity_ptr'
        db.delete_column('core_group', 'accessentity_ptr_id')

        # Adding field 'Object.group_read'
        db.add_column('core_object', 'group_read', self.gf(
            'django.db.models.fields.BooleanField')(default=False), keep_default=False)

        # Adding field 'Object.user_write'
        db.add_column('core_object', 'user_write', self.gf(
            'django.db.models.fields.BooleanField')(default=False), keep_default=False)

        # User chose to not deal with backwards NULL issues for 'Object.group'
        raise RuntimeError(
            "Cannot reverse this migration. 'Object.group' and its values cannot be restored.")

        # Adding field 'Object.everybody_execute'
        db.add_column('core_object', 'everybody_execute', self.gf(
            'django.db.models.fields.BooleanField')(default=False), keep_default=False)

        # Adding field 'Object.user_execute'
        db.add_column('core_object', 'user_execute', self.gf(
            'django.db.models.fields.BooleanField')(default=False), keep_default=False)

        # Adding field 'Object.user_read'
        db.add_column('core_object', 'user_read', self.gf(
            'django.db.models.fields.BooleanField')(default=False), keep_default=False)

        # Adding field 'Object.everybody_write'
        db.add_column('core_object', 'everybody_write', self.gf(
            'django.db.models.fields.BooleanField')(default=False), keep_default=False)

        # Adding field 'Object.group_write'
        db.add_column('core_object', 'group_write', self.gf(
            'django.db.models.fields.BooleanField')(default=False), keep_default=False)

        # Adding field 'Object.group_execute'
        db.add_column('core_object', 'group_execute', self.gf(
            'django.db.models.fields.BooleanField')(default=False), keep_default=False)

        # Adding field 'Object.everybody_read'
        db.add_column('core_object', 'everybody_read', self.gf(
            'django.db.models.fields.BooleanField')(default=False), keep_default=False)

        # Deleting field 'Object.creator'
        db.delete_column('core_object', 'creator_id')

        # Removing M2M table for field read_access on 'Object'
        db.delete_table('core_object_read_access')

        # Removing M2M table for field full_access on 'Object'
        db.delete_table('core_object_full_access')

        # Removing M2M table for field tags on 'Object'
        db.delete_table('core_object_tags')

        # Removing M2M table for field comments on 'Object'
        db.delete_table('core_object_comments')

        # Removing M2M table for field likes on 'Object'
        db.delete_table('core_object_likes')

        # Removing M2M table for field dislikes on 'Object'
        db.delete_table('core_object_dislikes')

        # User chose to not deal with backwards NULL issues for 'Object.user'
        raise RuntimeError(
            "Cannot reverse this migration. 'Object.user' and its values cannot be restored.")

        # User chose to not deal with backwards NULL issues for
        # 'User.last_updated'
        raise RuntimeError(
            "Cannot reverse this migration. 'User.last_updated' and its values cannot be restored.")

        # Deleting field 'User.accessentity_ptr'
        db.delete_column('core_user', 'accessentity_ptr_id')

        # Deleting field 'User.disabled'
        db.delete_column('core_user', 'disabled')

        # Deleting field 'User.last_access'
        db.delete_column('core_user', 'last_access')

        # Changing field 'User.default_group'
        db.alter_column('core_user', 'default_group_id', self.gf(
            'django.db.models.fields.related.ForeignKey')(null=True, to=orm['core.Group']))

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.invitation': {
            'Meta': {'object_name': 'Invitation'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'key': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'})
        },
        'core.location': {
            'Meta': {'object_name': 'Location', '_ormbases': ['core.Object']},
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Location']"})
        },
        'core.module': {
            'Meta': {'ordering': "['name']", 'object_name': 'Module', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'display': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'system': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.modulesetting': {
            'Meta': {'object_name': 'ModuleSetting'},
            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'module': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Module']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'perspective': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Perspective']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'})
        },
        'core.page': {
            'Meta': {'ordering': "['name']", 'object_name': 'Page', '_ormbases': ['core.Object']},
            'body': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.PageFolder']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'core.pagefolder': {
            'Meta': {'object_name': 'PageFolder', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'core.perspective': {
            'Meta': {'object_name': 'Perspective', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'modules': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Module']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'core.revision': {
            'Meta': {'object_name': 'Revision'},
            'change_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Object']"}),
            'previous': ('django.db.models.fields.related.OneToOneField', [], {'blank': 'True', 'related_name': "'next_set'", 'unique': 'True', 'null': 'True', 'to': "orm['core.Revision']"})
        },
        'core.revisionfield': {
            'Meta': {'object_name': 'RevisionField'},
            'field': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'revision': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Revision']"}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'value_key': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'revisionfield_key'", 'null': 'True', 'to': "orm['core.Object']"}),
            'value_key_acc': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'revisionfield_key_acc'", 'null': 'True', 'to': "orm['core.AccessEntity']"}),
            'value_m2m': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'revisionfield_m2m'", 'symmetrical': 'False', 'to': "orm['core.Object']"}),
            'value_m2m_acc': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'revisionfield_m2m_acc'", 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.updaterecord': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'UpdateRecord'},
            'about': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Object']"}),
            'author': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'sent_updates'", 'null': 'True', 'to': "orm['core.User']"}),
            'body': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_on_updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'format_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'format_strings': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'recipients': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'received_updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'record_type': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'sent_updates'", 'null': 'True', 'to': "orm['core.Object']"}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.AccessEntity']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'core.widget': {
            'Meta': {'ordering': "['weight']", 'object_name': 'Widget'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'module_name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'perspective': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Perspective']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"}),
            'weight': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'widget_name': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        }
    }

    complete_apps = ['core']

########NEW FILE########
__FILENAME__ = 0003_treeiocore
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models
from treeio.core.models import Object


class Migration(DataMigration):

    def forwards(self, orm):
        "Migrate the Users and Groups so they extend AccessEntity"
        for user in orm['core.User'].objects.all():
            entity = orm['core.AccessEntity'].objects.create()
            entity.id = user.id
            entity.save()
            user.accessentity_ptr = entity
            user.save()
        for group in orm['core.Group'].objects.all():
            group.accessentity_ptr = orm['core.AccessEntity'].objects.create()
            group.accessentity_ptr.save()
            if group.parent:
                parent = orm['core.Group'].objects.get(id=group.parent_id)
                group.parent_id = parent.accessentity_ptr_id
            group.save()
        for user in orm['core.User'].objects.all():
            group = orm['core.Group'].objects.get(pk=user.default_group_id)
            user.default_group = group.accessentity_ptr
            user.save()
        for obj in orm['core.Object'].objects.all():
            obj.creator = obj.user
            obj.save()

    def backwards(self, orm):
        raise RuntimeError("Cannot reverse this migration.")

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.invitation': {
            'Meta': {'object_name': 'Invitation'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'key': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'})
        },
        'core.location': {
            'Meta': {'object_name': 'Location', '_ormbases': ['core.Object']},
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Location']"})
        },
        'core.module': {
            'Meta': {'ordering': "['name']", 'object_name': 'Module', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'display': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'system': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.modulesetting': {
            'Meta': {'object_name': 'ModuleSetting'},
            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'module': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Module']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'perspective': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Perspective']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.page': {
            'Meta': {'ordering': "['name']", 'object_name': 'Page', '_ormbases': ['core.Object']},
            'body': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.PageFolder']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'core.pagefolder': {
            'Meta': {'object_name': 'PageFolder', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'core.perspective': {
            'Meta': {'object_name': 'Perspective', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'modules': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Module']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'core.revision': {
            'Meta': {'object_name': 'Revision'},
            'change_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Object']"}),
            'previous': ('django.db.models.fields.related.OneToOneField', [], {'blank': 'True', 'related_name': "'next_set'", 'unique': 'True', 'null': 'True', 'to': "orm['core.Revision']"})
        },
        'core.revisionfield': {
            'Meta': {'object_name': 'RevisionField'},
            'field': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'revision': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Revision']"}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'value_key': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'revisionfield_key'", 'null': 'True', 'to': "orm['core.Object']"}),
            'value_key_acc': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'revisionfield_key_acc'", 'null': 'True', 'to': "orm['core.AccessEntity']"}),
            'value_m2m': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'revisionfield_m2m'", 'symmetrical': 'False', 'to': "orm['core.Object']"}),
            'value_m2m_acc': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'revisionfield_m2m_acc'", 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.updaterecord': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'UpdateRecord'},
            'about': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Object']"}),
            'author': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'sent_updates'", 'null': 'True', 'to': "orm['core.User']"}),
            'body': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_on_updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'format_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'format_strings': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'recipients': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'received_updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'record_type': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'sent_updates'", 'null': 'True', 'to': "orm['core.Object']"}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.AccessEntity']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'core.widget': {
            'Meta': {'ordering': "['weight']", 'object_name': 'Widget'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'module_name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'perspective': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Perspective']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"}),
            'weight': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'widget_name': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        }
    }

    complete_apps = ['core']

########NEW FILE########
__FILENAME__ = 0004_auto__del_field_object_user
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Deleting field 'Object.user'
        db.delete_column('core_object', 'user_id')

    def backwards(self, orm):

        # Adding field 'Object.user'
        db.add_column('core_object', 'user', self.gf('django.db.models.fields.related.ForeignKey')(
            related_name='objects_created', null=True, to=orm['core.User'], blank=True), keep_default=False)

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.invitation': {
            'Meta': {'object_name': 'Invitation'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'key': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'})
        },
        'core.location': {
            'Meta': {'object_name': 'Location', '_ormbases': ['core.Object']},
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Location']"})
        },
        'core.module': {
            'Meta': {'ordering': "['name']", 'object_name': 'Module', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'display': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'system': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.modulesetting': {
            'Meta': {'object_name': 'ModuleSetting'},
            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'module': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Module']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'perspective': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Perspective']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.page': {
            'Meta': {'ordering': "['name']", 'object_name': 'Page', '_ormbases': ['core.Object']},
            'body': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.PageFolder']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'core.pagefolder': {
            'Meta': {'object_name': 'PageFolder', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'core.perspective': {
            'Meta': {'object_name': 'Perspective', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'modules': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Module']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'core.revision': {
            'Meta': {'object_name': 'Revision'},
            'change_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Object']"}),
            'previous': ('django.db.models.fields.related.OneToOneField', [], {'blank': 'True', 'related_name': "'next_set'", 'unique': 'True', 'null': 'True', 'to': "orm['core.Revision']"})
        },
        'core.revisionfield': {
            'Meta': {'object_name': 'RevisionField'},
            'field': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'revision': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Revision']"}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'value_key': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'revisionfield_key'", 'null': 'True', 'to': "orm['core.Object']"}),
            'value_key_acc': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'revisionfield_key_acc'", 'null': 'True', 'to': "orm['core.AccessEntity']"}),
            'value_m2m': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'revisionfield_m2m'", 'symmetrical': 'False', 'to': "orm['core.Object']"}),
            'value_m2m_acc': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'revisionfield_m2m_acc'", 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.updaterecord': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'UpdateRecord'},
            'about': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Object']"}),
            'author': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'sent_updates'", 'null': 'True', 'to': "orm['core.User']"}),
            'body': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_on_updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'format_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'format_strings': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'recipients': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'received_updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'record_type': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'sent_updates'", 'null': 'True', 'to': "orm['core.Object']"}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.AccessEntity']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'core.widget': {
            'Meta': {'ordering': "['weight']", 'object_name': 'Widget'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'module_name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'perspective': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Perspective']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"}),
            'weight': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'widget_name': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        }
    }

    complete_apps = ['core']

########NEW FILE########
__FILENAME__ = 0005_auto__del_field_group_id__chg_field_group_accessentity_ptr__del_field_
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Deleting field 'Group.id'
        db.delete_column('core_group', 'id')

        # Changing field 'Group.accessentity_ptr'
        db.alter_column('core_group', 'accessentity_ptr_id', self.gf('django.db.models.fields.related.OneToOneField')(
            default=1, to=orm['core.AccessEntity'], unique=True, primary_key=True))

        # Deleting field 'User.id'
        db.delete_column('core_user', 'id')

        # Changing field 'User.default_group'
        db.alter_column('core_user', 'default_group_id', self.gf(
            'django.db.models.fields.related.ForeignKey')(null=True, to=orm['core.Group']))

        # Changing field 'User.accessentity_ptr'
        db.alter_column('core_user', 'accessentity_ptr_id', self.gf('django.db.models.fields.related.OneToOneField')(
            default=1, to=orm['core.AccessEntity'], unique=True, primary_key=True))

    def backwards(self, orm):

        # User chose to not deal with backwards NULL issues for 'Group.id'
        raise RuntimeError(
            "Cannot reverse this migration. 'Group.id' and its values cannot be restored.")

        # Changing field 'Group.accessentity_ptr'
        db.alter_column('core_group', 'accessentity_ptr_id', self.gf(
            'django.db.models.fields.related.OneToOneField')(to=orm['core.AccessEntity'], unique=True, null=True))

        # User chose to not deal with backwards NULL issues for 'User.id'
        raise RuntimeError(
            "Cannot reverse this migration. 'User.id' and its values cannot be restored.")

        # Changing field 'User.default_group'
        db.alter_column('core_user', 'default_group_id', self.gf(
            'django.db.models.fields.related.ForeignKey')(null=True, to=orm['core.AccessEntity']))

        # Changing field 'User.accessentity_ptr'
        db.alter_column('core_user', 'accessentity_ptr_id', self.gf(
            'django.db.models.fields.related.OneToOneField')(to=orm['core.AccessEntity'], unique=True, null=True))

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.invitation': {
            'Meta': {'object_name': 'Invitation'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'key': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'})
        },
        'core.location': {
            'Meta': {'object_name': 'Location', '_ormbases': ['core.Object']},
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Location']"})
        },
        'core.module': {
            'Meta': {'ordering': "['name']", 'object_name': 'Module', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'display': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'system': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.modulesetting': {
            'Meta': {'object_name': 'ModuleSetting'},
            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'module': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Module']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'perspective': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Perspective']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.page': {
            'Meta': {'ordering': "['name']", 'object_name': 'Page', '_ormbases': ['core.Object']},
            'body': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.PageFolder']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'core.pagefolder': {
            'Meta': {'object_name': 'PageFolder', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'core.perspective': {
            'Meta': {'object_name': 'Perspective', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'modules': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Module']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'core.revision': {
            'Meta': {'object_name': 'Revision'},
            'change_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Object']"}),
            'previous': ('django.db.models.fields.related.OneToOneField', [], {'blank': 'True', 'related_name': "'next_set'", 'unique': 'True', 'null': 'True', 'to': "orm['core.Revision']"})
        },
        'core.revisionfield': {
            'Meta': {'object_name': 'RevisionField'},
            'field': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'revision': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Revision']"}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'value_key': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'revisionfield_key'", 'null': 'True', 'to': "orm['core.Object']"}),
            'value_key_acc': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'revisionfield_key_acc'", 'null': 'True', 'to': "orm['core.AccessEntity']"}),
            'value_m2m': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'revisionfield_m2m'", 'symmetrical': 'False', 'to': "orm['core.Object']"}),
            'value_m2m_acc': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'revisionfield_m2m_acc'", 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.updaterecord': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'UpdateRecord'},
            'about': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Object']"}),
            'author': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'sent_updates'", 'null': 'True', 'to': "orm['core.User']"}),
            'body': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_on_updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'format_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'format_strings': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'recipients': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'received_updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'record_type': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'sent_updates'", 'null': 'True', 'to': "orm['core.Object']"}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'core.widget': {
            'Meta': {'ordering': "['weight']", 'object_name': 'Widget'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'module_name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'perspective': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Perspective']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"}),
            'weight': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'widget_name': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        }
    }

    complete_apps = ['core']

########NEW FILE########
__FILENAME__ = 0006_auto__add_configsetting
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding model 'ConfigSetting'
        db.create_table('core_configsetting', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (unique=True, max_length=255)),
            ('value', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('last_updated', self.gf('django.db.models.fields.DateTimeField')
             (auto_now=True, blank=True)),
        ))
        db.send_create_signal('core', ['ConfigSetting'])

    def backwards(self, orm):

        # Deleting model 'ConfigSetting'
        db.delete_table('core_configsetting')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.configsetting': {
            'Meta': {'object_name': 'ConfigSetting'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.invitation': {
            'Meta': {'object_name': 'Invitation'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'key': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'})
        },
        'core.location': {
            'Meta': {'object_name': 'Location', '_ormbases': ['core.Object']},
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Location']"})
        },
        'core.module': {
            'Meta': {'ordering': "['name']", 'object_name': 'Module', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'display': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'system': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.modulesetting': {
            'Meta': {'object_name': 'ModuleSetting'},
            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'module': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Module']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'perspective': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Perspective']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.page': {
            'Meta': {'ordering': "['name']", 'object_name': 'Page', '_ormbases': ['core.Object']},
            'body': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.PageFolder']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'core.pagefolder': {
            'Meta': {'object_name': 'PageFolder', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'core.perspective': {
            'Meta': {'object_name': 'Perspective', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'modules': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Module']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'core.revision': {
            'Meta': {'object_name': 'Revision'},
            'change_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Object']"}),
            'previous': ('django.db.models.fields.related.OneToOneField', [], {'blank': 'True', 'related_name': "'next_set'", 'unique': 'True', 'null': 'True', 'to': "orm['core.Revision']"})
        },
        'core.revisionfield': {
            'Meta': {'object_name': 'RevisionField'},
            'field': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'revision': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Revision']"}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'value_key': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'revisionfield_key'", 'null': 'True', 'to': "orm['core.Object']"}),
            'value_key_acc': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'revisionfield_key_acc'", 'null': 'True', 'to': "orm['core.AccessEntity']"}),
            'value_m2m': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'revisionfield_m2m'", 'symmetrical': 'False', 'to': "orm['core.Object']"}),
            'value_m2m_acc': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'revisionfield_m2m_acc'", 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.updaterecord': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'UpdateRecord'},
            'about': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Object']"}),
            'author': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'sent_updates'", 'null': 'True', 'to': "orm['core.User']"}),
            'body': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_on_updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'format_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'format_strings': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'recipients': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'received_updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'record_type': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'sent_updates'", 'null': 'True', 'to': "orm['core.Object']"}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'core.widget': {
            'Meta': {'ordering': "['weight']", 'object_name': 'Widget'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'module_name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'perspective': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Perspective']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"}),
            'weight': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'widget_name': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        }
    }

    complete_apps = ['core']

########NEW FILE########
__FILENAME__ = 0007_auto__add_attachment
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding model 'Attachment'
        db.create_table('core_attachment', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('attached_object', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['core.Object'], null=True, blank=True)),
            ('attached_record', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['core.UpdateRecord'], null=True, blank=True)),
            ('attached_file', self.gf(
                'django.db.models.fields.files.FileField')(max_length=100)),
            ('mimetype', self.gf(
                'django.db.models.fields.CharField')(max_length=64)),
            ('created', self.gf('django.db.models.fields.DateTimeField')
             (auto_now_add=True, blank=True)),
            ('uploaded_by', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['core.User'])),
        ))
        db.send_create_signal('core', ['Attachment'])

    def backwards(self, orm):

        # Deleting model 'Attachment'
        db.delete_table('core_attachment')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.attachment': {
            'Meta': {'object_name': 'Attachment'},
            'attached_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'attached_object': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Object']", 'null': 'True', 'blank': 'True'}),
            'attached_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.UpdateRecord']", 'null': 'True', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'mimetype': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'uploaded_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.configsetting': {
            'Meta': {'object_name': 'ConfigSetting'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.invitation': {
            'Meta': {'object_name': 'Invitation'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'key': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'})
        },
        'core.location': {
            'Meta': {'object_name': 'Location', '_ormbases': ['core.Object']},
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Location']"})
        },
        'core.module': {
            'Meta': {'ordering': "['name']", 'object_name': 'Module', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'display': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'system': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.modulesetting': {
            'Meta': {'object_name': 'ModuleSetting'},
            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'module': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Module']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'perspective': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Perspective']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.page': {
            'Meta': {'ordering': "['name']", 'object_name': 'Page', '_ormbases': ['core.Object']},
            'body': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.PageFolder']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'core.pagefolder': {
            'Meta': {'object_name': 'PageFolder', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'core.perspective': {
            'Meta': {'object_name': 'Perspective', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'modules': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Module']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'core.revision': {
            'Meta': {'object_name': 'Revision'},
            'change_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Object']"}),
            'previous': ('django.db.models.fields.related.OneToOneField', [], {'blank': 'True', 'related_name': "'next'", 'unique': 'True', 'null': 'True', 'to': "orm['core.Revision']"})
        },
        'core.revisionfield': {
            'Meta': {'object_name': 'RevisionField'},
            'field': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'revision': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Revision']"}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'value_key': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'revisionfield_key'", 'null': 'True', 'to': "orm['core.Object']"}),
            'value_key_acc': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'revisionfield_key_acc'", 'null': 'True', 'to': "orm['core.AccessEntity']"}),
            'value_m2m': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'revisionfield_m2m'", 'symmetrical': 'False', 'to': "orm['core.Object']"}),
            'value_m2m_acc': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'revisionfield_m2m_acc'", 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.updaterecord': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'UpdateRecord'},
            'about': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Object']"}),
            'author': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'sent_updates'", 'null': 'True', 'to': "orm['core.User']"}),
            'body': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_on_updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'format_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'format_strings': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'recipients': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'received_updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'record_type': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'sent_updates'", 'null': 'True', 'to': "orm['core.Object']"}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'core.widget': {
            'Meta': {'ordering': "['weight']", 'object_name': 'Widget'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'module_name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'perspective': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Perspective']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"}),
            'weight': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'widget_name': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        }
    }

    complete_apps = ['core']

########NEW FILE########
__FILENAME__ = 0008_auto__add_field_attachment_filename
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding field 'Attachment.filename'
        db.add_column('core_attachment', 'filename', self.gf(
            'django.db.models.fields.CharField')(default='', max_length=64), keep_default=False)

    def backwards(self, orm):

        # Deleting field 'Attachment.filename'
        db.delete_column('core_attachment', 'filename')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.attachment': {
            'Meta': {'object_name': 'Attachment'},
            'attached_file': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'attached_object': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Object']", 'null': 'True', 'blank': 'True'}),
            'attached_record': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.UpdateRecord']", 'null': 'True', 'blank': 'True'}),
            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'filename': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'mimetype': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'uploaded_by': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.configsetting': {
            'Meta': {'object_name': 'ConfigSetting'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.invitation': {
            'Meta': {'object_name': 'Invitation'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'key': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'})
        },
        'core.location': {
            'Meta': {'object_name': 'Location', '_ormbases': ['core.Object']},
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Location']"})
        },
        'core.module': {
            'Meta': {'ordering': "['name']", 'object_name': 'Module', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'display': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'system': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.modulesetting': {
            'Meta': {'object_name': 'ModuleSetting'},
            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'module': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Module']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'perspective': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Perspective']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'value': ('django.db.models.fields.TextField', [], {})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.page': {
            'Meta': {'ordering': "['name']", 'object_name': 'Page', '_ormbases': ['core.Object']},
            'body': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.PageFolder']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'published': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'core.pagefolder': {
            'Meta': {'object_name': 'PageFolder', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'core.perspective': {
            'Meta': {'object_name': 'Perspective', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'modules': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Module']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'core.revision': {
            'Meta': {'object_name': 'Revision'},
            'change_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'object': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Object']"}),
            'previous': ('django.db.models.fields.related.OneToOneField', [], {'blank': 'True', 'related_name': "'next'", 'unique': 'True', 'null': 'True', 'to': "orm['core.Revision']"})
        },
        'core.revisionfield': {
            'Meta': {'object_name': 'RevisionField'},
            'field': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'revision': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Revision']"}),
            'value': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'value_key': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'revisionfield_key'", 'null': 'True', 'to': "orm['core.Object']"}),
            'value_key_acc': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'revisionfield_key_acc'", 'null': 'True', 'to': "orm['core.AccessEntity']"}),
            'value_m2m': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'revisionfield_m2m'", 'symmetrical': 'False', 'to': "orm['core.Object']"}),
            'value_m2m_acc': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'revisionfield_m2m_acc'", 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.updaterecord': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'UpdateRecord'},
            'about': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Object']"}),
            'author': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'sent_updates'", 'null': 'True', 'to': "orm['core.User']"}),
            'body': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_on_updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'format_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'format_strings': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'recipients': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'received_updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'record_type': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'sent_updates'", 'null': 'True', 'to': "orm['core.Object']"}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'core.widget': {
            'Meta': {'ordering': "['weight']", 'object_name': 'Widget'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'module_name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'perspective': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Perspective']"}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"}),
            'weight': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'widget_name': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        }
    }

    complete_apps = ['core']

########NEW FILE########
__FILENAME__ = models
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Hardtree Core system objects
"""

from django.contrib import messages
from django.http import HttpRequest
from django.contrib.messages.storage import default_storage
from django.contrib.messages.storage.base import Message

from django.db import models
from django.core.exceptions import MultipleObjectsReturned
from django.contrib.sites.models import RequestSite
from django.core.urlresolvers import reverse
from django.utils.translation import ugettext as _
from django.utils.html import strip_tags
from django.shortcuts import get_object_or_404
from django.template.defaultfilters import date as djangodate
import django.contrib.auth.models as django_auth

from treeio.core.conf import settings
from treeio.core.mail import SystemEmail

from datetime import datetime
import re
import os
import pickle
import base64
import random
import hashlib
import string


class AccessEntity(models.Model):

    "Generic model for both User and Group"
    last_updated = models.DateTimeField(auto_now=True)

    def get_entity(self):
        try:
            return self.group
        except:
            try:
                return self.user
            except:
                return None

    def is_user(self):
        try:
            user = self.user
            return user is not None
        except:
            return False

    def __unicode__(self):
        try:
            return self.get_entity().__unicode__()
        except:
            return unicode(self.id)

    def get_absolute_url(self):
        try:
            return self.get_entity().get_absolute_url()
        except:
            return ''


class Group(AccessEntity):

    "Group record"
    name = models.CharField(max_length=256)
    parent = models.ForeignKey(
        'self', blank=True, null=True, related_name='child_set')
    details = models.TextField(blank=True, null=True)

    def __unicode__(self):
        return self.name

    def get_absolute_url(self, module='identities'):
        "Returns absolute URL of the Group"
        if not module or module == 'identities':
            try:
                return reverse('identities_group_view', args=[self.id])
            except Exception:
                return ""
        else:
            try:
                return reverse('core_administration_group_view', args=[self.id])
            except Exception:
                return ""

    def get_root(self):
        "Get the root Group"

        root = self
        # keep track of items we've looked at to avoid infinite looping
        stack = [self]
        while getattr(root, 'parent', None):
            root = getattr(root, 'parent')
            if root in stack:
                break
            stack.append(root)
        return root

    def get_tree_path(self, skipself=False):
        "Get tree path as a list() starting with root Group"

        if skipself:
            path = []
        else:
            path = [self]

        current = self
        while getattr(current, 'parent', None):
            parent = getattr(current, 'parent')
            if parent in path:
                # To avoid infinite looping, check that we don't add existing
                # parent on the path again
                break
            else:
                path.insert(0, parent)
            current = parent

        return path

    def get_contact(self):
        "Returns first available Contact"
        try:
            contact = self.contact_set.all()[:1][0]
            return contact
        except Exception:
            return None

    def has_contact(self):
        "Returns true if any Contacts exist for this Group"
        try:
            if self.contact_set.count() > 0:
                return True
            else:
                return False
        except Exception:
            return False

    def get_fullname(self, save=True):
        "Returns the full name with parent(s) separated by slashes"
        current = self
        fullname = self.name
        while current.parent:
            current = current.parent
            fullname = current.name + " / " + fullname
        return fullname

    def get_perspective(self):
        "Returns currently set Perspective for the Group"
        ids = []
        try:
            for setting in ModuleSetting.get_for_module('treeio.core', name='default_perspective', group=self):
                ids.append(long(setting.value))
            id = ids[0]
            perspective = get_object_or_404(Perspective, pk=id)
        except:
            try:
                conf = ModuleSetting.get_for_module(
                    'treeio.core', 'default_perspective')[0]
                perspective = Perspective.objects.get(pk=long(conf.value))
            except:
                try:
                    perspective = Perspective.objects.all()[0]
                    ModuleSetting.set_for_module(
                        'default_perspective', perspective.id, 'treeio.core', group=self)
                except:
                    raise Perspective.DoesNotExist('No Perspective exists')
        return perspective

    def set_perspective(self, perspective):
        "Sets the Perspective for the Group"
        ModuleSetting.set_for_module(
            'default_perspective', perspective.id, 'treeio.core', group=self)

        # Ensure the Group has access to the modules in the Perspective
        modules = perspective.modules.all() or Module.objects.all()
        try:
            for module in modules:
                full_access = not module.full_access.exists() or module.full_access.filter(
                    pk=self.id).exists()
                read_access = not module.read_access.exists() or module.read_access.filter(
                    pk=self.id).exists()
                if not (read_access or full_access):
                    module.read_access.add(self)
        except:
            pass

    class Meta:

        "Group"
        ordering = ['name']


class User(AccessEntity):

    "A record about a user registered within the system"
    name = models.CharField(max_length=256)
    user = models.ForeignKey(django_auth.User)
    default_group = models.ForeignKey(
        Group, related_name='default_user_set', blank=True, null=True)
    other_groups = models.ManyToManyField(Group, blank=True, null=True)
    disabled = models.BooleanField(default=False)
    last_access = models.DateTimeField(default=datetime.now)

    class Meta:

        "User"
        ordering = ['name']

    def __unicode__(self):
        "Returns Contact name if available, username otherwise"
        contact = self.get_contact()
        if contact:
            return unicode(contact)
        else:
            return unicode(self.name)

    def save(self, *args, **kwargs):
        "Override to automatically set User.name from attached Django User"
        if not self.name and self.user:
            self.name = self.user.username
        if not self.default_group:
            try:
                self.default_group = Group.objects.all()[:1][0]
            except Exception:
                pass

        super(User, self).save(*args, **kwargs)
        # Check Hardtree Subscription user limit
        if not self.id:
            user_limit = getattr(
                settings, 'HARDTREE_SUBSCRIPTION_USER_LIMIT', 0)
            if user_limit > 0:
                user_number = User.objects.all().count()
                if user_number >= user_limit:
                    self.delete()

    def delete(self, *args, **kwargs):
        user = self.user
        super(User, self).delete(*args, **kwargs)
        try:
            user.delete()
        except:
            pass

    def get_absolute_url(self, module='identities'):
        "Returns absolute URL of the User"
        if not module or module == 'identities':
            try:
                return reverse('identities_user_view', args=[self.id])
            except Exception:
                return ""
        else:
            try:
                return reverse('core_administration_user_view', args=[self.id])
            except Exception:
                return ""

    def generate_new_password(self, size=8):
        "Generates a new password and sets it to the user"

        password = ''.join(
            [random.choice(string.letters + string.digits) for i in range(size)])

        self.user.set_password(password)
        self.user.save()

        return password

    def get_groups(self):
        "Returns the list of all groups the user belongs to"
        groups = list(self.other_groups.all())
        groups.append(self.default_group)

        return groups

    def _check_permission(self, object, mode='r'):
        "Helper for User.has_permissions(), accepts only one character for mode"

        query = models.Q(pk=self.id)
        for group in self.get_groups():
            if group:
                query = query | models.Q(pk=group.id)

        if object.full_access.filter(query).exists():
            return True

        if mode == 'r' or mode == 'x':
            if object.read_access.filter(query).exists():
                return True

        if not object.full_access.exists():
            # if no one can have full access, then allow everyone
            return True

        return False

    def has_permission(self, object, mode="r"):
        "Checks permissions on a given object for a given mode"
        if self.is_admin() or not object:
            return True

        for imode in mode:
            if not self._check_permission(object, imode):
                return False

        return True

    def is_admin(self, module_name=''):
        "True if the user has write permissions on the given module"
        access = False
        if not module_name:
            module_name = 'treeio.core'

        try:
            module = Module.objects.get(name=module_name)
            access = self._check_permission(module, mode='w')
        except Module.DoesNotExist:
            pass
        if access or module_name == 'treeio.core':
            return access
        else:
            return self.is_admin(module_name='treeio.core')

    def get_username(self):
        "String username, picked up from attached Django User or self.name string otherwise"
        if self.user:
            return self.user.username
        else:
            return self.name

    def get_perspective(self):
        "Returns currently set Perspective for the User"

        ids = []
        try:
            for setting in ModuleSetting.get_for_module('treeio.core', name='default_perspective', user=self):
                ids.append(long(setting.value))
            id = ids[0]
            perspective = get_object_or_404(Perspective, pk=id)
        except:
            try:
                perspective = self.default_group.get_perspective()
            except:
                try:
                    conf = ModuleSetting.get_for_module(
                        'treeio.core', 'default_perspective')[0]
                    perspective = Perspective.objects.get(pk=long(conf.value))
                except Exception:
                    try:
                        perspective = Perspective.objects.all()[0]
                    except:
                        perspective = Perspective(name='Default')
                        perspective.save()
                    ModuleSetting.set_for_module(
                        'default_perspective', perspective.id, 'treeio.core', user=self)
        return perspective

    def set_perspective(self, perspective):
        "Sets the Perspective for the User"
        ModuleSetting.set_for_module(
            'default_perspective', perspective.id, 'treeio.core', user=self)

        # Ensure the User has access to the modules in the Perspective
        modules = perspective.modules.all() or Module.objects.all()
        for module in modules:
            if not self.has_permission(module):
                module.read_access.add(self)

    def get_contact(self):
        "Returns first available Contact"
        try:
            contact = self.contact_set.all()[:1][0]
            return contact
        except Exception:
            return None

    def has_contact(self):
        "Returns true if any Contacts exist for this User"
        try:
            if self.contact_set.count() > 0:
                return True
            else:
                return False
        except Exception:
            return False

# User signals


def user_autocreate_handler(sender, instance, created, **kwargs):
    "When a Django User is created, automatically create a Hardtree User"
    if created:
        try:
            profile = instance.get_profile()
        except:
            profile = User(user=instance)
            profile.save()

# Autocreate a Hardtree user when Django user is created
if getattr(settings, 'HARDTREE_SIGNALS_AUTOCREATE_USER', False):
    models.signals.post_save.connect(
        user_autocreate_handler, sender=django_auth.User)


class Invitation(models.Model):

    "Invitation to register on Hardtree"
    email = models.EmailField()
    key = models.CharField(max_length=256)
    sender = models.ForeignKey(User, blank=True, null=True)
    default_group = models.ForeignKey(Group, blank=True, null=True)
    date_created = models.DateTimeField(default=datetime.now)

    def __init__(self, *args, **kwargs):
        "Create a hash automatically"
        super(Invitation, self).__init__(*args, **kwargs)
        if self.email and not self.key:
            hasher = hashlib.sha256()
            hasher.update(str(random.random()) + str(self.email))
            self.key = hasher.hexdigest()


class Tag(models.Model):

    "Model for Global Tagging"
    name = models.CharField(max_length=512)
    date_created = models.DateTimeField(default=datetime.now)

    def __unicode__(self):
        return self.name

    class Meta:
        ordering = ['name']


class Comment(models.Model):

    "Comment on any Object"
    author = models.ForeignKey(User, blank=True, null=True)
    body = models.TextField(blank=True, null=True)
    likes = models.ManyToManyField(
        User, blank=True, null=True, related_name='comments_liked')
    dislikes = models.ManyToManyField(
        User, blank=True, null=True, related_name='comments_disliked')
    date_created = models.DateTimeField(default=datetime.now)

    def __unicode__(self):
        return self.body


class Object(models.Model):

    "Generic Hardtree object"
    creator = models.ForeignKey(
        User, blank=True, null=True, related_name='objects_created', on_delete=models.SET_NULL)
    read_access = models.ManyToManyField(
        AccessEntity, blank=True, null=True, related_name='objects_read_access')
    full_access = models.ManyToManyField(
        AccessEntity, blank=True, null=True, related_name='objects_full_access')

    object_name = models.CharField(max_length=512, blank=True, null=True)
    object_type = models.CharField(max_length=512, blank=True, null=True)
    trash = models.BooleanField(default=False)

    links = models.ManyToManyField('self', blank=True, null=True)
    subscribers = models.ManyToManyField(
        User, blank=True, null=True, related_name='subscriptions')
    #subscribers_outside = models.ManyToManyField(Contact, blank=True, null=True, related_name='subscriptions_outside')
    tags = models.ManyToManyField(Tag, blank=True, null=True)

    comments = models.ManyToManyField(
        Comment, blank=True, null=True, related_name='comments')
    likes = models.ManyToManyField(
        User, blank=True, null=True, related_name='objects_liked')
    dislikes = models.ManyToManyField(
        User, blank=True, null=True, related_name='objects_disliked')

    last_updated = models.DateTimeField(auto_now=True)
    date_created = models.DateTimeField(default=datetime.now)

    nuvius_resource = models.TextField(blank=True, null=True)

    # What to inherit permissions from:
    #    default: Object's module first, then the user who created it.
    access_inherit = ('*module', '*user')

    def _get_query_filter_permitted(user, mode='r', filter_trash=True):
        "Helper for filter_permitted(), accepts one character per mode"

        query = models.Q()
        if not user.is_admin():
            query = models.Q(full_access=user) | models.Q(
                full_access__isnull=True)
            query = query | models.Q(full_access=user.default_group) | models.Q(
                full_access__in=user.other_groups.all())

            if mode == 'r' or mode == 'x':
                query = query | models.Q(read_access=user)
                query = query | models.Q(read_access=user.default_group) | models.Q(
                    read_access__in=user.other_groups.all())

        if filter_trash:
            query = query & models.Q(trash=False)

        return query
    _get_query_filter_permitted = staticmethod(_get_query_filter_permitted)

    def filter_permitted(user, manager, mode="r", filter_trash=True):
        "Returns Objects the given user is allowed to access, depending on mode - read(r), write(w) or execute(x)"
        if not user:
            return []

        query = models.Q()
        for imode in mode:
            query = query & Object._get_query_filter_permitted(
                user, imode, filter_trash)

        objects = manager.filter(query).distinct()
        return objects
    filter_permitted = staticmethod(filter_permitted)

    def filter_by_request(request, manager, mode="r", filter_trash=True):
        "Returns Objects the current user is allowed to access, depending on mode - read(r), write(w) or execute(x)"
        user = None
        if request.user.username:
            try:
                user = request.user.get_profile()
            except MultipleObjectsReturned:
                user = User.objects.filter(user__id=request.user.id)[0]
        if user:
            return Object.filter_permitted(user, manager, mode, filter_trash)
        return []
    filter_by_request = staticmethod(filter_by_request)

    def __unicode__(self):
        "String representation"
        try:
            return unicode(self.get_related_object())
        except Exception:
            return unicode(self.object_type) + " [" + unicode(self.id) + "]"

    def save(self, *args, **kwargs):
        "Override to auto-detect object type and set default user if unset"

        try:
            name = self.__unicode__()
            if not name == self.object_name:
                self.object_name = name[0:510]
        except:
            pass

        types = re.findall('\'(.+)\'', str(self.__class__))
        if types:
            self.object_type = types[0]

        object = super(Object, self).save(*args, **kwargs)

        return object

    def get_object_module(self):
        "Returns the module for this object, e.g. 'projects'"

        return getattr(self._meta, 'app_label', None)

    def get_nuvius_resources(self):
        """Returns a list of items generated from self.nuvius_resource

        The convention used is:
        Each item is specified as '#id.key#' separated by commas
        Returns items as tuples (id, key) from self.nuvius_resource
        """
        resources = []
        if self.nuvius_resource:
            text = unicode(self.nuvius_resource)
            splits = text.split(',')
            for bit in splits:
                res = bit.strip('#').split('.', 1)
                resources.append(res)
        return resources

    def add_nuvius_resource(self, resource_id, key=None):
        "Add a Nuvius resource to self.nuvius_resource"
        existing = [res[0] for res in self.get_nuvius_resources()]
        if not unicode(resource_id) in existing:
            new = "#" + unicode(resource_id)
            if key:
                new += "." + unicode(key)
            new += "#"
            if self.nuvius_resource:
                self.nuvius_resource += "," + new
            else:
                self.nuvius_resource = new
        return self

    def get_root(self):
        "Get the root element, for objects implementing a tree-like structure via .parent"

        root = self
        # keep track of items we've looked at to avoid infinite looping
        stack = [self]
        while getattr(root, 'parent', None):
            root = getattr(root, 'parent')
            if root in stack:
                break
            stack.append(root)
        return root

    def get_tree_path(self, skipself=False):
        """Get tree path as a list() starting with root element,
        for objects implementing a tree-like structure via .parent"""

        if skipself:
            path = []
        else:
            path = [self]

        current = self
        while getattr(current, 'parent', None):
            parent = getattr(current, 'parent')
            if parent in path:
                # To avoid infinite looping, check that we don't add existing
                # parent on the path again
                break
            else:
                path.insert(0, parent)
            current = parent

        return path

    def get_related_object(self):
        "Returns a child object which inherits from self, if exists"
        try:
            obj_name = re.match(
                ".*\.(?P<name>\w+)$", self.object_type).group('name')
            return getattr(self, obj_name.lower())
        except Exception:
            return None

    def get_human_type(self, translate=True):
        "Returns prettified name of the object type"
        try:
            obj_name = re.match(
                ".*\.(?P<name>\w+)$", self.object_type).group('name')
            pattern = re.compile('([A-Z][A-Z][a-z])|([a-z][A-Z])')
            human_type = pattern.sub(
                lambda m: m.group()[:1] + " " + m.group()[1:], obj_name)
            if translate:
                human_type = _(human_type)
            return human_type
        except Exception:
            return self.object_type

    def get_absolute_url(self):
        "Returns a URL to the child object, if available"
        try:
            return self.get_related_object().get_absolute_url()
        except Exception:
            return ""

    def is_searchable(self):
        "Returns True if the item should be included in Search index"
        return getattr(self, 'searchable', True)

    def is_attached(self):
        "Returns True if item is attached to some other Object and serves as a part of it"
        return getattr(self, 'attached', False)

    def get_search_item(self):
        "Constucts a search item as a dictionary with title, content and URL"

        object = self.get_related_object()
        if not object:
            object = self

        item = {
            'id': u'',
            'name': u'',
            'type': unicode(object.get_human_type()),
            'content': u'',
            'url': unicode(object.get_absolute_url())
        }

        if object.id:
            item['id'] = unicode(object.id)

        if hasattr(object, 'title'):
            item['name'] = unicode(object.title)
        elif hasattr(object, 'name'):
            item['name'] = unicode(object.name)
        else:
            item['name'] = unicode(object)

        if hasattr(self, 'body'):
            item['content'] = unicode(self.body)
        elif hasattr(self, 'details'):
            item['content'] = unicode(self.details)
        else:
            for field in self.get_fields():
                try:
                    value = self.get_field_value(field.name)
                    item['content'] += ' ' + unicode(value)
                except:
                    pass

        if hasattr(self, 'tags'):
            for tag in self.tags.all():
                item['content'] += ' ' + unicode(tag)

        return item

    def create_notification(self, action='update', author=None, *args, **kwargs):
        "Creates an UpdateRecord to be submitted to all subscribers of an Object"

        if not (self.subscribers.all().count() or author):
            return None

        notification = UpdateRecord()
        updated = False

        if action == 'delete':
            notification.format_message = "%s \"%s\" deleted."
            notification.set_format_strings(
                [unicode(self.get_human_type(translate=False)), unicode(self)])
            notification.record_type = 'delete'
            updated = True

        elif action == 'm2m':
            notification.record_type = 'update'
            if 'field' in kwargs and 'original' in kwargs and 'updated' in kwargs:
                if kwargs['updated']:
                    updated_text = ""
                    for obj in kwargs['updated']:
                        updated_text += '<a href="%s" class="popup-link">%s</a>' % (
                            obj.get_absolute_url(), unicode(obj))
                        if kwargs['updated'].index(obj) < len(kwargs['updated']) - 1:
                            updated_text += ', '
                else:
                    updated_text = "None"

                field = unicode(kwargs['field'])

                if field == 'assigned':
                    notification.format_message = "%s assigned to %s.<br />"
                    notification.set_format_strings(
                        [self.get_human_type(translate=False), updated_text])
                    notification.save()
                    for obj in kwargs['updated']:
                        if isinstance(obj, AccessEntity) or isinstance(obj, User):
                            notification.recipients.add(obj)
                            self.subscribers.add(obj)
                            try:
                                if not obj.has_permission(self, mode='w'):
                                    self.full_access.add(obj)
                            except:
                                pass
                        else:
                            try:
                                notification.recipients.add(obj.related_user)
                                self.subscribers.add(obj.related_user)
                            except:
                                pass
                            try:
                                if not obj.related_user.has_permission(self, mode='w'):
                                    self.full_access.add(obj.related_user)
                            except:
                                pass
                else:
                    notification.format_message = "%s changed to \"%s\".<br />"
                    notification.set_format_strings(
                        [field.replace('_', ' ').capitalize(), updated_text])

                updated = True

        elif action == 'create':
            notification.format_message = "%s created."
            notification.set_format_strings(
                [unicode(self.get_human_type(translate=False))])
            notification.record_type = 'create'
            updated = True

        else:
            notification.record_type = 'update'

            fields = self.get_field_names()
            original = self.get_related_object()

            notification.format_message = ""
            strings = []

            for field in fields:
                if hasattr(getattr(self, field), 'all'):
                    # Skip ManyToMany fields - they handled differently
                    continue

                if field in getattr(settings, 'HARDTREE_UPDATE_BLACKLIST', []):
                    # Skip blacklisted items
                    continue

                if 'password' in field:
                    # Skip password fields - it's not nice to give them away in
                    # plain-text
                    continue

                current = self.get_field_value(field)
                before = original.get_field_value(field)
                if current != before:
                    # cut out '_display' from some fields
                    if '_display' in field:
                        field = field.replace('_display', '')
                    if isinstance(self._meta.get_field(field), models.TextField):
                        notification.format_message += "%s changed.<br />"
                        strings.extend(
                            [unicode(field).replace('_', ' ').capitalize()])
                    elif isinstance(self._meta.get_field(field), models.DateTimeField):
                        notification.format_message += "%s changed from \"%s\" to \"%s\".<br />"
                        # this needs to be done properly, via getting current
                        # locale's format
                        localeformat = "j F Y, H:i"
                        strings.extend([unicode(field).replace('_', ' ').capitalize(),
                                        unicode(
                                            djangodate(before, localeformat)),
                                        unicode(djangodate(current, localeformat))])
                    else:
                        notification.format_message += "%s changed from \"%s\" to \"%s\".<br />"
                        strings.extend([unicode(field).replace('_', ' ').capitalize(),
                                        unicode(before), unicode(current)])
                    updated = True

            notification.set_format_strings(strings)

        if self.trash:
            try:
                old_object = Object.objects.get(pk=self.id)
                if not old_object.trash:
                    notification.format_message += " %s moved to <a href=\"%s\">%s</a>"
                    strings = notification.get_format_strings()
                    strings.extend([unicode(self.get_human_type(translate=False)),
                                    reverse('core_trash'), "Trash"])
                    notification.set_format_strings(strings)
                    notification.record_type = 'delete'
                    updated = True
            except Exception:
                pass

        if 'body' in kwargs:
            notification.body = kwargs['body']
            updated = True

        if not updated:
            return None

        notification.url = self.get_absolute_url()
        notification.author = author

        if action != 'delete':
            notification.sender = self

        notification.save()
        notification.about.add(self)
        return notification

    def set_user(self, user):
        "Sets owner of the Object to the given user"

        # get default permissions from settings
        try:
            conf = ModuleSetting.get_for_module(
                'treeio.core', 'default_permissions')[0]
            default_permissions = conf.value
        except:
            default_permissions = settings.HARDTREE_DEFAULT_PERMISSIONS

        if hasattr(user, 'get_profile'):
            user = user.get_profile()

        if not self.creator:
            self.creator = user
            self.save()

        if default_permissions == 'everyone':
            return self

        if 'force' in default_permissions:
            # Don't do automatic inheritance
            do_user = True

        else:
            # try to inherit permissions first from any parent objects as
            # specified in models.py
            cascade = getattr(self, 'access_inherit', [])
            do_user = False
            if cascade:
                for attr in cascade:
                    if attr == '*user':
                        do_user = True
                        break
                    elif attr == '*module':
                        if not 'nomodule' in default_permissions:
                            modules = Module.objects.filter(
                                name__contains=self.get_object_module())
                            if modules:
                                for module in modules:
                                    self.copy_permissions(module)
                                if not user.has_permission(self, 'w'):
                                    do_user = True
                                break
                        else:
                            do_user = True
                            break
                    else:
                        try:
                            obj = getattr(self, attr)
                            if obj:
                                self.copy_permissions(obj)
                                if not user.has_permission(self, 'w'):
                                    do_user = True
                                break
                        except:
                            pass
        if do_user:
        # if we can't inherit set permissions to the user as specified in the
        # settings

            if 'readonly' in default_permissions:
                access_container = self.read_access
            else:
                access_container = self.full_access

            if 'user' in default_permissions:
                access_container.add(user)

            if 'usergroup' in default_permissions and user.default_group:
                access_container.add(user.default_group)

            if 'userallgroups' in default_permissions:
                if user.default_group:
                    access_container.add(user.default_group)
                for group in user.other_groups.all():
                    access_container.add(group)

        # process assigned fields to give auto-permissions to assignees
        if hasattr(self, 'assigned'):
            for obj in self.assigned.all():
                if isinstance(obj, AccessEntity) or isinstance(obj, User):
                    try:
                        if not obj.has_permission(self, mode='w'):
                            self.full_access.add(obj)
                    except:
                        pass
                else:
                    try:
                        if not obj.related_user.has_permission(self, mode='w'):
                            self.full_access.add(obj.related_user)
                    except:
                        pass

        return self

    def set_default_user(self):
        "Sets the user defined in settings.HARDTREE_DEFAULT_USER_ID and default mode"
        try:
            user = User.objects.get(pk=settings.HARDTREE_DEFAULT_USER_ID)
        except:
            try:
                user = User.objects.all()[0]
            except IndexError:
                user = None
        self.set_user(user)
        return self

    def set_user_from_request(self, request, mode=None):
        "Sets the user to the current in request and default mode for the user"
        user = request.user.get_profile()
        self.set_user(user)
        return self

    def copy_permissions(self, object):
        "Copies all permissions from object. Existing permissions will NOT be removed or dropped"
        read_access = object.read_access.all()
        for entity in read_access:
            self.read_access.add(entity)

        full_access = object.full_access.all()
        for entity in full_access:
            self.full_access.add(entity)

        return self

    def get_fields(self):
        "Returns list of fields for given object"
        return filter(lambda f: f.name not in settings.HARDTREE_OBJECT_BLACKLIST, self._meta.fields)

    def get_field_names(self):
        "Returns list of field names for given object"
        x = []
        for f in self._meta.fields:
            if f.name not in settings.HARDTREE_OBJECT_BLACKLIST:
                x.append(f.name)
        for f in self._meta.many_to_many:
            if f.name not in settings.HARDTREE_OBJECT_BLACKLIST:
                x.append(f.name)
        return x

    def get_field_value(self, field_name, default=None):
        "Returns the value of a given field"
        value = getattr(self, field_name, default)
        if hasattr(value, 'all'):
            # Returns value for ManyToMany fields
            value = value.all()
        if hasattr(self, 'get_%s_display' % field_name):
            # Handle choices to ChoiceFields
            try:
                value = getattr(self, 'get_%s_display' % field_name)()
            except:
                pass
        return value

    def set_field_value(self, field_name, value):
        "Sets the value of a given field"
        return setattr(self, field_name)

    def set_last_updated(self, last_updated=datetime.now()):
        self.last_updated = last_updated
        self.save()


class Revision(models.Model):
    previous = models.OneToOneField(
        'self', blank=True, null=True, related_name='next')
    object = models.ForeignKey(Object)
    change_type = models.CharField(max_length=512, null=True, blank=True)
    date_created = models.DateTimeField(default=datetime.now)


class RevisionField(models.Model):
    revision = models.ForeignKey(Revision)
    field_type = models.CharField(max_length=512, null=True, blank=True)
    field = models.CharField(max_length=512, null=True, blank=True)
    value = models.TextField(null=True, blank=True)
    value_key = models.ForeignKey(
        Object, null=True, blank=True, related_name='revisionfield_key', on_delete=models.SET_NULL)
    value_m2m = models.ManyToManyField(
        Object, related_name='revisionfield_m2m')
    value_key_acc = models.ForeignKey(
        AccessEntity, null=True, blank=True, related_name='revisionfield_key_acc', on_delete=models.SET_NULL)
    value_m2m_acc = models.ManyToManyField(
        AccessEntity, related_name='revisionfield_m2m_acc')


class UpdateRecord(models.Model):

    "Update of an Object"
    author = models.ForeignKey(
        User, blank=True, null=True, related_name="sent_updates")
    sender = models.ForeignKey(
        Object, blank=True, null=True, related_name="sent_updates", on_delete=models.SET_NULL)
    about = models.ManyToManyField(
        Object, blank=True, null=True, related_name="updates")
    recipients = models.ManyToManyField(
        AccessEntity, blank=True, null=True, related_name="received_updates")
    #recipients_outside = models.ManyToManyField(Contact, blank=True, null=True, related_name="outside_received_updates")
    record_type = models.CharField(max_length=32,
                                   choices=(('create', 'create'), ('update', 'update'),
                                            ('delete', 'delete'), (
                                                'trash', 'trash'),
                                            ('message', 'message'),
                                            ('manual', 'manual'), ('share', 'share')))
    url = models.CharField(max_length=512, blank=True, null=True)
    body = models.TextField(default='', blank=True, null=True)
    score = models.IntegerField(default=0)
    format_message = models.TextField(blank=True, null=True)
    format_strings = models.TextField(blank=True, null=True)
    comments = models.ManyToManyField(
        Comment, blank=True, null=True, related_name='comments_on_updates')
    likes = models.ManyToManyField(
        User, blank=True, null=True, related_name='updates_liked')
    dislikes = models.ManyToManyField(
        User, blank=True, null=True, related_name='updates_disliked')
    date_created = models.DateTimeField(default=datetime.now)

    class Meta:

        "UpdateRecord"
        ordering = ['-date_created']

    def __unicode__(self):
        return self.body

    def set_user_from_request(self, request):
        "Sets .author to current user and .sender to user's Contact (if available)"
        user = request.user.get_profile()
        self.author = user
        self.recipients.add(user)
        contact = user.get_contact()
        if contact:
            self.sender = contact
        self.save()

    def set_format_strings(self, strings):
        "Sets format_strings to the list of strings"
        self.format_strings = base64.b64encode(
            pickle.dumps(strings, pickle.HIGHEST_PROTOCOL))
        return self

    def extend_format_strings(self, strings):
        "Extends existing format strings"
        existing = self.get_format_strings()
        if existing:
            existing.extend(strings)
        else:
            existing = strings
        self.set_format_strings(existing)
        return self

    def get_format_strings(self):
        "Gets format_strings as a list of strings"
        result = None
        if self.format_strings:
            try:
                result = pickle.loads(base64.b64decode(self.format_strings))
            except pickle.PickleError:
                pass
        return result

    def get_format_message(self):
        "Returns translatable message in the current language with all attributes applied"
        strings = self.get_format_strings()
        result = ''
        if self.format_message:
            result = self.format_message
        if result and strings:
            try:
                # first, try to translate
                translated = []
                for item in strings:
                    if item:
                        translated.append(_(item))
                    else:
                        translated.append(_("None"))
                result = _(self.format_message) % tuple(translated)
            except TypeError:
                # then try untranslated
                try:
                    result = self.format_message % tuple(strings)
                except TypeError:
                    # give up
                    pass
        return result

    def get_full_message(self):
        "Return full message"
        result = ''
        format_message = self.get_format_message()
        if format_message:
            result += format_message
        if self.body:
            result += '<p>' + self.body + '</p>'
        if result.endswith('<br />'):
            result = result[:len(result) - 6]
        return result
    full_message = property(get_full_message)

    def notify_subscribers(self, obj, *args, **kwargs):
        if obj not in self.about.all():
            return
        author = self.author
        if author:
            # E-mail contents for e-mail notifications
            full_message = self.get_full_message()
            html = '%s:<br /><br />\n\n<a href="%s">%s</a> (%s):<br /><br />\n\n%s<br /><br />\n\n' % \
                (unicode(author), obj.get_absolute_url(), unicode(obj),
                 unicode(obj.get_human_type()), full_message)
            grittertext = '%s:<br />\n\n<a href="#%s">%s</a> (%s):<br />\n\n%s<br />\n\n' % \
                (unicode(author), obj.get_absolute_url(), unicode(obj),
                 unicode(obj.get_human_type()), full_message)
            if 'request' in kwargs:
                domain = RequestSite(kwargs['request']).domain
                html = html.replace('href="', 'href="http://' + domain)
            body = strip_tags(html)
            signature = "This is an automated message from Tree.io service (http://tree.io). Please do not reply to this e-mail."
            subject = "[Tree.io%s] %s: %s - %s" % (' #%d' % obj.id if self.record_type != 'delete' else '', unicode(author),
                                                   unicode(obj.get_human_type()), unicode(strip_tags(full_message)[:100]))

            for recipient in self.recipients.all():
                if author and author.id == recipient.id:
                    continue
                email_notifications = getattr(
                    settings, 'HARDTREE_ALLOW_EMAIL_NOTIFICATIONS', False)
                gritter_notifications = getattr(
                    settings, 'HARDTREE_ALLOW_GRITTER_NOTIFICATIONS', False)
                try:
                    conf = ModuleSetting.get(
                        'email_notifications', user=recipient)[0]
                    email_notifications = conf.value
                except:
                    pass

                if email_notifications == 'True':
                    try:
                        toaddr = recipient.get_entity(
                        ).get_contact().get_email()
                    except:
                        toaddr = None
                    if toaddr:
                        SystemEmail(
                            toaddr, subject, body, signature, html + signature).send_email()

                if gritter_notifications:
                    try:
                        request = HttpRequest()
                        request.user = recipient.user.user
                        storage = default_storage(request)
                        storage._add(
                            Message(messages.constants.INFO, "%s" % grittertext))
                    except:
                        pass


class Module(Object):

    "Record of a module (application) existing within the system"
    name = models.CharField(max_length=256)
    title = models.CharField(max_length=256)
    details = models.TextField(blank=True)
    url = models.CharField(max_length=512)
    display = models.BooleanField(default=True)
    system = models.BooleanField(default=True)

    searcheable = False

    class Meta:

        "Module"
        ordering = ['name']

    def get_absolute_url(self):
        "Returns absolute URL"
        try:
            return reverse('core_admin_module_view', args=[self.id])
        except Exception:
            pass

    def __unicode__(self):
        return self.title


class Perspective(Object):

    "Defines a set of modules enabled for a given user"
    name = models.CharField(max_length=256)
    details = models.TextField(blank=True)
    modules = models.ManyToManyField(Module, blank=True, null=True)

    def __unicode__(self):
        return self.name

    def get_absolute_url(self):
        "Returns absolute URL"
        try:
            return reverse('core_admin_perspective_view', args=[self.id])
        except Exception:
            pass

    def get_modules(self):
        "Get Modules"
        modules = self.modules.all()
        if not modules:
            modules = Module.objects.all()
        return modules


class ModuleSetting(models.Model):

    "Free-type Module setting"
    name = models.CharField(max_length=512)
    label = models.CharField(max_length=512)
    perspective = models.ForeignKey(Perspective, blank=True, null=True)
    module = models.ForeignKey(Module, blank=True, null=True)
    user = models.ForeignKey(User, blank=True, null=True)
    group = models.ForeignKey(Group, blank=True, null=True)
    value = models.TextField()

    def loads(self):
        "Unpickle a ModuleSetting value"
        result = None
        if self.value:
            try:
                result = pickle.loads(base64.b64decode((self.value)))
            except pickle.PickleError:
                pass
        return result

    def dumps(self, value):
        "Pickle a ModuleSetting value"
        self.value = base64.b64encode(
            pickle.dumps(value, pickle.HIGHEST_PROTOCOL))
        return self

    def get(name='', strict=False, **kwargs):
        "Setting getter"
        if name:
            settings = ModuleSetting.objects.filter(name=name)
        else:
            settings = ModuleSetting.objects.all()
        if strict:
            settings = settings.filter(**kwargs)
        elif settings:
            new_settings = settings
            for arg in kwargs:
                new_settings = new_settings.filter(**{arg: kwargs[arg]})
                if new_settings:
                    settings = new_settings
                else:
                    new_settings = settings

        return settings
    get = staticmethod(get)

    def get_for_module(module_name, name='', strict=False, **kwargs):
        "Get a setting per module"
        try:
            module = Module.objects.get(name=module_name)
            return ModuleSetting.get(name=name, module=module, strict=strict, **kwargs)
        except Exception:
            return None
    get_for_module = staticmethod(get_for_module)

    def set(name, value, **kwargs):
        "Define a ModuleSetting"
        existing = ModuleSetting.objects.filter(name=name, **kwargs)
        if existing:
            for setting in existing:
                setting.value = value
                setting.save()
        else:
            setting = ModuleSetting(name=name, value=value, **kwargs)
            setting.save()
        return setting
    set = staticmethod(set)

    def add(name, value, **kwargs):
        "Add a ModuleSetting"
        setting = ModuleSetting(name=name, value=value, **kwargs)
        setting.save()
        return setting
    add = staticmethod(add)

    def set_for_module(name, value, module_name, **kwargs):
        "Define a ModuleSetting per module"
        try:
            module = Module.objects.get(name=module_name)
            return ModuleSetting.set(name=name, value=value, module=module, **kwargs)
        except Exception:
            return None
    set_for_module = staticmethod(set_for_module)

    def add_for_module(name, value, module_name, **kwargs):
        "Add a ModuleSetting per module"
        try:
            module = Module.objects.get(name=module_name)
            return ModuleSetting.add(name=name, value=value, module=module, **kwargs)
        except Exception:
            return None
    add_for_module = staticmethod(add_for_module)

    def __unicode__(self):
        return unicode(self.name) + ": " + unicode(self.value)

    def save(self, *args, **kwargs):
        "Override to set label from name if undefined"
        if not self.label:
            self.label = self.name
        super(ModuleSetting, self).save(*args, **kwargs)


class ConfigSetting(models.Model):

    "Config setting to be activated dynamically from the database on request"
    name = models.CharField(max_length=255, unique=True)
    value = models.TextField(blank=True, null=True)
    last_updated = models.DateTimeField(auto_now=True)

    def __unicode__(self):
        return unicode(self.loads())

    def loads(self):
        "Unpickle a ModuleSetting value"
        result = None
        try:
            result = pickle.loads(base64.b64decode((self.value)))
        except:
            result = self.value
        return result

    def dumps(self, value):
        "Pickle a ModuleSetting value"
        self.value = base64.b64encode(
            pickle.dumps(value, pickle.HIGHEST_PROTOCOL))
        return self

    def save(self, *args, **kwargs):
        self.dumps(self.value)
        super(ConfigSetting, self).save(*args, **kwargs)


class IntegrationResource:

    """ Resource set for integration via Nuvius

    nuvius_id     = <ID of the user on Nuvius (may be obtained via JSONP call>
    resource_id   = <Application ID, i.e. 1 for Facebook>
    resource_name = <Application name, i.e. Google Contacts>
    services      = <Data points ID on Nuvius, e.g. for /services/news/ ID is 37rw to read/write>
    role          = <Usually master or slave>

    """

    nuvius_id = 0
    resource_id = 0
    resource_name = ''
    service = ''
    role = 'slave'

    def __init__(self, nuvius_id, resource_id, resource_name, services='', role='slave'):
        "Initialize an Integration Resource"

        self.nuvius_id = nuvius_id
        self.resource_id = resource_id
        self.resource_name = resource_name
        self.services = services
        if not self.service:
            self.service = getattr(settings, 'NUVIUS_SERVICES', '')
        self.role = role


class Location(Object):

    "Location for users, assets, etc."
    name = models.CharField(max_length=512)
    parent = models.ForeignKey(
        'self', blank=True, null=True, related_name='child_set')

    def __unicode__(self):
        return self.name

    def get_absolute_url(self):
        "Returns absolute URL"
        try:
            return reverse('identities_location_view', args=[self.id])
        except Exception:
            pass


class PageFolder(Object):

    "Folder for static Pages"
    name = models.CharField(max_length=256)
    details = models.TextField(blank=True)

    searchable = False

    def __unicode__(self):
        return self.name

    def get_absolute_url(self):
        "Returns absolute URL"
        try:
            return reverse('core_admin_pagefolder_view', args=[self.id])
        except Exception:
            pass


class Page(Object):

    "Static page"
    name = models.CharField(max_length=256)
    title = models.CharField(max_length=256)
    folder = models.ForeignKey(PageFolder)
    body = models.TextField(blank=True)
    published = models.BooleanField(default=True)

    searchable = False

    class Meta:

        "Page"
        ordering = ['name']

    def __unicode__(self):
        return self.title

    def get_absolute_url(self):
        "Returns absolute URL"
        try:
            return reverse('core_admin_page_view', args=[self.id])
        except Exception:
            pass


class Widget(models.Model):

    "Widget object to remember the set and order of Widget for a user"
    user = models.ForeignKey(User)
    perspective = models.ForeignKey(Perspective)
    module_name = models.CharField(max_length=256)
    widget_name = models.CharField(max_length=256)
    weight = models.IntegerField(default=0)

    def __unicode__(self):
        return self.widget_name

    class Meta:

        "Widget"
        ordering = ['weight']


class Attachment(models.Model):

    "Attachment object to upload and reference a file"
    filename = models.CharField(max_length=64)
    attached_object = models.ForeignKey(Object, blank=True, null=True)
    attached_record = models.ForeignKey(UpdateRecord, blank=True, null=True)
    attached_file = models.FileField(upload_to='attachments')
    mimetype = models.CharField(max_length=64, editable=False)
    created = models.DateTimeField(auto_now_add=True, editable=False)
    uploaded_by = models.ForeignKey(User)

    class Meta:
        ordering = ['-id']

    def __unicode__(self):
        return unicode(self.filename)

    def get_file_type(self):
        match = re.match(
            '.*\.(?P<extension>[a-zA-Z0-9]+)$', unicode(self.filename))
        if match:
            return unicode(match.group('extension')).upper()
        else:
            return ''

    def can_preview(self):
        filetype = self.get_file_type()
        exts = ('PNG', 'JPG', 'JPEG', 'BMP', 'GIF', 'SVG')
        if filetype.upper() in exts:
            return True
        return False

    def get_icon(self):
        if self.get_file_type() == 'PDF':
            # PDF
            return 'pdf'
        elif self.get_file_type() in ['DOCX', 'DOC', 'TXT']:
            # Documents
            return 'blue-document-word'
        elif self.get_file_type() in ['JPG', 'JPEG', 'GIF', 'PNG', 'TIFF', 'PSD', 'BMP']:
            # Images
            return 'image'
        else:
            # Other
            return 'blue-document'

    def delete(self, *args, **kwargs):
        filepath = os.path.join(
            getattr(settings, 'MEDIA_ROOT'), 'attachments', self.attached_file.name)
        try:
            self.attached_file.delete()
            os.remove(filepath)
        except:
            pass
        super(Attachment, self).delete(*args, **kwargs)

########NEW FILE########
__FILENAME__ = rendering
"""
Rendering routines for Hardtree
"""

from django.http import HttpResponse
from django.contrib.sites.models import RequestSite
from django.utils.translation import ugettext as _
from django.forms import BaseForm
from django.contrib import messages
from jinja2 import Template
from coffin.template import loader
from treeio.core.conf import settings
from treeio.core.models import UpdateRecord
from treeio.core.ajax.converter import preprocess_context as preprocess_context_ajax, convert_to_ajax
import hashlib
import random
import os
import codecs
import re
import subprocess
import json


def _preprocess_context_html(context):
    "Prepares context to be rendered for HTML"

    # Process popuplink fields
    for key in context:
        if isinstance(context[key], BaseForm):
            form = context[key]
            for fname in form.fields:
                field = form.fields[fname]
                try:
                    # find popuplink fields
                    if field.widget.attrs and 'popuplink' in field.widget.attrs:
                        field.help_text += '<a href="%s" field="id_%s" id="link-%s" class="inline-link add-link popup-link">%s</a>' % \
                            (field.widget.attrs['popuplink'], fname, fname, _("New"))
                except Exception:
                    pass

    return context


def render_to_string(template_name, context={}, context_instance=None, response_format='html'):
    "Picks up the appropriate template to render to string"

    if not response_format or 'pdf' in response_format or not response_format in settings.HARDTREE_RESPONSE_FORMATS:
        response_format = 'html'

    if not ("." + response_format) in template_name:
        template_name += "." + response_format

    template_name = response_format + "/" + template_name

    context['response_format'] = response_format
    if context_instance:
        context['site_domain'] = RequestSite(
            context_instance['request']).domain

    context = _preprocess_context_html(context)

    rendered_string = loader.render_to_string(
        template_name, context, context_instance)
    return rendered_string


def render_to_ajax(template_name, context={}, context_instance=None):
    "Render request into JSON object to be handled by AJAX on the server-side"

    response_format = 'html'
    if not 'response_format_tags' in context:
        context['response_format_tags'] = 'ajax'

    context = preprocess_context_ajax(context)
    content = render_to_string(
        template_name, context, context_instance, response_format)
    content = convert_to_ajax(content, context_instance)
    context['content'] = json.dumps(content)

    notifications = []
    if context_instance and 'request' in context_instance:
        request = context_instance['request']
        maxmsgs = 5
        try:
            for message in list(messages.get_messages(request))[:maxmsgs]:
                msgtext = unicode(message)
                if 'updaterecord:' in msgtext[:13]:
                    try:
                        update_id = int(msgtext.split(':', 1)[1])
                        update = UpdateRecord.objects.get(pk=update_id)
                        message = {'message': update.get_full_message(),
                                   'tags': message.tags}
                        if update.author:
                            if update.record_type == 'manual' or update.record_type == 'share':
                                try:
                                    message[
                                        'image'] = update.author.get_contact().get_picture()
                                except:
                                    pass
                            message['title'] = unicode(update.author)
                        for obj in update.about.all():
                            message[
                                'message'] = "(%s) %s:<br />%s" % (obj.get_human_type(), unicode(obj), message['message'])
                        notifications.append(message)
                    except:
                        pass
                else:
                    notifications.append({'message': unicode(message),
                                          'tags': message.tags})
        except:
            pass
    context['notifications'] = json.dumps(notifications)

    rendered_string = render_to_string(
        'ajax_base', context, context_instance, response_format='json')

    return rendered_string


def render_to_response(template_name, context={}, context_instance=None, response_format='html'):
    "Extended render_to_response to support different formats"

    if not response_format:
        response_format = 'html'

    if not response_format in settings.HARDTREE_RESPONSE_FORMATS:
        response_format = 'html'

    mimetype = settings.HARDTREE_RESPONSE_FORMATS[response_format]

    if 'pdf' in response_format:
        while True:
            hasher = hashlib.md5()
            hasher.update(str(random.random()))
            filepath = u"pdfs/" + hasher.hexdigest()
            output = settings.MEDIA_ROOT + filepath
            if not os.path.exists(output + ".pdf"):
                break

        while True:
            hasher = hashlib.md5()
            hasher.update(str(random.random()))
            filepath = hasher.hexdigest() + ".html"
            source = getattr(settings, 'WKCWD', './') + filepath
            if not os.path.exists(source):
                break

        page_size = "A4"
        orientation = "portrait"

        rendered_string = render_to_string(
            template_name, context, context_instance, response_format)

        f = codecs.open(source, encoding='utf-8', mode='w')
        pdf_string = unicode(rendered_string)

        if context_instance and context_instance['request']:
            pdf_string = pdf_string.replace(
                "a href=\"/", "a href=\"http://" + RequestSite(context_instance['request']).domain + "/")

        pdf_string.replace("href=\"/", "href=\"")

        pattern = """Content-Type: text/html|<td>\n\W*<div class="content-list-tick">\n\W.*\n.*</div></td>|<th scope="col">Select</th>"""
        pdf_string = re.sub(pattern, "", pdf_string).replace(
            '/static/', 'static/')

        f.write(pdf_string)
        f.close()

        wkpath = getattr(settings, 'WKPATH', './bin/wkhtmltopdf-i386')
        x = subprocess.Popen("%s --print-media-type --orientation %s --page-size %s %s %s" %
                             (wkpath,
                              orientation,
                              page_size,
                              source,
                              output),
                             shell=True,
                             cwd=getattr(settings, 'WKCWD', './'))
        x.wait()

        f = open(output)
        response = HttpResponse(f.read(), mimetype='application/pdf')
        f.close()

        os.remove(output)
        os.remove(source)

        #response['Content-Disposition'] = 'attachment; filename=%s'%(pdf_name)

        return response

    if 'ajax' in response_format:
        rendered_string = render_to_ajax(
            template_name, context, context_instance)

    else:

        if response_format == 'html' and context_instance and context_instance['request'].path[:3] == '/m/':
            context['response_format'] = response_format = 'mobile'

        if getattr(settings, 'HARDTREE_FORCE_AJAX_RENDERING', False):
            context = preprocess_context_ajax(context)

        rendered_string = render_to_string(
            template_name, context, context_instance, response_format)

    response = HttpResponse(rendered_string, mimetype=mimetype)

    return response


def render_string_template(template_string, context={}, context_instance=None):
    """
    Performs rendering using template_string instead of a file, and context.
    context_instance is only used to feed user into context (unless already defined)

    Returns string.
    """

    template = Template(template_string)
    if not 'user' in context and context_instance:
        if 'request' in context_instance:
            context.update({'user': context_instance['request']})

    return template.render(context)


def get_template_source(template_name, response_format='html'):
    "Returns source of the template file"

    if not response_format or 'pdf' in response_format or not response_format in settings.HARDTREE_RESPONSE_FORMATS:
        response_format = 'html'

    if not ("." + response_format) in template_name:
        template_name += "." + response_format

    template_name = response_format + "/" + template_name

    t = loader.get_template(template_name)
    f = open(t.filename, 'r')

    return f.read()

########NEW FILE########
__FILENAME__ = rss
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Global RSS Framework
"""
from django.contrib.syndication.views import Feed
from django.contrib.sites.models import RequestSite
from treeio.core.models import Object, UpdateRecord, User
import hashlib
import random


class ObjectFeed(Feed):

    "Generic RSS class"

    def __init__(self, title, link, description, objects, *args, **kwargs):
        self.title = title
        self.link = link
        self.description = description
        self.key = ''
        self.objects = objects
        super(ObjectFeed, self).__init__(*args, **kwargs)

    def __call__(self, request, *args, **kwargs):
        "Generates response"
        self.site_url = 'http://' + RequestSite(request).domain
        self.link = self.site_url + self.link
        response = super(ObjectFeed, self).__call__(request, *args, **kwargs)
        # Dirty hack for "example.com" - I hate it too but it works (contrast to all other solutions)
        # TODO: proper workaround for "example.com" in URLs
        # P.S. worship Ctulhu before you attempt this
        response.content = response.content.replace(
            'http://example.com', self.site_url)
        return response

    def get_object(self, request, *args, **kwargs):
        "Returns feed objects"
        return self.objects[:50]

    def items(self, obj):
        "Returns a single object"
        return obj

    def item_title(self, obj):
        "Returns object title"
        if isinstance(obj, Object):
            return obj.creator
        elif isinstance(obj, UpdateRecord):
            return obj.author

    def item_pubdate(self, obj):
        "Returns object's date_created"
        return obj.date_created

    def item_description(self, obj):
        "Returns object's body, details or full message"
        if isinstance(obj, Object):
            if obj.body:
                return obj.body
            else:
                return obj.details
        elif isinstance(obj, UpdateRecord):
            body = ''
            for object in obj.about.all():
                body += '<a href="' + self.site_url + \
                    object.get_absolute_url(
                    ) + '">' + unicode(object) + ' (' + object.get_human_type() + ')</a><br />'
            body += obj.get_full_message()
            return body

    def item_link(self, obj):
        "Returns object's full url"
        if isinstance(obj, Object):
            return self.site_url + obj.get_absolute_url()
        elif isinstance(obj, UpdateRecord):
            # link must be unique
            return self.link + '?' + str(random.random())


def verify_secret_key(request):
    "Verifies secret key for a request"
    if request.user.username:
        # always allow authenticated users
        return True
    else:
        key = request.GET['secret']
        user_id, secret = key.split('.', 1)
        try:
            profile = User.objects.get(pk=user_id)
        except:
            return False
        if key == get_secret_key(request, profile):
            request.user = profile.user
            return True
    return False


def get_secret_key(request, profile=None):
    "Generates secret key for a request in RSS format"
    if not profile:
        if request.user.username:
            profile = request.user.get_profile()
    if profile:
        params = request.GET.copy()
        if 'secret' in params:
            del params['secret']
        hash = hashlib.sha224()
        hash.update(unicode(params))
        hash.update(unicode(profile.id))
        hash.update(unicode(profile.user.date_joined))
        key = unicode(profile.id) + '.' + hash.hexdigest()
        return key
    return ''

########NEW FILE########
__FILENAME__ = sanitizer
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

import re
from xml.sax.saxutils import escape, unescape
import html5lib
from html5lib import treebuilders, treewalkers, serializer
from html5lib.tokenizer import HTMLTokenizer
from html5lib.constants import tokenTypes


class HTMLSanitizerMixin(object):

    """ sanitization of XHTML+MathML+SVG and of inline style attributes."""

    acceptable_elements = ['a', 'abbr', 'acronym', 'address', 'area',
                           'article', 'aside', 'audio', 'b', 'big', 'blockquote', 'br', 'button',
                           'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup',
                           'command', 'datagrid', 'datalist', 'dd', 'del', 'details', 'dfn',
                           'dialog', 'dir', 'div', 'dl', 'dt', 'em', 'event-source', 'fieldset',
                           'figcaption', 'figure', 'footer', 'font', 'form', 'header', 'h1',
                           'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'i', 'img', 'input', 'ins',
                           'keygen', 'kbd', 'label', 'legend', 'li', 'm', 'map', 'menu', 'meter',
                           'multicol', 'nav', 'nextid', 'ol', 'output', 'optgroup', 'option',
                           'p', 'pre', 'progress', 'q', 's', 'samp', 'section', 'select',
                           'small', 'sound', 'source', 'spacer', 'span', 'strike', 'strong',
                           'sub', 'sup', 'table', 'tbody', 'td', 'textarea', 'time', 'tfoot',
                           'th', 'thead', 'tr', 'tt', 'u', 'ul', 'var', 'video']

    mathml_elements = ['maction', 'math', 'merror', 'mfrac', 'mi',
                       'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom',
                       'mprescripts', 'mroot', 'mrow', 'mspace', 'msqrt', 'mstyle', 'msub',
                       'msubsup', 'msup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder',
                       'munderover', 'none']

    svg_elements = ['a', 'animate', 'animateColor', 'animateMotion',
                    'animateTransform', 'clipPath', 'circle', 'defs', 'desc', 'ellipse',
                    'font-face', 'font-face-name', 'font-face-src', 'g', 'glyph', 'hkern',
                    'linearGradient', 'line', 'marker', 'metadata', 'missing-glyph',
                    'mpath', 'path', 'polygon', 'polyline', 'radialGradient', 'rect',
                    'set', 'stop', 'svg', 'switch', 'text', 'tspan', 'use']

    acceptable_attributes = ['abbr', 'accept', 'accept-charset', 'accesskey',
                             'action', 'align', 'alt', 'autocomplete', 'autofocus', 'axis',
                             'background', 'balance', 'bgcolor', 'bgproperties', 'border',
                             'bordercolor', 'bordercolordark', 'bordercolorlight', 'bottompadding',
                             'cellpadding', 'cellspacing', 'ch', 'challenge', 'char', 'charoff',
                             'choff', 'charset', 'checked', 'cite', 'class', 'clear', 'color', 'callback',
                             'cols', 'colspan', 'compact', 'contenteditable', 'controls', 'coords',
                             'data', 'datafld', 'datapagesize', 'datasrc', 'datetime', 'default',
                             'delay', 'dir', 'disabled', 'draggable', 'dynsrc', 'enctype', 'end',
                             'face', 'for', 'form', 'field', 'frame', 'galleryimg', 'gutter', 'headers',
                             'height', 'hidefocus', 'hidden', 'high', 'href', 'hreflang', 'hspace',
                             'icon', 'id', 'inputmode', 'ismap', 'keytype', 'label', 'leftspacing',
                             'lang', 'list', 'longdesc', 'loop', 'loopcount', 'loopend',
                             'loopstart', 'low', 'lowsrc', 'max', 'maxlength', 'media', 'method',
                             'min', 'multiple', 'name', 'nohref', 'noshade', 'nowrap', 'open',
                             'optimum', 'pattern', 'ping', 'point-size', 'prompt', 'pqg',
                             'radiogroup', 'readonly', 'rel', 'repeat-max', 'repeat-min',
                             'replace', 'required', 'rev', 'rightspacing', 'rows', 'rowspan',
                             'rules', 'scope', 'selected', 'shape', 'size', 'span', 'src', 'start',
                             'step', 'style', 'summary', 'suppress', 'tabindex', 'target',
                             'template', 'title', 'toppadding', 'type', 'unselectable', 'usemap',
                             'urn', 'valign', 'value', 'variable', 'volume', 'vspace', 'vrml',
                             'width', 'wrap', 'xml:lang']

    mathml_attributes = ['actiontype', 'align', 'columnalign', 'columnalign',
                         'columnalign', 'columnlines', 'columnspacing', 'columnspan', 'depth',
                         'display', 'displaystyle', 'equalcolumns', 'equalrows', 'fence',
                         'fontstyle', 'fontweight', 'frame', 'height', 'linethickness', 'lspace',
                         'mathbackground', 'mathcolor', 'mathvariant', 'mathvariant', 'maxsize',
                         'minsize', 'other', 'rowalign', 'rowalign', 'rowalign', 'rowlines',
                         'rowspacing', 'rowspan', 'rspace', 'scriptlevel', 'selection',
                         'separator', 'stretchy', 'width', 'width', 'xlink:href', 'xlink:show',
                         'xlink:type', 'xmlns', 'xmlns:xlink']

    svg_attributes = ['accent-height', 'accumulate', 'additive', 'alphabetic',
                      'arabic-form', 'ascent', 'attributeName', 'attributeType',
                      'baseProfile', 'bbox', 'begin', 'by', 'calcMode', 'cap-height',
                      'class', 'clip-path', 'color', 'color-rendering', 'content', 'cx',
                      'cy', 'd', 'dx', 'dy', 'descent', 'display', 'dur', 'end', 'fill',
                      'fill-opacity', 'fill-rule', 'font-family', 'font-size',
                      'font-stretch', 'font-style', 'font-variant', 'font-weight', 'from',
                      'fx', 'fy', 'g1', 'g2', 'glyph-name', 'gradientUnits', 'hanging',
                      'height', 'horiz-adv-x', 'horiz-origin-x', 'id', 'ideographic', 'k',
                      'keyPoints', 'keySplines', 'keyTimes', 'lang', 'marker-end',
                      'marker-mid', 'marker-start', 'markerHeight', 'markerUnits',
                      'markerWidth', 'mathematical', 'max', 'min', 'name', 'offset',
                      'opacity', 'orient', 'origin', 'overline-position',
                      'overline-thickness', 'panose-1', 'path', 'pathLength', 'points',
                      'preserveAspectRatio', 'r', 'refX', 'refY', 'repeatCount',
                      'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart',
                      'rotate', 'rx', 'ry', 'slope', 'stemh', 'stemv', 'stop-color',
                      'stop-opacity', 'strikethrough-position', 'strikethrough-thickness',
                      'stroke', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap',
                      'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity',
                      'stroke-width', 'systemLanguage', 'target', 'text-anchor', 'to',
                      'transform', 'type', 'u1', 'u2', 'underline-position',
                      'underline-thickness', 'unicode', 'unicode-range', 'units-per-em',
                      'values', 'version', 'viewBox', 'visibility', 'width', 'widths', 'x',
                      'x-height', 'x1', 'x2', 'xlink:actuate', 'xlink:arcrole',
                      'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type',
                      'xml:base', 'xml:lang', 'xml:space', 'xmlns', 'xmlns:xlink', 'y',
                      'y1', 'y2', 'zoomAndPan']

    attr_val_is_uri = ['href', 'src', 'cite', 'action', 'longdesc',
                       'xlink:href', 'xml:base']

    svg_attr_val_allows_ref = ['clip-path', 'color-profile', 'cursor', 'fill',
                               'filter', 'marker', 'marker-start', 'marker-mid', 'marker-end',
                               'mask', 'stroke']

    svg_allow_local_href = ['altGlyph', 'animate', 'animateColor',
                            'animateMotion', 'animateTransform', 'cursor', 'feImage', 'filter',
                            'linearGradient', 'pattern', 'radialGradient', 'textpath', 'tref',
                            'set', 'use']

    acceptable_css_properties = ['azimuth', 'background-color',
                                 'border-bottom-color', 'border-collapse', 'border-color',
                                 'border-left-color', 'border-right-color', 'border-top-color', 'clear',
                                 'color', 'cursor', 'direction', 'display', 'elevation', 'float', 'font',
                                 'font-family', 'font-size', 'font-style', 'font-variant', 'font-weight',
                                 'height', 'letter-spacing', 'line-height', 'overflow', 'pause',
                                 'pause-after', 'pause-before', 'pitch', 'pitch-range', 'richness',
                                 'speak', 'speak-header', 'speak-numeral', 'speak-punctuation',
                                 'speech-rate', 'stress', 'text-align', 'text-decoration', 'text-indent',
                                 'unicode-bidi', 'vertical-align', 'voice-family', 'volume',
                                 'white-space', 'width']

    acceptable_css_keywords = ['auto', 'aqua', 'black', 'block', 'blue',
                               'bold', 'both', 'bottom', 'brown', 'center', 'collapse', 'dashed',
                               'dotted', 'fuchsia', 'gray', 'green', '!important', 'italic', 'left',
                               'lime', 'maroon', 'medium', 'none', 'navy', 'normal', 'nowrap', 'olive',
                               'pointer', 'purple', 'red', 'right', 'solid', 'silver', 'teal', 'top',
                               'transparent', 'underline', 'white', 'yellow']

    acceptable_svg_properties = ['fill', 'fill-opacity', 'fill-rule',
                                 'stroke', 'stroke-width', 'stroke-linecap', 'stroke-linejoin',
                                 'stroke-opacity']

    acceptable_protocols = ['ed2k', 'ftp', 'http', 'https', 'irc',
                            'mailto', 'news', 'gopher', 'nntp', 'telnet', 'webcal',
                            'xmpp', 'callto', 'feed', 'urn', 'aim', 'rsync', 'tag',
                            'ssh', 'sftp', 'rtsp', 'afs']

    remove_tags = ['script', 'style']

    # subclasses may define their own versions of these constants
    allowed_elements = acceptable_elements + mathml_elements + svg_elements
    allowed_attributes = acceptable_attributes + \
        mathml_attributes + svg_attributes
    allowed_css_properties = acceptable_css_properties
    allowed_css_keywords = acceptable_css_keywords
    allowed_svg_properties = acceptable_svg_properties
    allowed_protocols = acceptable_protocols

    # Sanitize the +html+, escaping all elements not in ALLOWED_ELEMENTS, and
    # stripping out all # attributes not in ALLOWED_ATTRIBUTES. Style
    # attributes are parsed, and a restricted set, # specified by
    # ALLOWED_CSS_PROPERTIES and ALLOWED_CSS_KEYWORDS, are allowed through.
    # attributes in ATTR_VAL_IS_URI are scanned, and only URI schemes specified
    # in ALLOWED_PROTOCOLS are allowed.
    #
    #   sanitize_html('<script> do_nasty_stuff() </script>')
    #    => &lt;script> do_nasty_stuff() &lt;/script>
    #   sanitize_html('<a href="javascript: sucker();">Click here for $100</a>')
    #    => <a>Click here for $100</a>
    def sanitize_token(self, token):

        # accommodate filters which use token_type differently
        token_type = token["type"]
        if token_type in tokenTypes.keys():
            token_type = tokenTypes[token_type]

        if token_type in (tokenTypes["StartTag"], tokenTypes["EndTag"],
                          tokenTypes["EmptyTag"]):
            token["name"] = token["name"].lower()
            if token["name"] in self.allowed_elements:
                if token.has_key("data"):
                    attrs = dict([(name, val) for name, val in
                                  token["data"][::-1]
                                  if name in self.allowed_attributes])
                    for attr in self.attr_val_is_uri:
                        if not attrs.has_key(attr):
                            continue
                        val_unescaped = re.sub("[`\000-\040\177-\240\s]+", '',
                                               unescape(attrs[attr])).lower()
                        # remove replacement characters from unescaped
                        # characters
                        val_unescaped = val_unescaped.replace(u"\ufffd", "")
                        if (re.match("^[a-z0-9][-+.a-z0-9]*:", val_unescaped) and
                            (val_unescaped.split(':')[0] not in
                             self.allowed_protocols)):
                            del attrs[attr]
                    for attr in self.svg_attr_val_allows_ref:
                        if attr in attrs:
                            attrs[attr] = re.sub(r'url\s*\(\s*[^#\s][^)]+?\)',
                                                 ' ',
                                                 unescape(attrs[attr]))
                    if (token["name"] in self.svg_allow_local_href and
                        'xlink:href' in attrs and re.search('^\s*[^#\s].*',
                                                            attrs['xlink:href'])):
                        del attrs['xlink:href']
                    if attrs.has_key('style'):
                        attrs['style'] = self.sanitize_css(attrs['style'])
                    token["data"] = [[name, val]
                                     for name, val in attrs.items()]
                return token
            else:
                if token["name"] in self.remove_tags:
                    token["name"] = "toberemoved"

                    if token_type == tokenTypes["EndTag"]:
                        token["data"] = "</%s>" % token["name"]
                    elif token["data"]:
                        attrs = ''.join([' %s="%s"' % (k, escape(v))
                                        for k, v in token["data"]])
                        token["data"] = "<%s%s>" % (token["name"], attrs)
                    else:
                        token["data"] = "<%s>" % token["name"]
                    if token.get("selfClosing"):
                        token["data"] = token["data"][:-1] + "/>"

                    if token["type"] in tokenTypes.keys():
                        token["type"] = "Characters"
                    else:
                        token["type"] = tokenTypes["Characters"]

                    if "name" in token and token["name"] == "style":
                        print "style", token["data"], dir(token)

                    return token
        elif token_type == tokenTypes["Comment"]:
            pass
        else:
            return token

    def sanitize_css(self, style):
        # disallow urls
        style = re.compile('url\s*\(\s*[^\s)]+?\s*\)\s*').sub(' ', style)

        # gauntlet
        if not re.match("""^([:,;#%.\sa-zA-Z0-9!]|\w-\w|'[\s\w]+'|"[\s\w]+"|\([\d,\s]+\))*$""", style):
            return ''
        if not re.match("^\s*([-\w]+\s*:[^:;]*(;\s*|$))*$", style):
            return ''

        clean = []
        for prop, value in re.findall("([-\w]+)\s*:\s*([^:;]*)", style):
            if not value:
                continue
            if prop.lower() in self.allowed_css_properties:
                clean.append(prop + ': ' + value + ';')
            elif prop.split('-')[0].lower() in ['background', 'border', 'margin',
                                                'padding']:
                for keyword in value.split():
                    if not keyword in self.acceptable_css_keywords and \
                            not re.match("^(#[0-9a-f]+|rgb\(\d+%?,\d*%?,?\d*%?\)?|\d{0,2}\.?\d{0,2}(cm|em|ex|in|mm|pc|pt|px|%|,|\))?)$", keyword):
                        break
                else:
                    clean.append(prop + ': ' + value + ';')
            elif prop.lower() in self.allowed_svg_properties:
                clean.append(prop + ': ' + value + ';')

        return ' '.join(clean)


class HTMLSanitizer(HTMLTokenizer, HTMLSanitizerMixin):

    def __init__(self, stream, encoding=None, parseMeta=True, useChardet=True,
                 lowercaseElementName=False, lowercaseAttrName=False):
        # Change case matching defaults as we only output lowercase html anyway
        # This solution doesn't seem ideal...
        HTMLTokenizer.__init__(self, stream, encoding, parseMeta, useChardet,
                               lowercaseElementName, lowercaseAttrName)

    def __iter__(self):
        for token in HTMLTokenizer.__iter__(self):
            token = self.sanitize_token(token)
            if token:
                yield token


def clean_html(buf):
    """Cleans HTML of dangerous tags and content."""
    buf = buf.strip()
    if not buf:
        return buf

    html_parser = html5lib.HTMLParser(
        tree=treebuilders.getTreeBuilder("dom"), tokenizer=HTMLSanitizer)
    dom_tree = html_parser.parseFragment(buf)

    walker = treewalkers.getTreeWalker("dom")
    stream = walker(dom_tree)

    s = serializer.htmlserializer.HTMLSerializer(
        omit_optional_tags=False, quote_attr_values=True)
    output = s.render(stream, 'utf-8')

    while 'toberemoved' in output:
        oldoutput = output
        matches = re.findall(
            r'&lt;toberemoved.*?&gt;.*?&lt;/toberemoved&gt;', output, re.DOTALL)
        for s in matches:
            output = output.replace(s, '')
        matches = re.findall(r'&lt;/toberemoved&gt;', output, re.DOTALL)
        for s in matches:
            output = output.replace(s, '')
        matches = re.findall(r'&lt;toberemoved.*?&gt;', output, re.DOTALL)
        for s in matches:
            output = output.replace(s, '')
        if output == oldoutput:
            break

    return output

########NEW FILE########
__FILENAME__ = dbsearch
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

from django.db.models import Q, get_models, CharField, TextField
from treeio.core.models import Object

params = []

for model in get_models():
    if issubclass(model, Object) and getattr(model, 'searcheable', True):
        for field in model._meta.fields:
            if isinstance(field, CharField) or isinstance(field, TextField):
                if not 'password' in field.name and not 'object_name' in field.name and not 'object_type' in field.name and not 'nuvius' in field.name:
                    params.append('%s__%s' %
                                  (model._meta.module_name, field.name))


def search(term):
    "Use database backend for searching"
    query = Q()
    #query_dict = {}
    attr = 'search'
    if term and term[0] == '*':
        attr = 'icontains'
        term = term[1:]
    for param in params:
        kwargs = {'%s__%s' % (param, attr): term}
        #query_dict[param] = term
        query = query | Q(**kwargs)

    #from pprint import pprint
    # pprint(query_dict)

    return Object.objects.filter(query)

########NEW FILE########
__FILENAME__ = models
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core Search module model hooks
"""

import os
from django.db.models import signals
from treeio.core.conf import settings
from treeio.core.models import Object
from whoosh import index


def create_index(sender=None, **kwargs):
    "Create initial (empty) search index"
    if not os.path.exists(settings.WHOOSH_INDEX):
        os.mkdir(settings.WHOOSH_INDEX)
    index.create_in(settings.WHOOSH_INDEX, schema=settings.WHOOSH_SCHEMA)

if not settings.SEARCH_DISABLED and getattr(settings, 'SEARCH_ENGINE', 'whoosh') == 'whoosh':
    signals.post_syncdb.connect(create_index)


def update_index(sender, instance, created, **kwargs):
    "Add Object to search index"
    if isinstance(instance, Object) and instance.is_searchable():
        search_item = instance.get_search_item()
        ix = index.open_dir(settings.WHOOSH_INDEX)
        try:
            writer = ix.writer()
            try:
                if created:
                    writer.add_document(id=search_item['id'],
                                        name=search_item['name'],
                                        type=search_item['type'],
                                        content=search_item['content'],
                                        url=unicode(search_item['url']))
                    writer.commit()
                else:
                    writer.update_document(id=search_item['id'],
                                           name=search_item['name'],
                                           type=search_item['type'],
                                           content=search_item['content'],
                                           url=search_item['url'])
                    writer.commit()
            except:
                writer.cancel()
        except:
            pass

if not settings.SEARCH_DISABLED and getattr(settings, 'SEARCH_ENGINE', 'whoosh') == 'whoosh':
    signals.post_save.connect(update_index)


def delete_index(sender, instance, **kwargs):
    "Delete Object from search index"

    if isinstance(instance, Object) and instance.is_searchable():
        ix = index.open_dir(settings.WHOOSH_INDEX)
        try:
            writer = ix.writer()
            try:
                writer.delete_by_term(u'id', unicode(instance.id))
                writer.commit()
            except:
                writer.cancel()
        except:
            pass

if not settings.SEARCH_DISABLED and getattr(settings, 'SEARCH_ENGINE', 'whoosh') == 'whoosh':
    signals.post_delete.connect(delete_index)

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core Search module URLs
"""

from django.conf.urls.defaults import patterns, url

urlpatterns = patterns('treeio.core.search.views',
                       url(r'^(\.(?P<response_format>\w+))?/?$',
                           'search_query', name='core_search_query'),
                       )

########NEW FILE########
__FILENAME__ = views
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core Search module views
"""

from treeio.core.rendering import render_to_response
from django.template import RequestContext
from treeio.core.decorators import treeio_login_required, handle_response_format
from treeio.core.conf import settings
from treeio.core.models import Object, Tag
from treeio.core.search import dbsearch
from whoosh import index, qparser


@treeio_login_required
@handle_response_format
def search_query(request, response_format='html'):
    "Account view"

    objects = []
    query = request.GET.get('q', '')
    if query:
        if query[:5] == 'tags:':
            tag_names = query[5:].strip().split(',')
            tags = Tag.objects.filter(name__in=tag_names)
            objects = Object.objects.filter(tags__in=tags)
        else:
            search_engine = getattr(settings, 'SEARCH_ENGINE', 'whoosh')
            if search_engine == 'whoosh':
                ix = index.open_dir(settings.WHOOSH_INDEX)
                # Whoosh doesn't understand '+' or '-' but we can replace
                # them with 'AND' and 'NOT'.
                squery = query.replace(
                    '+', ' AND ').replace('|', ' OR ').replace(' ', ' OR ')
                parser = qparser.MultifieldParser(
                    ["name", "url", "type", "content"], schema=ix.schema)
                qry = parser.parse(squery)
                try:
                    qry = parser.parse(squery)
                except:
                    # don't show the user weird errors only because we don't
                    # understand the query.
                    # parser.parse("") would return None
                    qry = None
                if qry:
                    searcher = ix.searcher()
                    try:
                        hits = searcher.search(qry, limit=100)
                    except:
                        hits = []

                    hit_ids = [hit['id'] for hit in hits]

                    objects = Object.objects.filter(pk__in=hit_ids)
            elif search_engine == 'db':
                objects = dbsearch.search(query)
            else:
                raise RuntimeError('Unknown Search engine: %s' % search_engine)

    return render_to_response('core/search/query_view',
                              {'query': query, 'objects': objects},
                              context_instance=RequestContext(request),
                              response_format=response_format)

########NEW FILE########
__FILENAME__ = administration
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Administration templatetags
"""
from coffin import template
from treeio.core.rendering import render_to_string
from jinja2 import contextfunction, Markup
from django.template import RequestContext

register = template.Library()


@contextfunction
def administration_user_list(context, users, skip_group=False):
    "Print a list of users"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('core/administration/tags/user_list',
                                   {'users': users, 'skip_group': skip_group},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))


register.object(administration_user_list)


@contextfunction
def administration_group_list(context, groups, skip_group=False):
    "Print a list of groups"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('core/administration/tags/group_list',
                                   {'groups': groups,
                                       'skip_group': skip_group},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))


register.object(administration_group_list)


@contextfunction
def administration_module_list(context, modules):
    "Print a list of users"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('core/administration/tags/module_list',
                                   {'modules': modules},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(administration_module_list)

########NEW FILE########
__FILENAME__ = modules
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core templatetags
"""
from coffin import template
from jinja2 import contextfunction, contextfilter, Markup
from treeio.core.conf import settings
from django.utils.translation import ugettext as _
from django.utils.encoding import smart_unicode
from django.utils import translation
from django.template.defaultfilters import date as djangodate, time as djangotime
from django.db import models
from treeio.core.rendering import render_to_string
from treeio.core.models import Module, ModuleSetting
from treeio.core.rss import get_secret_key
from treeio.core import sanitizer
from treeio.finance.models import Currency
from datetime import datetime, timedelta
from dajaxice.templatetags.dajaxice_templatetags import dajaxice_js_import as dajaxice_orig_tag
import re
import base64
import urllib


register = template.Library()


def _get_modules(request):
    "Returns set of current modules and active module"
    user = None
    if request.user.username:
        try:
            user = request.user.get_profile()
        except Exception:
            pass

    perspective = user.get_perspective()

    modules = perspective.modules.filter(display=True).order_by('title')
    if not modules:
        modules = Module.objects.filter(display=True).order_by('title')
    active = None

    for module in modules:
        module.type = 'minor'
        try:
            import_name = module.name + "." + \
                settings.HARDTREE_MODULE_IDENTIFIER
            hmodule = __import__(import_name, fromlist=[str(module.name)])
            urls = hmodule.URL_PATTERNS
            for regexp in urls:
                if re.match(regexp, request.path):
                    active = module
            module.type = hmodule.PROPERTIES['type']
        except ImportError:
            pass
        except AttributeError:
            pass
        except KeyError:
            pass

    return modules, active


@contextfunction
def modules_header_block(context):
    "Modules header block"
    request = context['request']
    modules, active = _get_modules(request)

    for module in modules:
        module.title = _(module.title)

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('core/tags/modules_header_block',
                                   {'modules': modules,
                                    'active': active,
                                    'request': request},
                                   response_format=response_format))

register.object(modules_header_block)


@contextfunction
def dajaxice_js_import(context):
    "Thin wrapper for dajaxice"

    return Markup(dajaxice_orig_tag(context))

register.object(dajaxice_js_import)


@contextfunction
def modules_active(context):
    "Active modules"
    request = context['request']
    modules, active = _get_modules(request)

    if active:
        return active.name.replace(".", "-")

    return "treeio-home"

register.object(modules_active)


@contextfunction
def paginate(context, items, plength=None):
    "Pagination"
    request = context['request']

    skip = 0
    if 'page_skip' in request.GET:
        try:
            skip = long(request.GET['page_skip'])
        except Exception:
            pass

    if not plength:
        plength = getattr(settings, 'HARDTREE_PAGINATOR_LENGTH', 10)
    length = skip + plength

    return items[skip:length]

register.object(paginate)


@contextfunction
def pager(context, items, plength=None):
    "Pager"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    skip = 0
    if 'page_skip' in request.GET:
        try:
            skip = long(request.GET['page_skip'])
        except Exception:
            pass

    if not plength:
        plength = getattr(settings, 'HARDTREE_PAGINATOR_LENGTH', 10)
    if hasattr(items, 'count'):
        try:
            items_length = items.count()
        except:
            items_length = len(items)
    else:
        items_length = len(items)
    pagenum = items_length // plength

    if items_length % plength:
        pagenum += 1

    maxpages = getattr(settings, 'HARDTREE_PAGINATOR_PAGES', 20)

    current = skip // plength
    start = current - (maxpages // 2)
    if pagenum - start < maxpages:
        start = pagenum - maxpages
    if start <= 0:
        start = 1

    pages = []
    if pagenum > 1:
        if current >= 1:
            pages.append(
                {'page': '&larr;', 'skip': (current - 1) * plength, 'mover': True})
        else:
            pages.append({'page': '&larr;', 'skip': 0, 'mover': True})
        if start > 1:
            pages.append(
                {'page': '...', 'skip': (start - 1) * plength, 'mover': False})
            maxpages -= 1
        for i in range(start, pagenum + 1):
            if i > (maxpages + start + 1):
                pages.append(
                    {'page': '...', 'skip': (i) * plength, 'mover': False})
                break
            else:
                pages.append({'page': i, 'skip': (i - 1) * plength})
        if current + 1 == pagenum:
            pages.append(
                {'page': '&rarr;', 'skip': current * plength, 'mover': True})
        else:
            pages.append(
                {'page': '&rarr;', 'skip': (current + 1) * plength, 'mover': True})

    url = request.path + "?"
    if request.GET:
        for arg in request.GET:
            if arg != 'page_skip':
                values = request.GET.getlist(arg)
                for value in values:
                    url += unicode(arg) + "=" + value + "&"

    return Markup(render_to_string('core/tags/pager',
                                   {'url': url, 'pages': pages, 'skip': skip},
                                   response_format=response_format))

register.object(pager)


@contextfunction
def htsort(context, objects):
    "Sort objects based on request"
    if not objects or not 'request' in context:
        # Don't bother trying sorting if we can't do it
        return objects

    request = context['request']

    if not 'sorting' in request.GET or not hasattr(objects, 'order_by') or not hasattr(objects, 'model'):
        # Dont bother if there's nothing to sort on
        return objects

    args = request.GET.getlist('sorting')
    fields = objects.model._meta.get_all_field_names()
    for arg in args:
        field_name = arg.lstrip('-')
        if field_name in fields:
            field = objects.model._meta.get_field(field_name)
            if isinstance(field, models.ManyToManyField):
                agg_field = agg_arg = str('sorting_%s' % field_name)
                if arg[0] == '-':
                    agg_arg = '-' + agg_arg
                kwargs = {agg_field: models.Count(field_name)}
                objects = objects.annotate(**kwargs).order_by(agg_arg)
            else:
                objects = objects.order_by(arg)

    return objects.distinct()

register.object(htsort)


@contextfunction
def htsortlink(context, field_name):
    "Return URL of the sorting field"

    if not 'request' in context:
        return ''
    request = context['request']

    sort_value = field_name
    url = u"%s?" % (request.path)
    if request.GET:
        for arg in request.GET:
            values = request.GET.getlist(arg)
            for value in values:
                svalue = value.lstrip('-')
                if arg == 'sorting' and svalue == field_name:
                    if value[0] != '-':
                        sort_value = u'-%s' % sort_value
                else:
                    url += unicode(arg) + "=" + value + "&"
    url += "sorting=%s" % sort_value

    return url

register.object(htsortlink)


@contextfunction
def object_tree_path(context, object, skipself=False):
    "Object tree path"
    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    path = object.get_tree_path(skipself)

    return Markup(render_to_string('core/tags/object_tree_path',
                                   {'path': path, 'skipself': skipself},
                                   response_format=response_format))

register.object(object_tree_path)


def htsafe(text):
    """
      Strip all unsafe tags

      1. Replace unsafe tags
      2. Return text with 'safe' filter applied --- Alex: Thanks, Cap!
    """
    text = smart_unicode(text)

    safe_string = smart_unicode(sanitizer.clean_html(text))

    return Markup(safe_string)

register.filter('htsafe', htsafe)


def httranslate(text):
    "Translates given string into chosen language"
    return Markup(_(text))

register.object(httranslate)


@contextfunction
def htform(context, form):
    "Set time zone"

    request = context['request']

    user = None
    if request.user.username:
        try:
            user = request.user.get_profile()
        except Exception:
            pass

    # timezone
    default_timezone = settings.HARDTREE_SERVER_DEFAULT_TIMEZONE
    try:
        conf = ModuleSetting.get('default_timezone')[0]
        default_timezone = conf.value
    except:
        pass

    try:
        conf = ModuleSetting.get('default_timezone', user=user)[0]
        default_timezone = conf.value
    except Exception:
        default_timezone = getattr(
            settings, 'HARDTREE_SERVER_TIMEZONE')[default_timezone][0]

    all_timezones = getattr(settings, 'HARDTREE_SERVER_TIMEZONE', [
                            (1, '(GMT-11:00) International Date Line West')])
    title = all_timezones[int(default_timezone)][1]
    GMT = title[4:10]  # with sign e.g. +06:00
    sign = GMT[0:1]  # + or -
    hours = int(GMT[1:3])  # e.g. 06
    mins = int(GMT[4:6])

    if not form.errors:
        for field in form:
            try:
                date = datetime.strptime(
                    str(field.form.initial[field.name]), "%Y-%m-%d %H:%M:%S")
                if date:
                    if sign == "-":
                        field.form.initial[
                            field.name] = date - timedelta(hours=hours, minutes=mins)
                    else:
                        field.form.initial[
                            field.name] = date + timedelta(hours=hours, minutes=mins)
            except:
                pass

    return form

register.object(htform)


@contextfilter
def htdate(context, date, dateformat='DATE_FORMAT'):
    """ Render date in the current locale

    To render date in a custom format use Django format, details:
    http://docs.djangoproject.com/en/dev/ref/templates/builtins/#date

    """

    if not date:
        return ''

    lang = translation.get_language()

    localeformat = dateformat
    formatspath = getattr(settings, 'FORMAT_MODULE_PATH', 'treeio.formats')
    try:
        modulepath = formatspath + "." + lang + ".formats"
        module = __import__(modulepath, fromlist=[str(modulepath)])
        localeformat = getattr(module, dateformat, dateformat)
    except ImportError:
        pass

    request = context['request']

    user = None
    if request.user.username:
        try:
            user = request.user.get_profile()
        except Exception:
            pass

    # timezone
    default_timezone = settings.HARDTREE_SERVER_DEFAULT_TIMEZONE
    try:
        conf = ModuleSetting.get('default_timezone')[0]
        default_timezone = conf.value
    except:
        pass

    try:
        conf = ModuleSetting.get('default_timezone', user=user)[0]
        default_timezone = conf.value
    except Exception:
        default_timezone = getattr(
            settings, 'HARDTREE_SERVER_TIMEZONE')[default_timezone][0]

    all_timezones = getattr(settings, 'HARDTREE_SERVER_TIMEZONE', [
                            (1, '(GMT-11:00) International Date Line West')])
    title = all_timezones[int(default_timezone)][1]
    GMT = title[4:10]  # with sign e.g. +06:00
    sign = GMT[0:1]  # + or -
    hours = int(GMT[1:3])  # e.g. 06
    mins = int(GMT[4:6])

    if sign == "-":
        date = date - timedelta(hours=hours, minutes=mins)
    else:
        date = date + timedelta(hours=hours, minutes=mins)

    result = djangodate(date, localeformat)
    return Markup(result)

register.filter('htdate', htdate)


@contextfilter
def htdatetime(context, date, dateformat='DATETIME_FORMAT'):
    """ Shortcut: render datetime in the current locale """

    if not date:
        return ''

    lang = translation.get_language()

    localeformat = dateformat
    formatspath = getattr(settings, 'FORMAT_MODULE_PATH', 'treeio.formats')
    try:
        modulepath = formatspath + "." + lang + ".formats"
        module = __import__(modulepath, fromlist=[str(modulepath)])
        localeformat = getattr(module, dateformat, dateformat)
    except ImportError:
        pass

    request = context['request']

    user = None
    if request.user.username:
        try:
            user = request.user.get_profile()
        except Exception:
            pass

    # timezone
    default_timezone = settings.HARDTREE_SERVER_DEFAULT_TIMEZONE
    try:
        conf = ModuleSetting.get('default_timezone')[0]
        default_timezone = conf.value
    except:
        pass

    try:
        conf = ModuleSetting.get('default_timezone', user=user)[0]
        default_timezone = conf.value
    except Exception:
        default_timezone = getattr(
            settings, 'HARDTREE_SERVER_TIMEZONE')[default_timezone][0]

    all_timezones = getattr(settings, 'HARDTREE_SERVER_TIMEZONE', [
                            (1, '(GMT-11:00) International Date Line West')])
    title = all_timezones[int(default_timezone)][1]
    GMT = title[4:10]  # with sign e.g. +06:00
    sign = GMT[0:1]  # + or -
    hours = int(GMT[1:3])  # e.g. 06
    mins = int(GMT[4:6])

    if sign == "-":
        date = date - timedelta(hours=hours, minutes=mins)
    else:
        date = date + timedelta(hours=hours, minutes=mins)

    result = djangodate(date, localeformat)

    return Markup(result)

register.filter('htdatetime', htdatetime)


@contextfilter
def httime(context, time, timeformat='TIME_FORMAT'):
    """ Render time in the current locale """

    if not time:
        return ''

    lang = translation.get_language()

    localeformat = timeformat
    formatspath = getattr(settings, 'FORMAT_MODULE_PATH', 'treeio.formats')
    try:
        modulepath = formatspath + "." + lang + ".formats"
        module = __import__(modulepath, fromlist=[str(modulepath)])
        localeformat = getattr(module, timeformat, timeformat)
    except ImportError:
        pass

    request = context['request']

    user = None
    if request.user.username:
        try:
            user = request.user.get_profile()
        except Exception:
            pass

    # timezone
    default_timezone = settings.HARDTREE_SERVER_DEFAULT_TIMEZONE
    try:
        conf = ModuleSetting.get('default_timezone')[0]
        default_timezone = conf.value
    except:
        pass

    try:
        conf = ModuleSetting.get('default_timezone', user=user)[0]
        default_timezone = conf.value
    except Exception:
        default_timezone = getattr(
            settings, 'HARDTREE_SERVER_TIMEZONE')[default_timezone][0]

    all_timezones = getattr(settings, 'HARDTREE_SERVER_TIMEZONE', [
                            (1, '(GMT-11:00) International Date Line West')])
    title = all_timezones[int(default_timezone)][1]
    GMT = title[4:10]  # with sign e.g. +06:00
    sign = GMT[0:1]  # + or -
    hours = int(GMT[1:3])  # e.g. 06
    mins = int(GMT[4:6])

    if sign == "-":
        time = time - timedelta(hours=hours, minutes=mins)
    else:
        time = time + timedelta(hours=hours, minutes=mins)

    result = djangotime(time, localeformat)

    return Markup(result)

register.filter('httime', httime)


@contextfunction
def core_logo_content(context, gif=False):
    "Return current logo encoded as base64"

    staticpath = getattr(settings, 'STATIC_DOC_ROOT', './static')
    logopath = staticpath + '/logo'
    if gif:
        logopath += '.gif'
        mimetype = 'image/gif'
    else:
        logopath += '.png'
        mimetype = 'image/png'

    customlogo = ''
    try:
        conf = ModuleSetting.get_for_module('treeio.core', 'logopath')[0]
        customlogo = getattr(
            settings, 'MEDIA_ROOT', './static/media') + conf.value
    except:
        pass

    logofile = ''
    if customlogo:
        try:
            logofile = open(customlogo, 'r')
        except:
            pass

    if not logofile:
        try:
            logofile = open(logopath, 'r')
        except:
            pass

    result = "data:" + mimetype + ";base64," + \
        base64.b64encode(logofile.read())

    return Markup(result)

register.object(core_logo_content)


MOMENT = 120    # duration in seconds within which the time difference
                # will be rendered as 'a moment ago'


@contextfilter
def humanize_datetime(context, value):
    """
    Finds the difference between the datetime value given and now()
    and returns appropriate humanize form
    """

    request = context['request']

    user = None
    if request.user.username:
        try:
            user = request.user.get_profile()
        except:
            pass

    # timezone
    default_timezone = settings.HARDTREE_SERVER_DEFAULT_TIMEZONE
    try:
        conf = ModuleSetting.get('default_timezone')[0]
        default_timezone = conf.value
    except:
        pass

    try:
        conf = ModuleSetting.get('default_timezone', user=user)[0]
        default_timezone = conf.value
    except Exception:
        default_timezone = getattr(
            settings, 'HARDTREE_SERVER_TIMEZONE')[default_timezone][0]

    all_timezones = getattr(settings, 'HARDTREE_SERVER_TIMEZONE', [
                            (1, '(GMT-11:00) International Date Line West')])
    title = all_timezones[int(default_timezone)][1]
    GMT = title[4:10]  # with sign e.g. +06:00
    sign = GMT[0:1]  # + or -
    hours = int(GMT[1:3])  # e.g. 06
    mins = int(GMT[4:6])

    now = datetime.now()

    if value:
        if sign == "-":
            value = value - timedelta(hours=hours, minutes=mins)
            now = now - timedelta(hours=hours, minutes=mins)
        else:
            value = value + timedelta(hours=hours, minutes=mins)
            now = now + timedelta(hours=hours, minutes=mins)

    if isinstance(value, timedelta):
        delta = value
    elif isinstance(value, datetime):
        delta = now - value
    else:
        delta = None

    if delta:
        if delta.days > 6:                                      # May 15, 17:55
            month = None
            if value.strftime("%b") == 'Jan':
                month = _("Jan")
            elif value.strftime("%b") == 'Feb':
                month = _("Feb")
            elif value.strftime("%b") == 'Mar':
                month = _("Mar")
            elif value.strftime("%b") == 'Apr':
                month = _("Apr")
            elif value.strftime("%b") == 'May':
                month = _("May")
            elif value.strftime("%b") == 'Jun':
                month = _("Jun")
            elif value.strftime("%b") == 'Jul':
                month = _("Jul")
            elif value.strftime("%b") == 'Aug':
                month = _("Aug")
            elif value.strftime("%b") == 'Sep':
                month = _("Sep")
            elif value.strftime("%b") == 'Oct':
                month = _("Oct")
            elif value.strftime("%b") == 'Nov':
                month = _("Nov")
            elif value.strftime("%b") == 'Dec':
                month = _("Dec")
            return month + value.strftime(" %d, %H:%M")

        if delta.days > 1:                                      # Wednesday
            if value.strftime("%A") == 'Monday':
                return _("Monday")
            elif value.strftime("%A") == 'Tuesday':
                return _("Tuesday")
            elif value.strftime("%A") == 'Wednesday':
                return _("Wednesday")
            elif value.strftime("%A") == 'Thursday':
                return _("Thursday")
            elif value.strftime("%A") == 'Friday':
                return _("Friday")
            elif value.strftime("%A") == 'Saturday':
                return _("Saturday")
            elif value.strftime("%A") == 'Sunday':
                return _("Sunday")

        elif delta.days == 1:
            return _("yesterday")                               # yesterday
        elif delta.seconds >= 7200:
            return str(delta.seconds / 3600) + _(" hours ago")  # 3 hours ago
        elif delta.seconds >= 3600:
            return _("1 hour ago")                              # 1 hour ago
        elif delta.seconds > MOMENT:
            # 29 minutes ago
            return str(delta.seconds / 60) + _(" minutes ago")
        else:
            return _("a moment ago")                            # a moment ago
        return djangodate(value)
    else:
        return str(value)

register.filter('humanize_datetime', humanize_datetime)


@contextfilter
def currency_format(context, value, currency=None):
    """
    Adds the currency symbol as set in Sales module settings to a given string
    If the currency has no symbol it adds a three letter code to the end e.g. USD
    """

    # get default currency
    if not currency:
        currency = Currency.objects.get(is_default=True)
    if not currency.symbol:
        return unicode(value) + " " + currency.code
    else:
        return currency.symbol + unicode(value)

register.filter('currency_format', currency_format)


@contextfunction
def currency_print(context, currency=None):
    """
    Just returns the currency symbol as set in Sales module settings to a given string.
    """
    if not currency:
        currency = Currency.objects.get(is_default=True)
    # if currency.symbol:
    #    return unicode(currency.symbol)
    # else:
    return unicode(currency.code)

register.object(currency_print)


@contextfilter
def number_format(context, value):
    """
    Enforces 2 decimal places after a number if only one is given (adds a zero)
    also formats comma separators every 3rd digit before decimal place.
    """
    value = str(value)

    negative = False
    addzero = None

    if value[0] == '-':
        value = value[1:]
        negative = True

    if '.' in value:
        point = value.rindex('.')
        if point == len(value) - 2:
            addzero = True
    else:
        point = len(value)

    # Ensure we don't get lots of zero's after '.'
    # Cut trailing zeros and only leave two
    while point < len(value) - 3:
        if value[len(value) - 1] == '0':
            value = value[:len(value) - 1]
        else:
            break

    while point > 3:
        value = value[:point - 3] + "," + value[point - 3:]
        point = value.index(',')

    if addzero:
        value += "0"

    if negative:
        value = "-" + value

    return value

register.filter('number_format', number_format)


@contextfunction
def show_hint(context, hint=None, object=None):
    "Generic hint framework"

    request = context['request']
    response_format = 'html'

    user = None
    if request.user.username:
        try:
            user = request.user.get_profile()
        except Exception:
            pass

    return Markup(render_to_string('core/hints/' + hint, {'user': user, 'object': object},
                                   response_format=response_format))

register.object(show_hint)


@contextfilter
def group_by_letter(context, object_list):
    "Group contacts by letter"
    res = {}

    for x in object_list:
        # case 1
        r = re.search('^[a-zA-Z]', x.name)
        if r:
            key = r.group().lower()
            if not res.has_key(key):
    #            print "reg", key
                res[key] = [x]
            else:
                res[key].append(x)

        # case 2
        n = re.search('^[0-9_]', x.name)
        if n:
            if not res.has_key('#'):
                res['#'] = [x]
            else:
                res['#'].append(x)

        # case 3
        if not n and not r:
            if not res.has_key('#'):
                res['#'] = [x]
            else:
                res['#'].append(x)

    # converting dictionary to list of tuples, since template support only
    # List.
    l = []
    for k, v in res.items():
        l.append((k, v))
        l.sort(cmp=lambda x, y: cmp(x, y))
    return l

register.filter('group_by_letter', group_by_letter)


@contextfunction
def rss_link(context, url=None):
    "Generic rss link for this URL"

    request = context['request']

    params = request.GET.copy()
    params.update({'secret': get_secret_key(request)})

    if not url:
        url = request.path
    for ext in getattr(settings, 'HARDTREE_RESPONSE_FORMATS', {'html': 'text/html'}):
        url = url.replace('.' + ext, '')
    url += '.rss'
    try:
        url += '?' + urllib.urlencode(params)
    except:
        pass

    return Markup(url)

register.object(rss_link)


@contextfunction
def logo_block_container(context):
    "Returns logo_block_container"

    #request = context['request']
    response_format = 'html'

    return Markup(render_to_string('core/tags/logo_block_container',
                                   response_format=response_format))

register.object(logo_block_container)

########NEW FILE########
__FILENAME__ = object
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Object-related Core templatetags
"""
from coffin import template
from django.template import RequestContext
from jinja2 import contextfunction, Markup
from treeio.core.models import Object, Comment, Tag, UpdateRecord, Attachment
from treeio.core.forms import PermissionForm, ObjectLinksForm, SubscribeForm, TagsForm
from treeio.core.rendering import render_to_string
from treeio.core.ajax import converter
from treeio.core.conf import settings
import re
import urllib

register = template.Library()


@contextfunction
def permission_block(context, object):
    "Block with objects permissions"
    request = context['request']
    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    response_format_tags = response_format
    if 'response_format_tags' in context:
        response_format_tags = context['response_format_tags']

    if 'permission' in request.GET:
        if request.user.get_profile().has_permission(object, mode='w'):
            if request.POST:
                if 'cancel' in request.POST:
                    request.redirect = request.path
                    return Markup(render_to_string('core/tags/permission_block',
                                                   {'object': object,
                                                       'path': request.path},
                                                   context_instance=RequestContext(
                                                       request),
                                                   response_format=response_format))
                form = PermissionForm(request.POST, instance=object)
                if form.is_valid():
                    form.save()
                    request.redirect = request.path
                    return Markup(render_to_string('core/tags/permission_block',
                                                   {'object': object,
                                                       'path': request.path},
                                                   context_instance=RequestContext(
                                                       request),
                                                   response_format=response_format))
            else:
                form = PermissionForm(instance=object)

            context = {'object': object, 'path': request.path, 'form': form}

            if 'ajax' in response_format_tags:
                context = converter.preprocess_context(context)

            return Markup(render_to_string('core/tags/permission_block_edit',
                                           context,
                                           context_instance=RequestContext(
                                               request),
                                           response_format=response_format))

    return Markup(render_to_string('core/tags/permission_block',
                                   {'object': object, 'path': request.path},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(permission_block)


@contextfunction
def link_block(context, object):
    "Block with objects links"

    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    response_format_tags = response_format
    if 'response_format_tags' in context:
        response_format_tags = context['response_format_tags']

    if request.GET and 'link_add' in request.GET:
        if request.POST:

            if 'cancel' in request.POST:
                links = Object.filter_by_request(
                    context['request'], object.links)
                return Markup(render_to_string('core/tags/link_block',
                                               {'object': object, 'links': links,
                                                   'request': request, 'path': request.path},
                                               context_instance=RequestContext(
                                                   request),
                                               response_format=response_format))

            form = ObjectLinksForm(
                request.user.get_profile(), response_format_tags, object, request.POST)

            if form.is_valid() and request.user.get_profile().has_permission(object, mode='w'):
                object.links.add(form.cleaned_data['links'])
                links = Object.filter_by_request(
                    context['request'], object.links)
                return Markup(render_to_string('core/tags/link_block',
                                               {'object': object, 'links': links,
                                                   'request': request, 'path': request.path},
                                               context_instance=RequestContext(
                                                   request),
                                               response_format=response_format))

        links = Object.filter_by_request(context['request'], object.links)
        form = ObjectLinksForm(
            request.user.get_profile(), response_format_tags, instance=object)

        context = {'object': object, 'path': request.path,
                   'form': form, 'links': links}

        if 'ajax' in response_format_tags:
            context = converter.preprocess_context(context)

        rendered_string = render_to_string('core/tags/link_block_edit', context,
                                           context_instance=RequestContext(
                                               request),
                                           response_format=response_format)

        return Markup(rendered_string)

    elif request.GET and 'link_delete' in request.GET:

        if request.user.get_profile().has_permission(object, mode='w'):
            try:
                link = Object.objects.get(pk=request.GET['link_delete'])
                object.links.remove(link)
            except Exception:
                pass

    links = Object.filter_by_request(context['request'], object.links)

    return Markup(render_to_string('core/tags/link_block',
                                   {'object': object, 'links': links, 'request': request,
                                    'path': request.path},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(link_block)


@contextfunction
def subscription_block(context, object):
    "Block with objects subscriptions"

    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    response_format_tags = response_format
    if 'response_format_tags' in context:
        response_format_tags = context['response_format_tags']

    subscriptions = object.subscribers.all()

    subscribed = False
    if request.user.get_profile() in subscriptions:
        subscribed = True

    if 'subscribe_add' in request.GET and request.user.get_profile().has_permission(object, mode='w'):
        if request.POST and 'subscriber' in request.POST:
            if 'cancel' in request.POST:
                request.redirect = request.path
                return Markup(render_to_string('core/tags/subscription_block',
                                               {'object': object, 'subscriptions': subscriptions,
                                                'request': request, 'path': request.path,
                                                'subscribed': subscribed},
                                               context_instance=RequestContext(
                                                   request),
                                               response_format=response_format))
            else:
                form = SubscribeForm(object, request.POST)
                if form.is_valid():
                    subscriptions = form.save()

                request.redirect = request.path
                return Markup(render_to_string('core/tags/subscription_block',
                                               {'object': object, 'subscriptions': subscriptions,
                                                'request': request, 'path': request.path,
                                                'subscribed': subscribed},
                                               context_instance=RequestContext(
                                                   request),
                                               response_format=response_format))

        else:
            form = SubscribeForm(instance=object)

            context = {'object': object, 'subscriptions': subscriptions,
                       'request': request, 'path': request.path,
                       'subscribed': subscribed, 'form': form}

            if 'ajax' in response_format_tags:
                context = converter.preprocess_context(context)

            return Markup(render_to_string('core/tags/subscription_block_add', context,
                          context_instance=RequestContext(request),
                          response_format=response_format))

    if 'subscribe' in request.GET:
        if not subscribed:
            object.subscribers.add(request.user.get_profile())
            subscriptions = object.subscribers.all()
            subscribed = True
    elif 'unsubscribe' in request.GET and request.GET['unsubscribe']:
        user_id = int(request.GET['unsubscribe'])
        try:
            if request.user.get_profile().id == user_id or \
                    request.user.get_profile().has_permission(object, mode='w'):
                object.subscribers.remove(subscriptions.get(pk=user_id))
                subscriptions = object.subscribers.all()
                if user_id == request.user.get_profile().id:
                    subscribed = False
        except Exception:
            pass

    return Markup(render_to_string('core/tags/subscription_block',
                                   {'object': object, 'subscriptions': subscriptions,
                                    'request': request, 'path': request.path,
                                    'subscribed': subscribed},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(subscription_block)


@contextfunction
def comments_likes(context, object, expand=True):
    "Comments and Likes/Dislikes box for an object"

    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    update = isinstance(object, UpdateRecord)
    profile = request.user.get_profile()

    if request.POST.get('like', 0) == unicode(object.id):
        object.likes.add(profile)
        if hasattr(object, 'score'):
            object.score += 1
            object.save()

    elif request.POST.get('unlike', 0) == unicode(object.id):
        object.likes.remove(profile)
        if hasattr(object, 'score'):
            object.score -= 1
            object.save()

    elif request.POST.get('dislike', 0) == unicode(object.id):
        object.dislikes.add(profile)
        if hasattr(object, 'score'):
            object.score += 1
            object.save()

    elif request.POST.get('undislike', 0) == unicode(object.id):
        object.dislikes.remove(profile)
        if hasattr(object, 'score'):
            object.score -= 1
            object.save()

    elif request.POST.get('commentobject', 0) == unicode(object.id) and 'comment' in request.POST:
        comment = Comment(author=profile,
                          body=request.POST.get('comment'))
        comment.save()
        if hasattr(object, 'score'):
            object.score += 1
            object.save()
        object.comments.add(comment)

    likes = object.likes.all()
    dislikes = object.dislikes.all()
    comments = object.comments.all()

    ilike = profile in likes
    idislike = profile in dislikes
    icommented = comments.filter(author=profile).exists() or \
        comments.filter(author__default_group__in=[
                        profile.default_group_id] + [i.id for i in profile.other_groups.all().only('id')]).exists()

    return Markup(render_to_string('core/tags/comments_likes',
                                   {'object': object,
                                    'is_update': update,
                                    'profile': profile,
                                    'likes': likes,
                                    'dislikes': dislikes,
                                    'comments': comments,
                                    'ilike': ilike,
                                    'idislike': idislike,
                                    'icommented': icommented,
                                    'expand': expand},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(comments_likes)


@contextfunction
def tags_box(context, object):

    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    response_format_tags = response_format
    if 'response_format_tags' in context:
        response_format_tags = context['response_format_tags']

    tags = object.tags.all()
    form = None
    if 'tags-edit' in request.GET:
        if request.POST.get('tags_object', 0) == unicode(object.id):
            form = TagsForm(tags, request.POST)
            if form.is_valid():
                if 'multicomplete_tags' in request.POST:
                    tag_names = request.POST.get(
                        'multicomplete_tags').split(',')
                    new_tags = []
                    for name in tag_names:
                        name = name.strip()
                        if name:
                            try:
                                tag = Tag.objects.get(name=name)
                            except Tag.DoesNotExist:
                                tag = Tag(name=name)
                                tag.save()
                            new_tags.append(tag)
                else:
                    new_tags = form.is_valid()

                object.tags.clear()
                for tag in new_tags:
                    object.tags.add(tag)
                tags = object.tags.all()
                form = None
        else:
            form = TagsForm(tags)

    context = {'object': object,
               'tags': tags,
               'form': form,
               'editlink': request.path + '?tags-edit'}

    if 'ajax' in response_format_tags:
        context = converter.preprocess_context(context)

    return Markup(render_to_string('core/tags/tags_box', context,
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(tags_box)


@contextfunction
def help_link(context, link=''):
    "Block with objects permissions"
    request = context['request']
    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    if not link:
        url = request.path
        match = re.match('/(?P<url>\w+)(/)?.*', url)
        if match:
            link = match.group('url') + "/"

    link = getattr(settings, 'HARDTREE_HELP_LINK_PREFIX', '/help/') + link

    return Markup(render_to_string('core/tags/help_link_block',
                                   {'link': link},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(help_link)


@contextfunction
def core_generic_list(context, objects, skip_group=False, tag=None):
    "Print a list of objects"

    if tag:
        return tag(context, objects)

    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('core/tags/generic_list',
                                   {'objects': objects,
                                       'skip_group': skip_group},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(core_generic_list)


@contextfunction
def core_watchlist(context, objects=None, skip_group=False, paginate=False):
    "Print a list of objects a user is subscribed to"

    request = context['request']
    profile = request.user.get_profile()

    if not objects:
        objects = profile.subscriptions.all()

    if 'unsubscribe' in request.GET:
        for object in objects.filter(pk=request.GET.get('unsubscribe')):
            object.subscribers.remove(profile)
        objects = profile.subscriptions.all()

    pathurl = request.path + '?'
    if request.GET:
        params = request.GET.copy()
        if 'unsubscribe' in params:
            del params['unsubscribe']
        pathurl += urllib.urlencode(params) + '&'

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('core/tags/watchlist',
                                   {'objects': objects,
                                    'skip_group': skip_group,
                                    'dopaginate': paginate,
                                    'pathurl': pathurl},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(core_watchlist)


@contextfunction
def attachments(context, object=None):
    "Attachments for an object or update record"

    request = context['request']

    profile = request.user.get_profile()

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    update = isinstance(object, UpdateRecord)

    if not update:
        attachments = Attachment.objects.filter(attached_object=object)
        if profile.has_permission(object, mode='w'):
            template = 'core/tags/attachments'
        else:
            template = 'core/tags/attachments_block'

    else:
        attachments = Attachment.objects.filter(attached_record=object)
        if profile == object.author:
            template = 'core/tags/attachments_record'
        else:
            template = 'core/tags/attachments_record_block'

    return Markup(render_to_string(template,
                                   {'object': object,
                                    'attachments': attachments,
                                    },
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(attachments)


@contextfunction
def attachments_block(context, object=None):
    "Attachments for an object or update record"

    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    update = isinstance(object, UpdateRecord)

    if not update:
        attachments = Attachment.objects.filter(attached_object=object)
        template = 'core/tags/attachments_block'
    else:
        attachments = Attachment.objects.filter(attached_record=object)
        template = 'core/tags/attachments_record_block'

    return Markup(render_to_string(template,
                                   {'object': object,
                                    'attachments': attachments,
                                    },
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(attachments_block)


@contextfunction
def attachments_count(context, object=None):
    "Number of Attachments associated with an object"

    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    update = isinstance(object, UpdateRecord)

    if not update:
        count = Attachment.objects.filter(attached_object=object).count()
    else:
        count = Attachment.objects.filter(attached_record=object).count()

    if count:
        return Markup(render_to_string('core/tags/attachments_count',
                                       {'count': count},
                                       context_instance=RequestContext(
                                           request),
                                       response_format=response_format))
    else:
        return('')

register.object(attachments_count)


@contextfunction
def last_updated(context, object=None, verbose=False):
    "The humanized datetime of the last update to an object"

    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    updated = object.last_updated
    return Markup(render_to_string('core/tags/last_updated',
                                   {'updated': updated,
                                    'verbose': verbose},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))


register.object(last_updated)


@contextfunction
def easy_invite_block(context, emails=[]):
    "The humanized datetime of the last update to an object"

    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('core/tags/easy_invite',
                                   {'emails': emails, },
                                   context_instance=RequestContext(request),
                                   response_format=response_format))


register.object(easy_invite_block)

########NEW FILE########
__FILENAME__ = user
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
User-related Core templatetags
"""
from coffin import template
from django.core.context_processors import csrf
from treeio.core.rendering import render_to_string
from jinja2 import contextfunction, Markup
from treeio.core.models import Object, Perspective
from treeio.core.conf import settings

register = template.Library()


@contextfunction
def user_block(context):
    "User block"
    request = context['request']
    user = None
    if request.user.username:
        try:
            user = request.user.get_profile()
        except Exception:
            pass

    modules = user.get_perspective().get_modules()

    account = modules.filter(name='treeio.account')

    admin = modules.filter(name='treeio.core')
    if admin:
        admin = admin[0]

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    trial = False
    if getattr(settings, 'HARDTREE_SUBSCRIPTION_USER_LIMIT') == 3:
        trial = True

    active = context.get('active', None)

    return Markup(render_to_string('core/tags/user_block',
                  {'user': user,
                   'account': account,
                   'admin': admin,
                   'active': active,
                   'trial': trial},
                  response_format=response_format))

register.object(user_block)


@contextfunction
def demo_user(context):
    "Print demo block if demo"

    response_format = 'html'

    demo = getattr(settings, 'HARDTREE_DEMO_MODE', False)

    return Markup(render_to_string('core/tags/demo_user',
                  {'demo': demo},
                  response_format=response_format))

register.object(demo_user)


@contextfunction
def core_perspective_switch(context):
    "Quick perspective switcher"

    response_format = 'html'
    request = context['request']
    try:
        user = request.user.get_profile()

        current = user.get_perspective()
        perspectives = Object.filter_by_request(request, Perspective.objects)
    except:
        current = None
        perspectives = []

    context = {'current': current, 'perspectives': perspectives}
    context.update(csrf(request))

    return Markup(render_to_string('core/tags/perspective_switch', context,
                  response_format=response_format))

register.object(core_perspective_switch)

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core: test suites
Middleware: test chat
"""

from django.test import TestCase
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser
from treeio.core.models import User, Group, ModuleSetting, Module, Object, Perspective


class CoreModelsTest(TestCase):

    "Core Model Tests"

    def test_model_perspective(self):
        "Test Perspective model"
        obj = Perspective(name='test')
        obj.save()
        self.assertEquals('test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_module(self):
        "Test Module model"
        obj = Module(name='test', title='Test', url='/test/')
        obj.save()
        self.assertEquals('test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_group(self):
        "Test Group model"
        obj = Group(name='test')
        obj.save()
        self.assertEquals('test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_user(self):
        "Test User model"
        username = "test"
        password = "password"
        user = DjangoUser(username=username, password=password)
        user.set_password(password)
        user.save()
        self.assertEquals('test', user.username)
        self.assertNotEquals(user.id, None)
        group = Group(name='test')
        group.save()
        self.assertEquals('test', group.name)
        self.assertNotEquals(group.id, None)
        profile = User(user=user, default_group=group)
        profile.save()
        self.assertEquals(user, profile.user)
        self.assertNotEquals(profile.id, None)
        profile.delete()
        group.delete()


class CoreViewsTest(TestCase):

    "Core View tests"
    username = "test"
    password = "password"
    prepared = False

    def setUp(self):
        "Initial Setup"

        if not self.prepared:
            Object.objects.all().delete()

            # Create objects

            self.group, created = Group.objects.get_or_create(name='test')
            duser, created = DjangoUser.objects.get_or_create(
                username=self.username)
            duser.set_password(self.password)
            duser.save()
            self.user, created = User.objects.get_or_create(user=duser)
            self.user.save()

            self.perspective = Perspective(name='test')
            self.perspective.set_default_user()
            self.perspective.save()

            self.client = Client()

            self.prepared = True

    ######################################
    # Testing views when user is logged in
    ######################################
    def test_home_login(self):
        "Test home page with login at /"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get('/')
        self.assertEquals(response.status_code, 200)

    # Perspectives
    def test_index_perspectives_login(self):
        "Test page with login at /admin/perspectives/"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('core_admin_index_perspectives'))
        self.assertEquals(response.status_code, 200)

    def test_perspective_add(self):
        "Test index page with login at /admin/perspective/add"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('core_admin_perspective_add'))
        self.assertEquals(response.status_code, 200)

    def test_perspective_view(self):
        "Test index page with login at /admin/perspective/view/<perspective_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('core_admin_perspective_view', args=[self.perspective.id]))
        self.assertEquals(response.status_code, 200)

    def test_perspective_edit(self):
        "Test index page with login at /admin/perspective/edit/<perspective_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('core_admin_perspective_edit', args=[self.perspective.id]))
        self.assertEquals(response.status_code, 200)

    def test_perspective_delete(self):
        "Test index page with login at /admin/perspective/delete/<perspective_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('core_admin_perspective_delete', args=[self.perspective.id]))
        self.assertEquals(response.status_code, 200)

    # Modules
    def test_index_modules_login(self):
        "Test page with login at /admin/modules/"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('core_admin_index_modules'))
        self.assertEquals(response.status_code, 200)

    # Users
    def test_index_users_login(self):
        "Test page with login at /admin/users/"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('core_admin_index_users'))
        self.assertEquals(response.status_code, 200)

    def test_core_user_add(self):
        "Test page with login at /admin/user/add"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('core_admin_user_add'))
        self.assertEquals(response.status_code, 200)

    def test_core_user_invite(self):
        "Test page with login at /admin/user/invite"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('core_admin_user_invite'))
        self.assertEquals(response.status_code, 200)

    # Groups
    def test_index_groups_login(self):
        "Test page with login at /admin/groups/"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('core_admin_index_groups'))
        self.assertEquals(response.status_code, 200)

    def test_core_group_add(self):
        "Test page with login at /admin/group/add"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('core_admin_group_add'))
        self.assertEquals(response.status_code, 200)

    def test_core_group_view(self):
        "Test index page with login at /admin/group/view/<group_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('core_admin_group_view', args=[self.group.id]))
        self.assertEquals(response.status_code, 200)

    def test_core_group_edit(self):
        "Test index page with login at /admin/group/edit/<group_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('core_admin_group_edit', args=[self.group.id]))
        self.assertEquals(response.status_code, 200)

    def test_core_group_delete(self):
        "Test index page with login at /admin/group/delete/<group_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('core_admin_group_delete', args=[self.group.id]))
        self.assertEquals(response.status_code, 200)

    # Settings
    def test_core_settings_view(self):
        "Test index page with login at /admin/settings/view/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('core_settings_view'))
        self.assertEquals(response.status_code, 200)

    def test_core_settings_edit(self):
        "Test index page with login at /admin/settings/edit/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('core_settings_edit'))
        self.assertEquals(response.status_code, 200)

    ######################################
    # Testing views when user is not logged in
    ######################################
    def test_home(self):
        "Test home page at /"
        response = self.client.get('/')
        # Redirects as unauthenticated
        self.assertRedirects(response, reverse('user_login'))

    def test_index_perspectives_out(self):
        "Test page at /admin/perspectives/"
        response = self.client.get(reverse('core_admin_index_perspectives'))
        self.assertRedirects(response, reverse('user_login'))

    def test_perspective_add_out(self):
        "Test add perspective page at /admin/perspective/add"
        response = self.client.get(reverse('core_admin_perspective_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_perspective_view_out(self):
        "Test perspective view at /admin/perspective/view/<perspective_id>"
        response = self.client.get(
            reverse('core_admin_perspective_view', args=[self.perspective.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_perspective_edit_out(self):
        "Test perspective add at /admin/perspective/edit/<perspective_id>"
        response = self.client.get(
            reverse('core_admin_perspective_edit', args=[self.perspective.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_perspective_delete_out(self):
        "Test perspective delete at /admin/perspective/delete/<perspective_id>"
        response = self.client.get(
            reverse('core_admin_perspective_delete', args=[self.perspective.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Modules
    def test_index_modules_out(self):
        "Test index modules page at /admin/modules/"
        response = self.client.get(reverse('core_admin_index_modules'))
        self.assertRedirects(response, reverse('user_login'))

    # Users
    def test_index_users_out(self):
        "Test index users page at /admin/users/"
        response = self.client.get(reverse('core_admin_index_users'))
        self.assertRedirects(response, reverse('user_login'))

    def test_core_user_add_out(self):
        "Test user add at /admin/user/add"
        response = self.client.get(reverse('core_admin_user_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_core_user_invite_out(self):
        "Test user invite at /admin/user/invite"
        response = self.client.get(reverse('core_admin_user_invite'))
        self.assertRedirects(response, reverse('user_login'))

    # Groups
    def test_index_groups_out(self):
        "Test index groups at /admin/groups/"
        response = self.client.get(reverse('core_admin_index_groups'))
        self.assertRedirects(response, reverse('user_login'))

    def test_core_group_add_out(self):
        "Test group add at /admin/group/add"
        response = self.client.get(reverse('core_admin_group_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_core_group_view_out(self):
        "Test group view at /admin/group/view/<group_id>"
        response = self.client.get(
            reverse('core_admin_group_view', args=[self.group.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_core_group_edit_out(self):
        "Test group edit at /admin/group/edit/<group_id>"
        response = self.client.get(
            reverse('core_admin_group_edit', args=[self.group.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_core_group_delete_out(self):
        "Test group delete at /admin/group/delete/<group_id>"
        response = self.client.get(
            reverse('core_admin_group_delete', args=[self.group.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Settings
    def test_core_settings_view_out(self):
        "Test isettings view at /admin/settings/view/"
        response = self.client.get(reverse('core_settings_view'))
        self.assertRedirects(response, reverse('user_login'))

    def test_core_settings_edit_out(self):
        "Test settings edit at /admin/settings/edit/"
        response = self.client.get(reverse('core_settings_edit'))
        self.assertRedirects(response, reverse('user_login'))


class MiddlewareChatTest(TestCase):

    "Midleware chat tests"
    username = "test"
    password = "password"
    prepared = False

    def setUp(self):
        "Initial Setup"

        if not self.prepared:
            Object.objects.all().delete()

            # Create objects
            try:
                self.group = Group.objects.get(name='test')
            except Group.DoesNotExist:
                Group.objects.all().delete()
                self.group = Group(name='test')
                self.group.save()

            try:
                self.user = DjangoUser.objects.get(username=self.username)
                self.user.set_password(self.password)
                try:
                    self.profile = self.user.get_profile()
                except Exception:
                    User.objects.all().delete()
                    self.user = DjangoUser(username=self.username, password='')
                    self.user.set_password(self.password)
                    self.user.save()
            except DjangoUser.DoesNotExist:
                User.objects.all().delete()
                self.user = DjangoUser(username=self.username, password='')
                self.user.set_password(self.password)
                self.user.save()

            try:
                perspective = Perspective.objects.get(name='default')
            except Perspective.DoesNotExist:
                Perspective.objects.all().delete()
                perspective = Perspective(name='default')
                perspective.set_default_user()
                perspective.save()
            ModuleSetting.set('default_perspective', perspective.id)

            self.client = Client()

            self.prepared = True

    def test_chat_get_new_messages(self):
        "Test get_new_messages"
        response = self.client.post(
            '/chat', {'json': '{"cmd":"Get", "location":"#"}'})
        self.assertEqual(response.status_code, 200)

    def test_chat_connect(self):
        "Test connect"
        response = self.client.post(
            '/chat', {'json': '{"cmd":"Connect", "location":"#"}'})
        self.assertEqual(response.status_code, 200)

    def test_chat_disconnect(self):
        "Test disconnect"
        response = self.client.post(
            '/chat', {'json': '{"cmd":"Disconnect", "location":"#"}'})
        self.assertEqual(response.status_code, 200)

    def test_chat_add_new_message(self):
        "Test add_new_message"
        response = self.client.post(
            '/chat', {'json': '{"cmd":"Message","data":{"id":"test_b5e6d0470a5f4656c3bc77f879c3dbbc","text":"test message"},"location":"#"}'})
        self.assertEqual(response.status_code, 200)

    def test_chat_exit_from_conference(self):
        "Test exit_from_conference"
        response = self.client.post(
            '/chat', {'json': '{"cmd":"Exit","data":{"id":"test_b5e6d0470a5f4656c3bc77f879c3dbbc"},"location":"#"}'})
        self.assertEqual(response.status_code, 200)

    def test_chat_add_users_in_conference(self):
        "Test add_users_in_conference"
        response = self.client.post(
            '/chat', {'json': '{"cmd":"Add","data":{"id":"guest_006f721c4a59a44d969b9f73fb6360a5","users":["test"]},"location":"#"}'})
        self.assertEqual(response.status_code, 200)

    def test_chat_create_conference(self):
        "Test create_conference"
        response = self.client.post(
            '/chat', {'json': '{"cmd":"Create","data":{"title":["Admin"],"users":["admin"]},"location":"#"}'})
        self.assertEqual(response.status_code, 200)

########NEW FILE########
__FILENAME__ = test_runner
from django.test.simple import DjangoTestSuiteRunner
from django.conf import settings


class CustomTestRunner(DjangoTestSuiteRunner):

    """Custom DjangoTestSuiteRunner to remove Django modules from tests"""

    def __init__(self, *args, **kwargs):
        super(CustomTestRunner, self).__init__(*args, **kwargs)

    def run_tests(self, test_labels, **kwargs):
        test_labels = [app[7:]
                       for app in settings.INSTALLED_APPS if 'treeio' in app and app.count('.') == 1]
        return super(CustomTestRunner, self).run_tests(test_labels, **kwargs)

########NEW FILE########
__FILENAME__ = forms
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core Trash module forms
"""
from django import forms
from django.utils.translation import ugettext as _


class MassActionForm(forms.Form):

    """ Mass action form for Tickets """

    action = forms.ChoiceField(label=_("Action"),
                               choices=(('', '------'),
                                        ('delete', 'Delete Completely'),
                                        ('delete_all', 'Delete All'),
                                        ('untrash', 'Untrash')),
                               required=False)

    def __init__(self, *args, **kwargs):
        if 'instance' in kwargs:
            self.instance = kwargs['instance']
            del kwargs['instance']

        super(MassActionForm, self).__init__(*args, **kwargs)

    def save(self):
        "Process form"
        if self.instance and self.is_valid():
            if self.cleaned_data['action']:
                if self.cleaned_data['action'] == 'delete':
                    self.instance.delete()
                elif self.cleaned_data['action'] == 'untrash':
                    self.instance.trash = False
                    self.instance.save()
        if self.instance and self.cleaned_data['action'] == 'delete_all' and self.is_valid:
            self.instance.delete()

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core module Administration panel URLs
"""

from django.conf.urls.defaults import patterns, url

urlpatterns = patterns('treeio.core.trash.views',
                       url(r'^(\.(?P<response_format>\w+))?/?$',
                           'index', name='core_trash'),
                       url(r'^index(\.(?P<response_format>\w+))?/?$',
                           'index', name='core_trash_index'),

                       # Actions
                       url(r'^delete/(?P<object_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'object_delete', name='core_trash_object_delete'),
                       url(r'^untrash/(?P<object_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'object_untrash', name='core_trash_object_untrash'),
                       )

########NEW FILE########
__FILENAME__ = views
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core module: Trash views
"""
from django.template import RequestContext
from django.http import HttpResponseRedirect
from django.shortcuts import get_object_or_404
from django.core.urlresolvers import reverse
from treeio.core.models import Object
from treeio.core.decorators import treeio_login_required, handle_response_format
from treeio.core.rendering import render_to_response
from treeio.core.views import user_denied
from treeio.core.trash.forms import MassActionForm


def _process_mass_form(f):
    "Pre-process request to handle mass action form for Tasks and Milestones"

    def wrap(request, *args, **kwargs):
        "Wrap"
        if 'massform' in request.POST:
            if 'delete_all' in request.POST.values():
                try:
                    object = Object.filter_by_request(request, manager=Object.objects.filter(trash=True),
                                                      mode='r', filter_trash=False)
                    form = MassActionForm(request.POST, instance=object)
                    if form.is_valid() and request.user.get_profile().has_permission(object, mode='w'):
                        form.save()
                except:
                    pass
            else:
                for key in request.POST:
                    if 'mass-object' in key:
                        try:
                            object = Object.objects.get(pk=request.POST[key])
                            form = MassActionForm(
                                request.POST, instance=object)
                            if form.is_valid() and request.user.get_profile().has_permission(object, mode='w'):
                                form.save()
                        except:
                            pass

        return f(request, *args, **kwargs)

    wrap.__doc__ = f.__doc__
    wrap.__name__ = f.__name__

    return wrap


@treeio_login_required
@handle_response_format
@_process_mass_form
def index(request, response_format='html'):
    "List of items in Trash"

    trash = Object.filter_by_request(request, manager=Object.objects.filter(trash=True),
                                     mode='r', filter_trash=False)
    massform = MassActionForm()

    return render_to_response('core/trash/index',
                              {'trash': trash,
                               'massform': massform},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def object_delete(request, object_id, response_format='html'):
    "Completely delete item"

    object = get_object_or_404(Object, pk=object_id)
    if not request.user.get_profile().has_permission(object, mode='w'):
        return user_denied(request, message="You don't have access to this Object")

    if request.POST:
        if 'delete' in request.POST:
            object.delete()
            return HttpResponseRedirect(reverse('core_trash'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('core_trash'))

    return render_to_response('core/trash/object_delete',
                              {'object': object},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def object_untrash(request, object_id, response_format='html'):
    "Untrash item"

    object = get_object_or_404(Object, pk=object_id)
    if not request.user.get_profile().has_permission(object, mode='w'):
        return user_denied(request, message="You don't have access to this Object")

    related = object.get_related_object()
    if related:
        related.trash = False
        related.save()
    else:
        object.trash = False
        object.save()

    return HttpResponseRedirect(reverse('core_trash'))

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core module URLs
"""

from django.conf.urls.defaults import patterns, url

urlpatterns = patterns('treeio.core.views',
                       url(r'^logout(\.(?P<response_format>\w+))?/?$',
                           'user_logout', name='user_logout'),
                       url(r'^login(\.(?P<response_format>\w+))?/?$',
                           'user_login', name='user_login'),
                       url(r'^denied(\.(?P<response_format>\w+))?/?$',
                           'user_denied', name='user_denied'),
                       url(r'setup(\.(?P<response_format>\w+))?/?$',
                           'database_setup', name='database_setup'),

                       # Switch perspective
                       url(r'^perspective(\.(?P<response_format>\w+))?/?$',
                           'user_perspective', name='user_perspective'),

                       # Popup handler
                       url(r'^popup(\.json)?/(?P<popup_id>[a-z0-9\-_]+)/url=(?P<url>.+)/?$',
                           'ajax_popup', name='core_ajax_popup'),

                       # AJAX handlers
                       url(r'^ajax/objects(\.(?P<response_format>\w+))?/?$',
                           'ajax_object_lookup', name='core_ajax_object_lookup'),
                       url(r'^ajax/tags(\.(?P<response_format>\w+))?/?$',
                           'ajax_tag_lookup', name='core_ajax_tag_lookup'),

                       # Attachments
                       url(r'^ajax/upload/(?P<object_id>\d+)?/?$',
                           'ajax_upload', name="ajax_upload"),
                       url(r'^ajax/upload/record/(?P<record_id>\d+)?/?$',
                           'ajax_upload_record', name="ajax_upload_record"),
                       url(r'^attachment/download/(?P<attachment_id>\d+)/?$',
                           'attachment_download', name='core_attachment_download'),

                       # Reset password
                       url(r'^password_reset/$', 'password_reset',
                           name='password_reset'),
                       url(r'^password_reset/done/$', 'password_reset_done',
                           name='password_reset_done'),
                       url(r'^invitation/$', 'invitation_retrieve',
                           name='invitation_retrieve'),

                       # Custom logo
                       url(r'^logo/image/$', 'logo_image',
                           name='core_logo_image', kwargs={'gif': False}),
                       url(r'^logo/image/ie/$', 'logo_image',
                           name='core_logo_image_ie', kwargs={'gif': True}),


                       )

########NEW FILE########
__FILENAME__ = views
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core module views
"""

from django.contrib.auth import authenticate, login, logout
from django.contrib.sessions.models import Session
from django.contrib.sites.models import RequestSite
# from django.contrib.csrf.middleware import CsrfMiddleware as csrf
from django.utils.encoding import smart_unicode
from django.views.decorators.csrf import csrf_protect
from django.views.decorators.cache import cache_control
from django.template import RequestContext
from django.http import HttpResponseRedirect, Http404, HttpResponse, HttpResponseBadRequest
from django.core.urlresolvers import resolve, reverse
from django.shortcuts import get_object_or_404
from treeio.core.conf import settings
from treeio.core.decorators import treeio_login_required, handle_response_format
from treeio.core.forms import LoginForm, PasswordResetForm, InvitationForm, SqlSettingsForm
from treeio.core.models import Object, Module, ModuleSetting, Perspective, User, Attachment, Invitation, Tag, UpdateRecord
from treeio.core.rendering import render_to_response
from jinja2 import Markup
from os.path import join
import re
import json
import urllib2
import random


@handle_response_format
@treeio_login_required
def user_logout(request, response_format='html'):
    "User logout"
    logout(request)
    return HttpResponseRedirect(reverse('user_login'))


@handle_response_format
def user_login(request, response_format='html'):
    "User login"
    if request.user.username:
        return HttpResponseRedirect(reverse('user_denied'))
    next = request.GET.get('next', '/')
    form = LoginForm(request.POST)
    if request.POST:
        username = request.POST['username']
        password = request.POST['password']

        user = authenticate(username=username, password=password)
        if user and getattr(settings, 'HARDTREE_DISABLE_EVERGREEN_USERS', False) and 'evergreen_' in user.username[:10]:
            user = None
        if form.is_valid():
            if user is not None:

                try:
                    profile = user.get_profile()
                except:
                    profile = None

                if not profile:
                    return render_to_response('core/user_login', {
                        'error_message': 'Username or password you entered is not valid', 'form': Markup(form)},
                        context_instance=RequestContext(request), response_format=response_format)

                if profile.disabled:
                    return render_to_response('core/user_login', {
                        'error_message': 'Your account is disabled.',
                        'form': Markup(form)},
                        context_instance=RequestContext(request),
                        response_format=response_format)

                if user.is_active and profile:

                    # Disable account with overdue payment
                    if getattr(settings, "HARDTREE_SUBSCRIPTION_BLOCKED", False):
                        return render_to_response('core/user_login', {
                            'error_message': 'We are sorry to inform you but your account has been deactivated. Please login to your <a href="https://www.tree.io/login/">control panel</a> to see details.', 'form': Markup(form)},
                            context_instance=RequestContext(request), response_format=response_format)

                    login(request, user)

                    # Prevent same user from logging in at 2 different machines
                    if getattr(settings, "HARDTREE_MULTIPLE_LOGINS_DISABLED", False):
                        for ses in Session.objects.all():
                            if ses != request.session:
                                try:
                                    data = ses.get_decoded()
                                    if '_auth_user_id' in data and data['_auth_user_id'] == request.user.id:
                                        ses.delete()
                                except Exception:
                                    pass

                    if 'next' in request.POST:
                        return HttpResponseRedirect(request.POST['next'])
                    else:
                        return HttpResponseRedirect(next)
                else:
                    return render_to_response('core/user_login_disabled',
                                              context_instance=RequestContext(
                                                  request),
                                              response_format=response_format)
            else:
                return render_to_response('core/user_login', {
                    'error_message': 'Username or password you entered is not valid', 'form': Markup(form)},
                    context_instance=RequestContext(request), response_format=response_format)
        elif not form.is_valid() and user is None:
            return render_to_response('core/user_login',
                                      {'error_message': 'Username or password you entered is not valid', 'form': Markup(
                                          form)},
                                      context_instance=RequestContext(request), response_format=response_format)
        else:
            return render_to_response('core/user_login',
                                      {'error_message': 'Please re-enter the text from the image',
                                          'form': Markup(form)},
                                      context_instance=RequestContext(request), response_format=response_format)
    else:
        return render_to_response('core/user_login', {'form': Markup(form)},
                                  context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
def user_denied(request, message='', response_format='html'):
    "User denied page"
    response = render_to_response('core/user_denied',
                                  {'message': message},
                                  context_instance=RequestContext(request), response_format=response_format)
    #response.status_code = 403
    return response


@treeio_login_required
@handle_response_format
def user_perspective(request, response_format='html'):
    "Change user perspective"

    user = request.user.get_profile()
    if request.POST and 'core_perspective' in request.POST:
        id = request.POST['core_perspective']
        perspective = get_object_or_404(Perspective, pk=id)
        if user.has_permission(perspective):
            user.set_perspective(perspective)

    return HttpResponseRedirect(reverse('home'))


@cache_control(private=True, must_revalidate=True, max_age=60)
def logo_image(request, gif=False, response_format='html'):
    "Return current logo image"

    staticpath = getattr(settings, 'STATIC_DOC_ROOT', './static')
    logopath = staticpath + '/logo'
    if gif:
        logopath += '.gif'
        mimetype = 'image/gif'
    else:
        logopath += '.png'
        mimetype = 'image/png'

    customlogo = ''
    try:
        conf = ModuleSetting.get_for_module('treeio.core', 'logopath')[0]
        customlogo = getattr(
            settings, 'MEDIA_ROOT', './static/media') + conf.value
    except:
        pass

    logofile = ''
    if customlogo:
        try:
            logofile = open(customlogo, 'rb')
        except:
            pass

    if not logofile:
        try:
            logofile = open(logopath, 'rb')
        except:
            pass

    return HttpResponse(logofile.read(), mimetype=mimetype)


def ajax_popup(request, popup_id='', url='/'):
    "Handles pop up forms and requests, by extracting only the required content from response content"

    view, args, kwargs = resolve(url)

    if not request.user.username:
        return HttpResponseRedirect('/accounts/login')

    modules = Module.objects.all()
    active = None
    for module in modules:
        try:
            import_name = module.name + "." + \
                settings.HARDTREE_MODULE_IDENTIFIER
            hmodule = __import__(import_name, fromlist=[str(module.name)])
            urls = hmodule.URL_PATTERNS
            for regexp in urls:
                if re.match(regexp, url):
                    active = module
        except ImportError:
            pass
        except AttributeError:
            pass

    response = None
    if active:
        if not request.user.get_profile().has_permission(active):
            response = user_denied(request, "You do not have access to the %s module" % unicode(active),
                                   response_format='ajax')

    if not response:
        if view == ajax_popup:
            raise Http404("OMG, I see myself!")

        kwargs['request'] = request
        kwargs['response_format'] = 'ajax'
        response = view(*args, **kwargs)

        # response = csrf().process_response(request, response)

    module_inner = ""
    regexp = r"<!-- module_content_inner -->(?P<module_inner>.*?)<!-- /module_content_inner -->"
    blocks = re.finditer(regexp, response.content, re.DOTALL)
    for block in blocks:
        module_inner += block.group('module_inner').strip()

    title = ""
    regexp = r"<div class=\\\"title\\\">(?P<title>.*?)</div>"
    blocks = re.finditer(regexp, response.content, re.DOTALL)
    for block in blocks:
        title += block.group('title').replace('\\n', '').strip()
    if not title:
        blocks = re.finditer(
            r"<title>(?P<title>.*?)</title>", response.content, re.DOTALL)
        for block in blocks:
            title += block.group('title').replace('\\n', '').strip()

    subtitle = ""
    regexp = r"<div class=\\\"subtitle-block\\\">(?P<subtitle>.*?)</div>"
    blocks = re.finditer(regexp, response.content, re.DOTALL)
    for block in blocks:
        subtitle += block.group('subtitle').replace('\\n', '').strip()

    context = {'content': module_inner,
               'title': title,
               'subtitle': subtitle}

    context['popup_id'] = popup_id
    context['url'] = request.path

    if settings.HARDTREE_RESPONSE_FORMATS['json'] in response.get('Content-Type', 'text/html'):
        new_response = render_to_response('core/ajax_popup', context,
                                          context_instance=RequestContext(request), response_format='json')
    else:
        new_response = HttpResponse(json.dumps({'popup': context}))

    new_response.mimetype = settings.HARDTREE_RESPONSE_FORMATS['json']
    try:
        jsonresponse = json.loads(response.content)
        if 'redirect' in jsonresponse:
            new_response.status_code = 302
    except Exception:
        new_response.status_code = response.status_code

    return new_response


def mobile_view(request, url='/'):
    "Returns the same page in mobile view"

    if not url:
        url = '/'

    view, args, kwargs = resolve(url)

    if view == mobile_view:
        raise Http404("OMG, I see myself!")

    kwargs['request'] = request
    kwargs['response_format'] = 'html'
    response = view(*args, **kwargs)

    # response = csrf().process_response(request, response)

    if response.status_code == 302 and not response['Location'][:2] == '/m':
        response['Location'] = '/m' + response['Location']

    return response


def iframe_close(request, response_format='html'):
    "For third-party resources, when returned back to Hardtree, close iframe"

    return render_to_response('core/iframe_close', {},
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
def database_setup(request, response_format='html'):
    if not User.objects.all().count():
        if request.POST:
            sql_form = SqlSettingsForm(data=request.POST)
            if sql_form.is_valid():
                sql_form.create_database()
                if sql_form.is_valid():
                    return HttpResponseRedirect('/')
        else:
            sql_form = SqlSettingsForm()
        return render_to_response('core/database_setup', {'sql_form': sql_form},
                                  context_instance=RequestContext(request), response_format=response_format)
    return HttpResponseRedirect('/')


@treeio_login_required
def help_page(request, url='/', response_format='html'):
    "Returns a Help page from Evergreen"

    source = getattr(
        settings, 'HARDTREE_HELP_SOURCE', 'http://127.0.0.1:7000/help')

    if not url:
        url = '/'

    body = ''
    try:
        body = urllib2.urlopen(
            source + url + '?domain=' + RequestSite(request).domain).read()
    except:
        pass

    regexp = r"<!-- module_content_inner -->(?P<module_inner>.*?)<!-- /module_content_inner -->"
    blocks = re.finditer(regexp, body, re.DOTALL)
    for block in blocks:
        body = smart_unicode(block.group('module_inner').strip())

    return render_to_response('core/help_page', {'body': body},
                              context_instance=RequestContext(request),
                              response_format=response_format)


#
# AJAX lookups
#
@treeio_login_required
def ajax_object_lookup(request, response_format='html'):
    "Returns a list of matching objects"

    objects = []
    if request.GET and 'term' in request.GET:
        objects = Object.filter_permitted(request.user.get_profile(),
                                          Object.objects.filter(
                                              object_name__icontains=request.GET['term']),
                                          mode='x')[:10]

    return render_to_response('core/ajax_object_lookup',
                              {'objects': objects},
                              context_instance=RequestContext(request),
                              response_format=response_format)


@treeio_login_required
def ajax_tag_lookup(request, response_format='html'):
    "Returns a list of matching tags"

    tags = []
    if request.GET and 'term' in request.GET:
        tags = Tag.objects.filter(name__icontains=request.GET['term'])

    return render_to_response('core/ajax_tag_lookup',
                              {'tags': tags},
                              context_instance=RequestContext(request),
                              response_format=response_format)

#
# Widgets
#


@treeio_login_required
def widget_welcome(request, response_format='html'):
    "Quick start widget, which users see when they first log in"

    trial = False
    if getattr(settings, 'HARDTREE_SUBSCRIPTION_USER_LIMIT') == 3:
        trial = True

    customization = getattr(
        settings, 'HARDTREE_SUBSCRIPTION_CUSTOMIZATION', True)

    return render_to_response('core/widgets/welcome', {'trial': trial, 'customization': customization},
                              context_instance=RequestContext(request), response_format=response_format)


#
# Passwords
#
@csrf_protect
def password_reset(request, response_format='html'):
    "Password_reset sends the email with the new password"

    if request.POST:
        form = PasswordResetForm(request.POST)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect(reverse('password_reset_done'))
    else:
        form = PasswordResetForm()

    return render_to_response('core/password_reset_form',
                              {'form': form},
                              context_instance=RequestContext(request),
                              response_format=response_format)


def password_reset_done(request, response_format='html'):
    "Shows success message"

    return render_to_response('core/password_reset_done',
                              context_instance=RequestContext(request),
                              response_format=response_format)


def invitation_retrieve(request, response_format='html'):
    "Retrieve invitation and create account"

    if request.user.username:
        return HttpResponseRedirect('/')

    email = request.REQUEST.get('email', None)
    key = request.REQUEST.get('key', None)
    if email and key:
        try:
            invitation = Invitation.objects.get(email=email, key=key)
        except:
            raise Http404
    else:
        raise Http404

    if request.POST:
        form = InvitationForm(invitation, request.POST)
        if form.is_valid():
            profile = form.save()
            username = profile.user.username
            password = form.cleaned_data['password']
            user = authenticate(username=username, password=password)
            if user:
                invitation.delete()
                login(request, user)
                return HttpResponseRedirect('/')
    else:
        form = InvitationForm(invitation)

    return render_to_response('core/invitation_retrieve',
                              {'invitation': invitation,
                               'form': form},
                              context_instance=RequestContext(request),
                              response_format=response_format)


def save_upload(uploaded, filename, raw_data):
    '''
    raw_data: if True, uploaded is an HttpRequest object with the file being
              the raw post data
              if False, uploaded has been submitted via the basic form
              submission and is a regular Django UploadedFile in request.FILES
    '''
    try:
        from io import FileIO, BufferedWriter

        with BufferedWriter(FileIO(filename, "wb")) as dest:
            # if the "advanced" upload, read directly from the HTTP request
            # with the Django 1.3 functionality
            if raw_data:
                if isinstance(uploaded, basestring):
                    dest.write(uploaded)
                else:
                    foo = uploaded.read(1024)
                    while foo:
                        dest.write(foo)
                        foo = uploaded.read(1024)
            # if not raw, it was a form upload so read in the normal Django
            # chunks fashion
            else:
                for c in uploaded.chunks():
                    dest.write(c)
                # got through saving the upload, report success
            return True
    except IOError:
        # could not open the file most likely
        pass
    return False


@treeio_login_required
def ajax_upload(request, object_id=None, record=None):
    try:
        object = None
        if request.method == "POST":
            if request.is_ajax():
                # the file is stored raw in the request
                upload = request
                is_raw = True
                # AJAX Upload will pass the filename in the querystring if it
                # is the "advanced" ajax upload
                try:
                    filename = request.GET['qqfile']
                except KeyError:
                    return HttpResponseBadRequest("AJAX request not valid")
            # not an ajax upload, so it was the "basic" iframe version with
            # submission via form
            else:
                is_raw = False
                if len(request.FILES) == 1:
                    # FILES is a dictionary in Django but Ajax Upload gives the uploaded file an
                    # ID based on a random number, so it cannot be guessed here in the code.
                    # Rather than editing Ajax Upload to pass the ID in the querystring,
                    # observer that each upload is a separate request,
                    # so FILES should only have one entry.
                    # Thus, we can just grab the first (and only) value in the
                    # dict.
                    upload = request.FILES.values()[0]
                else:
                    raise Http404("Bad Upload")
                filename = upload.name

            random.seed()
            filehash = str(random.getrandbits(128))

            savefile = join(
                getattr(settings, 'MEDIA_ROOT'), 'attachments', filehash)

            # save the file
            success = save_upload(upload, savefile, is_raw)

            attachment = Attachment(filename=filename,
                                    mimetype=upload.content_type,
                                    uploaded_by=request.user.get_profile(),
                                    attached_file=filehash)

            if record:
                attachment.attached_record = record
                about = record.about.all()
                if about.count():
                    attachment.attached_object = about[0]
                    object = attachment.attached_object
            else:
                object = Object.objects.get(id=object_id)
                attachment.attached_object = object

            attachment.save()

            if object:
                object.set_last_updated()

            # TODO: smart markup and return as string, and object id, different
            # classnames,id or attribute for update records and objects

            if success:
                ret_json = {'success': success,
                            'object_id': object.id if object else None,
                            'update_id': record.id if record else None}

            else:
                ret_json = {'success': False,
                            'object_id': None,
                            'update_id': None}

            return HttpResponse(json.dumps(ret_json))
    except Exception, e:
        print e


@treeio_login_required
def ajax_upload_record(request, record_id=None):
    record = UpdateRecord.objects.get(id=record_id)
    return ajax_upload(request, None, record)


@treeio_login_required
def attachment_download(request, attachment_id):
    try:
        attachment = Attachment.objects.get(pk=attachment_id)
    except Attachment.DoesNotExist:
        raise Http404()

    filepath = join(
        getattr(settings, 'MEDIA_ROOT'), 'attachments', attachment.attached_file.name)
    try:
        data = open(filepath).read()
    except IOError:
        raise Http404()

    response = HttpResponse(data, content_type=attachment.mimetype)
    response[
        'Content-Disposition'] = 'filename="%s"' % smart_unicode(attachment.filename)
    return response

########NEW FILE########
__FILENAME__ = widgets
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Core module widgets
"""

#WIDGETS = {'widget_release': {'title': 'Time To Release', 'size': 300}}
WIDGETS = {'widget_welcome': {'title': 'Quick Start', 'size': "95%"}}


def get_widgets(request):
    "Returns a set of all available widgets"

    return WIDGETS

########NEW FILE########
__FILENAME__ = conf
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# -*- coding: utf-8 -*-
#
# Hardtree documentation build configuration file, created by
# sphinx-quickstart on Mon Oct 25 16:15:27 2010.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
sys.path.insert(0, os.path.abspath('../../'))
sys.path.insert(0, os.path.abspath('../'))

from treeio import settings
from django.core.management import setup_environ
setup_environ(settings)

# -- General configuration -----------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.viewcode']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Hardtree'
copyright = u'2010, Tree.io Limited'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '1.0'
# The full version, including alpha/beta/rc tags.
release = '1.0'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'Hardtreedoc'


# -- Options for LaTeX output --------------------------------------------

# The paper size ('letter' or 'a4').
#latex_paper_size = 'letter'

# The font size ('10pt', '11pt' or '12pt').
#latex_font_size = '10pt'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
    ('index', 'Hardtree.tex', u'Hardtree Documentation',
     u'Tree.io Limited', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Additional stuff for the LaTeX preamble.
#latex_preamble = ''

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'treeio', u'Hardtree Documentation',
     [u'Tree.io Limited'], 1)
]

########NEW FILE########
__FILENAME__ = admin
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Documents Admin
"""
from treeio.documents.models import Folder, File, Document, WebLink
from django.contrib import admin


class FolderAdmin(admin.ModelAdmin):

    "FolderAdmin"
    list_display = ('name', 'parent')
    search_fields = ['name']


class FileAdmin(admin.ModelAdmin):

    "FileAdmin"
    list_display = ('name', 'folder')
    list_filter = ['folder']
    search_fields = ['name']


class DocumentAdmin(admin.ModelAdmin):

    "DocumentAdmin"
    list_display = ('title', 'folder')
    list_filter = ['folder']
    search_fields = ['title']


class WebLinkAdmin(admin.ModelAdmin):

    "WeblinkAdmin"
    list_display = ('title', 'folder', 'url')
    list_filter = ['folder']
    search_fields = ['title']

admin.site.register(Folder, FolderAdmin)
admin.site.register(File, FileAdmin)
admin.site.register(Document, DocumentAdmin)
admin.site.register(WebLink, WebLinkAdmin)

########NEW FILE########
__FILENAME__ = handlers
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

from __future__ import absolute_import, with_statement

__all__ = ['FolderHandler',
           'FileHandler',
           'DocumentHandler',
           'WebLinkHandler', ]

from treeio.core.api.handlers import ObjectHandler, getOrNone
from treeio.documents.models import Document, Folder, File, WebLink
from treeio.documents.forms import FolderForm, DocumentForm, FileForm, WebLinkForm


class FolderHandler(ObjectHandler):

    "Entrypoint for Folder model."

    model = Folder
    form = FolderForm

    @staticmethod
    def resource_uri():
        return ('api_documents_folders', ['id'])

    def flatten_dict(self, request):
        dct = super(FolderHandler, self).flatten_dict(request)
        dct["folder_id"] = None
        return dct


class CommonHandler(ObjectHandler):

    def check_create_permission(self, request, mode):
        if request.data.has_key('folder'):
            folder = getOrNone(Folder, pk=request.data['folder'])
            if not request.user.get_profile().has_permission(folder, mode='x'):
                request.data['folder'] = None
        return True

    def flatten_dict(self, request):
        dct = super(CommonHandler, self).flatten_dict(request)
        dct["folder_id"] = None
        return dct


class FileHandler(CommonHandler):

    "Entrypoint for File model."

    model = File
    form = FileForm

    @staticmethod
    def resource_uri():
        return ('api_documents_files', ['id'])


class DocumentHandler(CommonHandler):

    "Entrypoint for Document model."

    model = Document
    form = DocumentForm

    @staticmethod
    def resource_uri():
        return ('api_documents_documents', ['id'])


class WebLinkHandler(CommonHandler):

    "Entrypoint for WebLink model."

    model = WebLink
    form = WebLinkForm

    @staticmethod
    def resource_uri():
        return ('api_documents_weblinks', ['id'])

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Documents: test api
"""

import json
from django.test import TestCase
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser
from treeio.core.models import User, Group, Perspective, ModuleSetting, Object
from treeio.documents.models import Folder, Document, File, WebLink


class DocumentsViewsTest(TestCase):

    "Documents functional tests for api"

    username = "api_test"
    password = "api_password"
    prepared = False
    authentication_headers = {"CONTENT_TYPE": "application/json",
                              "HTTP_AUTHORIZATION": "Basic YXBpX3Rlc3Q6YXBpX3Bhc3N3b3Jk"}
    content_type = 'application/json'

    def setUp(self):
        "Initial Setup"

        if not self.prepared:
            Object.objects.all().delete()

            # Create objects

            try:
                self.group = Group.objects.get(name='test')
            except Group.DoesNotExist:
                Group.objects.all().delete()
                self.group = Group(name='test')
                self.group.save()

            try:
                self.user = DjangoUser.objects.get(username=self.username)
                self.user.set_password(self.password)
                try:
                    self.profile = self.user.get_profile()
                except Exception:
                    User.objects.all().delete()
                    self.user = DjangoUser(username=self.username, password='')
                    self.user.set_password(self.password)
                    self.user.save()
            except DjangoUser.DoesNotExist:
                User.objects.all().delete()
                self.user = DjangoUser(username=self.username, password='')
                self.user.set_password(self.password)
                self.user.save()

            try:
                perspective = Perspective.objects.get(name='default')
            except Perspective.DoesNotExist:
                Perspective.objects.all().delete()
                perspective = Perspective(name='default')
                perspective.set_default_user()
                perspective.save()

            ModuleSetting.set('default_perspective', perspective.id)

            self.folder = Folder(name='test')
            self.folder.set_default_user()
            self.folder.save()

            self.document = Document(title='test_document', folder=self.folder)
            self.document.set_default_user()
            self.document.save()

            self.file = File(name='test_file', folder=self.folder)
            self.file.set_default_user()
            self.file.save()

            self.link = WebLink(title='test', folder=self.folder, url='test')
            self.link.set_default_user()
            self.link.save()

            self.client = Client()

            self.prepared = True

    def test_unauthenticated_access(self):
        "Test index page at /api/documents/folders"
        response = self.client.get('/api/documents/folders')
        # Redirects as unauthenticated
        self.assertEquals(response.status_code, 401)

    def test_get_folders_list(self):
        """ Test index page api/documents/folders """
        response = self.client.get(
            path=reverse('api_documents_folders'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_folder(self):
        response = self.client.get(path=reverse('api_documents_folders', kwargs={
                                   'object_ptr': self.folder.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_folder(self):
        updates = {"name": "Api_folder_name"}
        response = self.client.put(path=reverse('api_documents_folders', kwargs={'object_ptr': self.folder.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])

    def test_get_files_list(self):
        """ Test index page api/documents/files """
        response = self.client.get(
            path=reverse('api_documents_files'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_file(self):
        response = self.client.get(path=reverse('api_documents_files', kwargs={
                                   'object_ptr': self.file.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

#    def test_update_file(self):
#        updates = { "name": "Api_folder_name" }
#        response = self.client.put(path=reverse('api_documents_files', kwargs={'object_ptr': self.file.id}),
#                                   content_type=self.content_type,  data=json.dumps(updates), **self.authentication_headers)
#        self.assertEquals(response.status_code, 200)
#
#        data = json.loads(response.content)
#        self.assertEquals(data['name'], updates['name'])

    def test_get_documents_list(self):
        """ Test index page api/documents/documents """
        response = self.client.get(
            path=reverse('api_documents_documents'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_document(self):
        response = self.client.get(path=reverse('api_documents_documents', kwargs={
                                   'object_ptr': self.document.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_document(self):
        updates = {"title": "Api_title",
                   "folder": self.folder.id, "body": "Api test body"}
        response = self.client.put(path=reverse('api_documents_documents', kwargs={'object_ptr': self.document.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['title'], updates['title'])
        self.assertEquals(data['folder']['id'], updates['folder'])
        self.assertEquals(data['body'], updates['body'])

    def test_get_weblinks_list(self):
        """ Test index page api/documents/weblinks """
        response = self.client.get(
            path=reverse('api_documents_weblinks'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_weblink(self):
        response = self.client.get(path=reverse('api_documents_weblinks', kwargs={
                                   'object_ptr': self.link.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_weblink(self):
        updates = {"title": "Api_title", "folder": self.folder.id,
                   "url": "http://Api-test-body"}
        response = self.client.put(path=reverse('api_documents_weblinks', kwargs={'object_ptr': self.link.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['title'], updates['title'])
        self.assertEquals(data['folder']['id'], updates['folder'])
        self.assertEquals(data['url'], updates['url'])

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

import handlers
from django.conf.urls import patterns, url
from treeio.core.api.auth import auth_engine
from treeio.core.api.doc import documentation_view
from treeio.core.api.resource import CsrfExemptResource

ad = {'authentication': auth_engine}

# documents resources
folderResource = CsrfExemptResource(handler=handlers.FolderHandler, **ad)
fileResource = CsrfExemptResource(handler=handlers.FileHandler, **ad)
documentResource = CsrfExemptResource(handler=handlers.DocumentHandler, **ad)
weblinkResource = CsrfExemptResource(handler=handlers.WebLinkHandler, **ad)

urlpatterns = patterns('',
    # Documents
    url(r'^doc$', documentation_view, kwargs={
        'module': handlers}, name="api_documents_doc"),
    url(r'^folders$', folderResource,
        name="api_documents_folders"),
    url(r'^folder/(?P<object_ptr>\d+)',
        folderResource, name="api_documents_folders"),
    url(r'^files$', fileResource,
        name="api_documents_files"),
    url(r'^file/(?P<object_ptr>\d+)',
        fileResource, name="api_documents_files"),
    url(r'^documents$', documentResource,
        name="api_documents_documents"),
    url(r'^document/(?P<object_ptr>\d+)',
        documentResource, name="api_documents_documents"),
    url(r'^weblinks$', weblinkResource,
        name="api_documents_weblinks"),
    url(r'^weblink/(?P<object_ptr>\d+)',
        weblinkResource, name="api_documents_weblinks"),
)

########NEW FILE########
__FILENAME__ = files
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Custom storage for Documents to allow dynamic MEDIA_ROOT paths
"""
from django.core.files.storage import FileSystemStorage
from django.core.exceptions import SuspiciousOperation
from django.utils._os import safe_join
from treeio.core.conf import settings
import os


class FileStorage(FileSystemStorage):

    def path(self, name):
        try:
            path = safe_join(getattr(settings, 'MEDIA_ROOT'), name)
        except ValueError:
            raise SuspiciousOperation(
                "Attempted access to '%s' denied." % name)
        return os.path.normpath(path)

########NEW FILE########
__FILENAME__ = forms
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Documents module forms
"""
from django.forms import ModelForm, CharField, TextInput, ChoiceField, Form
from treeio.documents.models import Folder, Document, File, WebLink
from treeio.core.models import Object
from django.utils.translation import ugettext as _
from treeio.core.decorators import preprocess_form
from django.core.urlresolvers import reverse
preprocess_form()


class MassActionForm(Form):

    """ Mass action form for Reports """

    delete = ChoiceField(label=_("With selected"), choices=(('', '-----'), ('delete', 'Delete Completely'),
                                                            ('trash', 'Move to Trash')), required=False)

    instance = None

    def __init__(self, user, *args, **kwargs):
        if 'instance' in kwargs:
            self.instance = kwargs['instance']
            del kwargs['instance']

        super(MassActionForm, self).__init__(*args, **kwargs)
        self.fields['delete'] = ChoiceField(label=_("With selected"), choices=(('', '-----'),
                                                                               ('delete', _(
                                                                                   'Delete Completely')),
                                                                               ('trash', _('Move to Trash'))), required=False)

    def save(self, *args, **kwargs):
        "Process form"

        if self.instance:
            if self.is_valid():
                if self.cleaned_data['delete']:
                    if self.cleaned_data['delete'] == 'delete':
                        self.instance.delete()
                    if self.cleaned_data['delete'] == 'trash':
                        self.instance.trash = True
                        self.instance.save()


class FolderForm(ModelForm):

    """ Folder form """

    def __init__(self, user, folder_id, *args, **kwargs):
        super(FolderForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")

        self.fields['parent'].label = _("Parent")
        self.fields['parent'].queryset = Object.filter_permitted(
            user, Folder.objects, mode='x')
        if folder_id:
            self.fields['parent'].initial = folder_id

    class Meta:

        "Folder"
        model = Folder
        fields = ('name', 'parent')


class DocumentForm(ModelForm):

    """ Document form """
    title = CharField(widget=TextInput(attrs={'size': '50'}))

    def __init__(self, user, folder_id, *args, **kwargs):
        super(DocumentForm, self).__init__(*args, **kwargs)

        self.fields['title'].label = _("Title")

        self.fields['folder'].label = _("Folder")
        self.fields['folder'].queryset = Object.filter_permitted(
            user, Folder.objects, mode='x')
        self.fields['folder'].widget.attrs.update(
            {'popuplink': reverse('documents_folder_add')})
        if folder_id:
            self.fields['folder'].initial = folder_id
        else:
            try:
                self.fields['folder'].initial = self.fields[
                    'folder'].queryset[0].id
            except:
                pass

        self.fields['body'].label = _("Body")
        self.fields['body'].widget.attrs.update({'class': 'full-editor'})

    class Meta:

        "Document"
        model = Document
        fields = ('title', 'folder', 'body')


class FileForm(ModelForm):

    """ File form """
    name = CharField(widget=TextInput(attrs={'size': '25'}))

    def __init__(self, user, folder_id, *args, **kwargs):
        super(FileForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")

        self.fields['folder'].label = _("Folder")
        self.fields['folder'].queryset = Object.filter_permitted(
            user, Folder.objects, mode='x')
        self.fields['folder'].widget.attrs.update(
            {'popuplink': reverse('documents_folder_add')})
        if folder_id:
            self.fields['folder'].initial = folder_id
        else:
            try:
                self.fields['folder'].initial = self.fields[
                    'folder'].queryset[0].id
            except:
                pass

        self.fields['content'].label = _("Content")

    class Meta:

        "File"
        model = File
        fields = ('name', 'folder', 'content')


class WebLinkForm(ModelForm):

    """ WebLink form """

    def __init__(self, user, folder_id, *args, **kwargs):
        super(WebLinkForm, self).__init__(*args, **kwargs)

        self.fields['title'].label = _("Title")
        self.fields['title'].widget = TextInput(attrs={'size': '35'})

        self.fields['url'].label = _("URL")
        self.fields['url'].initial = 'http://'
        self.fields['url'].widget = TextInput(attrs={'size': '50'})

        self.fields['folder'].label = _("Folder")
        self.fields['folder'].queryset = Object.filter_permitted(
            user, Folder.objects, mode='x')
        self.fields['folder'].widget.attrs.update(
            {'popuplink': reverse('documents_folder_add')})

        if folder_id:
            self.fields['folder'].initial = folder_id
        else:
            try:
                self.fields['folder'].initial = self.fields[
                    'folder'].queryset[0].id
            except:
                pass

    class Meta:

        "WebLink"
        model = WebLink
        fields = ('title', 'folder', 'url')


class FilterForm(ModelForm):

    """ Filter form definition """

    def __init__(self, user, skip=[], *args, **kwargs):
        super(FilterForm, self).__init__(*args, **kwargs)

        self.fields['title'].label = _("Title")
        self.fields['folder'].label = _("Folder")

        if 'title' in skip:
            del self.fields['title']
        else:
            self.fields['title'].required = False

        if 'folder' in skip:
            del self.fields['folder']
        else:
            self.fields['folder'].queryset = Object.filter_permitted(
                user, Folder.objects, mode='x')
            #self.fields['folder'].required = False
            self.fields['folder'].null = True

    class Meta:

        "Filter"
        model = Document
        fields = ('title', 'folder')

########NEW FILE########
__FILENAME__ = hmodule
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Documents: Hardtree module definition
"""

PROPERTIES = {
    'title': 'Documents',
    'details': 'Manage documents',
    'url': '/documents/',
    'system': False,
    'type': 'minor',
}


URL_PATTERNS = [
    '^/documents/',
]

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding model 'Folder'
        db.create_table('documents_folder', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=255)),
            ('parent', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='child_set', null=True, to=orm['documents.Folder'])),
        ))
        db.send_create_signal('documents', ['Folder'])

        # Adding model 'File'
        db.create_table('documents_file', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=255)),
            ('folder', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['documents.Folder'])),
            ('content', self.gf('django.db.models.fields.files.FileField')
             (max_length=100)),
        ))
        db.send_create_signal('documents', ['File'])

        # Adding model 'Document'
        db.create_table('documents_document', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('title', self.gf('django.db.models.fields.CharField')
             (max_length=255)),
            ('folder', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['documents.Folder'])),
            ('body', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('documents', ['Document'])

        # Adding model 'WebLink'
        db.create_table('documents_weblink', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('title', self.gf('django.db.models.fields.CharField')
             (max_length=255)),
            ('folder', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['documents.Folder'])),
            ('url', self.gf('django.db.models.fields.CharField')
             (max_length=255)),
        ))
        db.send_create_signal('documents', ['WebLink'])

    def backwards(self, orm):

        # Deleting model 'Folder'
        db.delete_table('documents_folder')

        # Deleting model 'File'
        db.delete_table('documents_file')

        # Deleting model 'Document'
        db.delete_table('documents_document')

        # Deleting model 'WebLink'
        db.delete_table('documents_weblink')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'everybody_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']"}),
            'group_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"}),
            'user_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'documents.document': {
            'Meta': {'ordering': "['-last_updated']", 'object_name': 'Document', '_ormbases': ['core.Object']},
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['documents.Folder']"}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'documents.file': {
            'Meta': {'ordering': "['-last_updated']", 'object_name': 'File', '_ormbases': ['core.Object']},
            'content': ('django.db.models.fields.files.FileField', [], {'max_length': '100'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['documents.Folder']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'documents.folder': {
            'Meta': {'object_name': 'Folder', '_ormbases': ['core.Object']},
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['documents.Folder']"})
        },
        'documents.weblink': {
            'Meta': {'ordering': "['-last_updated']", 'object_name': 'WebLink', '_ormbases': ['core.Object']},
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['documents.Folder']"}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        }
    }

    complete_apps = ['documents']

########NEW FILE########
__FILENAME__ = models
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Documents module objects
"""
from django.db import models
from django.core.urlresolvers import reverse
from treeio.core.models import Object
from treeio.core.conf import settings
from treeio.documents.files import FileStorage
import os
import time
import re

# Folder model


class Folder(Object):

    """ Every folder may have a parent folder """
    name = models.CharField(max_length=255)
    parent = models.ForeignKey(
        'self', blank=True, null=True, related_name='child_set')

    access_inherit = ('parent', '*module', '*user')

    def __unicode__(self):
        return self.name

    def get_absolute_url(self):
        "Returns absolute URL of the object"
        try:
            return reverse('documents_folder_view', args=[self.id])
        except Exception:
            return ""


def generate_filename(instance, old_filename):
    """ Generate filename """
    extension = os.path.splitext(old_filename)[1]
    filename = str(time.time()) + extension
    return 'documents/files/' + filename


# File model
class File(Object):

    """ A binary or other non-renderable file (i.e. an image) """
    name = models.CharField(max_length=255)
    folder = models.ForeignKey(Folder)
    content = models.FileField(
        upload_to=generate_filename, storage=FileStorage())

    access_inherit = ('folder', '*module', '*user')

    def __unicode__(self):
        return self.name

    def get_file_type(self):
        match = re.match('.*\.(?P<extension>[a-z]+)', unicode(self.content))
        if match:
            return unicode(match.group('extension')).upper()
        else:
            return ''

    def can_preview(self):
        filetype = self.get_file_type()
        for ext in ('PNG', 'JPG', 'JPEG', 'BMP', 'GIF', 'SVG'):
            if filetype == ext:
                return True
        return False

    def get_preview_url(self):
        return getattr(settings, 'MEDIA_URL', '/static/media/') + unicode(self.content)

    class Meta:

        " File "
        ordering = ['-last_updated']

    def get_absolute_url(self):
        "Returns absolute URL of the object"
        try:
            return reverse('documents_file_view', args=[self.id])
        except Exception:
            return ""


# Document model
class Document(Object):

    """ A readable document, i.e. HTML, which may be rendered directly """
    title = models.CharField(max_length=255)
    folder = models.ForeignKey(Folder)
    body = models.TextField(null=True, blank=True)

    access_inherit = ('folder', '*module', '*user')

    def __unicode__(self):
        return self.title

    class Meta:

        " File "
        ordering = ['-last_updated']

    def get_absolute_url(self):
        "Returns absolute URL of the object"
        try:
            return reverse('documents_document_view', args=[self.id])
        except Exception:
            return ""

# WebLink model


class WebLink(Object):

    """ A web link """
    title = models.CharField(max_length=255)
    folder = models.ForeignKey(Folder)
    url = models.CharField(max_length=255)

    access_inherit = ('folder', '*module', '*user')

    def __unicode__(self):
        return self.title

    class Meta:

        " File "
        ordering = ['-last_updated']

    def get_absolute_url(self):
        "Returns absolute URL of the object"
        try:
            return reverse('documents_weblink_view', args=[self.id])
        except Exception:
            return ""

########NEW FILE########
__FILENAME__ = documents
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Documents templatetags
"""
from coffin import template
from treeio.core.rendering import render_to_string
from jinja2 import contextfunction, Markup
from django.template import RequestContext

register = template.Library()


@contextfunction
def documents_document_list(context, documents, skip_group=False):
    "Print a list of documents"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('documents/tags/document_list',
                                   {'documents': documents,
                                       'skip_group': skip_group},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(documents_document_list)


@contextfunction
def documents_file_list(context, files, skip_group=False):
    "Print a list of files"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('documents/tags/file_list',
                                   {'files': files, 'skip_group': skip_group},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(documents_file_list)


@contextfunction
def documents_weblink_list(context, links, skip_group=False):
    "Print a list of links"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('documents/tags/weblink_list',
                                   {'links': links, 'skip_group': skip_group},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(documents_weblink_list)


@contextfunction
def documents_objects_list(context, objects, folder, skip_group=False):
    "Print a list of all objects"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('documents/tags/objects_list',
                                   {'objects': objects,
                                       'skip_group': skip_group, 'folder': folder},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(documents_objects_list)

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Documents: test suites
"""

from django.test import TestCase
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser
from treeio.core.models import User, Group, Perspective, ModuleSetting, Object
from treeio.documents.models import Folder, Document, File, WebLink


class DocumentsModelsTest(TestCase):

    "Documents Models Tests"

    def test_model_folder(self):
        "Test Folder Model"
        obj = Folder(name='test')
        obj.save()
        self.assertEquals('test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_document(self):
        "Test Document Model"
        folder = Folder(name='test')
        folder.save()
        obj = Document(title='test', folder=folder)
        obj.save()
        self.assertEquals(folder, obj.folder)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_file(self):
        "Test File Model"
        folder = Folder(name='test')
        folder.save()
        obj = File(name='test', folder=folder)
        obj.save()
        self.assertEquals(folder, obj.folder)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_weblink(self):
        "Test WebLink Model"
        folder = Folder(name='test')
        folder.save()
        obj = WebLink(title='test', folder=folder, url='test')
        obj.save()
        self.assertEquals(folder, obj.folder)
        self.assertNotEquals(obj.id, None)
        obj.delete()


class DocumentsViewsTest(TestCase):

    "Documents functional tests for views"

    username = "test"
    password = "password"
    prepared = False

    def setUp(self):
        "Initial Setup"

        if not self.prepared:
            Object.objects.all().delete()

            # Create objects

            self.group, created = Group.objects.get_or_create(name='test')
            duser, created = DjangoUser.objects.get_or_create(
                username=self.username)
            duser.set_password(self.password)
            duser.save()
            self.user, created = User.objects.get_or_create(user=duser)
            self.user.save()
            perspective, created = Perspective.objects.get_or_create(
                name='default')
            perspective.set_default_user()
            perspective.save()

            ModuleSetting.set('default_perspective', perspective.id)

            self.folder = Folder(name='test')
            self.folder.set_default_user()
            self.folder.save()

            self.document = Document(title='test_document', folder=self.folder)
            self.document.set_default_user()
            self.document.save()

            self.file = File(name='test_file', folder=self.folder)
            self.file.set_default_user()
            self.file.save()

            self.link = WebLink(title='test', folder=self.folder, url='test')
            self.link.set_default_user()
            self.link.save()

            self.client = Client()

            self.prepared = True

    ######################################
    # Testing views when user is logged in
    ######################################
    def test_index_login(self):
        "Test index page with login at /documents/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('document_index'))
        self.assertEquals(response.status_code, 200)

    def test_index_documents_login(self):
        "Test index page with login at /documents/documents/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('index_documents'))
        self.assertEquals(response.status_code, 200)

    def test_index_files_login(self):
        "Test index page with login at /documents/files/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('index_files'))
        self.assertEquals(response.status_code, 200)

    def test_index_weblinks_login(self):
        "Test index page with login at /documents/weblinks/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('index_weblinks'))
        self.assertEquals(response.status_code, 200)

    # Folders

    def test_folder_add(self):
        "Test index page with login at /documents/folder/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('documents_folder_add'))
        self.assertEquals(response.status_code, 200)
        # form
        self.assertEqual(Folder.objects.count(), 1)
        post_data = {'name': 'test'}
        response = self.client.post(reverse('documents_folder_add'), post_data)
        self.assertEquals(response.status_code, 302)  # redirect somewhere
        self.assertEquals(Folder.objects.count(), 2)

    def test_folder_view_login(self):
        "Test index page with login at /documents/folder/view/<folder_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('documents_folder_view', args=[self.folder.id]))
        self.assertEquals(response.status_code, 200)

    def test_folder_edit_login(self):
        "Test index page with login at /documents/folder/edit/<folder_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('documents_folder_edit', args=[self.folder.id]))
        self.assertEquals(response.status_code, 200)

    def test_folder_delete_login(self):
        "Test index page with login at /documents/folder/delete/<folder_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('documents_folder_delete', args=[self.folder.id]))
        self.assertEquals(response.status_code, 200)

    # Documents

    def test_document_add(self):
        "Test index page with login at /documents/add"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('documents_document_add'))
        self.assertEquals(response.status_code, 200)
        # form
        self.assertEqual(Document.objects.count(), 1)
        response = self.client.get(reverse('documents_document_add'))
        post_data = {'title': 'test',
                     'folder': self.folder,
                     }
        response = self.client.post(
            reverse('documents_document_add'), post_data)
        #self.assertEqual(Document.objects.count(), 2)

    def test_document_add_typed(self):
        "Test index page with login at /documents/add/folder/<folder_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('documents_document_add_typed', args=[self.folder.id]))
        self.assertEquals(response.status_code, 200)

    def test_document_view_login(self):
        "Test index page with login at /documents/view/<document_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('documents_document_view', args=[self.document.id]))
        self.assertEquals(response.status_code, 200)

    def test_document_edit_login(self):
        "Test index page with login at /documents/edit/<document_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('documents_document_edit', args=[self.document.id]))
        self.assertEquals(response.status_code, 200)

    def test_document_delete_login(self):
        "Test index page with login at /documents/delete/<document_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('documents_document_delete', args=[self.document.id]))
        self.assertEquals(response.status_code, 200)

    # Files

    def test_file_view_login(self):
        "Test index page with login at /file/view/<file_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('documents_file_view', args=[self.file.id]))
        self.assertEquals(response.status_code, 200)

    def test_file_edit_login(self):
        "Test index page with login at /file/edit/<file_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('documents_file_edit', args=[self.file.id]))
        self.assertEquals(response.status_code, 200)

    def test_file_delete_login(self):
        "Test index page with login at /file/view/<file_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('documents_file_delete', args=[self.file.id]))
        self.assertEquals(response.status_code, 200)

    # Web Links
    def test_weblink_add_typed(self):
        "Test index page with login at /documents/weblink/add/<folder_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('documents_weblink_add_typed', args=[self.folder.id]))
        self.assertEquals(response.status_code, 200)

    def test_weblink_add(self):
        "Test index page with login at /documents/weblink/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('documents_weblink_add'))
        self.assertEquals(response.status_code, 200)
        # form
        self.assertEqual(WebLink.objects.count(), 1)
        response = self.client.get(reverse('documents_weblink_add'))
        post_data = {'title': 'test',
                     'folder': self.folder,
                     'url': 'test',
                     }
        response = self.client.post(
            reverse('documents_weblink_add'), post_data)
        #self.assertEqual(WebLink.objects.count(), 2)

    def test_weblink_view_login(self):
        "Test index page with login at /documents/view/<weblink_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('documents_weblink_view', args=[self.link.id]))
        self.assertEquals(response.status_code, 200)

    def test_weblink_edit_login(self):
        "Test index page with login at /documents/edit/<weblink_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('documents_weblink_edit', args=[self.link.id]))
        self.assertEquals(response.status_code, 200)

    def test_weblink_delete_login(self):
        "Test index page with login at /documents/delete/<weblink_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('documents_weblink_delete', args=[self.link.id]))
        self.assertEquals(response.status_code, 200)

    ######################################
    # Testing views when user is not logged in
    ######################################
    def test_index(self):
        "Test index page at /documents/"
        response = self.client.get('/documents/')
        # Redirects as unauthenticated
        self.assertRedirects(response, reverse('user_login'))

    def test_index_documents_out(self):
        "Testing /documents/documents/"
        response = self.client.get(reverse('index_documents'))
        self.assertRedirects(response, reverse('user_login'))

    def test_index_files_out(self):
        "Testing /documents/files/"
        response = self.client.get(reverse('index_files'))
        self.assertRedirects(response, reverse('user_login'))

    def test_index_weblinks_out(self):
        "Testing /documents/weblinks/"
        response = self.client.get(reverse('index_weblinks'))
        self.assertRedirects(response, reverse('user_login'))

    # Folders

    def test_folder_add_out(self):
        "Testing /documents/folder/add/"
        response = self.client.get(reverse('documents_folder_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_folder_view_out(self):
        "Testing /documents/folder/view/<folder_id>"
        response = self.client.get(
            reverse('documents_folder_view', args=[self.folder.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_folder_edit_out(self):
        "Testing /documents/folder/edit/<folder_id>"
        response = self.client.get(
            reverse('documents_folder_edit', args=[self.folder.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_folder_delete_out(self):
        "Testing /documents/folder/delete/<folder_id>"
        response = self.client.get(
            reverse('documents_folder_delete', args=[self.folder.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Documents

    def test_document_add_out(self):
        "Testing /documents/add"
        response = self.client.get(reverse('documents_document_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_document_add_typed_out(self):
        "Testing /documents/add/folder/<folder_id>"
        response = self.client.get(
            reverse('documents_document_add_typed', args=[self.folder.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_document_view_out(self):
        "Testing /documents/view/<document_id>"
        response = self.client.get(
            reverse('documents_document_view', args=[self.document.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_document_edit_out(self):
        "Testing /documents/edit/<document_id>"
        response = self.client.get(
            reverse('documents_document_edit', args=[self.document.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_document_delete_out(self):
        "Testing /documents/delete/<document_id>"
        response = self.client.get(
            reverse('documents_document_delete', args=[self.document.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Files

    def test_file_view_out(self):
        "Testing /file/view/<file_id>"
        response = self.client.get(
            reverse('documents_file_view', args=[self.file.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_file_edit_out(self):
        "Testing /file/edit/<file_id>"
        response = self.client.get(
            reverse('documents_file_edit', args=[self.file.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_file_delete_out(self):
        "Testing /file/view/<file_id>"
        response = self.client.get(
            reverse('documents_file_delete', args=[self.file.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Web Links

    def test_weblink_add_typed_out(self):
        "Testing /documents/weblink/add/<folder_id>"
        response = self.client.get(
            reverse('documents_weblink_add_typed', args=[self.folder.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_weblink_add_out(self):
        "Testing /documents/weblink/add/"
        response = self.client.get(reverse('documents_weblink_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_weblink_view_out(self):
        "Testing /documents/view/<weblink_id>"
        response = self.client.get(
            reverse('documents_weblink_view', args=[self.link.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_weblink_edit_out(self):
        "Testing /documents/edit/<weblink_id>"
        response = self.client.get(
            reverse('documents_weblink_edit', args=[self.link.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_weblink_delete_out(self):
        "Testing /documents/delete/<weblink_id>"
        response = self.client.get(
            reverse('documents_weblink_delete', args=[self.link.id]))
        self.assertRedirects(response, reverse('user_login'))

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio
# License www.tree.io/license

"""
Documents module URLs
"""
from django.conf.urls import patterns, url

urlpatterns = patterns('treeio.documents.views',
    url(r'^(\.(?P<response_format>\w+))?$',
        'index', name='document'),
    url(r'^index(\.(?P<response_format>\w+))?$',
        'index', name='document_index'),
    url(r'^files(\.(?P<response_format>\w+))?/?$',
        'index_files', name='index_files'),
    url(r'^documents(\.(?P<response_format>\w+))?/?$',
        'index_documents', name='index_documents'),
    url(r'^weblinks(\.(?P<response_format>\w+))?/?$',
        'index_weblinks', name='index_weblinks'),

    # Folders
    url(r'^folder/add(\.(?P<response_format>\w+))?/?$',
        'folder_add', name='documents_folder_add'),
    url(r'^folder/add/folder/(?P<folder_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'folder_add_typed', name='documents_folder_add_typed'),
    url(r'^folder/view/(?P<folder_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'folder_view', name='documents_folder_view'),
    url(r'^folder/edit/(?P<folder_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'folder_edit', name='documents_folder_edit'),
    url(r'^folder/delete/(?P<folder_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'folder_delete', name='documents_folder_delete'),

    # Documents
    url(r'^add(\.(?P<response_format>\w+))?/?$',
        'document_add', name='documents_document_add'),
    url(r'^add/folder/(?P<folder_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'document_add_typed', name='documents_document_add_typed'),
    url(r'^view/(?P<document_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'document_view', name='documents_document_view'),
    url(r'^edit/(?P<document_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'document_edit', name='documents_document_edit'),
    url(r'^delete/(?P<document_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'document_delete', name='documents_document_delete'),

    # Files
    url(r'^file/view/(?P<file_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'file_view', name='documents_file_view'),
    url(r'^file/upload(\.(?P<response_format>\w+))?/?$',
        'file_upload', name='documents_file_upload'),
    url(r'^file/upload/folder/(?P<folder_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'file_upload_typed', name='documents_file_upload_typed'),
    url(r'^file/delete/(?P<file_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'file_delete', name='documents_file_delete'),
    url(r'^file/edit/(?P<file_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'file_edit', name='documents_file_edit'),

    # Web Links
    url(r'^weblink/add(\.(?P<response_format>\w+))?/?$',
        'weblink_add', name='documents_weblink_add'),
    url(r'^weblink/add/folder/(?P<folder_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'weblink_add_typed', name='documents_weblink_add_typed'),
    url(r'^weblink/view/(?P<weblink_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'weblink_view', name='documents_weblink_view'),
    url(r'^weblink/edit/(?P<weblink_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'weblink_edit', name='documents_weblink_edit'),
    url(r'^weblink/delete/(?P<weblink_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'weblink_delete', name='documents_weblink_delete'),
)

########NEW FILE########
__FILENAME__ = views
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Documents module views
"""
from django.shortcuts import get_object_or_404
from treeio.core.rendering import render_to_response
from treeio.documents.forms import FolderForm, DocumentForm, FileForm, FilterForm, WebLinkForm, \
    MassActionForm
from django.template import RequestContext
from treeio.documents.models import Document, Folder, File, WebLink
from treeio.core.models import Object
from treeio.core.views import user_denied
from django.http import HttpResponseRedirect
from django.core.urlresolvers import reverse
from django.db.models import Q
from treeio.core.decorators import treeio_login_required, handle_response_format
from django.http import HttpResponse
from treeio.core.conf import settings
from django.utils.encoding import smart_str


def _get_filter_query(args):
    "Creates a generic query to filter Documents, Files and Weblinks based on FilterForm arguments"
    query = Q()

    for arg in args:
        if hasattr(Document, arg) and args[arg]:
            append = Q(**{str('document__' + arg + '__id'): long(args[arg])})
            append = append | Q(
                **{str('file__' + arg + '__id'): long(args[arg])})
            append = append | Q(
                **{str('weblink__' + arg + '__id'): long(args[arg])})
            query = query & append

    return query


def _get_direct_filter_query(args):
    "Creates a query to filter Documents, Files or Weblinks based on FilterForm arguments"
    query = Q()

    for arg in args:
        if hasattr(Document, arg) and args[arg]:
            append = Q(**{str(arg + '__id'): long(args[arg])})
            query = query & append

    return query


def _get_default_context(request):
    "Returns default context as a dict()"

    folders = Object.filter_by_request(request, Folder.objects, mode="r")
    massform = MassActionForm(request.user.get_profile())

    context = {'folders': folders,
               'massform': massform}

    return context


def _process_mass_form(f):
    "Pre-process request to handle mass action form for Document items"

    def wrap(request, *args, **kwargs):
        "Wrap"
        user = request.user.get_profile()
        if 'massform' in request.POST:
            for key in request.POST:
                if 'mass-object' in key:
                    try:
                        query = Q(object_type='treeio.documents.models.Document') | \
                            Q(object_type='treeio.documents.models.File') | \
                            Q(object_type='treeio.documents.models.WebLink')
                        objects = Object.filter_by_request(
                            request, Object.objects.filter(query))
                        object = objects.get(pk=request.POST[key])
                        form = MassActionForm(
                            user, request.POST, instance=object)
                        if form.is_valid() and user.has_permission(object, mode='w'):
                            form.save()
                    except Exception:
                        pass
                if 'mass-file' in key:
                    try:
                        file = File.objects.get(pk=request.POST[key])
                        form = MassActionForm(
                            user, request.POST, instance=file)
                        if form.is_valid() and user.has_permission(file, mode='w'):
                            form.save()
                    except Exception:
                        pass
                if 'mass-weblink' in key:
                    try:
                        link = WebLink.objects.get(pk=request.POST[key])
                        form = MassActionForm(
                            user, request.POST, instance=link)
                        if form.is_valid() and user.has_permission(link, mode='w'):
                            form.save()
                    except Exception:
                        pass
                if 'mass-document' in key:
                    try:
                        document = Document.objects.get(pk=request.POST[key])
                        form = MassActionForm(
                            user, request.POST, instance=document)
                        if form.is_valid() and user.has_permission(document, mode='w'):
                            form.save()
                    except Exception:
                        pass

        return f(request, *args, **kwargs)

    wrap.__doc__ = f.__doc__
    wrap.__name__ = f.__name__

    return wrap


@handle_response_format
@treeio_login_required
@_process_mass_form
def index(request, response_format='html'):
    "Index page: displays all Documents"

    query = Q(object_type='treeio.documents.models.Document') | \
        Q(object_type='treeio.documents.models.File') | \
        Q(object_type='treeio.documents.models.WebLink')
    if request.GET:
        query = _get_filter_query(request.GET) & query
        objects = Object.filter_by_request(
            request, Object.objects.filter(query).order_by('-last_updated'))
    else:
        objects = Object.filter_by_request(
            request, Object.objects.filter(query).order_by('-last_updated'))

    filters = FilterForm(request.user.get_profile(), 'title', request.GET)

    context = _get_default_context(request)
    context.update({'filters': filters,
                    'objects': objects})

    return render_to_response('documents/index', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_form
def index_files(request, response_format='html'):
    "Index_files page: displays all Files"

    if request.GET:
        query = _get_direct_filter_query(request.GET)
        files = Object.filter_by_request(
            request, File.objects.filter(query).order_by('-last_updated'))
    else:
        files = Object.filter_by_request(
            request, File.objects.order_by('-last_updated'))

    filters = FilterForm(request.user.get_profile(), 'title', request.GET)

    context = _get_default_context(request)
    context.update({'filters': filters,
                    'files': files})

    return render_to_response('documents/index_files', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_form
def index_weblinks(request, response_format='html'):
    "Index_weblinks page: displays all WebLinks"

    if request.GET:
        query = _get_direct_filter_query(request.GET)
        links = Object.filter_by_request(
            request, WebLink.objects.filter(query).order_by('-last_updated'))
    else:
        links = Object.filter_by_request(
            request, WebLink.objects.order_by('-last_updated'))

    filters = FilterForm(request.user.get_profile(), 'title', request.GET)

    context = _get_default_context(request)
    context.update({'filters': filters,
                    'links': links})

    return render_to_response('documents/index_weblinks', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_form
def index_documents(request, response_format='html'):
    "Index_documents page: displays all Documents"

    if request.GET:
        query = _get_direct_filter_query(request.GET)
        documents = Object.filter_by_request(
            request, Document.objects.filter(query).order_by('-last_updated'))
    else:
        documents = Object.filter_by_request(
            request, Document.objects.order_by('-last_updated'))

    filters = FilterForm(request.user.get_profile(), 'title', request.GET)

    context = _get_default_context(request)
    context.update({'filters': filters,
                    'documents': documents})

    return render_to_response('documents/index_documents', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def folder_add(request, response_format='html'):
    "New folder form"

    if request.POST:
        if not 'cancel' in request.POST:
            folder = Folder()
            form = FolderForm(
                request.user.get_profile(), None, request.POST, instance=folder)
            if form.is_valid():
                folder = form.save()
                folder.set_user_from_request(request)
                return HttpResponseRedirect(reverse('documents_folder_view', args=[folder.id]))
        else:
            return HttpResponseRedirect(reverse('document_index'))
    else:
        form = FolderForm(request.user.get_profile(), None)

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('documents/folder_add', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def folder_add_typed(request, folder_id=None, response_format='html'):
    "Folder add to preselected folder"

    folder = None
    if folder_id:
        folder = get_object_or_404(Folder, pk=folder_id)
        if not request.user.get_profile().has_permission(folder, mode='x'):
            folder = None

    if request.POST:
        if not 'cancel' in request.POST:
            folder = Folder()
            form = FolderForm(
                request.user.get_profile(), folder_id, request.POST, instance=folder)
            if form.is_valid():
                folder = form.save()
                folder.set_user_from_request(request)
                return HttpResponseRedirect(reverse('documents_folder_view', args=[folder.id]))
        else:
            return HttpResponseRedirect(reverse('document_index'))
    else:
        form = FolderForm(request.user.get_profile(), folder_id)

    context = _get_default_context(request)
    context.update({'form': form,
                    'folder': folder})

    return render_to_response('documents/folder_add_typed', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_form
def folder_view(request, folder_id, response_format='html'):
    "Single folder view page"

    folder = get_object_or_404(Folder, pk=folder_id)

    if not request.user.get_profile().has_permission(folder):
        return user_denied(request, message="You don't have access to this Folder")

    query = Q(
        object_type='treeio.documents.models.Document') | Q(
        object_type='treeio.documents.models.File') | Q(
        object_type='treeio.documents.models.WebLink')
    query = query & (Q(document__folder=folder) | Q(
        file__folder=folder) | Q(weblink__folder=folder))

    if request.GET:
        query = query & _get_filter_query(request.GET)
        objects = Object.filter_by_request(
            request, Object.objects.filter(query).order_by('-last_updated'))
    #    objects = objects.order_by('-last_updated')
    else:
        objects = Object.filter_by_request(
            request, Object.objects.filter(query).order_by('-last_updated'))
    #    objects = objects.order_by('-last_updated')

    subfolders = Folder.objects.filter(parent=folder)
    filters = FilterForm(request.user.get_profile(), 'title', request.GET)

    context = _get_default_context(request)
    context.update({'folder': folder,
                    'objects': objects,
                    'subfolders': subfolders,
                    'filters': filters})

    return render_to_response('documents/folder_view', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def folder_edit(request, folder_id, response_format='html'):
    "Folder edit page"

    folder = get_object_or_404(Folder, pk=folder_id)

    if not request.user.get_profile().has_permission(folder, mode='w'):
        return user_denied(request, message="You don't have access to this Folder")

    if request.POST:
        if not 'cancel' in request.POST:
            form = FolderForm(
                request.user.get_profile(), folder_id, request.POST, instance=folder)
            if form.is_valid():
                folder = form.save()
                return HttpResponseRedirect(reverse('documents_folder_view', args=[folder.id]))
        else:
            return HttpResponseRedirect(reverse('documents_folder_view', args=[folder.id]))

    else:
        form = FolderForm(
            request.user.get_profile(), folder_id, instance=folder)

    context = _get_default_context(request)
    context.update({'form': form,
                    'folder': folder})

    return render_to_response('documents/folder_edit', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def folder_delete(request, folder_id, response_format='html'):
    "Folder delete"

    folder = get_object_or_404(Folder, pk=folder_id)

    if not request.user.get_profile().has_permission(folder, mode='w'):
        return user_denied(request, message="You don't have access to this Folder")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                folder.trash = True
                folder.save()
            else:
                folder.delete()
            return HttpResponseRedirect(reverse('document_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('documents_folder_view', args=[folder.id]))

    query = Q(object_type='treeio.documents.models.Document') | Q(
        object_type='treeio.documents.models.File') | Q(
        object_type='treeio.documents.models.WebLink')
    query = query & (Q(document__folder=folder) | Q(
        file__folder=folder) | Q(weblink__folder=folder))

    if request.GET:
        query = _get_filter_query(request.GET)
        objects = Object.filter_by_request(
            request, Object.objects.filter(query))
   #     objects = objects.order_by('-last_updated')
    else:
        objects = Object.filter_by_request(
            request, Object.objects.filter(query))
   #     objects = objects.order_by('-last_updated')

    context = _get_default_context(request)
    context.update({'folder': folder,
                    'objects': objects})

    return render_to_response('documents/folder_delete', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def document_add(request, response_format='html'):
    "new document form"

    if request.POST:
        if not 'cancel' in request.POST:
            document = Document()
            form = DocumentForm(
                request.user.get_profile(), None, request.POST, instance=document)
            if form.is_valid():
                document = form.save()
                document.set_user_from_request(request)
                return HttpResponseRedirect(reverse('documents_document_view', args=[document.id]))
        else:
            return HttpResponseRedirect(reverse('document_index'))

    else:
        form = DocumentForm(request.user.get_profile(), None)

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('documents/document_add', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def document_add_typed(request, folder_id=None, response_format='html'):
    "Document add to preselected folder"

    folder = None
    if folder_id:
        folder = get_object_or_404(Folder, pk=folder_id)
        if not request.user.get_profile().has_permission(folder, mode='x'):
            folder = None

    document = Document()
    if request.POST:
        if not 'cancel' in request.POST:
            form = DocumentForm(
                request.user.get_profile(), folder_id, request.POST, instance=document)
            if form.is_valid():
                document = form.save()
                document.set_user_from_request(request)
                return HttpResponseRedirect(reverse('documents_document_view', args=[document.id]))
        else:
            return HttpResponseRedirect(reverse('document_index'))
    else:
        form = DocumentForm(request.user.get_profile(), folder_id)

    context = _get_default_context(request)
    context.update({'form': form,
                    'folder': folder})

    return render_to_response('documents/document_add_typed', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def document_view(request, document_id, response_format='html'):
    "Single document view page"

    document = get_object_or_404(Document, pk=document_id)

    if not request.user.get_profile().has_permission(document):
        return user_denied(request, message="You don't have access to this Document")

    context = _get_default_context(request)
    context.update({'document': document})

    return render_to_response('documents/document_view', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def document_edit(request, document_id, response_format='html'):
    "Document edit page"

    document = get_object_or_404(Document, pk=document_id)

    if not request.user.get_profile().has_permission(document, mode='w'):
        return user_denied(request, message="You don't have access to this Document")

    if request.POST:
        if not 'cancel' in request.POST:
            form = DocumentForm(
                request.user.get_profile(), None, request.POST, instance=document)
            if form.is_valid():
                document = form.save()
                return HttpResponseRedirect(reverse('documents_document_view', args=[document.id]))
        else:
            return HttpResponseRedirect(reverse('documents_document_view', args=[document.id]))
    else:
        form = DocumentForm(
            request.user.get_profile(), None, instance=document)

    context = _get_default_context(request)
    context.update({'form': form,
                    'document': document})

    return render_to_response('documents/document_edit', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def document_delete(request, document_id, response_format='html'):
    "Document delete"

    document = get_object_or_404(Document, pk=document_id)

    if not request.user.get_profile().has_permission(document, mode='w'):
        return user_denied(request, message="You don't have access to this Document")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                document.trash = True
                document.save()
            else:
                document.delete()
            return HttpResponseRedirect(reverse('document_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('documents_document_view', args=[document.id]))

    context = _get_default_context(request)
    context.update({'document': document})

    return render_to_response('documents/document_delete', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def file_upload(request, response_format='html'):
    "New file form"

    if request.POST:
        if not 'cancel' in request.POST:
            file = File()
            form = FileForm(
                request.user.get_profile(), None, request.POST, request.FILES, instance=file)
            if form.is_valid():
                file = form.save()
                file.set_user_from_request(request)
                return HttpResponseRedirect(reverse('documents_file_view', args=[file.id]))
        else:
            return HttpResponseRedirect(reverse('document_index'))
    else:
        form = FileForm(request.user.get_profile(), None)

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('documents/file_upload', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def file_upload_typed(request, folder_id=None, response_format='html'):
    "File upload to preselected folder"

    folder = None
    if folder_id:
        folder = get_object_or_404(Folder, pk=folder_id)
        if not request.user.get_profile().has_permission(folder, mode='x'):
            folder = None

    if request.POST:
        if not 'cancel' in request.POST:
            form = FileForm(
                request.user.get_profile(), folder_id, request.POST, request.FILES)
            if form.is_valid():
                file = form.save()
                file.set_user_from_request(request)
                return HttpResponseRedirect(reverse('documents_file_view', args=[file.id]))
        else:
            return HttpResponseRedirect(reverse('document_index'))
    else:
        form = FileForm(request.user.get_profile(), folder_id)

    context = _get_default_context(request)
    context.update({'form': form,
                    'folder': folder})

    return render_to_response('documents/file_upload_typed', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def file_view(request, file_id, response_format='html'):
    "Single file view page"

    file = get_object_or_404(File, pk=file_id)

    if not request.user.get_profile().has_permission(file):
        return user_denied(request, message="You don't have access to this File")

    if request.GET and 'download' in request.GET:
        "Return url to download a file"
        fullpath = getattr(settings, 'MEDIA_ROOT', './static/media/')

        data = ''

        try:
            data = open(fullpath + str(file.content)).read()
        except IOError:
            pass

        response = HttpResponse(data, content_type='application/x-download')
        response[
            'Content-Disposition'] = 'attachment; filename="%s"' % smart_str(file.content)
        return response

    context = _get_default_context(request)
    context.update({'file': file})

    return render_to_response('documents/file_view', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def file_delete(request, file_id, response_format='html'):
    "File delete"

    file = get_object_or_404(File, pk=file_id)
    if not request.user.get_profile().has_permission(file, mode='w'):
        return user_denied(request, message="You don't have access to this File")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                file.trash = True
                file.save()
            else:
                file.delete()
            return HttpResponseRedirect(reverse('document_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('documents_file_view', args=[file.id]))

    context = _get_default_context(request)
    context.update({'file': file})

    return render_to_response('documents/file_delete', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def file_edit(request, file_id, response_format='html'):
    "File edit page"

    file = get_object_or_404(File, pk=file_id)
    if not request.user.get_profile().has_permission(file, mode='w'):
        return user_denied(request, message="You don't have access to this File")

    if request.POST:
        if not 'cancel' in request.POST:
            form = FileForm(
                request.user.get_profile(), None, request.POST, request.FILES, instance=file)
            if form.is_valid():
                file = form.save()
                return HttpResponseRedirect(reverse('documents_file_view', args=[file.id]))
        else:
            return HttpResponseRedirect(reverse('documents_file_view', args=[file.id]))

    else:
        form = FileForm(request.user.get_profile(), None, instance=file)

    context = _get_default_context(request)
    context.update({'form': form,
                    'file': file})

    return render_to_response('documents/file_edit', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


# Web Links
@handle_response_format
@treeio_login_required
def weblink_add(request, response_format='html'):
    "New web link form"

    if request.POST:
        if not 'cancel' in request.POST:
            link = WebLink()
            form = WebLinkForm(
                request.user.get_profile(), None, request.POST, instance=link)
            if form.is_valid():
                link = form.save()
                link.set_user_from_request(request)
                return HttpResponseRedirect(reverse('documents_weblink_view', args=[link.id]))
        else:
            return HttpResponseRedirect(reverse('document_index'))

    else:
        form = WebLinkForm(request.user.get_profile(), None)

    context = _get_default_context(request)
    context.update({'form': form,
                    'file': file})

    return render_to_response('documents/weblink_add', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def weblink_add_typed(request, folder_id=None, response_format='html'):
    "Web link add to preselected folder"

    folder = None
    if folder_id:
        folder = get_object_or_404(Folder, pk=folder_id)
        if not request.user.get_profile().has_permission(folder, mode='x'):
            folder = None

    if request.POST:
        if not 'cancel' in request.POST:
            link = WebLink()
            form = WebLinkForm(
                request.user.get_profile(), folder_id, request.POST, instance=link)
            if form.is_valid():
                link = form.save()
                link.set_user_from_request(request)
                return HttpResponseRedirect(reverse('documents_weblink_view', args=[link.id]))
        else:
            return HttpResponseRedirect(reverse('document_index'))
    else:
        form = WebLinkForm(request.user.get_profile(), folder_id)

    context = _get_default_context(request)
    context.update({'form': form,
                    'folder': folder})

    return render_to_response('documents/weblink_add_typed', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def weblink_view(request, weblink_id, response_format='html'):
    "Weblink page"

    link = get_object_or_404(WebLink, pk=weblink_id)

    if not request.user.get_profile().has_permission(link):
        return user_denied(request, message="You don't have access to this Web Link")

    context = _get_default_context(request)
    context.update({'link': link})

    return render_to_response('documents/weblink_view', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def weblink_edit(request, weblink_id, response_format='html'):
    "WebLink edit page"

    link = get_object_or_404(WebLink, pk=weblink_id)

    if not request.user.get_profile().has_permission(link, mode='w'):
        return user_denied(request, message="You don't have access to this Web Link")

    if request.POST:
        if not 'cancel' in request.POST:
            form = WebLinkForm(
                request.user.get_profile(), None, request.POST, instance=link)
            if form.is_valid():
                link = form.save()
                return HttpResponseRedirect(reverse('documents_weblink_view', args=[link.id]))
        else:
            return HttpResponseRedirect(reverse('documents_weblink_view', args=[link.id]))

    else:
        form = WebLinkForm(request.user.get_profile(), None, instance=link)

    context = _get_default_context(request)
    context.update({'form': form,
                    'link': link})

    return render_to_response('documents/weblink_edit', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def weblink_delete(request, weblink_id, response_format='html'):
    "WebLink delete"

    link = get_object_or_404(WebLink, pk=weblink_id)

    if not request.user.get_profile().has_permission(link, mode='w'):
        return user_denied(request, message="You don't have access to this Web Link")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                link.trash = True
                link.save()
            else:
                link.delete()
            return HttpResponseRedirect(reverse('document_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('documents_weblink_view', args=[link.id]))

    context = _get_default_context(request)
    context.update({'link': link})

    return render_to_response('documents/weblink_delete', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)

########NEW FILE########
__FILENAME__ = admin
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Events: admin page
"""
from treeio.events.models import Event
from django.contrib import admin


class EventAdmin(admin.ModelAdmin):

    """ Event admin """
    list_display = ('name', 'start', 'end')

admin.site.register(Event, EventAdmin)

########NEW FILE########
__FILENAME__ = handlers
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

from __future__ import absolute_import, with_statement

__all__ = ['EventHandler', ]

from treeio.events.models import Event
from treeio.events.forms import EventForm
from treeio.core.api.handlers import ObjectHandler


class EventHandler(ObjectHandler):

    "Entrypoint for Event model."
    model = Event
    form = EventForm

    @staticmethod
    def resource_uri():
        return ('api_events', ['id'])

    def check_create_permission(self, request, mode):
        return True

    def flatten_dict(self, request):
        dct = super(self.__class__, self).flatten_dict(request)
        dct["date"] = None
        dct["hour"] = None
        return dct

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Events: test api
"""
import json
from django.test import TestCase
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser
from treeio.core.models import User, Group, Perspective, ModuleSetting, Object
from treeio.events.models import Event
from datetime import datetime


class EventsViewsTest(TestCase):

    "Events functional tests for api"

    username = "api_test"
    password = "api_password"
    prepared = False
    authentication_headers = {"CONTENT_TYPE": "application/json",
                              "HTTP_AUTHORIZATION": "Basic YXBpX3Rlc3Q6YXBpX3Bhc3N3b3Jk"}
    content_type = 'application/json'

    def setUp(self):
        "Initial Setup"

        if not self.prepared:
            # Clean up first
            Object.objects.all().delete()

            # Create objects
            try:
                self.group = Group.objects.get(name='test')
            except Group.DoesNotExist:
                Group.objects.all().delete()
                self.group = Group(name='test')
                self.group.save()

            try:
                self.user = DjangoUser.objects.get(username=self.username)
                self.user.set_password(self.password)
                try:
                    self.profile = self.user.get_profile()
                except Exception:
                    User.objects.all().delete()
                    self.user = DjangoUser(username=self.username, password='')
                    self.user.set_password(self.password)
                    self.user.save()
            except DjangoUser.DoesNotExist:
                User.objects.all().delete()
                self.user = DjangoUser(username=self.username, password='')
                self.user.set_password(self.password)
                self.user.save()

            try:
                perspective = Perspective.objects.get(name='default')
            except Perspective.DoesNotExist:
                Perspective.objects.all().delete()
                perspective = Perspective(name='default')
                perspective.set_default_user()
                perspective.save()

            ModuleSetting.set('default_perspective', perspective.id)

            self.event = Event(name='TestStatus', end=datetime.now())
            self.event.set_default_user()
            self.event.save()

            self.client = Client()

            self.prepared = True

    def test_unauthenticated_access(self):
        "Test index page at /api/calendar/events"
        response = self.client.get('/api/calendar/events')
        # Redirects as unauthenticated
        self.assertEquals(response.status_code, 401)

    def test_get_events_list(self):
        """ Test index page api/infrastructure/types """
        response = self.client.get(
            path=reverse('api_events'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_field(self):
        response = self.client.get(path=reverse(
            'api_events', kwargs={'object_ptr': self.event.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_field(self):
        updates = {"name": "Api_name", "details": "Api details",
                   "start": "2011-03-01 01:12:09", "end": "2011-03-09 13:05:09"}
        response = self.client.put(path=reverse('api_events', kwargs={'object_ptr': self.event.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        self.assertEquals(data['details'], updates['details'])
        self.assertEquals(data['start'], updates['start'])
        self.assertEquals(data['end'], updates['end'])

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

import handlers
from django.conf.urls import patterns, url
from treeio.core.api.auth import auth_engine
from treeio.core.api.doc import documentation_view
from treeio.core.api.resource import CsrfExemptResource

ad = {'authentication': auth_engine}

# events resources
eventResource = CsrfExemptResource(handler=handlers.EventHandler, **ad)


urlpatterns = patterns('',
    # Events
    url(r'^doc$', documentation_view, kwargs={
        'module': handlers}, name="api_events_doc"),
    url(r'^events$', eventResource, name="api_events"),
    url(r'^event/(?P<object_ptr>\d+)',
        eventResource, name="api_events"),
)

########NEW FILE########
__FILENAME__ = forms
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Events module forms
"""
from django import forms
from django.utils.translation import ugettext as _
from django.core.urlresolvers import reverse
from treeio.events.models import Event
from treeio.core.models import Object, Location
from treeio.core.decorators import preprocess_form
import datetime
preprocess_form()


class MassActionForm(forms.Form):

    """ Mass action form for Reports """

    delete = forms.ChoiceField(label=_("Delete"), choices=(('', '-----'), ('delete', _('Delete Completely')),
                                                           ('trash', _('Move to Trash'))), required=False)

    instance = None

    def __init__(self, user, *args, **kwargs):
        if 'instance' in kwargs:
            self.instance = kwargs['instance']
            del kwargs['instance']

        super(MassActionForm, self).__init__(*args, **kwargs)

    def save(self, *args, **kwargs):
        "Process form"

        if self.instance:
            if self.is_valid():
                if self.cleaned_data['delete']:
                    if self.cleaned_data['delete'] == 'delete':
                        self.instance.delete()
                    if self.cleaned_data['delete'] == 'trash':
                        self.instance.trash = True
                        self.instance.save()


class EventForm(forms.ModelForm):

    """ Event form """

    def _set_initial(self, field, value):
        "Sets initial value"

    def __init__(self, user=None, date=None, hour=None, *args, **kwargs):
        super(EventForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _('Title')
        self.fields['name'].widget = forms.TextInput(attrs={'size': '30'})
        self.fields['location'].queryset = Object.filter_permitted(
            user, Location.objects, mode='x')
        self.fields['location'].widget.attrs.update(
            {'popuplink': reverse('identities_location_add')})
        self.fields['location'].widget.attrs.update({'class': 'autocomplete',
                                                     'callback': reverse('identities_ajax_location_lookup')})

        self.fields['location'].label = _("Location")
        self.fields['start'].label = _("Start")
        self.fields['end'].label = _("End")
        self.fields['details'].label = _("Details")

        if date:
            rdate = None
            try:
                rdate = datetime.datetime.strptime(date, "%Y-%m-%d")
                if hour:
                    hour = int(hour)
                else:
                    hour = 12
                rdate = datetime.datetime(year=rdate.year,
                                          month=rdate.month,
                                          day=rdate.day,
                                          hour=hour)
                self.fields['end'].initial = rdate
            except ValueError:
                pass

        # Set datepicker
        self.fields['start'].widget.attrs.update({'class': 'datetimepicker'})
        self.fields['end'].widget.attrs.update({'class': 'datetimepicker'})

        if self.fields['start'].initial:
            self.fields['start'].widget.attrs.update(
                {'initial': self.fields['start'].initial.strftime('%s')})

        if self.fields['end'].initial:
            self.fields['end'].widget.attrs.update(
                {'initial': self.fields['end'].initial.strftime('%s')})

        if 'instance' in kwargs:
            instance = kwargs['instance']
            if instance.start:
                self.fields['start'].widget.attrs.update(
                    {'initial': instance.start.strftime('%s')})
            if instance.end:
                self.fields['end'].widget.attrs.update(
                    {'initial': instance.end.strftime('%s')})

    def clean_end(self):
        "Make sure end date is greater than start date, when specified"
        try:
            start = self.cleaned_data['start']
            if start:
                end = self.cleaned_data['end']
                if end < start:
                    raise forms.ValidationError(
                        _("End date can not be before the start date"))
        except:
            pass
        return self.cleaned_data['end']

    class Meta:

        "Event"
        model = Event
        fields = ('name', 'location', 'start', 'end', 'details')


class GoToDateForm(forms.Form):

    """ Go to date form definition """

    def __init__(self, date, *args, **kwargs):
        super(GoToDateForm, self).__init__(*args, **kwargs)

        self.fields['goto'] = forms.DateField(
            label=_("Go to date"), required=False)
        self.fields['goto'].widget.attrs.update({'class': 'datepicker'})


class FilterForm(forms.Form):

    """ Filters for Events """

    def __init__(self, *args, **kwargs):
        super(FilterForm, self).__init__(*args, **kwargs)

        self.fields['datefrom'] = forms.DateField(label=_("Date From"))
        self.fields['datefrom'].widget.attrs.update({'class': 'datepicker'})

        self.fields['dateto'] = forms.DateField(label=_("Date To"))
        self.fields['dateto'].widget.attrs.update({'class': 'datepicker'})

    def clean_dateto(self):
        "Clean date_to"
        if not self.cleaned_data['dateto'] >= self.cleaned_data['datefrom']:
            raise forms.ValidationError(
                "From date can not be greater than To date.")

########NEW FILE########
__FILENAME__ = hmodule
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Events: Hardtree module definition
"""

PROPERTIES = {
    'title': 'Calendar',
    'details': 'Manage events and calendars',
    'url': '/calendar/',
    'system': True,
    'type': 'minor',
}


URL_PATTERNS = [
    '^/calendar/',
]

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding model 'Event'
        db.create_table('events_event', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=255)),
            ('location', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['core.Location'], null=True, blank=True)),
            ('details', self.gf('django.db.models.fields.TextField')
             (max_length=255, null=True, blank=True)),
            ('start', self.gf('django.db.models.fields.DateTimeField')
             (null=True, blank=True)),
            ('end', self.gf('django.db.models.fields.DateTimeField')()),
        ))
        db.send_create_signal('events', ['Event'])

        # Adding model 'Invitation'
        db.create_table('events_invitation', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('contact', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['identities.Contact'])),
            ('event', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['events.Event'])),
            ('status', self.gf('django.db.models.fields.CharField')
             (max_length=255)),
        ))
        db.send_create_signal('events', ['Invitation'])

    def backwards(self, orm):

        # Deleting model 'Event'
        db.delete_table('events_event')

        # Deleting model 'Invitation'
        db.delete_table('events_invitation')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.location': {
            'Meta': {'object_name': 'Location', '_ormbases': ['core.Object']},
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Location']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'everybody_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']"}),
            'group_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"}),
            'user_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'events.event': {
            'Meta': {'ordering': "['-end']", 'object_name': 'Event', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'end': ('django.db.models.fields.DateTimeField', [], {}),
            'location': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Location']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'start': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'})
        },
        'events.invitation': {
            'Meta': {'object_name': 'Invitation'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'event': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['events.Event']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'status': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        }
    }

    complete_apps = ['events']

########NEW FILE########
__FILENAME__ = models
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Events module objects.

Depends on: treeio.core, treeio.identities
"""

from django.db import models
from django.core.urlresolvers import reverse
from treeio.identities.models import Contact
from treeio.core.models import Object, Location


class Event(Object):

    """ Single Event """
    name = models.CharField(max_length=255)
    location = models.ForeignKey(
        Location, blank=True, null=True, on_delete=models.SET_NULL)
    details = models.TextField(max_length=255, null=True, blank=True)
    start = models.DateTimeField(null=True, blank=True)
    end = models.DateTimeField()

    class Meta:

        "Event"
        ordering = ['-end']

    def __unicode__(self):
        return self.name

    def get_absolute_url(self):
        "Returns absolute URL of the object"
        try:
            return reverse('events_event_view', args=[self.id])
        except Exception:
            return ""


class Invitation(models.Model):

    """ Invitation to an Event """
    contact = models.ForeignKey(Contact)
    event = models.ForeignKey(Event)
    status = models.CharField(max_length=255, choices=(('attending', 'Attending'),
                                                       ('pending', 'Pending'),
                                                       ('not-attending', 'Not Attending')))

########NEW FILE########
__FILENAME__ = rendering
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Events module wrappers to be used for rendering
"""
from jinja2 import Markup
from datetime import datetime
from django.core.urlresolvers import reverse

# Percentage of calendar cell used by events in week and day views
CELL_WIDTH = 90


def _smart_truncate(content, length=100, suffix='...'):
    "Smart truncate"
    if len(content) <= length:
        return content
    return content[:length].rsplit(' ', 1)[0] + suffix


class EventRenderer:

    "Basic EventRenderer, used for rendering events, independently of the underlying model"

    name = ""
    start = None
    end = None
    url = ""
    markup = '<p class="%s"><a href="%s" style="%s" class="event popup-link">%s</a></p>'
    rendered = []
    margin_step = {}

    def __init__(self, name, start, end, url, markup=None):
        self.name = name
        self.start = start
        self.end = end
        self.url = url

        if markup:
            self.markup = markup

        self.rendered = []
        self.css_class = 'calendar-event'
        self.style = ''

        self.margin_step = {}

    def __unicode__(self):
        return self.name

    def is_full_day(self, date):
        "True if the event takes place throughout the specified date"
        if self.start and self.end and self.start.date() < date and self.end.date() > date:
            return True
        return False

    def covers(self, date, hour):
        "True if the event covers the given date and/or hour"
        if self.start:
            if self.start.date() < date and self.end.date() > date:
                return True
            elif self.start.date() == date and self.start.hour <= hour:
                if self.end.date() > date:
                    return True
                elif self.end.date() == date and self.end.hour >= hour:
                    if self.end.hour > hour:
                        return True
                    elif self.end.hour == hour and self.end.minute > 0:
                        return True
            elif self.start.date() < date and self.end.date() == date:
                if self.end.hour > hour:
                    return True
                elif self.end.hour == hour and self.end.minute > 0:
                    return True
        elif self.end.date() == date and self.end.hour == hour:
            return True
        return False

    def is_renderable(self, date, hour=None):
        "True if the event should be rendered for the given date and hour"
        if hour:
            if date in self.rendered:
                return False
            if self.start and self.start.date() == date and self.start.hour == hour:
                return True
            elif self.start and self.start.date() < date and self.end.date() == date:
                return True
            elif self.start and self.start.date() < date and self.end.date() > date:
                return True
            elif not self.start and self.end.date() == date and self.end.hour == hour:
                return True
        else:
            if self.start and self.start.date() == date:
                return True
            elif self.end and self.end.date() == date:
                return True
            elif self.start and self.end and self.start.date() < date and self.end.date() > date:
                return True
        return False

    def get_duration(self, date=None, start_hour=8, end_hour=23):
        "Returns duration as hours (float)"
        if date:
            if self.start:
                if self.start.date() < date and self.end.date() > date:
                    return start_hour - end_hour + 1
                else:
                    if self.start.date() == date and self.end.date() > date:
                        start = datetime(
                            date.year, date.month, date.day, start_hour, 0, 0)
                        delta = start - self.start
                    elif self.start.date() < date and self.end.date() == date:
                        start = datetime(
                            date.year, date.month, date.day, start_hour, 0, 0)
                        delta = self.end - start
                    else:
                        delta = self.end - self.start
                    return float(delta.seconds // 3600) + (float(delta.seconds % 3600) / 3600)
            else:
                return 1
        else:
            if self.start and self.end:
                return self.end - self.start
            else:
                return 1

    def render(self, css_class='', style=''):
        "Render event into HTML"
        if not css_class:
            css_class = self.css_class
        else:
            css_class = self.css_class + " " + css_class
        if not style:
            style = self.style
        return Markup(self.markup % (css_class, self.url, style, self.name))

    def render_for_date(self, date, css_class='', style=''):
        "Render event for a certain date"
        output = ""
        if self.is_renderable(date):
            output = self.render(css_class, style)
        return output

    def render_for_datehour(self, date, hour, css_class='', style=''):
        "Render event for a certain date and hour"
        output = ""
        if self.is_renderable(date, hour):
            output = self.render(css_class, style)
            self.rendered.append(date)
        return output


class EventCollection:

    "Set of EventWrappers available for rendering"
    events = []

    def __init__(self, raw_events=[], start_hour=8, end_hour=22):
        "Initialize with raw_events as a list or QuerySet of Events"
        self.events = []
        for event in raw_events:
            wrapper = EventRenderer(event.name, event.start, event.end,
                                    reverse("events_event_view", args=[event.id]))
            self.events.append(wrapper)

        self.start_hour = start_hour
        self.end_hour = end_hour

    def collect_events(self, request):
        "Gathers Events from all user modules where .get_events() callable is available"
        modules = request.user.get_profile().get_perspective().get_modules()

        for module in modules:
            if request.user.get_profile().has_permission(module):
                try:
                    import_name = str(module.name) + ".events"
                    imodule = __import__(
                        import_name, fromlist=[str(module.name)])
                    if hasattr(imodule, 'get_events'):
                        collected = imodule.get_events(request)
                        self.events.extend(collected)
                except:
                    pass

    def renderable_events(self, date, hour):
        "Returns the number of renderable events"
        renderable_events = []

        for event in self.events:
            if event.covers(date, hour):
                renderable_events.append(event)

        if hour:
            for current in renderable_events:
                for event in self.events:
                    if event not in renderable_events:
                        for hour in range(self.start_hour, self.end_hour):
                            if current.covers(date, hour) and event.covers(date, hour):
                                renderable_events.append(event)
                                break

        return renderable_events

    def render_for_date(self, date):
        "Render all events for a certain date"
        output = ""

        for event in self.events:
            if event.is_renderable(date):
                output += event.render_for_date(date)

        return output

    def render_for_datehour(self, date, hour):
        "Render all events for a certain date and hour"
        output = ""

        renderable_events = self.renderable_events(date, hour)
        css_class = "calendar-event-hour"

        if renderable_events:
            width = (90.0 / len(renderable_events))
            current_margin = 0
            for event in renderable_events:
                if str(date) in event.margin_step and event.margin_step[str(date)] > current_margin:
                    current_margin = event.margin_step[str(date)]
            for event in renderable_events:
                if event.is_renderable(date, hour):
                    margin = width * current_margin
                    event.margin_step[
                        str(date)] = current_margin = current_margin + 1
                    if event.is_full_day(date):
                        height = (self.end_hour - self.start_hour + 1) * 40 - 5
                    else:
                        duration = event.get_duration(
                            date, self.start_hour, self.end_hour)
                        if hour + duration > self.end_hour + 1:
                            if event.start.date() == date:
                                duration = self.end_hour - hour + 1
                            else:
                                duration = duration - hour
                        height = duration * float(40) - 5
                    style = "width: %.2f%%; height: %dpx; margin-left: %.2f%%" % (
                        width, height, margin)
                    output += event.render_for_datehour(date,
                                                        hour, css_class, style)

        return output

########NEW FILE########
__FILENAME__ = events
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Events templatetags
"""
from coffin import template
from treeio.core.rendering import render_to_string
from jinja2 import contextfunction, Markup
from django.template import RequestContext

register = template.Library()


@contextfunction
def events_event_list(context, events):
    "Print a list of events"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('events/tags/event_list',
                                   {'events': events},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(events_event_list)

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Events: test suites
"""

from django.test import TestCase
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser
from treeio.core.models import User, Group, Perspective, ModuleSetting, Object
from treeio.events.models import Event
from datetime import datetime


class EventsModelTest(TestCase):

    "Events DB models tests"

    def test_model_event(self):
        "Test Event model"
        event = Event(name="Test", end=datetime.now())
        event.save()
        self.assertNotEquals(event.id, None)

        event.delete()


class EventsViewsTest(TestCase):

    "Events functional tests for views"

    username = "test"
    password = "password"
    prepared = False

    def setUp(self):
        "Initial Setup"

        if not self.prepared:
            # Clean up first
            Object.objects.all().delete()

            # Create objects
            self.group, created = Group.objects.get_or_create(name='test')
            duser, created = DjangoUser.objects.get_or_create(
                username=self.username)
            duser.set_password(self.password)
            duser.save()
            self.user, created = User.objects.get_or_create(user=duser)
            self.user.save()
            perspective, created = Perspective.objects.get_or_create(
                name='default')
            perspective.set_default_user()
            perspective.save()

            ModuleSetting.set('default_perspective', perspective.id)

            self.event = Event(name='TestStatus', end=datetime.now())
            self.event.set_default_user()
            self.event.save()

            self.client = Client()

            self.prepared = True

    ######################################
    # Testing views when user is logged in
    ######################################
    def test_index(self):
        "Test index page with login at /calendar/index"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('events_index'))
        self.assertEquals(response.status_code, 200)

    def test_upcoming(self):
        "Test index page with login at /calendar/upcoming"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('events_upcoming'))
        self.assertEquals(response.status_code, 200)

    def test_month(self):
        "Test index page with login at /calendar/month"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('events_month'))
        self.assertEquals(response.status_code, 200)

    def test_week(self):
        "Test index page with login at /calendar/week"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('events_week'))
        self.assertEquals(response.status_code, 200)

    def test_day(self):
        "Test index page with login at /calendar/day"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('events_day'))
        self.assertEquals(response.status_code, 200)

    # Events
    def test_event_add(self):
        "Test index page with login at /calendar/event/view/<event_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('events_event_add'))
        self.assertEquals(response.status_code, 200)
        # form
        self.assertEquals(Event.objects.count(), 1)
        post_data = {
            'name': 'TestStatus',
            'end': datetime.now()
        }
        response = self.client.post(reverse('events_event_add'), post_data)
        self.assertEquals(response.status_code, 302)  # redirect somewhere
        self.assertEquals(Event.objects.count(), 2)

    def test_event_view(self):
        "Test index page with login at /calendar/event/view/<event_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('events_event_view', args=[self.event.id]))
        self.assertEquals(response.status_code, 200)

    def test_event_edit(self):
        "Test index page with login at /calendar/event/edit/<event_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('events_event_edit', args=[self.event.id]))
        self.assertEquals(response.status_code, 200)

    def test_event_delete(self):
        "Test index page with login at /calendar/event/delete/<event_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('events_event_delete', args=[self.event.id]))
        self.assertEquals(response.status_code, 200)

    ######################################
    # Testing views when user is not logged in
    ######################################

    def test_index_anonymous(self):
        "Test index page at /calendar/"
        response = self.client.get(reverse('events'))
        # Redirects as unauthenticated
        self.assertRedirects(response, reverse('user_login'))

    def test_index_out(self):
        "Testing /calendar/index"
        response = self.client.get(reverse('events_index'))
        self.assertRedirects(response, reverse('user_login'))

    def test_upcoming_out(self):
        "Testing /calendar/upcoming"
        response = self.client.get(reverse('events_upcoming'))
        self.assertRedirects(response, reverse('user_login'))

    def test_month_out(self):
        "Testing /calendar/month"
        response = self.client.get(reverse('events_month'))
        self.assertRedirects(response, reverse('user_login'))

    def test_week_out(self):
        "Testing /calendar/week"
        response = self.client.get(reverse('events_week'))
        self.assertRedirects(response, reverse('user_login'))

    def test_day_out(self):
        "Testing /calendar/day"
        response = self.client.get(reverse('events_day'))
        self.assertRedirects(response, reverse('user_login'))

    # Events
    def test_event_add_out(self):
        "Testing /calendar/event/view/<event_id>"
        response = self.client.get(reverse('events_event_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_event_view_out(self):
        "Testing /calendar/event/view/<event_id>"
        response = self.client.get(
            reverse('events_event_view', args=[self.event.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_event_edit_out(self):
        "Testing /calendar/event/edit/<event_id>"
        response = self.client.get(
            reverse('events_event_edit', args=[self.event.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_event_delete_out(self):
        "Testing /calendar/event/delete/<event_id>"
        response = self.client.get(
            reverse('events_event_delete', args=[self.event.id]))
        self.assertRedirects(response, reverse('user_login'))

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Events module URLs
"""
from django.conf.urls.defaults import patterns, url

urlpatterns = patterns('treeio.events.views',
                       url(r'^(\.(?P<response_format>\w+))?$',
                           'month_view', name='events'),

                       url(r'^index(\.(?P<response_format>\w+))?$',
                           'index', name='events_index'),
                       url(r'^upcoming(\.(?P<response_format>\w+))?/?$',
                           'upcoming', name='events_upcoming'),

                       url(r'^month(\.(?P<response_format>\w+))?/?$',
                           'month_view', name='events_month'),
                       url(r'^week(\.(?P<response_format>\w+))?/?$',
                           'week_view', name='events_week'),
                       url(r'^day(\.(?P<response_format>\w+))?/?$',
                           'day_view', name='events_day'),

                       # Events
                       url(r'^event/add(\.(?P<response_format>\w+))?/?$',
                           'event_add', name='events_event_add'),
                       url(r'^event/add/(?P<date>[0-9\-]+)/(?P<hour>[0-9]+)?(\.(?P<response_format>\w+))?/?$',
                           'event_add', name='events_event_add_to_date'),
                       url(r'^event/view/(?P<event_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'event_view', name='events_event_view'),
                       url(r'^event/edit/(?P<event_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'event_edit', name='events_event_edit'),
                       url(r'^event/delete/(?P<event_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'event_delete', name='events_event_delete'),


                       # Export iCalendar
                       url(r'^ical/?$', 'ical_all_event',
                           name='events_all_ical'),
                       )

########NEW FILE########
__FILENAME__ = views
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Events module views
"""
from django.shortcuts import get_object_or_404
from django.template import RequestContext
from django.http import HttpResponseRedirect, HttpResponse
from django.core.urlresolvers import reverse
from django.utils.html import strip_tags
from django.db.models import Q
from treeio.core.rendering import render_to_response
from treeio.core.models import Object
from treeio.core.views import user_denied
from treeio.core.decorators import treeio_login_required, handle_response_format
from treeio.events.models import Event
from treeio.events.forms import EventForm, GoToDateForm, FilterForm, MassActionForm
from treeio.events.rendering import EventCollection
from datetime import datetime
from dateutil.relativedelta import relativedelta
import calendar

START_HOUR = 6
END_HOUR = 23


def _get_default_context(request):
    "Returns default context as a dict()"

    massform = MassActionForm(request.user.get_profile())

    context = {'massform': massform}

    return context


def _get_filter_query(args):
    "Creates a query to filter Events based on FilterForm arguments"
    query = Q()

    if 'datefrom' in args and 'dateto' in args and args['datefrom'] and args['dateto']:
        datefrom = datetime.date(
            datetime.strptime(args['datefrom'], '%m/%d/%Y'))
        dateto = datetime.date(datetime.strptime(args['dateto'], '%m/%d/%Y'))
        dateto = datetime(year=dateto.year, month=dateto.month,
                          day=dateto.day, hour=23, minute=59, second=59)
        query = Q(end__gte=datefrom)
        query = query & Q(Q(start__isnull=True) | Q(start__lte=dateto))

    return query


def _process_mass_form(f):
    "Pre-process request to handle mass action form for Events"

    def wrap(request, *args, **kwargs):
        "Wrap"
        user = request.user.get_profile()
        if 'massform' in request.POST:
            for key in request.POST:
                if 'mass-event' in key:
                    try:
                        event = Event.objects.get(pk=request.POST[key])
                        form = MassActionForm(
                            user, request.POST, instance=event)
                        if form.is_valid() and user.has_permission(event, mode='w'):
                            form.save()
                    except Exception:
                        pass

        return f(request, *args, **kwargs)

    wrap.__doc__ = f.__doc__
    wrap.__name__ = f.__name__

    return wrap


@treeio_login_required
@handle_response_format
@_process_mass_form
def index(request, response_format='html'):
    "Index page: display all events"

    if request.GET:
        filters = FilterForm(request.GET)
        if filters.is_valid():
            query = _get_filter_query(request.GET)
        else:
            query = Q()
    else:
        query = Q()
        filters = FilterForm()

    events = Object.filter_by_request(request, Event.objects.filter(query))

    context = _get_default_context(request)
    context.update({'events': events,
                    'filters': filters})

    return render_to_response('events/index', context,
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
@_process_mass_form
def upcoming(request, response_format='html'):
    "Upcoming Events"

    now = datetime.now()
    query = Q(start__gte=now) | Q(end__gte=now)
    events = Object.filter_by_request(
        request, Event.objects.filter(query).order_by('-end'))

    context = _get_default_context(request)
    context.update({'events': events})

    return render_to_response('events/upcoming', context,
                              context_instance=RequestContext(request), response_format=response_format)
#
# Calendar View
#


@treeio_login_required
@handle_response_format
def month_view(request, response_format='html'):
    "Month view - each cell represents a day"

    events = Object.filter_by_request(request, Event.objects)

    date_current = now = datetime.now()
    istoday = True

    gotoform = GoToDateForm(now, request.GET)
    if request.GET:
        if 'date_year' in request.GET and 'date_month' in request.GET:
            try:
                year = int(request.GET['date_year'])
                month = int(request.GET['date_month'])
                if year >= 1900 and month >= 1 and month <= 12:
                    date_current = datetime(year, month, 1)
                    istoday = date_current == now
            except Exception:
                pass
        if gotoform.is_valid() and gotoform.cleaned_data['goto']:
            date_current = gotoform.cleaned_data['goto']
            istoday = date_current == now
            now = datetime(
                date_current.year, date_current.month, date_current.day)

    dates = calendar.Calendar().monthdatescalendar(
        date_current.year, date_current.month)
    date_previous = date_current - relativedelta(months=+1)
    date_next = date_current + relativedelta(months=+1)

    wrapped_events = EventCollection(events)
    wrapped_events.collect_events(request)

    return render_to_response('events/month_view',
                              {'events': wrapped_events,
                               'dates': dates,
                               'date_previous': date_previous,
                               'date_next': date_next,
                               'date_current': date_current,
                               'gotoform': gotoform.as_ul(),
                               'istoday': istoday,
                               'now': now},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def week_view(request, response_format='html'):
    "Week view - each slot represents an hour"

    events = Object.filter_by_request(request, Event.objects)

    date_current = now = datetime.now()
    istoday = True

    gotoform = GoToDateForm(now, request.GET)
    if request.GET:
        if 'date_year' in request.GET and 'date_month' in request.GET and 'date_day' in request.GET:
            try:
                day = int(request.GET['date_day'])
                year = int(request.GET['date_year'])
                month = int(request.GET['date_month'])
                if year >= 1900 and month >= 1 and month <= 12 and day >= 1 and day <= 31:
                    date_current = datetime(year, month, day)
                    istoday = date_current == now
            except Exception:
                pass
        if gotoform.is_valid() and gotoform.cleaned_data['goto']:
            date_current = gotoform.cleaned_data['goto']
            istoday = date_current == now
            date_current = now = datetime(
                date_current.year, date_current.month, date_current.day)

    date_previous = date_current - relativedelta(weeks=+1)
    date_next = date_current + relativedelta(weeks=+1)

    weeks = calendar.Calendar().monthdatescalendar(
        date_current.year, date_current.month)
    current_week = []
    for week in weeks:
        if date_current.date() in week:
            current_week = week
            break

    wrapped_events = EventCollection(events, START_HOUR, END_HOUR)
    wrapped_events.collect_events(request)

    hours = range(START_HOUR, END_HOUR + 1)

    return render_to_response('events/week_view',
                              {'events': wrapped_events,
                               'week': current_week,
                               'start_date': current_week[0],
                               'end_date': current_week[6],
                               'date_previous': date_previous,
                               'date_next': date_next,
                               'date_current': date_current,
                               'gotoform': gotoform.as_ul(),
                               'istoday': istoday,
                               'hours': hours,
                               'now': now},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def day_view(request, response_format='html'):
    "Day view - each slot represents an hour"

    events = Object.filter_by_request(request, Event.objects)

    date_current = now = datetime.now()
    istoday = True

    gotoform = GoToDateForm(now, request.GET)
    if request.GET:
        if 'date_year' in request.GET and 'date_month' in request.GET and 'date_day' in request.GET:
            try:
                day = int(request.GET['date_day'])
                year = int(request.GET['date_year'])
                month = int(request.GET['date_month'])
                if year >= 1900 and month >= 1 and month <= 12 and day >= 1 and day <= 31:
                    date_current = datetime(year, month, day)
                    istoday = date_current == now
            except Exception:
                pass
        if gotoform.is_valid() and gotoform.cleaned_data['goto']:
            date_current = gotoform.cleaned_data['goto']
            istoday = date_current == now
            date_current = now = datetime(
                date_current.year, date_current.month, date_current.day)

    day = date_current.date()
    date_previous = date_current - relativedelta(days=+1)
    date_next = date_current + relativedelta(days=+1)

    wrapped_events = EventCollection(events, START_HOUR, END_HOUR)
    wrapped_events.collect_events(request)

    hours = range(START_HOUR, END_HOUR + 1)

    return render_to_response('events/day_view',
                              {'events': wrapped_events,
                               'day': day,
                               'hours': hours,
                               'date_previous': date_previous,
                               'date_next': date_next,
                               'date_current': date_current,
                               'gotoform': gotoform.as_ul(),
                               'istoday': istoday,
                               'now': now},
                              context_instance=RequestContext(request), response_format=response_format)

#
# Events
#


@treeio_login_required
@handle_response_format
def event_view(request, event_id, response_format='html'):
    "Event view"

    event = get_object_or_404(Event, pk=event_id)
    if not request.user.get_profile().has_permission(event):
        return user_denied(request, message="You don't have access to this Event")

    return render_to_response('events/event_view',
                              {'event': event},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def event_edit(request, event_id, response_format='html'):
    "Event edit"

    event = get_object_or_404(Event, pk=event_id)
    if not request.user.get_profile().has_permission(event, mode='w'):
        return user_denied(request, message="You don't have access to this Event")

    if request.POST:
        if not 'cancel' in request.POST:
            form = EventForm(
                request.user.get_profile(), None, None, request.POST, instance=event)
            if form.is_valid():
                event = form.save()
                return HttpResponseRedirect(reverse('events_event_view', args=[event.id]))
        else:
            return HttpResponseRedirect(reverse('events'))
    else:
        form = EventForm(request.user.get_profile(), instance=event)

    return render_to_response('events/event_edit',
                              {'event': event,
                               'form': form},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def event_delete(request, event_id, response_format='html'):
    "Event delete"

    event = get_object_or_404(Event, pk=event_id)
    if not request.user.get_profile().has_permission(event, mode='w'):
        return user_denied(request, message="You don't have access to this Event")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                event.trash = True
                event.save()
            else:
                event.delete()
            return HttpResponseRedirect(reverse('events_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('events_event_view', args=[event.id]))

    return render_to_response('events/event_delete',
                              {'event': event},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def event_add(request, date=None, hour=12, response_format='html'):
    "Event add form"

    if request.POST:
        if not 'cancel' in request.POST:
            event = Event()
            form = EventForm(
                request.user.get_profile(), date, hour, request.POST, instance=event)
            if form.is_valid():
                event = form.save()
                event.set_user_from_request(request)
                return HttpResponseRedirect(reverse('events_event_view', args=[event.id]))
        else:
            return HttpResponseRedirect(reverse('events'))
    else:
        form = EventForm(request.user.get_profile(), date, hour)

    return render_to_response('events/event_add',
                              {'form': form},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
def ical_all_event(request, response_format='ical'):
    "Export upcoming events "
    query = Q()
    events = Object.filter_by_request(request, Event.objects.filter(query))
    icalstream = """BEGIN:VCALENDAR
VERSION:2.0
CALSCALE:GREGORIAN
METHOD:PUBLISH
PRODID:-//PYVOBJECT//NONSGML Version 1//EN
"""
    vevent = ""
    for event in events:
        vevent += "BEGIN:VEVENT\n"
        if event.start:
            vevent += "DTSTART;VALUE=DATE:%s\n" % str(
                (datetime.strptime(str(event.start)[0:10], '%Y-%m-%d')))[0:10].replace("-", "")
        vevent += "DTEND;VALUE=DATE:%s\n" % str(
            (datetime.strptime(str(event.end)[0:10], '%Y-%m-%d')))[0:10].replace("-", "")
        if not event.details:
            vevent += "SUMMARY:%s\n" % strip_tags(event.name)
        else:
            vevent += "SUMMARY:%s\n" % strip_tags(event.details)
        vevent += "UID:%s\n" % (event.name)
        vevent += "END:VEVENT\n"

    icalstream += vevent
    icalstream += """X-WR-CALDESC:Tree.io Calendar
X-WR-CALNAME:Tree.io
X-WR-TIMEZONE:London/UK
END:VCALENDAR
"""

    response = HttpResponse(icalstream, mimetype='text/calendar')
    response['Filename'] = 'events.ics'  # IE needs this
    response['Content-Disposition'] = 'attachment; filename=events.ics'
    return response


#
# Widgets
#

@handle_response_format
@treeio_login_required
def widget_week_view(request, response_format='html'):
    "Week view - each slot represents an hour"

    events = Object.filter_by_request(request, Event.objects)

    date_current = now = datetime.now()
    istoday = True

    gotoform = GoToDateForm(now, request.GET)
    if request.GET:
        if 'date_year' in request.GET and 'date_month' in request.GET and 'date_day' in request.GET:
            try:
                day = int(request.GET['date_day'])
                year = int(request.GET['date_year'])
                month = int(request.GET['date_month'])
                if year >= 1900 and month >= 1 and month <= 12 and day >= 1 and day <= 31:
                    date_current = datetime(year, month, day)
                    istoday = date_current == now
            except Exception:
                pass
        if gotoform.is_valid() and gotoform.cleaned_data['goto']:
            date_current = gotoform.cleaned_data['goto']
            istoday = date_current == now
            date_current = now = datetime(
                date_current.year, date_current.month, date_current.day)

    date_previous = date_current - relativedelta(weeks=+1)
    date_next = date_current + relativedelta(weeks=+1)

    weeks = calendar.Calendar().monthdatescalendar(
        date_current.year, date_current.month)
    current_week = []
    for week in weeks:
        if date_current.date() in week:
            current_week = week
            break

    wrapped_events = EventCollection(events, START_HOUR, END_HOUR)
    wrapped_events.collect_events(request)

    dates = calendar.Calendar().monthdatescalendar(
        date_current.year, date_current.month)

    wrapped_events = EventCollection(events)
    wrapped_events.collect_events(request)

    return render_to_response('events/widgets/week_view',
                              {'events': wrapped_events,
                               'dates': dates,
                               'week': current_week,
                               'date_previous': date_previous,
                               'date_next': date_next,
                               'start_date': current_week[0],
                               'end_date': current_week[6],
                               'date_current': date_current,
                               'gotoform': gotoform.as_ul(),
                               'istoday': istoday,
                               'now': now},
                              context_instance=RequestContext(request), response_format=response_format)

########NEW FILE########
__FILENAME__ = widgets
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Events module widgets
"""

WIDGETS = {'widget_week_view': {'title': 'Calendar: This Week',
                                'size': "95%"}}


def get_widgets(request):
    "Returns a set of all available widgets"

    return WIDGETS

########NEW FILE########
__FILENAME__ = admin
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Finance: admin page
"""
from treeio.finance.models import Transaction, Liability, Category
from django.contrib import admin


class TransactionAdmin(admin.ModelAdmin):

    """ Transaction admin """
    list_display = ('name', 'details')
    search_fields = ['name']


class LiabilityAdmin(admin.ModelAdmin):

    """ Liability admin """
    list_display = ('name', 'details')
    search_fields = ['name']


class CategoryAdmin(admin.ModelAdmin):

    """ Category admin """
    list_display = ('name', 'id')
    search_fields = ['name']

admin.site.register(Transaction, TransactionAdmin)
admin.site.register(Liability, LiabilityAdmin)
admin.site.register(Category, CategoryAdmin)

########NEW FILE########
__FILENAME__ = handlers
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

from __future__ import absolute_import, with_statement

__all__ = ['CurrencyHandler',
           'TaxHandler',
           'CategoryHandler',
           'AssetHandler',
           'AccountHandler',
           'EquityHandler',
           'LiabilityHandler',
           'TransactionHandler',
           ]

from django.core.exceptions import ObjectDoesNotExist

from treeio.core.api.utils import rc
from treeio.sales.models import SaleOrder
from treeio.finance.helpers import convert
from treeio.sales.forms import dict_currencies
from treeio.core.api.handlers import ObjectHandler
from treeio.finance.models import Currency, Tax, Category, Asset, Account, Equity, Liability, Transaction
from treeio.finance.forms import TransactionForm, LiabilityForm, AccountForm, EquityForm, AssetForm, \
    CategoryForm, CurrencyForm, TaxForm


class FinanceCommonHandler(ObjectHandler):

    def check_create_permission(self, request, mode):
        return True  # request.user.get_profile().is_admin('treeio.finance')

    def check_instance_permission(self, request, inst, mode):
        return request.user.get_profile().has_permission(inst, mode=mode) \
            or request.user.get_profile().is_admin('treeio.finance')


class CurrencyHandler(ObjectHandler):

    """ Process Currency objects"""

    model = Currency
    form = CurrencyForm

    @staticmethod
    def resource_uri():
        return ('api_finance_currencies', ['id'])

    def create(self, request, *args, **kwargs):
        if request.data is None:
            return rc.BAD_REQUEST

        if not self.check_create_permission(request, "x"):
            return rc.FORBIDDEN

        currency = Currency()
        form = CurrencyForm(
            request.user.get_profile(), request.data, instance=currency)
        if form.is_valid():
            currency = form.save(commit=False)
            cname = dict_currencies[currency.code]
            currency.name = cname[cname.index(' ') + 2:]
            # currency.factor = 1.0 #Get currency conversion here
            currency.save()
            currency.set_user_from_request(request)
            return currency
        else:
            self.status = 400
            return form.errors


class TaxHandler(FinanceCommonHandler):
    model = Tax
    form = TaxForm

    @staticmethod
    def resource_uri():
        return ('api_finance_taxes', ['id'])


class CategoryHandler(FinanceCommonHandler):
    model = Category
    form = CategoryForm

    @staticmethod
    def resource_uri():
        return ('api_finance_categories', ['id'])


class AssetHandler(FinanceCommonHandler):
    model = Asset
    form = AssetForm

    @staticmethod
    def resource_uri():
        return ('api_finance_assets', ['id'])


class AccountHandler(FinanceCommonHandler):
    model = Account
    form = AccountForm

    @staticmethod
    def resource_uri():
        return ('api_finance_accounts', ['id'])

    def create(self, request, *args, **kwargs):
        if request.data is None:
            return rc.BAD_REQUEST

        if not self.check_create_permission(request, "x"):
            return rc.FORBIDDEN

        account = Account()
        form = AccountForm(
            request.user.get_profile(), request.data, instance=account)
        if form.is_valid():
            account = form.save(commit=False)
            convert(account, 'balance')
            account.set_user_from_request(request)
            return account
        else:
            self.status = 400
            return form.errors


class EquityHandler(FinanceCommonHandler):
    model = Equity
    form = EquityForm

    @staticmethod
    def resource_uri():
        return ('api_finance_equities', ['id'])


class LiabilityHandler(FinanceCommonHandler):
    model = Liability
    form = LiabilityForm

    @staticmethod
    def resource_uri():
        return ('api_finance_liabilities', ['id'])

    def create(self, request, *args, **kwargs):
        if request.data is None:
            return rc.BAD_REQUEST

        # if not self.check_create_permission(request, "x"):
        #    return rc.FORBIDDEN

        liability = self.model()
        form = self.form(
            request.user.get_profile(), request.data, instance=liability)
        if form.is_valid():
            liability = form.save(commit=False)
            liability.source = liability.account.owner
            convert(liability, 'value')
            liability.set_user_from_request(request)
            return liability
        else:
            self.status = 400
            return form.errors


class TransactionHandler(FinanceCommonHandler):
    model = Transaction
    form = TransactionForm

    @staticmethod
    def resource_uri():
        return ('api_finance_transactions', ['id'])

    def create(self, request, *args, **kwargs):
        if request.data is None:
            return rc.BAD_REQUEST

        # if not self.check_create_permission(request, "x"):
        #    return rc.FORBIDDEN

        transaction = self.model()
        form = self.form(
            request.user.get_profile(), None, None, request.POST, instance=transaction)
        if form.is_valid():
            transaction = form.save(commit=False)
            convert(transaction, 'value')
            transaction.set_user_from_request(request)
            if request.data.has_key("order"):
                try:
                    order = SaleOrder.objects.get(pk=request.data['order'])
                    order.payment.add(transaction)
                    order.save()
                except:
                    pass
            return transaction
        else:
            self.status = 400
            return form.errors

    def update(self, request, *args, **kwargs):

        pkfield = kwargs.get(self.model._meta.pk.name) or request.data.get(
            self.model._meta.pk.name)

        if not pkfield:
            return rc.BAD_REQUEST

        try:
            obj = self.model.objects.get(pk=pkfield)
        except ObjectDoesNotExist:
            return rc.NOT_FOUND

        form = self.form(
            request.user.get_profile(), None, None, request.data, instance=obj)
        if form.is_valid():
            transaction = form.save(commit=False)
            convert(transaction, 'value')
            return transaction
        else:
            self.status = 400
            return form.errors

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

import json
from django.test import TestCase
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser
from treeio.core.models import User, Group, Perspective, ModuleSetting, Object
from treeio.finance.models import Transaction, Liability, Category, Account, Equity, Asset, Currency, Tax
from treeio.identities.models import Contact, ContactType


class FinanceAPITest(TestCase):

    "Finance api tests"
    username = "api_test"
    password = "api_password"
    prepared = False
    authentication_headers = {"CONTENT_TYPE": "application/json",
                              "HTTP_AUTHORIZATION": "Basic YXBpX3Rlc3Q6YXBpX3Bhc3N3b3Jk"}
    content_type = 'application/json'

    def setUp(self):
        "Initial Setup"
        if not self.prepared:
            # Clean up first
            Object.objects.all().delete()
            User.objects.all().delete()

            # Create objects
            try:
                self.group = Group.objects.get(name='test')
            except Group.DoesNotExist:
                Group.objects.all().delete()
                self.group = Group(name='test')
                self.group.save()

            try:
                self.user = DjangoUser.objects.get(username=self.username)
                self.user.set_password(self.password)
                try:
                    self.profile = self.user.get_profile()
                except Exception:
                    User.objects.all().delete()
                    self.user = DjangoUser(username=self.username, password='')
                    self.user.set_password(self.password)
                    self.user.save()
            except DjangoUser.DoesNotExist:
                User.objects.all().delete()
                self.user = DjangoUser(username=self.username, password='')
                self.user.set_password(self.password)
                self.user.save()

            try:
                perspective = Perspective.objects.get(name='default')
            except Perspective.DoesNotExist:
                Perspective.objects.all().delete()
                perspective = Perspective(name='default')
                perspective.set_default_user()
                perspective.save()
            ModuleSetting.set('default_perspective', perspective.id)

            self.contact_type = ContactType(name='test')
            self.contact_type.set_default_user()
            self.contact_type.save()

            self.contact = Contact(name='test', contact_type=self.contact_type)
            self.contact.set_default_user()
            self.contact.save()

            self.category = Category(name='test')
            self.category.set_default_user()
            self.category.save()

            self.equity = Equity(
                issue_price=10, sell_price=10, issuer=self.contact, owner=self.contact)
            self.equity.set_default_user()
            self.equity.save()

            self.asset = Asset(name='test', owner=self.contact)
            self.asset.set_default_user()
            self.asset.save()

            self.tax = Tax(name='test', rate=10)
            self.tax.set_default_user()
            self.tax.save()

            self.currency = Currency(code="GBP",
                                     name="Pounds",
                                     symbol="L",
                                     is_default=True)
            self.currency.set_default_user()
            self.currency.save()

            self.account = Account(
                name='test', owner=self.contact, balance_currency=self.currency)
            self.account.set_default_user()
            self.account.save()

            self.liability = Liability(name='test',
                                       source=self.contact,
                                       target=self.contact,
                                       account=self.account,
                                       value=10,
                                       value_currency=self.currency)
            self.liability.set_default_user()
            self.liability.save()

            self.transaction = Transaction(name='test', account=self.account, source=self.contact,
                                           target=self.contact, value=10, value_currency=self.currency)
            self.transaction.set_default_user()
            self.transaction.save()

            self.client = Client()

            self.prepared = True

    def test_unauthenticated_access(self):
        "Test index page at /api/finance/currencies"
        response = self.client.get('/api/finance/currencies')
        # Redirects as unauthenticated
        self.assertEquals(response.status_code, 401)

    def test_get_currencies_list(self):
        """ Test index page api/finance/currencies """
        response = self.client.get(
            path=reverse('api_finance_currencies'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_currency(self):
        response = self.client.get(path=reverse('api_finance_currencies', kwargs={
                                   'object_ptr': self.currency.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_currency(self):
        updates = {"code": "RUB", "name": "api RUB",
                   "factor": "10.00", "is_active": True}
        response = self.client.put(path=reverse('api_finance_currencies', kwargs={'object_ptr': self.currency.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['code'], updates['code'])
        self.assertEquals(data['name'], updates['name'])
        self.assertEquals(data['factor'], updates['factor'])
        self.assertEquals(data['is_active'], updates['is_active'])

    def test_get_taxes_list(self):
        """ Test index page api/finance/taxes """
        response = self.client.get(
            path=reverse('api_finance_taxes'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_tax(self):
        response = self.client.get(path=reverse(
            'api_finance_taxes', kwargs={'object_ptr': self.tax.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_tax(self):
        updates = {"name": "API TEST TAX", "rate": "20.00", "compound": False}
        response = self.client.put(path=reverse('api_finance_taxes', kwargs={'object_ptr': self.tax.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        self.assertEquals(data['rate'], updates['rate'])
        self.assertEquals(data['compound'], updates['compound'])

    def test_get_categories_list(self):
        """ Test index page api/finance/categories """
        response = self.client.get(
            path=reverse('api_finance_categories'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_category(self):
        response = self.client.get(path=reverse('api_finance_categories', kwargs={
                                   'object_ptr': self.category.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_category(self):
        updates = {"name": "Api category", "details": "api details"}
        response = self.client.put(path=reverse('api_finance_categories', kwargs={'object_ptr': self.category.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        self.assertEquals(data['details'], updates['details'])

    def test_get_assets_list(self):
        """ Test index page api/finance/assets """
        response = self.client.get(
            path=reverse('api_finance_assets'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_asset(self):
        response = self.client.get(path=reverse('api_finance_assets', kwargs={
                                   'object_ptr': self.asset.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_asset(self):
        updates = {"current_value": "20.0", "owner": self.contact.id, "asset_type": "fixed", "name": "Api name",
                   "initial_value": '40.0'}
        response = self.client.put(path=reverse('api_finance_assets', kwargs={'object_ptr': self.asset.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        print response.content
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        self.assertEquals(data['owner']['id'], updates['owner'])
        self.assertEquals(data['asset_type'], updates['asset_type'])
        self.assertEquals(data['initial_value'], updates['initial_value'])
        self.assertEquals(data['current_value'], updates['current_value'])

    def test_get_accounts_list(self):
        """ Test index page api/finance/accounts """
        response = self.client.get(
            path=reverse('api_finance_accounts'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_account(self):
        response = self.client.get(path=reverse('api_finance_accounts', kwargs={
                                   'object_ptr': self.account.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_account(self):
        updates = {"owner": self.user.id, "balance_display": 40.0,
                   "name": "api test name", "balance_currency": self.currency.id}
        response = self.client.put(path=reverse('api_finance_accounts', kwargs={'object_ptr': self.account.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        self.assertEquals(data['owner']['id'], updates['owner'])
        self.assertEquals(data['balance_display'], updates['balance_display'])
        self.assertEquals(
            data['balance_currency']['id'], updates['balance_currency'])

    def test_get_equities_list(self):
        """ Test index page api/finance/equities"""
        response = self.client.get(
            path=reverse('api_finance_equities'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_equity(self):
        response = self.client.get(path=reverse('api_finance_equities', kwargs={
                                   'object_ptr': self.equity.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_account_2(self):
        updates = {"issue_price": "100.0", "equity_type": "warrant", "sell_price": "50.0", "amount": 100,
                   "purchase_date": "2011-06-06", "owner": self.contact.id, "issuer": self.contact.id}
        response = self.client.put(path=reverse('api_finance_equities', kwargs={'object_ptr': self.equity.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['issue_price'], updates['issue_price'])
        self.assertEquals(data['equity_type'], updates['equity_type'])
        self.assertEquals(data['sell_price'], updates['sell_price'])
        self.assertEquals(data['amount'], updates['amount'])
        self.assertEquals(data['purchase_date'], updates['purchase_date'])
        self.assertEquals(data['owner']['id'], updates['owner'])
        self.assertEquals(data['issuer']['id'], updates['issuer'])
        self.assertEquals(data['issuer']['id'], updates['issuer'])

    def test_get_liabilities_list(self):
        """ Test index page api/finance/liabilities"""
        response = self.client.get(
            path=reverse('api_finance_liabilities'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_liability(self):
        response = self.client.get(path=reverse('api_finance_liabilities', kwargs={
                                   'object_ptr': self.liability.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_liability(self):
        updates = {"account": self.account.id, "target": self.contact.id, "value_display": "20.0",
                   "name": "api test name", "value_currency": self.currency.id}
        response = self.client.put(path=reverse('api_finance_liabilities', kwargs={'object_ptr': self.liability.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        self.assertEquals(data['target']['id'], updates['target'])
        self.assertEquals(data['account']['id'], updates['account'])
        self.assertEquals(data['value_display'], updates['value_display'])
        self.assertEquals(
            data['value_currency']['id'], updates['value_currency'])

    def test_get_transactions_list(self):
        """ Test index page api/finance/transactions"""
        response = self.client.get(
            path=reverse('api_finance_transactions'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_transaction(self):
        response = self.client.get(path=reverse('api_finance_transactions', kwargs={
                                   'object_ptr': self.transaction.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_transaction(self):
        updates = {"value_display": "1000.0", "account": self.account.id, "name": "api test name", "value_currency": self.currency.id,
                   "datetime": "2011-03-21 11:04:42", "target": self.contact.id, "account": self.account.id, "source": self.contact.id}
        response = self.client.put(path=reverse('api_finance_transactions', kwargs={'object_ptr': self.transaction.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        print response.content
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        self.assertEquals(data['value_display'], updates['value_display'])
        self.assertEquals(data['account']['id'], updates['account'])
        self.assertEquals(
            data['value_currency']['id'], updates['value_currency'])
        self.assertEquals(data['datetime'], updates['datetime'])
        self.assertEquals(data['target']['id'], updates['target'])
        self.assertEquals(data['account']['id'], updates['account'])
        self.assertEquals(data['source']['id'], updates['source'])

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

import handlers
from treeio.core.api.auth import auth_engine
from treeio.core.api.doc import documentation_view
from treeio.core.api.resource import CsrfExemptResource

from django.conf.urls import patterns, url

ad = {'authentication': auth_engine}

# finance resources
currencyResource = CsrfExemptResource(handler=handlers.CurrencyHandler, **ad)
taxResource = CsrfExemptResource(handler=handlers.TaxHandler, **ad)
categoryResource = CsrfExemptResource(handler=handlers.CategoryHandler, **ad)
assetResource = CsrfExemptResource(handler=handlers.AssetHandler, **ad)
accountResource = CsrfExemptResource(handler=handlers.AccountHandler, **ad)
equityResource = CsrfExemptResource(handler=handlers.EquityHandler, **ad)
liabilityResource = CsrfExemptResource(handler=handlers.LiabilityHandler, **ad)
transactionResource = CsrfExemptResource(
    handler=handlers.TransactionHandler, **ad)

urlpatterns = patterns('',
    # Finance
    url(r'^doc$', documentation_view, kwargs={
        'module': handlers}, name="api_finance_doc"),
    url(r'^currencies$', currencyResource,
        name="api_finance_currencies"),
    url(r'^currency/(?P<object_ptr>\d+)',
        currencyResource, name="api_finance_currencies"),
    url(r'^taxes$', taxResource, name='api_finance_taxes'),
    url(r'^tax/(?P<object_ptr>\d+)',
        taxResource, name='api_finance_taxes'),
    url(r'^categories$', categoryResource,
        name='api_finance_categories'),
    url(r'^category/(?P<object_ptr>\d+)',
        categoryResource, name='api_finance_categories'),
    url(r'^assets$', assetResource,
        name='api_finance_assets'),
    url(r'^asset/(?P<object_ptr>\d+)',
        assetResource, name='api_finance_assets'),
    url(r'^accounts$', accountResource,
        name='api_finance_accounts'),
    url(r'^account/(?P<object_ptr>\d+)',
        accountResource, name='api_finance_accounts'),
    url(r'^equities$', equityResource,
        name='api_finance_equities'),
    url(r'^equity/(?P<object_ptr>\d+)',
        equityResource, name='api_finance_equities'),
    url(r'^liabilities$', liabilityResource,
        name='api_finance_liabilities'),
    url(r'^liability/(?P<object_ptr>\d+)',
        liabilityResource, name='api_finance_liabilities'),
    url(r'^transactions$', transactionResource,
        name='api_finance_transactions'),
    url(r'^transaction/(?P<object_ptr>\d+)',
        transactionResource, name='api_finance_transactions'),
)

########NEW FILE########
__FILENAME__ = cron
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Finance Cron jobs
"""
from treeio.finance.models import Asset


def assets_depreciate():
    "Automatically depreciate assets as per their depreciation rate"

    assets = Asset.objects.all()
    for asset in assets:
        if not asset.trash:
            asset.set_current_value()

########NEW FILE########
__FILENAME__ = csvapi
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Import/Export Contacts API
"""

import csv
from django.http import HttpResponse
import StringIO
import datetime


class ProcessTransactions():

    "Import/Export Contacts"

    def export_transactions(self, transactions):
        "Export transactions into CSV file"

        response = HttpResponse(mimetype='text/csv')
        response[
            'Content-Disposition'] = 'attachment; filename=Transactions_%s.csv' % datetime.date.today().isoformat()

        writer = csv.writer(response)
        headers = ['name', 'source', 'target', 'liability',
                   'category', 'account', 'datetime', 'value', 'details']
        writer.writerow(headers)
        for transaction in transactions:
            row = []
            row.append(transaction)
            row.append(transaction.source)
            row.append(transaction.target)
            row.append(transaction.liability)
            row.append(transaction.category)
            row.append(transaction.account)
            row.append(transaction.datetime)
            row.append(transaction.get_relative_value())
            row.append(transaction.details)
            writer.writerow(row)
        return response

    def import_transactions(self, content):
        "Import transactions from CSV file"

        f = StringIO.StringIO(content)
        transactions = csv.DictReader(f, delimiter=',')

        self.parse_transactions(transactions)

    def parse_transactions(self, transactions):
        "Break down CSV file into transactions"

########NEW FILE########
__FILENAME__ = events
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Finance integration with Events module

Provides Liabilities as EventRenderer instances
"""

from treeio.finance.models import Liability
from treeio.core.models import Object
from treeio.events.rendering import EventRenderer
from django.db.models import Q
import datetime


def get_events(request):
    "Return a list of EventRenderers from available Liability"
    events = []

    query = Q(due_date__isnull=False)
    liabilities = Object.filter_by_request(
        request, manager=Liability.objects.filter(query))
    for liability in liabilities:
        if liability.due_date:
            old = liability.due_date
            new_due_date = datetime.datetime(
                year=old.year, month=old.month, day=old.day, hour=12, minute=0, second=0)
            event = EventRenderer(
                liability.name, None, new_due_date, liability.get_absolute_url())
        event.css_class += " finance-calendar-liability"
        events.append(event)

    return events

########NEW FILE########
__FILENAME__ = forms
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Finance module forms
"""
from django.shortcuts import get_object_or_404
from django import forms
from treeio.identities.models import Contact
from treeio.finance.models import Transaction, Liability, Category, Account, Asset, Equity, Currency, Tax
from treeio.sales.models import SaleOrder
from treeio.core.models import Object, ModuleSetting
from django.core.urlresolvers import reverse
from treeio.core.decorators import preprocess_form
from django.utils.translation import ugettext as _
from treeio.sales.forms import standard_currencies

preprocess_form()


class MassActionForm(forms.Form):

    """ Mass action form for Transactions & Liabilities """

    category = forms.ModelChoiceField(queryset=[], required=False)
    delete = forms.ChoiceField(label=_("Delete"), choices=(('', '-----'), ('delete', _('Delete Completely')),
                                                           ('trash', _('Move to Trash'))), required=False)

    instance = None

    def __init__(self, user, *args, **kwargs):
        if 'instance' in kwargs:
            self.instance = kwargs['instance']
            del kwargs['instance']

        super(MassActionForm, self).__init__(*args, **kwargs)
        self.fields['delete'] = forms.ChoiceField(label=_("Delete"), choices=(('', '-----'),
                                                                              ('delete', _(
                                                                                  'Delete Completely')),
                                                                              ('trash', _('Move to Trash'))), required=False)

        self.fields['category'].label = _("Category")
        self.fields['category'].queryset = Object.filter_permitted(
            user, Category.objects, mode='x')
        self.fields['category'].label = _("Add to Category:")

    def save(self, *args, **kwargs):
        "Process form"

        if self.instance:
            if self.is_valid():
                if self.cleaned_data['category']:
                    self.instance.category = self.cleaned_data['category']
                self.instance.save()
                if self.cleaned_data['delete']:
                    if self.cleaned_data['delete'] == 'delete':
                        self.instance.delete()
                    if self.cleaned_data['delete'] == 'trash':
                        self.instance.trash = True
                        self.instance.save()


class CategoryForm(forms.ModelForm):

    """ Category form """

    def __init__(self, user, *args, **kwargs):
        super(CategoryForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")
        self.fields['details'].label = _("Details")

    class Meta:

        "Category Form"
        model = Category
        fields = ('name', 'details')


class AccountForm(forms.ModelForm):

    """ Account form """

    def __init__(self, user, *args, **kwargs):
        super(AccountForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")

        self.fields['owner'].label = _("Owner")
        self.fields['owner'].queryset = Object.filter_permitted(
            user, Contact.objects)
        self.fields['owner'].widget.attrs.update({'class': 'autocomplete',
                                                  'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['owner'].widget.attrs.update(
            {'popuplink': reverse('identities_contact_add')})

        self.fields['balance_currency'].label = _("Currency")
        self.fields['balance_currency'].widget.attrs.update(
            {'popuplink': reverse('finance_currency_add')})
        try:
            self.fields['balance_currency'].initial = Currency.objects.get(
                is_default=True)
        except:
            pass
        self.fields['balance_display'].label = _("Initial Balance")

        self.fields['details'].label = _("Details")

    class Meta:

        "Account Form"
        model = Account
        fields = (
            'name', 'owner', 'balance_currency', 'balance_display', 'details')


class AccountFilterForm(forms.ModelForm):

    """ Filters definition """

    def __init__(self, user, skip=[], *args, **kwargs):
        super(AccountFilterForm, self).__init__(*args, **kwargs)

        if 'owner' in skip:
            del self.fields['owner']
        else:
            self.fields['owner'].queryset = Object.filter_permitted(
                user, Contact.objects)
            self.fields['owner'].required = False
            self.fields['owner'].label = _("Owner")
            self.fields['owner'].help_text = ""
            self.fields['owner'].widget.attrs.update({'class': 'autocomplete',
                                                      'callback': reverse('identities_ajax_contact_lookup')})

    class Meta:

        "Account Filter Form"
        model = Account
        fields = ['owner']


class AssetForm(forms.ModelForm):

    """ Asset form """

    def __init__(self, user, *args, **kwargs):
        super(AssetForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")
        self.fields['asset_type'].label = _("Asset type")
        self.fields['initial_value'].label = _("Initial value")
        self.fields['lifetime'].label = _("Lifetime (years)")
        self.fields['endlife_value'].label = _("Endlife value")
        self.fields['depreciation_rate'].label = _("Depreciation rate")
        self.fields['purchase_date'].label = _("Purchase date")
        self.fields['purchase_date'].widget.attrs.update(
            {'class': 'datepicker'})
        self.fields['current_value'].label = _("Current value")
        self.fields['owner'].queryset = Object.filter_permitted(
            user, Contact.objects)
        self.fields['owner'].widget.attrs.update({'class': 'autocomplete',
                                                  'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['owner'].widget.attrs.update(
            {'popuplink': reverse('identities_contact_add')})

    class Meta:

        "Asset Form"
        model = Asset
        fields = ('name', 'asset_type', 'initial_value', 'lifetime', 'endlife_value',
                  'depreciation_rate', 'depreciation_type', 'purchase_date', 'current_value', 'owner')


class AssetFilterForm(forms.ModelForm):

    """ Filters definition """

    def __init__(self, user, skip=[], *args, **kwargs):
        super(AssetFilterForm, self).__init__(*args, **kwargs)

        if 'purchase_date_from' in skip:
            del self.fields['purchase_date_from']
        else:
            self.fields['purchase_date_from'] = forms.DateField(label="Purchase Date From:",
                                                                required=False)
            self.fields['purchase_date_from'].widget.attrs.update(
                {'class': 'datepicker'})
            self.fields['purchase_date_from'].label = _("Purchase Date From")

        if 'purchase_date_to' in skip:
            del self.fields['purchase_date_to']
        else:
            self.fields['purchase_date_to'] = forms.DateField(
                label="Purchase Date To:", required=False)
            self.fields['purchase_date_to'].widget.attrs.update(
                {'class': 'datepicker'})
            self.fields['purchase_date_to'].label = _("Purchase Date To")

        if 'asset_type' in skip:
            del self.fields['asset_type']
        else:
            self.fields['asset_type'].label = _("Asset Type")
            self.fields['asset_type'].help_text = ""
            self.fields['asset_type'].required = False

        if 'owner' in skip:
            del self.fields['owner']
        else:
            self.fields['owner'].queryset = Object.filter_permitted(
                user, Contact.objects)
            self.fields['owner'].required = False
            self.fields['owner'].label = _("Owner")
            self.fields['owner'].help_text = ""
            self.fields['owner'].widget.attrs.update({'class': 'autocomplete',
                                                      'callback': reverse('identities_ajax_contact_lookup')})

    class Meta:

        "Asset Filter Form"
        model = Asset
        fields = ('owner', 'asset_type')


class EquityForm(forms.ModelForm):

    """ Equity form """

    def __init__(self, user, *args, **kwargs):
        super(EquityForm, self).__init__(*args, **kwargs)

        self.fields['equity_type'].label = _("Equity type")
        self.fields['issue_price'].label = _("Issue price")
        self.fields['sell_price'].label = _("Sell price")
        self.fields['issuer'].label = _("Issuer")
        self.fields['owner'].label = _("Owner")
        self.fields['amount'].label = _("Quantity")
        self.fields['purchase_date'].label = _("Purchase date")
        self.fields['details'].label = _("Details")

        self.fields['owner'].queryset = Object.filter_permitted(
            user, Contact.objects)
        self.fields['owner'].widget.attrs.update({'class': 'autocomplete',
                                                  'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['owner'].widget.attrs.update(
            {'popuplink': reverse('identities_contact_add')})
        self.fields['issuer'].queryset = Object.filter_permitted(
            user, Contact.objects)
        self.fields['issuer'].widget.attrs.update({'class': 'autocomplete',
                                                   'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['issuer'].widget.attrs.update(
            {'popuplink': reverse('identities_contact_add')})
        try:
            conf = ModuleSetting.get_for_module(
                'treeio.finance', 'my_company')[0]
            self.fields['issuer'].initial = long(conf.value)
        except Exception:
            pass

        self.fields['purchase_date'].widget.attrs.update(
            {'class': 'datepicker'})

    class Meta:

        "Equity Form"
        model = Equity
        fields = ('equity_type', 'issue_price', 'sell_price', 'issuer',
                  'owner', 'amount', 'purchase_date', 'details')


class EquityFilterForm(forms.ModelForm):

    """ Filters definition """

    def __init__(self, user, skip=[], *args, **kwargs):
        super(EquityFilterForm, self).__init__(*args, **kwargs)

        if 'purchase_date_from' in skip:
            del self.fields['purchase_date_from']
        else:
            self.fields['purchase_date_from'] = forms.DateField(label="Purchase Date From:",
                                                                required=False)
            self.fields['purchase_date_from'].widget.attrs.update(
                {'class': 'datepicker'})
            self.fields['purchase_date_from'].label = _("Purchase Date From")

        if 'purchase_date_to' in skip:
            del self.fields['purchase_date_to']
        else:
            self.fields['purchase_date_to'] = forms.DateField(
                label="Purchase Date To:", required=False)
            self.fields['purchase_date_to'].widget.attrs.update(
                {'class': 'datepicker'})
            self.fields['purchase_date_to'].label = _("Purchase Date To")

        if 'equity_type' in skip:
            del self.fields['equity_type']
        else:
            self.fields['equity_type'].label = _("Equity Type")
            self.fields['equity_type'].help_text = ""
            self.fields['equity_type'].required = False

        if 'issuer' in skip:
            del self.fields['issuer']
        else:
            self.fields['issuer'].queryset = Object.filter_permitted(
                user, Contact.objects)
            self.fields['issuer'].label = _("Issuer")
            self.fields['issuer'].help_text = ""
            self.fields['issuer'].required = False
            self.fields['issuer'].widget.attrs.update({'class': 'autocomplete',
                                                       'callback': reverse('identities_ajax_contact_lookup')})

        if 'owner' in skip:
            del self.fields['owner']
        else:
            self.fields['owner'].queryset = Object.filter_permitted(
                user, Contact.objects)
            self.fields['owner'].required = False
            self.fields['owner'].label = _("Owner")
            self.fields['owner'].help_text = ""
            self.fields['owner'].widget.attrs.update({'class': 'autocomplete',
                                                      'callback': reverse('identities_ajax_contact_lookup')})

    class Meta:

        "Equity Filter Form"
        model = Equity
        fields = ('issuer', 'owner', 'equity_type')


class ReceivableForm(forms.ModelForm):

    """ Receivable form """

    def __init__(self, user, *args, **kwargs):
        super(ReceivableForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")
        self.fields['category'].label = _("Category")
        self.fields['source'].label = _("Source")
        self.fields['target'].label = _("Target")
        self.fields['account'].label = _("Bank Account")
        self.fields['due_date'].label = _("Due date")
        self.fields['value_currency'].label = _("Currency")
        self.fields['value_currency'].widget.attrs.update(
            {'popuplink': reverse('finance_currency_add')})
        self.fields['value_currency'].initial = Currency.objects.get(
            is_default=True)
        self.fields['value_display'].label = _("Value")
        self.fields['details'].label = _("Details")

        self.fields['source'].queryset = Object.filter_permitted(
            user, Contact.objects)
        self.fields['source'].widget.attrs.update({'class': 'autocomplete',
                                                   'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['source'].widget.attrs.update(
            {'popuplink': reverse('identities_contact_add')})

        self.fields['account'].queryset = Object.filter_permitted(
            user, Account.objects)

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.finance', 'default_account')[0]
            self.fields['account'].initial = long(conf.value)
        except Exception:
            pass

        self.fields['due_date'].widget.attrs.update({'class': 'datepicker'})

        del self.fields['target']

    class Meta:

        "Receivable Form"
        model = Liability
        fields = ('name', 'category', 'source', 'target', 'account',
                  'due_date', 'value_currency', 'value_display', 'details')


class TransactionForm(forms.ModelForm):

    """ Transaction form """

    def __init__(self, user, liability_id=None, order_id=None, *args, **kwargs):
        super(TransactionForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Description")
        self.fields['category'].label = _("Category")
        self.fields['source'].label = _("Source")
        self.fields['target'].label = _("Target")
        self.fields['account'].label = _("Bank Account")
        self.fields['datetime'].label = _("Date & Time")
        self.fields['value_currency'].label = _("Currency")
        self.fields['value_currency'].widget.attrs.update(
            {'popuplink': reverse('finance_currency_add')})
        self.fields['value_currency'].initial = Currency.objects.get(
            is_default=True)
        self.fields['value_display'].label = _("Value")
        self.fields['details'].label = _("Details")

        self.fields['source'].queryset = Object.filter_permitted(
            user, Contact.objects)
        self.fields['target'].queryset = Object.filter_permitted(
            user, Contact.objects)

        self.fields['source'].widget.attrs.update({'class': 'autocomplete',
                                                   'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['target'].widget.attrs.update({'class': 'autocomplete',
                                                   'callback': reverse('identities_ajax_contact_lookup')})

        self.fields['source'].widget.attrs.update(
            {'popuplink': reverse('identities_contact_add')})
        self.fields['target'].widget.attrs.update(
            {'popuplink': reverse('identities_contact_add')})

        self.fields['datetime'].widget.attrs.update(
            {'class': 'datetimepicker'})

        self.fields['account'].queryset = Object.filter_permitted(
            user, Account.objects)

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.finance', 'default_account')[0]
            self.fields['account'].initial = long(conf.value)
        except Exception:
            pass

        self.fields['liability'].queryset = Object.filter_permitted(
            user, Liability.objects)
        self.fields['liability'].label = _("Liability / Receivable")

        if order_id:
            order = get_object_or_404(SaleOrder, pk=order_id)
            self.fields['name'].initial = order.reference
            if order.client:
                self.fields['source'].initial = order.client

            # default company
            try:
                conf = ModuleSetting.get_for_module(
                    'treeio.finance', 'my_company')[0]
                self.fields['target'].initial = Contact.objects.get(
                    pk=long(conf.value))

            except Exception:
                pass
            self.fields['details'].initial = order.details
            self.fields['value_display'].initial = order.balance_due()
            self.fields['value_currency'].initial = order.currency

        if liability_id:
            self.fields['liability'].initial = liability_id
            liability = get_object_or_404(Liability, pk=liability_id)
            self.fields['name'].initial = liability.name
            self.fields['source'].initial = liability.source
            self.fields['target'].initial = liability.target
            self.fields['details'].initial = liability.details
            self.fields['category'].initial = liability.category
            self.fields['account'].initial = liability.account
            self.fields['value_display'].initial = liability.value_display
            self.fields['value_currency'].initial = liability.value_currency

    class Meta:

        "Transaction Form"
        model = Transaction
        fields = ('name', 'category', 'source', 'target', 'account',
                  'datetime', 'liability', 'value_currency', 'value_display', 'details')


class TransactionFilterForm(forms.ModelForm):

    """ Filters definition """

    def __init__(self, user, skip=[], *args, **kwargs):
        super(TransactionFilterForm, self).__init__(*args, **kwargs)

        if 'datefrom' in skip:
            del self.fields['datefrom']
            del self.fields['dateto']
        else:
            self.fields['datefrom'] = forms.DateField(
                label=_("Date From"), required=False)
            self.fields['datefrom'].widget.attrs.update(
                {'class': 'datepicker'})

        if 'dateto' in skip:
            del self.fields['dateto']
            del self.fields['datefrom']
        else:
            self.fields['dateto'] = forms.DateField(
                label=_("Date To"), required=False)
            self.fields['dateto'].widget.attrs.update({'class': 'datepicker'})

        if 'category' in skip:
            del self.fields['category']
        else:
            self.fields['category'].queryset = Object.filter_permitted(
                user, Category.objects)
            self.fields['category'].label = _("Category")
            self.fields['category'].help_text = ""
            self.fields['category'].required = False

        if 'source' in skip:
            del self.fields['source']
        else:
            self.fields['source'].queryset = Object.filter_permitted(
                user, Contact.objects)
            self.fields['source'].label = _("Source")
            self.fields['source'].help_text = ""
            self.fields['source'].required = False
            self.fields['source'].widget.attrs.update({'class': 'autocomplete',
                                                       'callback': reverse('identities_ajax_contact_lookup')})

        if 'target' in skip:
            del self.fields['target']
        else:
            self.fields['target'].queryset = Object.filter_permitted(
                user, Contact.objects)
            self.fields['target'].required = False
            self.fields['target'].label = _("Target")
            self.fields['target'].help_text = ""
            self.fields['target'].widget.attrs.update({'class': 'autocomplete',
                                                       'callback': reverse('identities_ajax_contact_lookup')})

    class Meta:

        "Transaction Filter Form"
        model = Transaction
        fields = ('category', 'source', 'target')


class LiabilityForm(forms.ModelForm):

    """ Folder form """

    def __init__(self, user, *args, **kwargs):
        super(LiabilityForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")
        self.fields['category'].label = _("Category")
        self.fields['source'].label = _("Source")
        self.fields['target'].label = _("Target")
        self.fields['account'].label = _("Bank Account")
        self.fields['due_date'].label = _("Due date")
        self.fields['value_currency'].label = _("Currency")
        self.fields['value_currency'].widget.attrs.update(
            {'popuplink': reverse('finance_currency_add')})
        self.fields['value_currency'].initial = Currency.objects.get(
            is_default=True)
        self.fields['value_display'].label = _("Value")
        self.fields['details'].label = _("Details")

        self.fields['target'].queryset = Object.filter_permitted(
            user, Contact.objects)
        self.fields['target'].widget.attrs.update({'class': 'autocomplete',
                                                   'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['target'].widget.attrs.update(
            {'popuplink': reverse('identities_contact_add')})

        self.fields['account'].queryset = Object.filter_permitted(
            user, Account.objects)

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.finance', 'default_account')[0]
            self.fields['account'].initial = long(conf.value)
        except Exception:
            pass

        self.fields['due_date'].widget.attrs.update({'class': 'datepicker'})

        del self.fields['source']

    class Meta:

        "Liability Form"
        model = Liability
        fields = ('name', 'category', 'source', 'target', 'account',
                  'due_date', 'value_currency', 'value_display', 'details')


class LiabilityFilterForm(forms.ModelForm):

    """ Filters definition """

    def __init__(self, user, skip=[], *args, **kwargs):
        super(LiabilityFilterForm, self).__init__(*args, **kwargs)

        if 'due_date_from' in skip:
            del self.fields['due_date_from']
        else:
            self.fields['due_date_from'] = forms.DateField(
                label=_("Due Date From:"), required=False)
            self.fields['due_date_from'].widget.attrs.update(
                {'class': 'datepicker'})

        if 'due_date_to' in skip:
            del self.fields['due_date_to']
        else:
            self.fields['due_date_to'] = forms.DateField(
                label=_("Due Date To:"), required=False)
            self.fields['due_date_to'].widget.attrs.update(
                {'class': 'datepicker'})

        if 'category' in skip:
            del self.fields['category']
        else:
            self.fields['category'].queryset = Object.filter_permitted(
                user, Category.objects)
            self.fields['category'].label = _("Category")
            self.fields['category'].help_text = ""
            self.fields['category'].required = False

        if 'source' in skip:
            del self.fields['source']
        else:
            self.fields['source'].queryset = Object.filter_permitted(
                user, Contact.objects)
            self.fields['source'].label = _("Source")
            self.fields['source'].help_text = ""
            self.fields['source'].required = False
            self.fields['source'].widget.attrs.update({'class': 'autocomplete',
                                                       'callback': reverse('identities_ajax_contact_lookup')})

        if 'target' in skip:
            del self.fields['target']
        else:
            self.fields['target'].queryset = Object.filter_permitted(
                user, Contact.objects)
            self.fields['target'].required = False
            self.fields['target'].label = _("Target")
            self.fields['target'].help_text = ""
            self.fields['target'].widget.attrs.update({'class': 'autocomplete',
                                                       'callback': reverse('identities_ajax_contact_lookup')})

        if 'account' in skip:
            del self.fields['account']
        else:
            self.fields['account'].queryset = Object.filter_permitted(
                user, Account.objects)
            self.fields['account'].required = False
            self.fields['account'].label = _("Account")
            self.fields['account'].help_text = ""

    class Meta:

        "Liability Filter Form"
        model = Liability
        fields = ('category', 'source', 'target', 'account')


class SettingsForm(forms.Form):

    """ Administration settings form """

    default_currency = forms.ModelChoiceField(
        label='Base Currency', queryset=[])
    my_company = forms.ModelChoiceField(label='My Company', queryset=[])
    default_account = forms.ModelChoiceField(
        label='Default Account', queryset=[])

    def __init__(self, user, *args, **kwargs):
        "Sets choices and initial value"
        super(SettingsForm, self).__init__(*args, **kwargs)

        self.fields['my_company'].queryset = Object.filter_permitted(
            user, Contact.objects)
        self.fields['my_company'].widget.attrs.update({'class': 'autocomplete',
                                                       'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['default_account'].queryset = Object.filter_permitted(
            user, Account.objects)

        # Translation
        self.fields['default_currency'].label = _('Base Currency')
        self.fields['my_company'].label = _('My Company')
        self.fields['default_account'].label = _('Default Account')

        try:
            self.fields['default_currency'].widget.attrs.update(
                {'popuplink': reverse('finance_currency_add')})
            self.fields['default_currency'].queryset = Currency.objects.all()
            self.fields['default_currency'].initial = Currency.objects.get(
                is_default=True)
        except Exception:
            pass

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.finance', 'my_company')[0]
            my_company = Contact.objects.get(pk=long(conf.value))
            self.fields['my_company'].initial = my_company.id
        except Exception:
            pass

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.finance', 'default_account')[0]
            default_account = Account.objects.get(pk=long(conf.value))
            self.fields['default_account'].initial = default_account.id
        except Exception:
            pass

    def clean_my_company(self, *args, **kwargs):
        "Check that my company has an account"
        my_company = self.cleaned_data['my_company']

        if not my_company.account_set.count():
            raise forms.ValidationError(
                _("Your company has to have at least one Financial Account"))

        return my_company

    def clean_default_account(self):
        "Check that account owner is the same as my company"
        account = self.cleaned_data['default_account']
        try:
            company = self.cleaned_data['my_company']

            if not account.owner_id == company.id:
                raise forms.ValidationError(
                    _("Default Account has to belong to your company"))

        except KeyError:
            pass

        return account

    def save(self):
        "Form processor"
        try:
            ModuleSetting.set_for_module('my_company',
                                         self.cleaned_data['my_company'].id,
                                         'treeio.finance')
            ModuleSetting.set_for_module('default_account',
                                         self.cleaned_data[
                                             'default_account'].id,
                                         'treeio.finance')
            currency = Currency.objects.get(
                pk=self.cleaned_data['default_currency'])
            currency.is_default = True
            currency.save()
            return True

        except Exception:
            return False

#
# Currency
#


class CurrencyForm(forms.ModelForm):

    "Currency Form"

    code = forms.ChoiceField(
        label=_("Currency Code"), choices=standard_currencies)

    def __init__(self, user, *args, **kwargs):
        super(CurrencyForm, self).__init__(*args, **kwargs)

    class Meta:

        "Currency Form"
        model = Currency
        fields = ('name', 'code', 'symbol', 'factor')  # ,'is_active')

#
# Tax
#


class TaxForm(forms.ModelForm):

    "Tax Form"

    def __init__(self, user, *args, **kwargs):
        super(TaxForm, self).__init__(*args, **kwargs)

    class Meta:

        "Tax Form"
        model = Tax
        fields = ('name', 'rate', 'compound')

########NEW FILE########
__FILENAME__ = helpers
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

from decimal import Decimal, ROUND_UP


def convert(obj, name, currency=None):
    display = getattr(obj, name + '_display', None)
    if not currency:
        currency = getattr(obj, name + '_currency', None)
    if display and currency:
        if currency.is_default:
            setattr(obj, name, display)
        else:
            setattr(obj, name, (
                display * currency.factor).quantize(Decimal('.01'), rounding=ROUND_UP))
    obj.save()
    return

########NEW FILE########
__FILENAME__ = hmodule
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Finance: Hardtree module definition
"""

PROPERTIES = {
    'title': 'Finance',
    'details': 'Manage finance',
    'url': '/finance/',
    'system': False,
    'type': 'minor',
}


URL_PATTERNS = [
    '^/finance/',
]


from treeio.finance.cron import assets_depreciate

CRON = [assets_depreciate]

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding model 'Category'
        db.create_table('finance_category', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=512)),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('finance', ['Category'])

        # Adding model 'Asset'
        db.create_table('finance_asset', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=512)),
            ('asset_type', self.gf('django.db.models.fields.CharField')
             (default='fixed', max_length=32)),
            ('initial_value', self.gf(
                'django.db.models.fields.FloatField')(default=0)),
            ('lifetime', self.gf('django.db.models.fields.FloatField')
             (null=True, blank=True)),
            ('endlife_value', self.gf('django.db.models.fields.FloatField')
             (null=True, blank=True)),
            ('depreciation_rate', self.gf(
                'django.db.models.fields.FloatField')(null=True, blank=True)),
            ('depreciation_type', self.gf('django.db.models.fields.CharField')
             (default='straight', max_length=32, null=True, blank=True)),
            ('purchase_date', self.gf('django.db.models.fields.DateField')
             (default=datetime.datetime.now, null=True, blank=True)),
            ('current_value', self.gf(
                'django.db.models.fields.FloatField')(default=0)),
            ('owner', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['identities.Contact'])),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('finance', ['Asset'])

        # Adding model 'Account'
        db.create_table('finance_account', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=512)),
            ('owner', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['identities.Contact'])),
            ('balance', self.gf(
                'django.db.models.fields.FloatField')(default=0)),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('finance', ['Account'])

        # Adding model 'Equity'
        db.create_table('finance_equity', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('equity_type', self.gf('django.db.models.fields.CharField')
             (default='share', max_length=32)),
            ('issue_price', self.gf('django.db.models.fields.FloatField')()),
            ('sell_price', self.gf('django.db.models.fields.FloatField')()),
            ('issuer', self.gf('django.db.models.fields.related.ForeignKey')(
                related_name='finance_equity_issued', to=orm['identities.Contact'])),
            ('owner', self.gf('django.db.models.fields.related.ForeignKey')(
                related_name='finance_equity_owned', to=orm['identities.Contact'])),
            ('amount', self.gf(
                'django.db.models.fields.PositiveIntegerField')(default=1)),
            ('purchase_date', self.gf('django.db.models.fields.DateField')
             (default=datetime.datetime.now)),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('finance', ['Equity'])

        # Adding model 'Liability'
        db.create_table('finance_liability', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=512)),
            ('source', self.gf('django.db.models.fields.related.ForeignKey')(
                related_name='finance_liability_source', to=orm['identities.Contact'])),
            ('target', self.gf('django.db.models.fields.related.ForeignKey')(
                related_name='finance_liability_target', to=orm['identities.Contact'])),
            ('category', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['finance.Category'], null=True, blank=True)),
            ('account', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['finance.Account'])),
            ('due_date', self.gf('django.db.models.fields.DateField')
             (null=True, blank=True)),
            ('value', self.gf('django.db.models.fields.FloatField')()),
            ('details', self.gf(
                'django.db.models.fields.TextField')(blank=True)),
        ))
        db.send_create_signal('finance', ['Liability'])

        # Adding model 'Transaction'
        db.create_table('finance_transaction', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=512)),
            ('source', self.gf('django.db.models.fields.related.ForeignKey')(
                related_name='finance_transaction_source', to=orm['identities.Contact'])),
            ('target', self.gf('django.db.models.fields.related.ForeignKey')(
                related_name='finance_transaction_target', to=orm['identities.Contact'])),
            ('liability', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['finance.Liability'], null=True, blank=True)),
            ('category', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['finance.Category'], null=True, blank=True)),
            ('account', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['finance.Account'])),
            ('datetime', self.gf('django.db.models.fields.DateTimeField')
             (default=datetime.datetime.now)),
            ('value', self.gf('django.db.models.fields.FloatField')()),
            ('details', self.gf(
                'django.db.models.fields.TextField')(blank=True)),
        ))
        db.send_create_signal('finance', ['Transaction'])

    def backwards(self, orm):

        # Deleting model 'Category'
        db.delete_table('finance_category')

        # Deleting model 'Asset'
        db.delete_table('finance_asset')

        # Deleting model 'Account'
        db.delete_table('finance_account')

        # Deleting model 'Equity'
        db.delete_table('finance_equity')

        # Deleting model 'Liability'
        db.delete_table('finance_liability')

        # Deleting model 'Transaction'
        db.delete_table('finance_transaction')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'everybody_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']"}),
            'group_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"}),
            'user_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'finance.account': {
            'Meta': {'ordering': "['name']", 'object_name': 'Account', '_ormbases': ['core.Object']},
            'balance': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"})
        },
        'finance.asset': {
            'Meta': {'ordering': "['-purchase_date']", 'object_name': 'Asset', '_ormbases': ['core.Object']},
            'asset_type': ('django.db.models.fields.CharField', [], {'default': "'fixed'", 'max_length': '32'}),
            'current_value': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'depreciation_rate': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'depreciation_type': ('django.db.models.fields.CharField', [], {'default': "'straight'", 'max_length': '32', 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'endlife_value': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'initial_value': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'lifetime': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'purchase_date': ('django.db.models.fields.DateField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'blank': 'True'})
        },
        'finance.category': {
            'Meta': {'object_name': 'Category', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'finance.equity': {
            'Meta': {'ordering': "['-purchase_date']", 'object_name': 'Equity', '_ormbases': ['core.Object']},
            'amount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'equity_type': ('django.db.models.fields.CharField', [], {'default': "'share'", 'max_length': '32'}),
            'issue_price': ('django.db.models.fields.FloatField', [], {}),
            'issuer': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_equity_issued'", 'to': "orm['identities.Contact']"}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_equity_owned'", 'to': "orm['identities.Contact']"}),
            'purchase_date': ('django.db.models.fields.DateField', [], {'default': 'datetime.datetime.now'}),
            'sell_price': ('django.db.models.fields.FloatField', [], {})
        },
        'finance.liability': {
            'Meta': {'ordering': "['-due_date']", 'object_name': 'Liability', '_ormbases': ['core.Object']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Account']"}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Category']", 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'due_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_liability_source'", 'to': "orm['identities.Contact']"}),
            'target': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_liability_target'", 'to': "orm['identities.Contact']"}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'finance.transaction': {
            'Meta': {'ordering': "['-datetime']", 'object_name': 'Transaction', '_ormbases': ['core.Object']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Account']"}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Category']", 'null': 'True', 'blank': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'liability': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Liability']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_transaction_source'", 'to': "orm['identities.Contact']"}),
            'target': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_transaction_target'", 'to': "orm['identities.Contact']"}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        }
    }

    complete_apps = ['finance']

########NEW FILE########
__FILENAME__ = 0002_auto__add_currency__add_tax__add_field_liability_value_currency__add_f
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding model 'Currency'
        db.create_table('finance_currency', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('code', self.gf('django.db.models.fields.CharField')
             (max_length=3)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=255)),
            ('symbol', self.gf('django.db.models.fields.CharField')
             (max_length=1, null=True, blank=True)),
            ('factor', self.gf('django.db.models.fields.DecimalField')
             (default=1, max_digits=10, decimal_places=4)),
            ('is_active', self.gf(
                'django.db.models.fields.BooleanField')(default=True)),
            ('is_default', self.gf(
                'django.db.models.fields.BooleanField')(default=False)),
        ))
        db.send_create_signal('finance', ['Currency'])

        # Adding model 'Tax'
        db.create_table('finance_tax', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=512)),
            ('rate', self.gf('django.db.models.fields.DecimalField')
             (max_digits=4, decimal_places=2)),
            ('compound', self.gf(
                'django.db.models.fields.BooleanField')(default=False)),
        ))
        db.send_create_signal('finance', ['Tax'])

        # Adding field 'Liability.value_currency'
        db.add_column('finance_liability', 'value_currency', self.gf(
            'django.db.models.fields.related.ForeignKey')(default=1, to=orm['finance.Currency']), keep_default=False)

        # Adding field 'Liability.value_display'
        db.add_column('finance_liability', 'value_display', self.gf('django.db.models.fields.DecimalField')(
            default=0, max_digits=20, decimal_places=2), keep_default=False)

        # Changing field 'Liability.value'
        db.alter_column('finance_liability', 'value', self.gf(
            'django.db.models.fields.DecimalField')(max_digits=20, decimal_places=2))

        # Changing field 'Asset.initial_value'
        db.alter_column('finance_asset', 'initial_value', self.gf(
            'django.db.models.fields.DecimalField')(max_digits=20, decimal_places=2))

        # Changing field 'Asset.current_value'
        db.alter_column('finance_asset', 'current_value', self.gf(
            'django.db.models.fields.DecimalField')(max_digits=20, decimal_places=2))

        # Changing field 'Asset.endlife_value'
        db.alter_column('finance_asset', 'endlife_value', self.gf(
            'django.db.models.fields.DecimalField')(null=True, max_digits=20, decimal_places=2))

        # Changing field 'Asset.lifetime'
        db.alter_column('finance_asset', 'lifetime', self.gf(
            'django.db.models.fields.DecimalField')(null=True, max_digits=20, decimal_places=0))

        # Changing field 'Asset.depreciation_rate'
        db.alter_column('finance_asset', 'depreciation_rate', self.gf(
            'django.db.models.fields.DecimalField')(null=True, max_digits=4, decimal_places=2))

        # Adding field 'Account.balance_currency'
        db.add_column('finance_account', 'balance_currency', self.gf(
            'django.db.models.fields.related.ForeignKey')(default=1, to=orm['finance.Currency']), keep_default=False)

        # Adding field 'Account.balance_display'
        db.add_column('finance_account', 'balance_display', self.gf('django.db.models.fields.DecimalField')(
            default=0, max_digits=20, decimal_places=2), keep_default=False)

        # Changing field 'Account.balance'
        db.alter_column('finance_account', 'balance', self.gf(
            'django.db.models.fields.DecimalField')(max_digits=20, decimal_places=2))

        # Adding field 'Transaction.value_currency'
        db.add_column('finance_transaction', 'value_currency', self.gf(
            'django.db.models.fields.related.ForeignKey')(default=1, to=orm['finance.Currency']), keep_default=False)

        # Adding field 'Transaction.value_display'
        db.add_column('finance_transaction', 'value_display', self.gf('django.db.models.fields.DecimalField')(
            default=0, max_digits=20, decimal_places=2), keep_default=False)

        # Changing field 'Transaction.value'
        db.alter_column('finance_transaction', 'value', self.gf(
            'django.db.models.fields.DecimalField')(max_digits=20, decimal_places=2))

        # Changing field 'Equity.issue_price'
        db.alter_column('finance_equity', 'issue_price', self.gf(
            'django.db.models.fields.DecimalField')(max_digits=20, decimal_places=2))

        # Changing field 'Equity.sell_price'
        db.alter_column('finance_equity', 'sell_price', self.gf(
            'django.db.models.fields.DecimalField')(max_digits=20, decimal_places=2))

    def backwards(self, orm):

        # Deleting model 'Currency'
        db.delete_table('finance_currency')

        # Deleting model 'Tax'
        db.delete_table('finance_tax')

        # Deleting field 'Liability.value_currency'
        db.delete_column('finance_liability', 'value_currency_id')

        # Deleting field 'Liability.value_display'
        db.delete_column('finance_liability', 'value_display')

        # Changing field 'Liability.value'
        db.alter_column('finance_liability', 'value', self.gf(
            'django.db.models.fields.FloatField')())

        # Changing field 'Asset.initial_value'
        db.alter_column('finance_asset', 'initial_value', self.gf(
            'django.db.models.fields.FloatField')())

        # Changing field 'Asset.current_value'
        db.alter_column('finance_asset', 'current_value', self.gf(
            'django.db.models.fields.FloatField')())

        # Changing field 'Asset.endlife_value'
        db.alter_column('finance_asset', 'endlife_value', self.gf(
            'django.db.models.fields.FloatField')(null=True))

        # Changing field 'Asset.lifetime'
        db.alter_column('finance_asset', 'lifetime', self.gf(
            'django.db.models.fields.FloatField')(null=True))

        # Changing field 'Asset.depreciation_rate'
        db.alter_column('finance_asset', 'depreciation_rate', self.gf(
            'django.db.models.fields.FloatField')(null=True))

        # Deleting field 'Account.balance_currency'
        db.delete_column('finance_account', 'balance_currency_id')

        # Deleting field 'Account.balance_display'
        db.delete_column('finance_account', 'balance_display')

        # Changing field 'Account.balance'
        db.alter_column('finance_account', 'balance', self.gf(
            'django.db.models.fields.FloatField')())

        # Deleting field 'Transaction.value_currency'
        db.delete_column('finance_transaction', 'value_currency_id')

        # Deleting field 'Transaction.value_display'
        db.delete_column('finance_transaction', 'value_display')

        # Changing field 'Transaction.value'
        db.alter_column('finance_transaction', 'value', self.gf(
            'django.db.models.fields.FloatField')())

        # Changing field 'Equity.issue_price'
        db.alter_column('finance_equity', 'issue_price', self.gf(
            'django.db.models.fields.FloatField')())

        # Changing field 'Equity.sell_price'
        db.alter_column('finance_equity', 'sell_price', self.gf(
            'django.db.models.fields.FloatField')())

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.AccessEntity']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'finance.account': {
            'Meta': {'ordering': "['name']", 'object_name': 'Account', '_ormbases': ['core.Object']},
            'balance': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'balance_currency': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Currency']"}),
            'balance_display': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"})
        },
        'finance.asset': {
            'Meta': {'ordering': "['-purchase_date']", 'object_name': 'Asset', '_ormbases': ['core.Object']},
            'asset_type': ('django.db.models.fields.CharField', [], {'default': "'fixed'", 'max_length': '32'}),
            'current_value': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'depreciation_rate': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '4', 'decimal_places': '2', 'blank': 'True'}),
            'depreciation_type': ('django.db.models.fields.CharField', [], {'default': "'straight'", 'max_length': '32', 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'endlife_value': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '20', 'decimal_places': '2', 'blank': 'True'}),
            'initial_value': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'lifetime': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '20', 'decimal_places': '0', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'purchase_date': ('django.db.models.fields.DateField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'blank': 'True'})
        },
        'finance.category': {
            'Meta': {'object_name': 'Category', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'finance.currency': {
            'Meta': {'object_name': 'Currency', '_ormbases': ['core.Object']},
            'code': ('django.db.models.fields.CharField', [], {'max_length': '3'}),
            'factor': ('django.db.models.fields.DecimalField', [], {'default': '1', 'max_digits': '10', 'decimal_places': '4'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_default': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'symbol': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True', 'blank': 'True'})
        },
        'finance.equity': {
            'Meta': {'ordering': "['-purchase_date']", 'object_name': 'Equity', '_ormbases': ['core.Object']},
            'amount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'equity_type': ('django.db.models.fields.CharField', [], {'default': "'share'", 'max_length': '32'}),
            'issue_price': ('django.db.models.fields.DecimalField', [], {'max_digits': '20', 'decimal_places': '2'}),
            'issuer': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_equity_issued'", 'to': "orm['identities.Contact']"}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_equity_owned'", 'to': "orm['identities.Contact']"}),
            'purchase_date': ('django.db.models.fields.DateField', [], {'default': 'datetime.datetime.now'}),
            'sell_price': ('django.db.models.fields.DecimalField', [], {'max_digits': '20', 'decimal_places': '2'})
        },
        'finance.liability': {
            'Meta': {'ordering': "['-due_date']", 'object_name': 'Liability', '_ormbases': ['core.Object']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Account']"}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Category']", 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'due_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_liability_source'", 'to': "orm['identities.Contact']"}),
            'target': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_liability_target'", 'to': "orm['identities.Contact']"}),
            'value': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'value_currency': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Currency']"}),
            'value_display': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'})
        },
        'finance.tax': {
            'Meta': {'object_name': 'Tax', '_ormbases': ['core.Object']},
            'compound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'rate': ('django.db.models.fields.DecimalField', [], {'max_digits': '4', 'decimal_places': '2'})
        },
        'finance.transaction': {
            'Meta': {'ordering': "['-datetime']", 'object_name': 'Transaction', '_ormbases': ['core.Object']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Account']"}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Category']", 'null': 'True', 'blank': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'liability': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Liability']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_transaction_source'", 'to': "orm['identities.Contact']"}),
            'target': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_transaction_target'", 'to': "orm['identities.Contact']"}),
            'value': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'value_currency': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Currency']"}),
            'value_display': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.AccessEntity']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        }
    }

    complete_apps = ['finance']

########NEW FILE########
__FILENAME__ = 0003_treeiocurrency
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models


class Migration(DataMigration):

    def forwards(self, orm):
        "Add currencies to financial items"
        try:
            currency = orm['finance.Currency'].objects.get(is_default=True)
        except:
            currency = orm['finance.Currency'].objects.create()
            currency.code = "USD"
            currency.name = "USD  United States of America, Dollars"
            currency.symbol = u"$"
            currency.is_default = True
            currency.save()
        for obj in orm['finance.Liability'].objects.all():
            obj.value_currency = currency
            obj.value_display = obj.value
            obj.save()
        for obj in orm['finance.Transaction'].objects.all():
            obj.value_currency = currency
            obj.value_display = obj.value
            obj.save()
        for obj in orm['finance.Account'].objects.all():
            obj.balance_currency = currency
            obj.balance_display = obj.balance
            obj.save()

    def backwards(self, orm):
        raise RuntimeError("Cannot reverse this migration.")

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.AccessEntity']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'finance.account': {
            'Meta': {'ordering': "['name']", 'object_name': 'Account', '_ormbases': ['core.Object']},
            'balance': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'balance_currency': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Currency']"}),
            'balance_display': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"})
        },
        'finance.asset': {
            'Meta': {'ordering': "['-purchase_date']", 'object_name': 'Asset', '_ormbases': ['core.Object']},
            'asset_type': ('django.db.models.fields.CharField', [], {'default': "'fixed'", 'max_length': '32'}),
            'current_value': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'depreciation_rate': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '4', 'decimal_places': '2', 'blank': 'True'}),
            'depreciation_type': ('django.db.models.fields.CharField', [], {'default': "'straight'", 'max_length': '32', 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'endlife_value': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '20', 'decimal_places': '2', 'blank': 'True'}),
            'initial_value': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'lifetime': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '20', 'decimal_places': '0', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'purchase_date': ('django.db.models.fields.DateField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'blank': 'True'})
        },
        'finance.category': {
            'Meta': {'object_name': 'Category', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'finance.currency': {
            'Meta': {'object_name': 'Currency', '_ormbases': ['core.Object']},
            'code': ('django.db.models.fields.CharField', [], {'max_length': '3'}),
            'factor': ('django.db.models.fields.DecimalField', [], {'default': '1', 'max_digits': '10', 'decimal_places': '4'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_default': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'symbol': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True', 'blank': 'True'})
        },
        'finance.equity': {
            'Meta': {'ordering': "['-purchase_date']", 'object_name': 'Equity', '_ormbases': ['core.Object']},
            'amount': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'equity_type': ('django.db.models.fields.CharField', [], {'default': "'share'", 'max_length': '32'}),
            'issue_price': ('django.db.models.fields.DecimalField', [], {'max_digits': '20', 'decimal_places': '2'}),
            'issuer': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_equity_issued'", 'to': "orm['identities.Contact']"}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_equity_owned'", 'to': "orm['identities.Contact']"}),
            'purchase_date': ('django.db.models.fields.DateField', [], {'default': 'datetime.datetime.now'}),
            'sell_price': ('django.db.models.fields.DecimalField', [], {'max_digits': '20', 'decimal_places': '2'})
        },
        'finance.liability': {
            'Meta': {'ordering': "['-due_date']", 'object_name': 'Liability', '_ormbases': ['core.Object']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Account']"}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Category']", 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'due_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_liability_source'", 'to': "orm['identities.Contact']"}),
            'target': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_liability_target'", 'to': "orm['identities.Contact']"}),
            'value': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'value_currency': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Currency']"}),
            'value_display': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'})
        },
        'finance.tax': {
            'Meta': {'object_name': 'Tax', '_ormbases': ['core.Object']},
            'compound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'rate': ('django.db.models.fields.DecimalField', [], {'max_digits': '4', 'decimal_places': '2'})
        },
        'finance.transaction': {
            'Meta': {'ordering': "['-datetime']", 'object_name': 'Transaction', '_ormbases': ['core.Object']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Account']"}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Category']", 'null': 'True', 'blank': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'liability': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Liability']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_transaction_source'", 'to': "orm['identities.Contact']"}),
            'target': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_transaction_target'", 'to': "orm['identities.Contact']"}),
            'value': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'value_currency': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Currency']"}),
            'value_display': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.AccessEntity']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        }
    }

    complete_apps = ['finance']

########NEW FILE########
__FILENAME__ = models
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Finance module objects
"""

from django.db import models
from treeio.core.models import Object
from treeio.identities.models import Contact
from datetime import datetime
from django.core.urlresolvers import reverse
from django.utils.translation import ugettext as _
import math
from decimal import Decimal, ROUND_UP


class Currency(Object):

    "Currency Object"

    code = models.CharField(_('code'), max_length=3)
    name = models.CharField(_('name'), max_length=255)
    symbol = models.CharField(_('symbol'), max_length=1, blank=True, null=True,
                              help_text=_('If no symbol is entered, the 3 letter code will be used.'))
    factor = models.DecimalField(_('factor'), max_digits=10, decimal_places=4,
                                 help_text=_(
                                     'Specifies the ratio to the base currency, e.g. 1.324'),
                                 default=1)
    is_active = models.BooleanField(_('active'), default=True,
                                    help_text=_('The currency will be updated with daily exchange rates.'))
    is_default = models.BooleanField(_('default'), default=False,
                                     help_text=_('Make this the default currency.'))

    class Meta:
        verbose_name = _('currency')
        verbose_name_plural = _('currencies')

    def __unicode__(self):
        # return self.code
        if self.symbol:
            return "%s    %s" % (self.symbol, self.name)
        else:
            return "%s  %s" % (self.code, self.name)

    def save(self, **kwargs):
        try:
            default_currency = Currency.objects.get(is_default=True)
            if self.is_default and not self == default_currency:
                default_currency.is_default = False
                default_currency.save()
        except:
            pass
        super(Currency, self).save(**kwargs)


class Tax(Object):

    """ Tax model """
    name = models.CharField(max_length=512)
    rate = models.DecimalField(max_digits=4, decimal_places=2)
    compound = models.BooleanField(default=False)

    def __unicode__(self):
        # return self in unicode
        return unicode(self.name)


class Category(Object):

    """ Category model """
    name = models.CharField(max_length=512)
    details = models.TextField(blank=True, null=True)

    revenue = 0
    expense = 0

    def __unicode__(self):
        return unicode(self.name)


class Asset(Object):

    """ Asset model """
    name = models.CharField(max_length=512)
    asset_type = models.CharField(max_length=32,
                                  choices=(
                                      ('fixed', 'Fixed'), ('intangible', 'Intangible')),
                                  default='fixed')
    initial_value = models.DecimalField(
        max_digits=20, decimal_places=2, default=0)
    lifetime = models.DecimalField(
        max_digits=20, decimal_places=0, blank=True, null=True)
    endlife_value = models.DecimalField(
        max_digits=20, decimal_places=2, blank=True, null=True)
    depreciation_rate = models.DecimalField(
        max_digits=20, decimal_places=5, blank=True, null=True)
    depreciation_type = models.CharField(max_length=32, blank=True, null=True,
                                         choices=(('straight', 'Straight Line'),
                                                  ('reducing', 'Reducing balance')),
                                         default='straight')
    purchase_date = models.DateField(
        blank=True, null=True, default=datetime.now)
    current_value = models.DecimalField(
        max_digits=20, decimal_places=2, default=0)
    owner = models.ForeignKey(Contact)
    details = models.TextField(blank=True, null=True)

    class Meta:

        "Event"
        ordering = ['-purchase_date']

    def check_depreciate(self):
        "Check Depreciate"
        if (self.purchase_date and self.endlife_value is not None and self.initial_value and self.lifetime):
            return True
        else:
            return False

    def get_depreciation(self):
        "Get Depreciation"
        if self.check_depreciate():  # Edited by Renat

            self.set_rate()

            from_purchase = datetime.date(datetime.now()) - self.purchase_date
            days_from_purchase = from_purchase.days

            if days_from_purchase >= (self.lifetime * 365):
                return (self.initial_value - self.endlife_value).quantize(Decimal('.01'), rounding=ROUND_UP)

            straight = Decimal(((self.initial_value -
                                 self.endlife_value) / ((self.lifetime * 365)) *
                                days_from_purchase)).quantize(Decimal('.01'), rounding=ROUND_UP)

            if self.depreciation_type == 'reducing':
                i = self.initial_value
                daily_depreciation_rate = Decimal(str(1 - math.pow((self.endlife_value / self.initial_value),
                                                                   (1 / (self.lifetime * 365)))))
                for g in range(1, days_from_purchase):
                    i -= (i * daily_depreciation_rate)
                reducing = round(self.initial_value - i, 2)
                if reducing > straight:
                    return reducing.quantize(Decimal('.01'), rounding=ROUND_UP)
                else:
                    return straight.quantize(Decimal('.01'), rounding=ROUND_UP)

            elif self.depreciation_type == 'straight':
                return straight.quantize(Decimal('.01'), rounding=ROUND_UP)

            else:
                return Decimal('0.00')
        else:
            return Decimal('0.00')

    def set_rate(self):
        "Set Rate"
        if self.depreciation_type == 'straight':
            if self.lifetime:
                self.depreciation_rate = (100 /
                                          self.lifetime).quantize(Decimal('00.01'), rounding=ROUND_UP)

        elif self.depreciation_type == 'reducing':
            if not self.check_depreciate():
                return Decimal('0.00')
            self.depreciation_rate = Decimal(str(100 / (1 -
                                                        math.pow((self.endlife_value / self.initial_value),
                                                                 (1 / self.lifetime))))).quantize(Decimal('00.01'), rounding=ROUND_UP)
        else:
            return Decimal('0.00')
        if self.depreciation_rate == Decimal('100.00'):
            self.depreciation_rate = Decimal('99.99')

        self.save()
        return self

    def set_current_value(self):
        "Set current value"
        if not self.check_depreciate():
            return self.initial_value

        self.current_value = self.initial_value - self.get_depreciation()
        self.save()

        return self.current_value

    def __unicode__(self):
        return unicode(self.name)

    def get_absolute_url(self):
        "Returns absolute URL"
        try:
            return reverse('finance_asset_view', args=[self.id])
        except Exception:
            return ""


class Account(Object):

    """ Account model """
    name = models.CharField(max_length=512)
    owner = models.ForeignKey(Contact)
    balance = models.DecimalField(max_digits=20, decimal_places=2, default=0)
    balance_currency = models.ForeignKey(Currency)
    balance_display = models.DecimalField(
        max_digits=20, decimal_places=2, default=0)
    details = models.TextField(blank=True, null=True)

    class Meta:

        "Event"
        ordering = ['name']

    def get_balance(self):
        "Returns balance"
        bal = self.balance
        transactions = Transaction.objects.filter(account=self.id)
        for transaction in transactions:
            bal += transaction.get_relative_value()
        return bal

    def __unicode__(self):
        return unicode(self.name)

    def get_absolute_url(self):
        "Returns absolute URL"
        try:
            return reverse('finance_account_view', args=[self.id])
        except Exception:
            return ""


class Equity(Object):

    """ Equity model """
    equity_type = models.CharField(max_length=32,
                                   choices=(('share', 'Ordinary Share'), ('preferred', 'Preferred'),
                                            ('warrant', 'Warrant')),
                                   default='share')
    issue_price = models.DecimalField(max_digits=20, decimal_places=2)
    sell_price = models.DecimalField(max_digits=20, decimal_places=2)
    issuer = models.ForeignKey(Contact, related_name='finance_equity_issued')
    owner = models.ForeignKey(Contact, related_name='finance_equity_owned')
    amount = models.PositiveIntegerField(default=1)
    purchase_date = models.DateField(default=datetime.now)
    details = models.TextField(blank=True, null=True)

    class Meta:

        "Event"
        ordering = ['-purchase_date']

    def __unicode__(self):
        return unicode(unicode(self.issuer) + " (" + unicode(self.equity_type) + ")")

    def get_absolute_url(self):
        "Returns absolute URL"
        try:
            return reverse('finance_equity_view', args=[self.id])
        except Exception:
            return ""


class Liability(Object):

    """ Liability model, used for both Liabilities and Receivables """
    name = models.CharField(max_length=512)
    source = models.ForeignKey(
        Contact, related_name='finance_liability_source')
    target = models.ForeignKey(
        Contact, related_name='finance_liability_target')
    category = models.ForeignKey(
        Category, blank=True, null=True, on_delete=models.SET_NULL)
    account = models.ForeignKey(Account)
    due_date = models.DateField(blank=True, null=True)
    value = models.DecimalField(default=0, max_digits=20, decimal_places=2)
    value_currency = models.ForeignKey(Currency)
    value_display = models.DecimalField(
        default=0, max_digits=20, decimal_places=2)
    details = models.TextField(blank=True)

    class Meta:

        "Event"
        ordering = ['-due_date']

    def __unicode__(self):
        return unicode(self.name)

    def get_absolute_url(self):
        "Returns absolute URL"
        try:
            return reverse('finance_liability_view', args=[self.id])
        except Exception:
            return ""

    def is_receivable(self):
        "Returns True if self is receivable relative to self.account"
        return self.account.owner == self.target


class Transaction(Object):

    """ Transaction model """
    name = models.CharField(max_length=512)
    source = models.ForeignKey(
        Contact, related_name='finance_transaction_source')
    target = models.ForeignKey(
        Contact, related_name='finance_transaction_target')
    liability = models.ForeignKey(
        Liability, blank=True, null=True, on_delete=models.SET_NULL)
    category = models.ForeignKey(
        Category, blank=True, null=True, on_delete=models.SET_NULL)
    account = models.ForeignKey(Account)
    datetime = models.DateTimeField(default=datetime.now)
    value = models.DecimalField(default=0, max_digits=20, decimal_places=2)
    value_currency = models.ForeignKey(Currency)
    value_display = models.DecimalField(
        default=0, max_digits=20, decimal_places=2)
    details = models.TextField(blank=True)

    class Meta:

        "Event"
        ordering = ['-datetime']

    def __unicode__(self):
        return unicode(self.name)

    def get_relative_value(self):
        "Get Relative Value"
        if self.trash:
            return 0
        elif self.account.owner_id == self.source_id:
            return -abs(self.value)
        elif self.account.owner_id == self.target_id:
            return abs(self.value)
        else:
            return 0

    def get_absolute_url(self):
        "Returns absolute URL"
        try:
            return reverse('finance_transaction_view', args=[self.id])
        except Exception:
            return ""

########NEW FILE########
__FILENAME__ = finance
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Finance templatetags
"""
from coffin import template
from treeio.core.rendering import render_to_string
from jinja2 import contextfunction, Markup
from django.template import RequestContext

register = template.Library()


@contextfunction
def finance_transaction_list(context, transactions, skip_group=False):
    "Print a list of orders"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('finance/tags/transaction_list',
                                   {'transactions': transactions,
                                       'skip_group': skip_group},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))


@contextfunction
def finance_liability_list(context, liabilities, skip_group=False):
    "Print a list of orders"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('finance/tags/liability_list',
                                   {'liabilities': liabilities,
                                       'skip_group': skip_group},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))


register.object(finance_transaction_list)
register.object(finance_liability_list)

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Finance: test suites
"""

from django.test import TestCase
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser
from treeio.core.models import User, Group, Perspective, ModuleSetting, Object
from treeio.finance.models import Transaction, Liability, Category, Account, Equity, Asset, Currency, Tax
from treeio.identities.models import Contact, ContactType


class FinanceModelsTest(TestCase):

    "Finance models tests"

    def test_model_category(self):
        "Test category model"
        obj = Category(name='test')
        obj.save()
        self.assertEquals('test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_tax(self):
        "Test tax model"
        obj = Tax(name='test', rate=10)
        obj.save()
        self.assertEquals('test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_equity(self):
        "Test equity model"
        contact_type = ContactType(name='test')
        contact_type.save()

        contact = Contact(name='test', contact_type=contact_type)
        contact.save()

        obj = Equity(
            issue_price=10, sell_price=10, issuer=contact, owner=contact)
        obj.save()
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_asset(self):
        "Test asset model"
        contact_type = ContactType(name='test')
        contact_type.save()

        contact = Contact(name='test', contact_type=contact_type)
        contact.save()

        obj = Asset(name='test', owner=contact)
        obj.save()
        self.assertEquals('test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_liability(self):
        "Test liability model"
        contact_type = ContactType(name='test')
        contact_type.save()

        contact = Contact(name='test', contact_type=contact_type)
        contact.save()

        currency = Currency(code="GBP",
                            name="Pounds",
                            symbol="L",
                            is_default=True)
        currency.save()

        account = Account(
            name='test', owner=contact, balance_currency=currency)
        account.save()

        obj = Liability(name='test',
                        source=contact,
                        target=contact,
                        account=account,
                        value=10,
                        value_currency=currency)
        obj.save()
        self.assertEquals('test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_account(self):
        "Test account model"
        contact_type = ContactType(name='test')
        contact_type.save()

        contact = Contact(name='test', contact_type=contact_type)
        contact.save()

        currency = Currency(code="GBP",
                            name="Pounds",
                            symbol="L",
                            is_default=True)
        currency.save()

        obj = Account(name='test', owner=contact,
                      balance_currency=currency)
        obj.save()
        self.assertEquals('test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_transaction(self):
        "Test transaction model"
        contact_type = ContactType(name='test')
        contact_type.save()

        contact = Contact(name='test', contact_type=contact_type)
        contact.save()

        currency = Currency(code="GBP",
                            name="Pounds",
                            symbol="L",
                            is_default=True)
        currency.save()

        account = Account(
            name='test', owner=contact, balance_currency=currency)
        account.save()

        obj = Transaction(name='test',
                          account=account,
                          source=contact,
                          target=contact,
                          value=10,
                          value_currency=currency)
        obj.save()
        self.assertEquals('test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()


class FinanceViewsTest(TestCase):

    "Finance functional tests for views"

    username = "test"
    password = "password"
    prepared = False

    def setUp(self):
        "Initial Setup"
        if not self.prepared:
            # Clean up first
            Object.objects.all().delete()
            User.objects.all().delete()

            # Create objects
            self.group, created = Group.objects.get_or_create(name='test')
            duser, created = DjangoUser.objects.get_or_create(
                username=self.username)
            duser.set_password(self.password)
            duser.save()
            self.user, created = User.objects.get_or_create(user=duser)
            self.user.save()
            perspective, created = Perspective.objects.get_or_create(
                name='default')
            perspective.set_default_user()
            perspective.save()
            ModuleSetting.set('default_perspective', perspective.id)

            self.contact_type = ContactType(name='test')
            self.contact_type.set_default_user()
            self.contact_type.save()

            self.contact = Contact(name='test', contact_type=self.contact_type)
            self.contact.set_default_user()
            self.contact.save()

            self.category = Category(name='test')
            self.category.set_default_user()
            self.category.save()

            self.equity = Equity(
                issue_price=10, sell_price=10, issuer=self.contact, owner=self.contact)
            self.equity.set_default_user()
            self.equity.save()

            self.asset = Asset(name='test', owner=self.contact)
            self.asset.set_default_user()
            self.asset.save()

            self.tax = Tax(name='test', rate=10)
            self.tax.set_default_user()
            self.tax.save()

            self.currency = Currency(code="GBP",
                                     name="Pounds",
                                     symbol="L",
                                     is_default=True)
            self.currency.set_default_user()
            self.currency.save()

            self.account = Account(
                name='test', owner=self.contact, balance_currency=self.currency)
            self.account.set_default_user()
            self.account.save()

            self.liability = Liability(name='test',
                                       source=self.contact,
                                       target=self.contact,
                                       account=self.account,
                                       value=10,
                                       value_currency=self.currency)
            self.liability.set_default_user()
            self.liability.save()

            self.transaction = Transaction(name='test', account=self.account, source=self.contact,
                                           target=self.contact, value=10, value_currency=self.currency)
            self.transaction.set_default_user()
            self.transaction.save()

            self.client = Client()

            self.prepared = True

    ######################################
    # Testing views when user is logged in
    ######################################
    def test_finance_login(self):
        "Test index page with login at /finance/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('finance'))
        self.assertEquals(response.status_code, 200)

    def test_finance_index_login(self):
        "Test index page with login at /finance/index/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('finance_index_transactions'))
        self.assertEquals(response.status_code, 200)

    def test_finance_income(self):
        "Test index page with login at /finance/income/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('finance_income_view'))
        self.assertEquals(response.status_code, 200)

    def test_finance_balance(self):
        "Test index page with login at /finance/balance/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('finance_balance_sheet'))
        self.assertEquals(response.status_code, 200)

    # Account
    def test_finance_accounts_index(self):
        "Test index page with login at /finance/accounts/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('finance_index_accounts'))
        self.assertEquals(response.status_code, 200)

    def test_finance_account_add(self):
        "Test index page with login at /finance/account/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('finance_account_add'))
        self.assertEquals(response.status_code, 200)

    def test_finance_account_edit(self):
        "Test index page with login at /finance/account/edit/<account_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_account_edit', args=[self.account.id]))
        self.assertEquals(response.status_code, 200)

    def test_finance_account_view(self):
        "Test index page with login at /finance/account/view/<account_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_account_view', args=[self.account.id]))
        self.assertEquals(response.status_code, 200)

    def test_finance_account_delete(self):
        "Test index page with login at /finance/account/delete/<account_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_account_delete', args=[self.account.id]))
        self.assertEquals(response.status_code, 200)

    # Asset
    def test_finance_assets_index(self):
        "Test index page with login at /finance/assets/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('finance_index_assets'))
        self.assertEquals(response.status_code, 200)

    def test_finance_asset_add(self):
        "Test index page with login at /finance/asset/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('finance_asset_add'))
        self.assertEquals(response.status_code, 200)

    def test_finance_asset_edit(self):
        "Test index page with login at /finance/asset/edit/<asset_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_asset_edit', args=[self.asset.id]))
        self.assertEquals(response.status_code, 200)

    def test_finance_asset_view(self):
        "Test index page with login at /finance/asset/view/<asset_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_asset_view', args=[self.asset.id]))
        self.assertEquals(response.status_code, 200)

    def test_finance_asset_delete(self):
        "Test index page with login at /finance/asset/delete/<asset_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_asset_delete', args=[self.asset.id]))
        self.assertEquals(response.status_code, 200)

    # Equity
    def test_finance_equity_index(self):
        "Test index page with login at /finance/equity/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('finance_index_equities'))
        self.assertEquals(response.status_code, 200)

    def test_finance_equity_add(self):
        "Test index page with login at /finance/equity/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('finance_equity_add'))
        self.assertEquals(response.status_code, 200)

    def test_finance_equity_edit(self):
        "Test index page with login at /finance/equity/edit/<equity_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_equity_edit', args=[self.equity.id]))
        self.assertEquals(response.status_code, 200)

    def test_finance_equity_view(self):
        "Test index page with login at /finance/equity/view/<equity_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_equity_view', args=[self.equity.id]))
        self.assertEquals(response.status_code, 200)

    def test_finance_equity_delete(self):
        "Test index page with login at /finance/equity/delete/<equity_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_equity_delete', args=[self.equity.id]))
        self.assertEquals(response.status_code, 200)

    # Transaction
    def test_finance_transactions_index(self):
        "Test index page with login at /finance/transaction/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('finance_index_transactions'))
        self.assertEquals(response.status_code, 200)

    def test_finance_transaction_add(self):
        "Test index page with login at /finance/transaction/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('finance_transaction_add'))
        self.assertEquals(response.status_code, 200)

    def test_finance_transaction_add_liability(self):
        "Test index page with login at /finance/transaction/add/liability/(?P<liability_id>\d+)"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_transaction_add', args=[self.liability.id]))
        self.assertEquals(response.status_code, 200)

    def test_finance_transaction_edit(self):
        "Test index page with login at /finance/transaction/edit/<transaction_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_transaction_edit', args=[self.transaction.id]))
        self.assertEquals(response.status_code, 200)

    def test_finance_transaction_view(self):
        "Test index page with login at /finance/transaction/view/<transaction_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_transaction_view', args=[self.transaction.id]))
        self.assertEquals(response.status_code, 200)

    def test_finance_transaction_delete(self):
        "Test index page with login at /finance/transaction/delete/<transaction_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_transaction_delete', args=[self.transaction.id]))
        self.assertEquals(response.status_code, 200)

    # Liability
    def test_finance_liability_index(self):
        "Test index page with login at /finance/liability/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('finance_index_liabilities'))
        self.assertEquals(response.status_code, 200)

    def test_finance_liability_add(self):
        "Test index page with login at /finance/liability/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('finance_liability_add'))
        self.assertEquals(response.status_code, 200)

    def test_finance_liability_edit(self):
        "Test index page with login at /finance/liability/edit/<liability_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_liability_edit', args=[self.liability.id]))
        self.assertEquals(response.status_code, 200)

    def test_finance_liability_view(self):
        "Test index page with login at /finance/liability/view/<liability_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_liability_view', args=[self.liability.id]))
        self.assertEquals(response.status_code, 200)

    def test_finance_liability_delete(self):
        "Test index page with login at /finance/liability/delete/<liability_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_liability_delete', args=[self.liability.id]))
        self.assertEquals(response.status_code, 200)

     # Receivables
    def test_finance_receivables_index(self):
        "Test index page with login at /finance/receivables/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('finance_index_receivables'))
        self.assertEquals(response.status_code, 200)

    def test_finance_receivable_add(self):
        "Test index page with login at /finance/receivable/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('finance_receivable_add'))
        self.assertEquals(response.status_code, 200)

    def test_finance_receivable_edit(self):
        "Test index page with login at /finance/receivable/edit/<receivable_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_receivable_edit', args=[self.liability.id]))
        self.assertEquals(response.status_code, 200)

    def test_finance_receivable_view(self):
        "Test index page with login at /finance/receivable/view/<receivable_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_receivable_view', args=[self.liability.id]))
        self.assertEquals(response.status_code, 200)

    def test_finance_receivable_delete(self):
        "Test index page with login at /finance/liability/delete/<receivable_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_receivable_delete', args=[self.liability.id]))
        self.assertEquals(response.status_code, 200)

     # Category
    def test_finance_category_add(self):
        "Test index page with login at /finance/category/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('finance_category_add'))
        self.assertEquals(response.status_code, 200)

    def test_finance_category_edit(self):
        "Test index page with login at /finance/category/edit/<category_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_category_edit', args=[self.category.id]))
        self.assertEquals(response.status_code, 200)

    def test_finance_category_view(self):
        "Test index page with login at /finance/category/view/<category_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_category_view', args=[self.category.id]))
        self.assertEquals(response.status_code, 200)

    def test_finance_category_delete(self):
        "Test index page with login at /finance/category/delete/<category_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_category_delete', args=[self.category.id]))
        self.assertEquals(response.status_code, 200)

     # Currency
    def test_finance_currency_add(self):
        "Test index page with login at /finance/currency/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('finance_currency_add'))
        self.assertEquals(response.status_code, 200)

    def test_finance_currency_edit(self):
        "Test index page with login at /finance/currency/edit/<currency_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_currency_edit', args=[self.currency.id]))
        self.assertEquals(response.status_code, 200)

    def test_finance_currency_view(self):
        "Test index page with login at /finance/currency/view/<currency_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_currency_view', args=[self.currency.id]))
        self.assertEquals(response.status_code, 200)

    def test_finance_currency_delete(self):
        "Test index page with login at /finance/currency/delete/<currency_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_currency_delete', args=[self.currency.id]))
        self.assertEquals(response.status_code, 200)

     # Taxes
    def test_finance_tax_add(self):
        "Test index page with login at /finance/tax/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('finance_tax_add'))
        self.assertEquals(response.status_code, 200)

    def test_finance_tax_edit(self):
        "Test index page with login at /finance/tax/edit/<tax_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_tax_edit', args=[self.tax.id]))
        self.assertEquals(response.status_code, 200)

    def test_finance_tax_view(self):
        "Test index page with login at /finance/tax/view/<tax_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_tax_view', args=[self.tax.id]))
        self.assertEquals(response.status_code, 200)

    def test_finance_tax_delete(self):
        "Test index page with login at /finance/tax/delete/<tax_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('finance_tax_delete', args=[self.tax.id]))
        self.assertEquals(response.status_code, 200)

    # Settings
    def test_finance_settings_view(self):
        "Test index page with login at /finance/settings/view/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('finance_settings_view'))
        self.assertEquals(response.status_code, 200)

    def test_finance_settings_edit(self):
        "Test index page with login at /finance/settings/edit/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('finance_settings_edit'))
        self.assertEquals(response.status_code, 200)

    ######################################
    # Testing views when user is not logged in
    ######################################
    def test_index(self):
        "Test index page at /finance/"
        response = self.client.get('/finance/')
        # Redirects as unauthenticated
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_index_out(self):
        "Testing /finance/index/"
        response = self.client.get(reverse('finance_index_transactions'))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_income_out(self):
        "Testing /finance/income/"
        response = self.client.get(reverse('finance_income_view'))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_balance_out(self):
        "Testing /finance/balance/"
        response = self.client.get(reverse('finance_balance_sheet'))
        self.assertRedirects(response, reverse('user_login'))

    # Account
    def test_finance_accounts_index_out(self):
        "Testing /finance/accounts/"
        response = self.client.get(reverse('finance_index_accounts'))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_account_add_out(self):
        "Testing /finance/account/add/"
        response = self.client.get(reverse('finance_account_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_account_edit_out(self):
        "Testing /finance/account/edit/<account_id>"
        response = self.client.get(
            reverse('finance_account_edit', args=[self.account.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_account_view_out(self):
        "Testing /finance/account/view/<account_id>"
        response = self.client.get(
            reverse('finance_account_view', args=[self.account.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_account_delete_out(self):
        "Testing /finance/account/delete/<account_id>"
        response = self.client.get(
            reverse('finance_account_delete', args=[self.account.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Asset
    def test_finance_assets_index_out(self):
        "Testing /finance/assets/"
        response = self.client.get(reverse('finance_index_assets'))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_asset_add_out(self):
        "Testing /finance/asset/add/"
        response = self.client.get(reverse('finance_asset_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_asset_edit_out(self):
        "Testing /finance/asset/edit/<asset_id>"
        response = self.client.get(
            reverse('finance_asset_edit', args=[self.asset.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_asset_view_out(self):
        "Testing /finance/asset/view/<asset_id>"
        response = self.client.get(
            reverse('finance_asset_view', args=[self.asset.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_asset_delete_out(self):
        "Testing /finance/asset/delete/<asset_id>"
        response = self.client.get(
            reverse('finance_asset_delete', args=[self.asset.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Equity
    def test_finance_equity_index_out(self):
        "Testing /finance/equity/"
        response = self.client.get(reverse('finance_index_equities'))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_equity_add_out(self):
        "Testing /finance/equity/add/"
        response = self.client.get(reverse('finance_equity_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_equity_edit_out(self):
        "Tesing /finance/equity/edit/<equity_id>"
        response = self.client.get(
            reverse('finance_equity_edit', args=[self.equity.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_equity_view_out(self):
        "Testing /finance/equity/view/<equity_id>"
        response = self.client.get(
            reverse('finance_equity_view', args=[self.equity.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_equity_delete_out(self):
        "Testing /finance/equity/delete/<equity_id>"
        response = self.client.get(
            reverse('finance_equity_delete', args=[self.equity.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Transaction
    def test_finance_transactions_index_out(self):
        "Testing /finance/transaction/"
        response = self.client.get(reverse('finance_index_transactions'))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_transaction_add_out(self):
        "Testing /finance/transaction/add/"
        response = self.client.get(reverse('finance_transaction_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_transaction_add_liability_out(self):
        "Testing /finance/transaction/add/liability/(?P<liability_id>\d+)"
        response = self.client.get(
            reverse('finance_transaction_add', args=[self.liability.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_transaction_edit_out(self):
        "Testing /finance/transaction/edit/<transaction_id>"
        response = self.client.get(
            reverse('finance_transaction_edit', args=[self.transaction.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_transaction_view_out(self):
        "Testing /finance/transaction/view/<transaction_id>"
        response = self.client.get(
            reverse('finance_transaction_view', args=[self.transaction.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_transaction_delete_out(self):
        "Testing /finance/transaction/delete/<transaction_id>"
        response = self.client.get(
            reverse('finance_transaction_delete', args=[self.transaction.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Liability
    def test_finance_liability_index_out(self):
        "Testing /finance/liability/"
        response = self.client.get(reverse('finance_index_liabilities'))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_liability_add_out(self):
        "Testing /finance/liability/add/"
        response = self.client.get(reverse('finance_liability_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_liability_edit_out(self):
        "Testing /finance/liability/edit/<liability_id>"
        response = self.client.get(
            reverse('finance_liability_edit', args=[self.liability.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_liability_view_out(self):
        "Testing /finance/liability/view/<liability_id>"
        response = self.client.get(
            reverse('finance_liability_view', args=[self.liability.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_liability_delete_out(self):
        "Testing /finance/liability/delete/<liability_id>"
        response = self.client.get(
            reverse('finance_liability_delete', args=[self.liability.id]))
        self.assertRedirects(response, reverse('user_login'))

     # Receivables
    def test_finance_receivables_index_out(self):
        "Testing /finance/receivables/"
        response = self.client.get(reverse('finance_index_receivables'))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_receivable_add_out(self):
        "Testing /finance/receivable/add/"
        response = self.client.get(reverse('finance_receivable_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_receivable_edit_out(self):
        "Testing /finance/receivable/edit/<receivable_id>"
        response = self.client.get(
            reverse('finance_receivable_edit', args=[self.liability.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_receivable_view_out(self):
        "Testing /finance/receivable/view/<receivable_id>"
        response = self.client.get(
            reverse('finance_receivable_view', args=[self.liability.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_receivable_delete_out(self):
        "Testing /finance/liability/delete/<receivable_id>"
        response = self.client.get(
            reverse('finance_receivable_delete', args=[self.liability.id]))
        self.assertRedirects(response, reverse('user_login'))

     # Category
    def test_finance_category_add_out(self):
        "Testing /finance/category/add/"
        response = self.client.get(reverse('finance_category_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_category_edit_out(self):
        "Testing /finance/category/edit/<category_id>"
        response = self.client.get(
            reverse('finance_category_edit', args=[self.category.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_category_view_out(self):
        "Testing /finance/category/view/<category_id>"
        response = self.client.get(
            reverse('finance_category_view', args=[self.category.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_category_delete_out(self):
        "Testing /finance/category/delete/<category_id>"
        response = self.client.get(
            reverse('finance_category_delete', args=[self.category.id]))
        self.assertRedirects(response, reverse('user_login'))

     # Currency
    def test_finance_currency_add_out(self):
        "Testing /finance/currency/add/"
        response = self.client.get(reverse('finance_currency_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_currency_edit_out(self):
        "Testing /finance/currency/edit/<currency_id>"
        response = self.client.get(
            reverse('finance_currency_edit', args=[self.currency.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_currency_view_out(self):
        "Testing /finance/currency/view/<currency_id>"
        response = self.client.get(
            reverse('finance_currency_view', args=[self.currency.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_currency_delete_out(self):
        "Testing /finance/currency/delete/<currency_id>"
        response = self.client.get(
            reverse('finance_currency_delete', args=[self.currency.id]))
        self.assertRedirects(response, reverse('user_login'))

     # Taxes
    def test_finance_tax_add_out(self):
        "Testing /finance/tax/add/"
        response = self.client.get(reverse('finance_tax_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_tax_edit_out(self):
        "Testing /finance/tax/edit/<tax_id>"
        response = self.client.get(
            reverse('finance_tax_edit', args=[self.tax.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_tax_view_out(self):
        "Testing /finance/tax/view/<tax_id>"
        response = self.client.get(
            reverse('finance_tax_view', args=[self.tax.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_tax_delete_out(self):
        "Testing /finance/tax/delete/<tax_id>"
        response = self.client.get(
            reverse('finance_tax_delete', args=[self.tax.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Settings
    def test_finance_settings_view_out(self):
        "Testing /finance/settings/view/"
        response = self.client.get(reverse('finance_settings_view'))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_settings_edit_out(self):
        "Testing /finance/settings/edit/"
        response = self.client.get(reverse('finance_settings_edit'))
        self.assertRedirects(response, reverse('user_login'))

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Finance module URLs
"""
from django.conf.urls.defaults import patterns, url

urlpatterns = patterns('treeio.finance.views',
                       url(r'^(\.(?P<response_format>\w+))?$',
                           'index_transactions', name='finance'),

                       url(r'^index(\.(?P<response_format>\w+))?$',
                           'index_transactions', name='finance_index_transactions'),
                       url(r'^categories(\.(?P<response_format>\w+))?/?$',
                           'index_categories', name='finance_categories'),
                       url(r'^income(\.(?P<response_format>\w+))?/?$',
                           'income_view', name='finance_income_view'),
                       url(r'^balance(\.(?P<response_format>\w+))?/?$',
                           'balance_sheet', name='finance_balance_sheet'),

                       # Accounts
                       url(r'^accounts(\.(?P<response_format>\w+))?/?$',
                           'index_accounts', name='finance_index_accounts'),
                       url(r'^account/add(\.(?P<response_format>\w+))?/?$',
                           'account_add', name='finance_account_add'),
                       url(r'^account/edit/(?P<account_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'account_edit', name='finance_account_edit'),
                       url(r'^account/view/(?P<account_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'account_view', name='finance_account_view'),
                       url(r'^account/delete/(?P<account_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'account_delete', name='finance_account_delete'),

                       # Assets
                       url(r'^assets(\.(?P<response_format>\w+))?/?$',
                           'index_assets', name='finance_index_assets'),
                       url(r'^asset/add(\.(?P<response_format>\w+))?/?$',
                           'asset_add', name='finance_asset_add'),
                       url(r'^asset/edit/(?P<asset_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'asset_edit', name='finance_asset_edit'),
                       url(r'^asset/view/(?P<asset_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'asset_view', name='finance_asset_view'),
                       url(r'^asset/delete/(?P<asset_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'asset_delete', name='finance_asset_delete'),

                       # Equities
                       url(r'^equities(\.(?P<response_format>\w+))?/?$',
                           'index_equities', name='finance_index_equities'),
                       url(r'^equity/add(\.(?P<response_format>\w+))?/?$',
                           'equity_add', name='finance_equity_add'),
                       url(r'^equity/edit/(?P<equity_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'equity_edit', name='finance_equity_edit'),
                       url(r'^equity/view/(?P<equity_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'equity_view', name='finance_equity_view'),
                       url(r'^equity/delete/(?P<equity_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'equity_delete', name='finance_equity_delete'),

                       # Transactions
                       url(r'^transactions(\.(?P<response_format>\w+))?/?$',
                           'index_transactions', name='finance_index_transactions'),
                       url(r'^transaction/add/order/(?P<order_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'transaction_add', name='finance_transaction_add_order'),
                       url(r'^transaction/add/(?P<liability_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'transaction_add', name='finance_transaction_add'),
                       url(r'^transaction/add(\.(?P<response_format>\w+))?/?$',
                           'transaction_add', name='finance_transaction_add'),
                       url(r'^transaction/edit/(?P<transaction_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'transaction_edit', name='finance_transaction_edit'),
                       url(r'^transaction/view/(?P<transaction_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'transaction_view', name='finance_transaction_view'),
                       url(r'^transaction/delete/(?P<transaction_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'transaction_delete', name='finance_transaction_delete'),

                       # Liabilities
                       url(r'^liabilities(\.(?P<response_format>\w+))?/?$',
                           'index_liabilities', name='finance_index_liabilities'),
                       url(r'^liability/add(\.(?P<response_format>\w+))?/?$',
                           'liability_add', name='finance_liability_add'),
                       url(r'^liability/edit/(?P<liability_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'liability_edit', name='finance_liability_edit'),
                       url(r'^liability/view/(?P<liability_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'liability_view', name='finance_liability_view'),
                       url(r'^liability/delete/(?P<liability_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'liability_delete', name='finance_liability_delete'),


                       # Receivables
                       url(r'^receivables(\.(?P<response_format>\w+))?/?$',
                           'index_receivables', name='finance_index_receivables'),
                       url(r'^receivable/add(\.(?P<response_format>\w+))?/?$',
                           'receivable_add', name='finance_receivable_add'),
                       url(r'^receivable/edit/(?P<receivable_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'receivable_edit', name='finance_receivable_edit'),
                       url(r'^receivable/view/(?P<receivable_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'receivable_view', name='finance_receivable_view'),
                       url(r'^receivable/delete/(?P<receivable_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'receivable_delete', name='finance_receivable_delete'),


                       # Categories
                       url(r'^category/add(\.(?P<response_format>\w+))?/?$',
                           'category_add', name='finance_category_add'),
                       url(r'^category/edit/(?P<category_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'category_edit', name='finance_category_edit'),
                       url(r'^category/view/(?P<category_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'category_view', name='finance_category_view'),
                       url(r'^category/delete/(?P<category_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'category_delete', name='finance_category_delete'),


                       # Currencies

                       url(r'^currency/add(\.(?P<response_format>\w+))?/?$',
                           'currency_add', name='finance_currency_add'),
                       url(r'^currency/edit/(?P<currency_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'currency_edit', name='finance_currency_edit'),
                       url(r'^currency/view/(?P<currency_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'currency_view', name='finance_currency_view'),
                       url(r'^currency/delete/(?P<currency_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'currency_delete', name='finance_currency_delete'),


                       # Taxes

                       url(r'^tax/add(\.(?P<response_format>\w+))?/?$',
                           'tax_add', name='finance_tax_add'),
                       url(r'^tax/edit/(?P<tax_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'tax_edit', name='finance_tax_edit'),
                       url(r'^tax/view/(?P<tax_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'tax_view', name='finance_tax_view'),
                       url(r'^tax/delete/(?P<tax_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'tax_delete', name='finance_tax_delete'),


                       # Settings
                       url(r'^settings/view(\.(?P<response_format>\w+))?/?$',
                           'settings_view', name='finance_settings_view'),
                       url(r'^settings/edit(\.(?P<response_format>\w+))?/?$',
                           'settings_edit', name='finance_settings_edit'),

                       )

########NEW FILE########
__FILENAME__ = views
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Finance Management module: views
"""
from django.shortcuts import get_object_or_404
from django.template import RequestContext
from django.http import HttpResponseRedirect
from django.core.urlresolvers import reverse
from django.db.models import Q, Sum
from treeio.core.rendering import render_to_response
from treeio.core.models import Object, ModuleSetting
from treeio.core.decorators import treeio_login_required, handle_response_format
from treeio.core.views import user_denied
from treeio.identities.models import Contact
from treeio.finance.forms import TransactionForm, LiabilityForm, AccountForm, EquityForm, AssetForm, \
    CategoryForm, MassActionForm, TransactionFilterForm, LiabilityFilterForm, \
    EquityFilterForm, AssetFilterForm, AccountFilterForm, ReceivableForm, \
    SettingsForm, CurrencyForm, TaxForm
from treeio.finance.models import Transaction, Liability, Category, Account, Equity, Asset, Currency, Tax
from treeio.finance.csvapi import ProcessTransactions
from treeio.sales.models import Product, SaleOrder
from treeio.sales.forms import dict_currencies
from treeio.finance.helpers import convert
from datetime import datetime, timedelta
from decimal import Decimal


def _get_filter_query(model, args):
    "Creates a query to filter Transactions based on FilterForm arguments"
    query = Q()

    for arg in args:
        if args[arg]:
            if hasattr(model, arg):
                kwargs = {str(arg + '__id'): long(args[arg])}
                query = query & Q(**kwargs)

    if 'datefrom' in args and args['datefrom']:
        datefrom = datetime.date(
            datetime.strptime(args['datefrom'], '%m/%d/%Y'))
        query = query & Q(date_created__gte=datefrom)

    if 'dateto' in args and args['dateto']:
        dateto = datetime.date(datetime.strptime(args['dateto'], '%m/%d/%Y'))
        query = query & Q(date_created__lte=dateto)

## Assets, Equities

    if 'purchase_date_from' in args and args['purchase_date_from']:
        purchase_date_from = datetime.date(
            datetime.strptime(args['purchase_date_from'], '%m/%d/%Y'))
        query = query & Q(purchase_date__gte=purchase_date_from)

    if 'purchase_date_to' in args and args['purchase_date_to']:
        purchase_date_to = datetime.date(
            datetime.strptime(args['purchase_date_to'], '%m/%d/%Y'))
        query = query & Q(purchase_date__lte=purchase_date_to)

## Liabilities, Receivables

    # Assets

    if 'due_date_from' in args and args['due_date_from']:
        due_date_from = datetime.date(
            datetime.strptime(args['due_date_from'], '%m/%d/%Y'))
        query = query & Q(due_date__gte=due_date_from)

    if 'due_date_to' in args and args['due_date_to']:
        due_date_to = datetime.date(
            datetime.strptime(args['due_date_to'], '%m/%d/%Y'))
        query = query & Q(due_date__lte=due_date_to)

    if 'equity_type' in args and args['equity_type']:
        equity_type = args['equity_type']
        query = query & Q(equity_type=equity_type)

    if 'asset_type' in args and args['asset_type']:
        asset_type = args['asset_type']
        query = query & Q(asset_type=asset_type)

    return query


#
# Categories
#

@handle_response_format
@treeio_login_required
def index_categories(request, response_format='html'):
    "Finance categories page"

    transactions = Object.filter_by_request(request, Transaction.objects)
    liabilities = Object.filter_by_request(request, Liability.objects)

    categories = Object.filter_by_request(request, Category.objects)

    return render_to_response('finance/index_categories',
                              {'categories': categories,
                               'transactions': transactions,
                               'liabilities': liabilities},
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def category_edit(request, category_id, response_format='html'):
    "category edit page"
    category = get_object_or_404(Category, pk=category_id)
    if request.POST:
        if not 'cancel' in request.POST:
            form = CategoryForm(
                request.user.get_profile(), request.POST, instance=category)
            if form.is_valid():
                category = form.save()
                return HttpResponseRedirect(reverse('finance_category_view', args=[category.id]))
        else:
            return HttpResponseRedirect(reverse('finance_category_view', args=[category.id]))
    else:
        form = CategoryForm(request.user.get_profile(), instance=category)
    return render_to_response('finance/category_edit',
                              {'form': form, 'category': category},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def category_add(request, response_format='html'):
    "new category form"
    categories = Object.filter_by_request(request, Category.objects, mode="r")
    if request.POST:
        if not 'cancel' in request.POST:
            category = Category()
            form = CategoryForm(
                request.user.get_profile(), request.POST, instance=category)
            if form.is_valid():
                category = form.save()
                category.set_user_from_request(request)
                return HttpResponseRedirect(reverse('finance_category_view', args=[category.id]))
        else:
            return HttpResponseRedirect(reverse('finance_categories'))
    else:
        form = CategoryForm(request.user.get_profile())
    return render_to_response('finance/category_add', {'form': form, 'categories': categories},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def category_view(request, category_id, response_format='html'):
    "Single category view page"
    category = get_object_or_404(Category, pk=category_id)

    if not request.user.get_profile().has_permission(category):
        return user_denied(request, message="You don't have access to this Category")

    if 'massform1' in request.POST:
        for key in request.POST:
            if 'mass-transaction' in key:
                try:
                    transaction = Transaction.objects.get(pk=request.POST[key])
                    form = MassActionForm(
                        request.user.get_profile(), request.POST, instance=transaction)
                    if form.is_valid() and request.user.get_profile().has_permission(transaction, mode='w'):
                        form.save()
                except Exception:
                    pass

    massform_transaction = MassActionForm(request.user.get_profile())

    if 'massform2' in request.POST:
        for key in request.POST:
            if 'mass-liability' in key:
                try:
                    liability = Liability.objects.get(pk=request.POST[key])
                    form = MassActionForm(
                        request.user.get_profile(), request.POST, instance=liability)
                    if form.is_valid() and request.user.get_profile().has_permission(liability, mode='w'):
                        form.save()
                except Exception:
                    pass

    massform_liability = MassActionForm(request.user.get_profile())

    transactions = Object.filter_by_request(request, Transaction.objects)
    liabilities = Object.filter_by_request(request, Liability.objects)

    return render_to_response('finance/category_view',
                              {'category': category,
                               'transactions': transactions,
                               'liabilities': liabilities,
                               'massform_transaction': massform_transaction,
                               'massform_liability': massform_liability},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def category_delete(request, category_id, response_format='html'):
    "Category delete"

    category = get_object_or_404(Category, pk=category_id)
    if not request.user.get_profile().has_permission(category, mode='w'):
        return user_denied(request, "You don't have access to this Category", response_format)

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                category.trash = True
                category.save()
            else:
                category.delete()
            return HttpResponseRedirect(reverse('finance_settings_view'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('finance_category_view', args=[category.id]))

    return render_to_response('finance/category_delete',
                              {'category': category},
                              context_instance=RequestContext(request), response_format=response_format)


#
# Accounts
#


@handle_response_format
@treeio_login_required
def account_edit(request, account_id, response_format='html'):
    "account edit page"
    account = get_object_or_404(Account, pk=account_id)
    if request.POST:
        if not 'cancel' in request.POST:
            form = AccountForm(
                request.user.get_profile(), request.POST, instance=account)
            if form.is_valid():
                account = form.save(commit=False)
                convert(account, 'balance')
                return HttpResponseRedirect(reverse('finance_account_view', args=[account.id]))
        else:
            return HttpResponseRedirect(reverse('finance_account_view', args=[account.id]))

    else:
        form = AccountForm(request.user.get_profile(), instance=account)
    return render_to_response('finance/account_edit',
                              {'form': form, 'account': account},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def account_add(request, response_format='html'):
    "new account form"
    if request.POST:
        if not 'cancel' in request.POST:
            account = Account()
            form = AccountForm(
                request.user.get_profile(), request.POST, instance=account)
            if form.is_valid():
                account = form.save(commit=False)
                convert(account, 'balance')
                account.set_user_from_request(request)
                return HttpResponseRedirect(reverse('finance_account_view', args=[account.id]))
        else:
            return HttpResponseRedirect(reverse('finance_index_accounts'))
    else:
        form = AccountForm(request.user.get_profile())
    return render_to_response('finance/account_add', {'form': form},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def account_view(request, account_id, response_format='html'):
    "Single transaction view page"
    account = get_object_or_404(Account, pk=account_id)
    return render_to_response('finance/account_view',
                              {'account': account},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def account_delete(request, account_id, response_format='html'):
    "Account delete"

    account = get_object_or_404(Account, pk=account_id)
    if not request.user.get_profile().has_permission(account, mode='w'):
        return user_denied(request, "You don't have access to this Account", response_format)

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                account.trash = True
                account.save()
            else:
                account.delete()
            return HttpResponseRedirect(reverse('finance_index_accounts'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('finance_account_view', args=[account.id]))

    return render_to_response('finance/account_delete',
                              {'account': account},
                              context_instance=RequestContext(request), response_format=response_format)

#
# Assets
#


@handle_response_format
@treeio_login_required
def index_assets(request, response_format='html'):
    "Index_assets page: displays all Assets"

    if request.GET:
        query = _get_filter_query(Asset, request.GET)
    else:
        query = Q()

    filters = AssetFilterForm(request.user.get_profile(), 'title', request.GET)

    assets = Object.filter_by_request(
        request, Asset.objects.filter(query), mode="r")

    return render_to_response('finance/index_assets',
                              {'assets': assets,
                               'filters': filters
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def asset_edit(request, asset_id, response_format='html'):
    "asset edit page"
    asset = get_object_or_404(Asset, pk=asset_id)
    if request.POST:
        if not 'cancel' in request.POST:
            form = AssetForm(
                request.user.get_profile(), request.POST, instance=asset)
            if form.is_valid():
                asset = form.save()
                return HttpResponseRedirect(reverse('finance_asset_view', args=[asset.id]))
        else:
            return HttpResponseRedirect(reverse('finance_asset_view', args=[asset.id]))
    else:
        form = AssetForm(request.user.get_profile(), instance=asset)
    return render_to_response('finance/asset_edit',
                              {'form': form, 'asset': asset},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def asset_add(request, response_format='html'):
    "new asset form"
    assets = Object.filter_by_request(request, Asset.objects, mode="r")
    if request.POST:
        if not 'cancel' in request.POST:
            asset = Asset()
            form = AssetForm(
                request.user.get_profile(), request.POST, instance=asset)
            if form.is_valid():
                asset = form.save()
                asset.set_user_from_request(request)
                return HttpResponseRedirect(reverse('finance_asset_view', args=[asset.id]))
        else:
            return HttpResponseRedirect(reverse('finance_index_assets'))
    else:
        form = AssetForm(request.user.get_profile())
    return render_to_response('finance/asset_add', {'form': form, 'assets': assets},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def asset_view(request, asset_id, response_format='html'):
    "Single transaction view page"
    asset = get_object_or_404(Asset, pk=asset_id)
    return render_to_response('finance/asset_view',
                              {'asset': asset},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def asset_delete(request, asset_id, response_format='html'):
    "Asset delete"

    asset = get_object_or_404(Asset, pk=asset_id)
    if not request.user.get_profile().has_permission(asset, mode='w'):
        return user_denied(request, "You don't have access to this Asset", response_format)

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                asset.trash = True
                asset.save()
            else:
                asset.delete()
            return HttpResponseRedirect(reverse('finance_index_assets'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('finance_asset_view', args=[asset.id]))

    return render_to_response('finance/asset_delete',
                              {'asset': asset},
                              context_instance=RequestContext(request), response_format=response_format)

#
# Equities
#


@handle_response_format
@treeio_login_required
def index_equities(request, response_format='html'):
    "Index_equities page: displays all Equities"
    if request.GET:
        query = _get_filter_query(Equity, request.GET)
    else:
        query = Q()

    filters = EquityFilterForm(
        request.user.get_profile(), 'title', request.GET)

    equities = Object.filter_by_request(
        request, Equity.objects.filter(query), mode="r")

    return render_to_response('finance/index_equities',
                              {'equities': equities,
                               'filters': filters
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def equity_edit(request, equity_id, response_format='html'):
    "equity edit page"
    equity = get_object_or_404(Equity, pk=equity_id)
    if request.POST:
        if not 'cancel' in request.POST:
            form = EquityForm(
                request.user.get_profile(), request.POST, instance=equity)
            if form.is_valid():
                equity = form.save()
                return HttpResponseRedirect(reverse('finance_equity_view', args=[equity.id]))
        else:
            return HttpResponseRedirect(reverse('finance_equity_view', args=[equity.id]))
    else:
        form = EquityForm(request.user.get_profile(), instance=equity)
    return render_to_response('finance/equity_edit',
                              {'form': form, 'equity': equity},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def equity_add(request, response_format='html'):
    "new equity form"
    equities = Object.filter_by_request(request, Equity.objects, mode="r")
    if request.POST:
        if not 'cancel' in request.POST:
            equity = Equity()
            form = EquityForm(
                request.user.get_profile(), request.POST, instance=equity)
            if form.is_valid():
                equity = form.save()
                equity.set_user_from_request(request)
                return HttpResponseRedirect(reverse('finance_equity_view', args=[equity.id]))
        else:
            return HttpResponseRedirect(reverse('finance_index_equities'))
    else:
        form = EquityForm(request.user.get_profile())
    return render_to_response('finance/equity_add', {'form': form, 'equities': equities},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def equity_view(request, equity_id, response_format='html'):
    "Single transaction view page"
    equity = get_object_or_404(Equity, pk=equity_id)
    return render_to_response('finance/equity_view',
                              {'equity': equity},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def equity_delete(request, equity_id, response_format='html'):
    "Equity delete"

    equity = get_object_or_404(Equity, pk=equity_id)
    if not request.user.get_profile().has_permission(equity, mode='w'):
        return user_denied(request, "You don't have access to this Equity", response_format)

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                equity.trash = True
                equity.save()
            else:
                equity.delete()
            return HttpResponseRedirect(reverse('finance_index_equities'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('finance_equity_view', args=[equity.id]))

    return render_to_response('finance/equity_delete',
                              {'equity': equity},
                              context_instance=RequestContext(request), response_format=response_format)

#
# Transactions
#


@handle_response_format
@treeio_login_required
def index_transactions(request, response_format='html'):
    "Index_transactions page: displays all Transactions"
    if request.GET:
        query = _get_filter_query(Transaction, request.GET)
    else:
        query = Q()

    if 'massform' in request.POST:
        for key in request.POST:
            if 'mass-transaction' in key:
                try:
                    transaction = Transaction.objects.get(pk=request.POST[key])
                    form = MassActionForm(
                        request.user.get_profile(), request.POST, instance=transaction)
                    if form.is_valid() and request.user.get_profile().has_permission(transaction, mode='w'):
                        form.save()
                except:
                    pass

    massform = MassActionForm(request.user.get_profile())

    transactions = Object.filter_by_request(
        request, Transaction.objects.filter(query), mode="r")

    filters = TransactionFilterForm(
        request.user.get_profile(), 'title', request.GET)

    return render_to_response('finance/index_transactions',
                              {'transactions': transactions,
                               'massform': massform,
                               'filters': filters
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def transaction_add(request, liability_id=None, order_id=None, response_format='html'):
    "new transaction form"
    transactions = Object.filter_by_request(
        request, Transaction.objects, mode="r")
    if request.POST:
        if not 'cancel' in request.POST:
            transaction = Transaction()
            form = TransactionForm(
                request.user.get_profile(), None, None, request.POST, instance=transaction)
            if form.is_valid():
                transaction = form.save(commit=False)
                convert(transaction, 'value')
                transaction.set_user_from_request(request)
                if order_id:
                    try:
                        order = SaleOrder.objects.get(pk=order_id)
                        order.payment.add(transaction)
                        order.save()
                    except:
                        pass
                return HttpResponseRedirect(reverse('finance_transaction_view', args=[transaction.id]))
        else:
            return HttpResponseRedirect(reverse('finance_index_transactions'))
    else:
        form = TransactionForm(
            request.user.get_profile(), liability_id=liability_id, order_id=order_id)
    return render_to_response('finance/transaction_add', {'form': form, 'transactions': transactions},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def transaction_edit(request, transaction_id, response_format='html'):
    "Transaction edit page"
    transaction = get_object_or_404(Transaction, pk=transaction_id)
    if request.POST:
        if not 'cancel' in request.POST:
            form = TransactionForm(
                request.user.get_profile(), None, None, request.POST, instance=transaction)
            if form.is_valid():
                transaction = form.save(commit=False)
                convert(transaction, 'value')
                return HttpResponseRedirect(reverse('finance_transaction_view', args=[transaction.id]))
        else:
            return HttpResponseRedirect(reverse('finance_transaction_view', args=[transaction.id]))
    else:
        form = TransactionForm(
            request.user.get_profile(), None, None, instance=transaction)
    return render_to_response('finance/transaction_edit',
                              {'form': form, 'transaction': transaction},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def transaction_view(request, transaction_id, response_format='html'):
    "Single transaction view page"
    transaction = get_object_or_404(Transaction, pk=transaction_id)
    return render_to_response('finance/transaction_view',
                              {'transaction': transaction},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def transaction_delete(request, transaction_id, response_format='html'):
    "Transaction delete"

    transaction = get_object_or_404(Transaction, pk=transaction_id)
    if not request.user.get_profile().has_permission(transaction, mode='w'):
        return user_denied(request, "You don't have access to this Transaction", response_format)

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                transaction.trash = True
                transaction.save()
            else:
                transaction.delete()
            return HttpResponseRedirect(reverse('finance_index_transactions'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('finance_transaction_view', args=[transaction.id]))

    return render_to_response('finance/transaction_delete',
                              {'transaction': transaction},
                              context_instance=RequestContext(request), response_format=response_format)
#
# Liabilities
#


@handle_response_format
@treeio_login_required
def index_liabilities(request, response_format='html'):
    "Index_liabilities page: displays all Liabilities"
    if request.GET:
        query = _get_filter_query(Liability, request.GET)
    else:
        query = Q()

    if 'massform' in request.POST:
        for key in request.POST:
            if 'mass-liability' in key:
                try:
                    liability = Liability.objects.get(pk=request.POST[key])
                    form = MassActionForm(
                        request.user.get_profile(), request.POST, instance=liability)
                    if form.is_valid() and request.user.get_profile().has_permission(liability, mode='w'):
                        form.save()
                except Exception:
                    pass

    massform = MassActionForm(request.user.get_profile())

    filters = LiabilityFilterForm(
        request.user.get_profile(), 'title', request.GET)

    liabilities = Object.filter_by_request(
        request, Liability.objects.filter(query), mode="r")

    template_liabilities = []
    for liability in liabilities:
        if liability.account.owner_id == liability.source_id:
            template_liabilities.append(liability)

    return render_to_response('finance/index_liabilities',
                              {'liabilities': template_liabilities,
                               'massform': massform,
                               'filters': filters
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def liability_edit(request, liability_id, response_format='html'):
    "liability edit page"
    liability = get_object_or_404(Liability, pk=liability_id)
    if request.POST:
        if not 'cancel' in request.POST:
            form = LiabilityForm(
                request.user.get_profile(), request.POST, instance=liability)
            if form.is_valid():
                liability = form.save(commit=False)
                convert(liability, 'value')
                return HttpResponseRedirect(reverse('finance_liability_view', args=[liability.id]))
        else:
            return HttpResponseRedirect(reverse('finance_liability_view', args=[liability.id]))
    else:
        form = LiabilityForm(request.user.get_profile(), instance=liability)
    return render_to_response('finance/liability_edit',
                              {'form': form, 'liability': liability},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def liability_add(request, response_format='html'):
    "new liability form"
    liabilities = Object.filter_by_request(
        request, Liability.objects, mode="r")
    if request.POST:
        if not 'cancel' in request.POST:
            liability = Liability()
            form = LiabilityForm(
                request.user.get_profile(), request.POST, instance=liability)
            if form.is_valid():
                liability = form.save(commit=False)
                liability.source = liability.account.owner
                convert(liability, 'value')
                liability.set_user_from_request(request)
                return HttpResponseRedirect(reverse('finance_liability_view', args=[liability.id]))
        else:
            return HttpResponseRedirect(reverse('finance_index_liabilities'))
    else:
        form = LiabilityForm(request.user.get_profile())
    return render_to_response('finance/liability_add', {'form': form, 'liabilities': liabilities},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def liability_view(request, liability_id, response_format='html'):
    "Single transaction view page"
    liability = get_object_or_404(Liability, pk=liability_id)

    transactions = liability.transaction_set.all()

    return render_to_response('finance/liability_view',
                              {'liability': liability,
                               'transactions': transactions},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def liability_delete(request, liability_id, response_format='html'):
    "Liability delete"

    liability = get_object_or_404(Liability, pk=liability_id)
    if not request.user.get_profile().has_permission(liability, mode='w'):
        return user_denied(request, "You don't have access to this Liability", response_format)

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                liability.trash = True
                liability.save()
            else:
                liability.delete()
            return HttpResponseRedirect(reverse('finance_index_liabilities'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('finance_liability_view', args=[liability.id]))

    return render_to_response('finance/liability_delete',
                              {'liability': liability},
                              context_instance=RequestContext(request), response_format=response_format)


#
# Receivables
#

@handle_response_format
@treeio_login_required
def index_receivables(request, response_format='html'):
    "Index_receivables page: displays all Liabilities"
    if request.GET:
        query = _get_filter_query(Liability, request.GET)
    else:
        query = Q()

    if 'massform' in request.POST:
        for key in request.POST:
            if 'mass-liability' in key:
                try:
                    liability = Liability.objects.get(pk=request.POST[key])
                    form = MassActionForm(
                        request.user.get_profile(), request.POST, instance=liability)
                    if form.is_valid() and request.user.get_profile().has_permission(liability, mode='w'):
                        form.save()
                except Exception:
                    pass

    massform = MassActionForm(request.user.get_profile())

    filters = LiabilityFilterForm(
        request.user.get_profile(), 'title', request.GET)

    receivables = Object.filter_by_request(
        request, Liability.objects.filter(query), mode="r")

    template_receivables = []
    for receivable in receivables:
        if receivable.account.owner_id == receivable.target_id:
            template_receivables.append(receivable)

    return render_to_response('finance/index_receivables',
                              {'liabilities': template_receivables,
                               'filters': filters,
                               'massform': massform},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def receivable_add(request, response_format='html'):
    "new receivable form"
    if request.POST:
        if not 'cancel' in request.POST:
            receivable = Liability()
            form = ReceivableForm(
                request.user.get_profile(), request.POST, instance=receivable)
            if form.is_valid():
                receivable = form.save(commit=False)
                receivable.target = receivable.account.owner
                convert(receivable, 'value')
                receivable.set_user_from_request(request)
                return HttpResponseRedirect(reverse('finance_receivable_view', args=[receivable.id]))
        else:
            return HttpResponseRedirect(reverse('finance_index_receivables'))
    else:
        form = ReceivableForm(request.user.get_profile())
    return render_to_response('finance/receivable_add', {'form': form},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def receivable_edit(request, receivable_id, response_format='html'):
    "Liability edit page"
    receivable = get_object_or_404(Liability, pk=receivable_id)
    if request.POST:
        if not 'cancel' in request.POST:
            form = ReceivableForm(
                request.user.get_profile(), request.POST, instance=receivable)
            if form.is_valid():
                receivable = form.save(commit=False)
                convert(receivable, 'value')
                return HttpResponseRedirect(reverse('finance_receivable_view', args=[receivable.id]))
        else:
            return HttpResponseRedirect(reverse('finance_receivable_view', args=[receivable.id]))
    else:
        form = ReceivableForm(request.user.get_profile(), instance=receivable)
    return render_to_response('finance/receivable_edit',
                              {'form': form, 'liability': receivable},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def receivable_view(request, receivable_id, response_format='html'):
    "Single receivable view page"
    receivable = get_object_or_404(Liability, pk=receivable_id)
    transactions = receivable.transaction_set.all()

    return render_to_response('finance/receivable_view',
                              {'liability': receivable,
                               'transactions': transactions},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def receivable_delete(request, receivable_id, response_format='html'):
    "Receivable delete"

    receivable = get_object_or_404(Liability, pk=receivable_id)
    if not request.user.get_profile().has_permission(receivable, mode='w'):
        return user_denied(request, "You don't have access to this Receivable", response_format)

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                receivable.trash = True
                receivable.save()
            else:
                receivable.delete()
            return HttpResponseRedirect(reverse('finance_index_receivables'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('finance_receivable_view', args=[receivable.id]))

    return render_to_response('finance/receivable_delete',
                              {'liability': receivable},
                              context_instance=RequestContext(request), response_format=response_format)

#
# Reports
#


@handle_response_format
@treeio_login_required
def income_view(request, response_format='html'):
    "Income Statement view page"

    try:
        conf = ModuleSetting.get_for_module('treeio.finance', 'my_company')[0]
        my_company = Contact.objects.get(pk=long(conf.value), trash=False)

    except Exception:
        my_company = None

    if my_company:
        categories = Category.objects.filter(trash=False)
        transactions = Transaction.objects.filter(
            account__owner=my_company, trash=False)
    else:
        categories = Object.filter_by_request(request, Category.objects)
        transactions = Object.filter_by_request(request, Transaction.objects)

    total = 0
    revenues = 0
    expenses = 0

    if my_company:
        # Receivables
        for receivable in Liability.objects.filter(target=my_company, trash=False):
            value = receivable.value
            paid = receivable.transaction_set.filter(
                source=my_company, trash=False).aggregate(Sum('value'))
            if paid['value__sum']:
                value = receivable.value - paid['value__sum']
            if value > 0:
                revenues += value
                total += value

                for category in categories:
                    if receivable.category == category:
                        category.revenue += value

    # Actual Transactions
    for transaction in transactions:
        val = transaction.get_relative_value()
        total += val
        if val > 0:
            revenues += val
        else:
            expenses += abs(val)

    for category in categories:
        for transaction in transactions:
            if transaction.category == category:
                val = transaction.get_relative_value()
                if val > 0:
                    category.revenue += val
                else:
                    category.expense += abs(val)

    return render_to_response('finance/income_view',
                              {'transactions': transactions,
                               'categories': categories,
                               'total': total,
                               'revenues': revenues,
                               'expenses': expenses
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def balance_sheet(request, response_format='html'):
    "Balance Sheet view page"

    balance = {'assets_fixed': Decimal('0.0'),
               'assets_intangible': Decimal('0.0'),
               'assets_inventories': Decimal('0.0'),
               'assets_receivables': Decimal('0.0'),
               'assets_prepayments': Decimal('0.0'),
               'assets_cash': Decimal('0.0'),
               'assets_total': Decimal('0.0'),
               'liabilities_borrowings': Decimal('0.0'),
               'liabilities_payables': Decimal('0.0'),
               'liabilities_total': Decimal('0.0'),
               'equity_share_capital': Decimal('0.0'),
               'equity_share_premium': Decimal('0.0'),
               'equity_retained': Decimal('0.0'),
               'equity_total': Decimal('0.0'),
               'equity_liabilities_total': Decimal('0.0')}

    try:
        conf = ModuleSetting.get_for_module('treeio.finance', 'my_company')[0]
        my_company = Contact.objects.get(pk=long(conf.value), trash=False)
    except:
        my_company = None

    if my_company:

        # Assets Fixed and Intangible
        for asset in Asset.objects.filter(owner=my_company, current_value__gt=0, trash=False):
            if asset.asset_type == 'fixed':
                balance['assets_fixed'] += asset.current_value
            elif asset.asset_type == 'intangible':
                balance['assets_intangible'] += asset.current_value

        # Inventories
        for product in Product.objects.filter(active=True, buy_price__isnull=False, stock_quantity__gt=0,
                                              trash=False):
            balance['assets_inventories'] += product.buy_price * \
                product.stock_quantity

        # Receivables
        for receivable in Liability.objects.filter(target=my_company, trash=False):
            value = receivable.value
            paid = receivable.transaction_set.filter(
                source=my_company, trash=False).aggregate(Sum('value'))
            if paid['value__sum']:
                value = receivable.value - paid['value__sum']
            balance['assets_receivables'] += value
            balance['equity_retained'] += value

        # Assets Cash
        for account in Account.objects.filter(owner=my_company, trash=False):
            account_balance = account.get_balance()
            if account_balance > 0:
                balance['assets_cash'] += account_balance

        # Prepayments (and Liabilities, since retrieving Liabilities anyway)
        for liability in Liability.objects.filter(source=my_company, trash=False):
            value = liability.value
            paid = liability.transaction_set.filter(
                source=my_company, trash=False).aggregate(Sum('value'))
            if paid['value__sum']:
                value = liability.value - paid['value__sum']
            if value > 0:
                # If Due Date is more than a year from now, that's a borrowing
                if liability.due_date and liability.due_date >= (datetime.today() + timedelta(days=365)).date():
                    balance['liabilities_borrowings'] += value
                else:
                    balance['liabilities_payables'] += value
            else:
                balance['assets_prepayments'] += -value

        # Assets Total
        balance['assets_total'] = balance['assets_fixed']
        balance['assets_total'] += balance['assets_intangible']
        balance['assets_total'] += balance['assets_inventories']
        balance['assets_total'] += balance['assets_receivables']
        balance['assets_total'] += balance['assets_prepayments']
        balance['assets_total'] += balance['assets_cash']

        # Liabilities Total
        balance['liabilities_total'] += balance['liabilities_borrowings']
        balance['liabilities_total'] += balance['liabilities_payables']

        # Shares
        for share in Equity.objects.filter(issuer=my_company, trash=False):
            capital = share.issue_price * share.amount
            premium = (share.sell_price - share.issue_price) * share.amount
            balance['equity_share_capital'] += capital
            balance['equity_share_premium'] += premium

        # Retained Revenues calculated out of Transactions
        for transaction in Transaction.objects.filter(account__owner=my_company, trash=False):
            balance['equity_retained'] += transaction.get_relative_value()

        # Total Equities
        balance['equity_total'] = balance['equity_share_capital']
        balance['equity_total'] += balance['equity_share_premium']
        balance['equity_total'] += balance['equity_retained']

        # Total Equities + Liabilities
        balance['equity_liabilities_total'] = balance[
            'equity_total'] + balance['liabilities_total']

    context = {'company': my_company, 'today': datetime.today(), 'red': False}
    if balance['equity_liabilities_total'] != balance['assets_total']:
        context['red'] = True

    context.update(balance)

    return render_to_response('finance/balance_sheet', context,
                              context_instance=RequestContext(request), response_format=response_format)


#
# Settings
#
@handle_response_format
@treeio_login_required
def index_accounts(request, response_format='html'):
    "Settings"

    if not request.user.get_profile().is_admin('treeio.finance'):
        return user_denied(request, message="You don't have administrator access to the Finance module")

    if request.GET:
        query = _get_filter_query(Account, request.GET)
    else:
        query = Q()

    filters = AccountFilterForm(
        request.user.get_profile(), 'title', request.GET)

    all_accounts = Object.filter_by_request(
        request, Account.objects.filter(query))

    return render_to_response('finance/index_accounts',
                              {
                                  'accounts': all_accounts,
                                  'filters': filters
                              },
                              context_instance=RequestContext(request), response_format=response_format)

#
# Settings
#


@treeio_login_required
@handle_response_format
def settings_view(request, response_format='html'):
    "Settings"

    # default currency
    if not request.user.get_profile().is_admin('treeio.finance'):
        return user_denied(request, message="You don't have administrator access to the Finance module")

    try:
        default_currency = Currency.objects.get(is_default=True)
    except Exception:
        default_currency = "$"

    # default company
    try:
        conf = ModuleSetting.get_for_module('treeio.finance', 'my_company')[0]
        my_company = Contact.objects.get(pk=long(conf.value))

    except Exception:
        my_company = None

    # default account
    try:
        conf = ModuleSetting.get_for_module(
            'treeio.finance', 'default_account')[0]
        default_account = Account.objects.get(pk=long(conf.value))
    except Exception:
        default_account = None

    # check not trashed
    if my_company:
        if my_company.trash:
            my_company = None
    if default_account:
        if default_account.trash:
            default_account = None

    categories = Object.filter_by_request(
        request, Category.objects.filter(trash=False))

    # all currencies
    currencies = Object.filter_by_request(
        request, Currency.objects.filter(trash=False))

    if request.GET and 'export' in request.GET:
        transactions = Transaction.objects.filter(trash=False)
        # Export all contacts into a CSV file
        export = ProcessTransactions()
        return export.export_transactions(transactions)

    if request.POST:
        if 'file' in request.FILES:
            csv_file = request.FILES['file']

            # TODO: check file extension
            content = csv_file.read()
            Import = ProcessTransactions()
            Import.import_transactions(content)

    return render_to_response('finance/settings_view',
                              {
                                  'default_account': default_account,
                                  'default_currency': default_currency,
                                  'my_company': my_company,
                                  'categories': categories,
                                  'currencies': currencies,
                              },
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def settings_edit(request, response_format='html'):
    "Settings"

    if not request.user.get_profile().is_admin('treeio.finance'):
        return user_denied(request, message="You don't have administrator access to the Finance module")

    if request.POST:
        if not 'cancel' in request.POST:
            form = SettingsForm(request.user.get_profile(), request.POST)
            if form.is_valid():
                form.save()
                return HttpResponseRedirect(reverse('finance_settings_view'))
        else:
            return HttpResponseRedirect(reverse('finance_settings_view'))
    else:
        form = SettingsForm(request.user.get_profile())

    return render_to_response('finance/settings_edit',
                              {
                                  'form': form,
                              },
                              context_instance=RequestContext(request), response_format=response_format)


#
# Currency
#

@treeio_login_required
@handle_response_format
def currency_add(request, response_format='html'):
    "Currency add"

    if not request.user.get_profile().is_admin('treeio.finance'):
        return user_denied(request, message="You don't have administrator access to the Finance module")

    if request.POST:
        if not 'cancel' in request.POST:
            currency = Currency()
            form = CurrencyForm(
                request.user.get_profile(), request.POST, instance=currency)
            if form.is_valid():
                currency = form.save(commit=False)
                cname = dict_currencies[currency.code]
                currency.name = cname[cname.index(' ') + 2:]
                # currency.factor = 1.0 #Get currency conversion here
                currency.save()
                currency.set_user_from_request(request)
                return HttpResponseRedirect(reverse('finance_currency_view', args=[currency.id]))
        else:
            return HttpResponseRedirect(reverse('finance_settings_view'))
    else:
        form = CurrencyForm(request.user.get_profile())

    return render_to_response('finance/currency_add',
                              {'form': form,
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def currency_edit(request, currency_id, response_format='html'):
    "Currency edit"

    currency = get_object_or_404(Currency, pk=currency_id)
    if not request.user.get_profile().has_permission(currency, mode='w') \
            and not request.user.get_profile().is_admin('treeio_finance'):
        return user_denied(request, "You don't have access to this Currency", response_format)

    if request.POST:
        if not 'cancel' in request.POST:
            form = CurrencyForm(
                request.user.get_profile(), request.POST, instance=currency)
            if form.is_valid():
                currency = form.save()
                return HttpResponseRedirect(reverse('finance_currency_view', args=[currency.id]))
        else:
            return HttpResponseRedirect(reverse('finance_currency_view', args=[currency.id]))
    else:
        form = CurrencyForm(request.user.get_profile(), instance=currency)

    return render_to_response('finance/currency_edit',
                              {'form': form,
                               'currency': currency},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def currency_view(request, currency_id, response_format='html'):
    "View a currency"

    currency = get_object_or_404(Currency, pk=currency_id)
    if not request.user.get_profile().has_permission(currency, mode='r') \
            and not request.user.get_profile().is_admin('treeio_finance'):
        return user_denied(request, "You don't have access to this Currency", response_format)

    return render_to_response('finance/currency_view',
                              {'currency': currency},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def currency_delete(request, currency_id, response_format='html'):
    "Currency delete"

    currency = get_object_or_404(Currency, pk=currency_id)
    if not request.user.get_profile().has_permission(currency, mode='w'):
        return user_denied(request, "You don't have access to this Currency", response_format)

    if currency.is_default:
        return user_denied(request, "You cannot delete the Base Currency", response_format)

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                currency.trash = True
                currency.save()
            else:
                currency.delete()
            return HttpResponseRedirect(reverse('finance_settings_view'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('finance_currency_view', args=[currency.id]))

    return render_to_response('finance/currency_delete',
                              {'currency': currency},
                              context_instance=RequestContext(request), response_format=response_format)

#
# Tax
#


@treeio_login_required
@handle_response_format
def tax_add(request, response_format='html'):
    "Tax add"

    if not request.user.get_profile().is_admin('treeio.finance'):
        return user_denied(request, message="You don't have administrator access to the Finance module")

    if request.POST:
        if not 'cancel' in request.POST:
            tax = Tax()
            form = TaxForm(
                request.user.get_profile(), request.POST, instance=tax)
            if form.is_valid():
                tax = form.save()
                tax.set_user_from_request(request)
                return HttpResponseRedirect(reverse('finance_tax_view', args=[tax.id]))
        else:
            return HttpResponseRedirect(reverse('finance_settings_view'))
    else:
        form = TaxForm(request.user.get_profile())

    return render_to_response('finance/tax_add',
                              {'form': form,
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def tax_edit(request, tax_id, response_format='html'):
    "Tax edit"

    tax = get_object_or_404(Tax, pk=tax_id)
    if not request.user.get_profile().has_permission(tax, mode='w') \
            and not request.user.get_profile().is_admin('treeio_finance'):
        return user_denied(request, "You don't have access to this Tax", response_format)

    if request.POST:
        if not 'cancel' in request.POST:
            form = TaxForm(
                request.user.get_profile(), request.POST, instance=tax)
            if form.is_valid():
                tax = form.save()
                return HttpResponseRedirect(reverse('finance_tax_view', args=[tax.id]))
        else:
            return HttpResponseRedirect(reverse('finance_tax_view', args=[tax.id]))
    else:
        form = TaxForm(request.user.get_profile(), instance=tax)

    return render_to_response('finance/tax_edit',
                              {'form': form,
                               'tax': tax},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def tax_view(request, tax_id, response_format='html'):
    "View a tax"

    tax = get_object_or_404(Tax, pk=tax_id)
    if not request.user.get_profile().has_permission(tax, mode='r') \
            and not request.user.get_profile().is_admin('treeio_finance'):
        return user_denied(request, "You don't have access to this Tax", response_format)

    return render_to_response('finance/tax_view',
                              {'tax': tax},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def tax_delete(request, tax_id, response_format='html'):
    "Tax delete"

    tax = get_object_or_404(Tax, pk=tax_id)
    if not request.user.get_profile().has_permission(tax, mode='w'):
        return user_denied(request, "You don't have access to this Tax", response_format)

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                tax.trash = True
                tax.save()
            else:
                tax.delete()
            return HttpResponseRedirect(reverse('finance_settings_view'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('finance_tax_view', args=[tax.id]))

    return render_to_response('finance/tax_delete',
                              {'tax': tax},
                              context_instance=RequestContext(request), response_format=response_format)

########NEW FILE########
__FILENAME__ = formats
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Format localization for English (British) language
"""

DATE_FORMAT = "j F Y"
DATETIME_FORMAT = "j F Y, g:i a"
SHORT_DATE_FORMAT = "d/m/Y"
SHORT_DATETIME_FORMAT = "d/m/Y, H:i"
TIME_FORMAT = "g:i a"
SHORT_TIME_FORMAT = "H:i"

########NEW FILE########
__FILENAME__ = formats
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Format localization for Russian language
"""

DATE_FORMAT = "j F Y"
DATETIME_FORMAT = "j F Y, H:i"
SHORT_DATE_FORMAT = "d.m.Y"
SHORT_DATETIME_FORMAT = "d.m.Y, H:i"
TIME_FORMAT = "H:i"
SHORT_TIME_FORMAT = "H:i"

########NEW FILE########
__FILENAME__ = admin
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Identities: backend admin definitions
"""

from treeio.identities.models import Contact, ContactType, ContactField, ContactValue
from django.contrib import admin


class ContactAdmin(admin.ModelAdmin):

    "Contact backend definition"
    list_display = ('name', 'contact_type')
    list_filter = ['contact_type']


class ContactTypeAdmin(admin.ModelAdmin):

    "ContactType backend definition"
    list_display = ['name']


class ContactFieldAdmin(admin.ModelAdmin):

    "ContactField backend definition"
    list_display = ('name', 'label', 'field_type')
    list_filter = ['field_type']


class ContactValueAdmin(admin.ModelAdmin):

    "ContactValue backend definition"
    list_display = ('field', 'contact')
    list_filter = ['field']


admin.site.register(Contact, ContactAdmin)
admin.site.register(ContactType, ContactTypeAdmin)
admin.site.register(ContactField, ContactFieldAdmin)
admin.site.register(ContactValue, ContactValueAdmin)

########NEW FILE########
__FILENAME__ = handlers
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding:utf-8 -*-

from __future__ import absolute_import, with_statement

__all__ = ['ContactFieldHandler', 'ContactTypeHandler', 'ContactHandler']

from treeio.core.api.utils import rc
from treeio.identities.models import ContactField, ContactType, Contact
from treeio.identities.forms import ContactForm, ContactTypeForm, ContactFieldForm
from treeio.core.api.handlers import ObjectHandler, getOrNone


class ContactFieldHandler(ObjectHandler):
    "Entrypoint for ContactField model."

    model = ContactField
    form = ContactFieldForm

    @staticmethod
    def resource_uri():
        return ('api_identities_fields', ['id'])

    def flatten_dict(self, request):
        return {'data': super(ObjectHandler, self).flatten_dict(request.data)}

    def check_create_permission(self, request, mode):
        return request.user.get_profile().is_admin('treeio.identities')


class ContactTypeHandler(ObjectHandler):
    "Entrypoint for ContactType model."

    model = ContactType
    form = ContactTypeForm
    fields = ('id',) + ContactTypeForm._meta.fields

    @staticmethod
    def resource_uri():
        return ('api_identities_types', ['id'])

    def check_create_permission(self, request, mode):
        return request.user.get_profile().is_admin('treeio.identities')


class ContactHandler(ObjectHandler):
    "Entrypoint for Contact model."
    model = Contact
    form = ContactForm
    fields = ['id', ('contactvalue_set', ('name', 'value'))] + \
        [i.name for i in model._meta.local_fields if i.name != 'object_ptr']

    @staticmethod
    def resource_uri():
        return ('api_identities_contacts', ['id'])

    def create_instance(self, request, *args, **kwargs):
        return None

    def check_create_permission(self, request, mode):
        type_pk = request.REQUEST.get('type')
        try:
            request.contact_type = ContactType.objects.get(pk=type_pk)
            return request.user.get_profile().has_permission(request.contact_type, mode='x')
        except ContactType.DoesNotExist:
            return True

    def create(self, request, *args, **kwargs):
        if request.data is None:
            return rc.BAD_REQUEST

        contact_type = getOrNone(ContactType, request.data.get('contact_type'))
        if not contact_type or not request.user.get_profile().has_permission(contact_type, mode='x'):
            return rc.FORBIDDEN

        attrs = self.flatten_dict(request)

        form = ContactForm(contact_type=contact_type, **attrs)
        if form.is_valid():
            contact = form.save(request, contact_type)
            contact.set_user_from_request(request)
            return contact
        else:
            self.status = 400
            return form.errors

    def update(self, request, *args, **kwargs):
        if request.data is None:
            return rc.BAD_REQUEST

        pkfield = kwargs.get(self.model._meta.pk.name) or request.data.get(
            self.model._meta.pk.name)

        if not pkfield:
            return rc.BAD_REQUEST

        item = getOrNone(self.model, pkfield)
        if not item:
            return rc.NOT_FOUND

        if not request.user.get_profile().has_permission(item, mode="w"):
            return rc.FORBIDDEN

        attrs = self.flatten_dict(request)

        form = ContactForm(
            contact_type=item.contact_type, instance=item, **attrs)
        if form.is_valid():
            item = form.save(request)
            return item
        else:
            self.status = 400
            return form.errors

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

import json
from django.test import TestCase
from treeio.identities.models import Contact, ContactType, ContactField
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser
from treeio.core.models import User, Group, Perspective, ModuleSetting, Object


class IdentitiesHandlersTest(TestCase):

    "Identities Handler tests"
    username = "api_test"
    password = "api_password"
    prepared = False
    authentication_headers = {"CONTENT_TYPE": "application/json",
                              "HTTP_AUTHORIZATION": "Basic YXBpX3Rlc3Q6YXBpX3Bhc3N3b3Jk"}
    content_type = 'application/json'

    def setUp(self):
        "Initial Setup"

        if not self.prepared:
            # Clean up first
            Object.objects.all().delete()

            # Create objects
            try:
                self.group = Group.objects.get(name='test')
            except Group.DoesNotExist:
                Group.objects.all().delete()
                self.group = Group(name='test')
                self.group.save()

            try:
                self.user = DjangoUser.objects.get(username=self.username)
                self.user.set_password(self.password)
                try:
                    self.profile = self.user.get_profile()
                except Exception:
                    User.objects.all().delete()
                    self.user = DjangoUser(username=self.username, password='')
                    self.user.set_password(self.password)
                    self.user.save()
            except DjangoUser.DoesNotExist:
                User.objects.all().delete()
                self.user = DjangoUser(username=self.username, password='')
                self.user.set_password(self.password)
                self.user.save()

            try:
                perspective = Perspective.objects.get(name='default')
            except Perspective.DoesNotExist:
                Perspective.objects.all().delete()
                perspective = Perspective(name='default')
                perspective.save()
            ModuleSetting.set('default_perspective', perspective.id)

            self.contact_type = ContactType(name='Person')
            self.contact_type.set_default_user()
            self.contact_type.save()

            self.contact = Contact(name='Test', contact_type=self.contact_type)
            self.contact.set_default_user()
            self.contact.save()

            self.field = ContactField(
                name='Test', label='test', field_type='text')
            self.field.set_default_user()
            self.field.save()

            self.contact_type.fields.add(self.field)

            self.client = Client()

            self.prepared = True

    def test_unauthenticated_access(self):
        "Test index page at /api/identities/fields"
        response = self.client.get('/api/identities/fields')
        # Redirects as unauthenticated
        self.assertEquals(response.status_code, 401)

    def test_get_fields_list(self):
        """ Test index page api/identities/fields """
        response = self.client.get(
            path=reverse('api_identities_types'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_field(self):
        response = self.client.get(path=reverse('api_identities_fields', kwargs={
                                   'object_ptr': self.field.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_field(self):
        updates = {'name': 'Api_update', 'required': True,
                   'label': "api label", 'field_type': 'text'}
        response = self.client.put(path=reverse('api_identities_fields', kwargs={'object_ptr': self.field.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        self.assertEquals(data['required'], updates['required'])
        self.assertEquals(data['label'], updates['label'])
        self.assertEquals(data['field_type'], updates['field_type'])

    def test_get_types_list(self):
        """ Test index page api/identities/types """
        response = self.client.get(
            path=reverse('api_identities_types'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_type(self):
        response = self.client.get(path=reverse('api_identities_types', kwargs={
                                   'object_ptr': self.contact_type.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_type(self):
        updates = {'name': 'Api update',
                   'details': 'Api test details', 'fields': [self.field.id]}
        response = self.client.put(path=reverse('api_identities_types', kwargs={'object_ptr': self.contact_type.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        self.assertEquals(data['details'], updates['details'])
        for i, field in enumerate(data['fields']):
            self.assertEquals(field['id'], updates['fields'][i])
        self.assertEquals(data['details'], updates['details'])

    def test_get_contacts_list(self):
        """ Test index page api/identities/contacts """
        response = self.client.get(
            path=reverse('api_identities_contacts'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_contact(self):
        response = self.client.get(path=reverse('api_identities_contacts', kwargs={
                                   'object_ptr': self.contact.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_contact(self):
        updates = {'name': 'Api name test', 'contact_type':
                   self.contact_type.id, 'Test___0': 'Api test details'}
        response = self.client.put(path=reverse('api_identities_contacts', kwargs={'object_ptr': self.contact.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        self.assertEquals(data['contact_type']['id'], updates['contact_type'])
        self.assertEquals(
            data['contactvalue_set'][0]['value'], updates['Test___0'])

    def test_update_contact_with_picture(self):
        # create field
        updates = {'name': 'picture', 'required': True,
                   'label': "Picture", 'field_type': 'picture'}
        response = self.client.post(path=reverse('api_identities_fields'), content_type=self.content_type,
                                    data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        self.assertEquals(data['required'], updates['required'])
        self.assertEquals(data['label'], updates['label'])
        self.assertEquals(data['field_type'], updates['field_type'])
        field_id = data['id']

        # update contact type
        updates = {'name': 'Api type', 'details': 'Api test details',
                   'fields': [field_id, self.field.id]}
        response = self.client.put(path=reverse('api_identities_types', kwargs={'object_ptr': self.contact_type.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        self.assertEquals(data['details'], updates['details'])
        for field in data['fields']:
            self.assertIn(field['id'], updates['fields'])
        self.assertEquals(data['details'], updates['details'])

        # update user info and upload a image
        updates = {'name': 'Test user', 'contact_type': self.contact_type.id, 'Test___0': 'Api test details',
                   'picture___0': {"type": "base64", "name": "train", "content_type": "image/jpeg",
                                   "content": "/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAYEBAQFBAYFBQYJBgUGCQsIBgYICwwKCgsKCgwQDAwM\n"
                                   "DAwMEAwODxAPDgwTExQUExMcGxsbHCAgICAgICAgICD/2wBDAQcHBw0MDRgQEBgaFREVGiAgICAg\n"
                                   "ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICD/wAARCAIsApYDAREA\n"
                                   "AhEBAxEB/8QAHQABAAEFAQEBAAAAAAAAAAAAAAQBAgMFBgcICf/EAFwQAAEDAwICBgQJBgkHCQcF\n"
                                   "AAABAgMEBREGEiExBxMiQVFhCBQycRUjQlJigZGhsTNygpLB0RYkNVNzorKzwhg0NkOT0uElY2Z0\n"
                                   "g6Ol5PAmRFZ1tMPxFzdUVbX/xAAaAQEAAwEBAQAAAAAAAAAAAAAAAQIDBAUG/8QAMREBAAIBAQYD\n"
                                   "CAIBBQAAAAAAAAECAxEEEjEyQXEhgcEFEyIjM1Gx8GHRQkNygpGh/9oADAMBAAIRAxEAPwD6pAAA\n"
                                   "AAAAAAAAAAAAAAAAAAAAAAAAAAAUyAyAyAyBTIDIDIDcA3ANwDcAyAyAyBXIDIDIDIDIDIFcgAAA\n"
                                   "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmQKbgKLIBb1g\n"
                                   "FOtQCnWgU64CnXAOuQCnXIA65AHXIA61AHWoBXrAHWAN6AV3gOsArvAbwK7wK7wG4Cu4CuQK5AZA\n"
                                   "rkBkCoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRVAsVwGJ0wG\n"
                                   "F04GNakDGtUBatWniBYtaniBataniBRa1PEC315PEB68niBX11PECvrieIFfXE8QKpVp4gXJVeYF\n"
                                   "UqfMC5KkC5KjzAu68C7rkAr1oFetAqkoF3WAXJIBckgFyPAu3gV3AVyBXIFcgVyAAAAAAAAAAAAA\n"
                                   "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACiqBjc7AEaWbAEGWqAhy12O8CLJcUTvAwO\n"
                                   "ufmBgddU8QMTrsniBjW7t8QLVu/mBZ8Lp4gV+F0X5QFyXdMcwL23ZPEC9LoniBkS5p4gZEuSY5gZ\n"
                                   "W3JPEDI24J4gZW1yL3gZW1ieIGRKrzAvSpAvSoAvSfzAvScC9JgL0lAvSUC9JAL0kAvR4FyOAu3A\n"
                                   "VyBXIFcgMgVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWOUCLNJgDWVNTg\n"
                                   "DTVVdjvA1VRcsd4GtmunmBFfdPMCK+7eYEZ15x3gR3Xrj7QGNb19IC34bXGcgG3xV7wL/hz6WQMz\n"
                                   "b35gZm3r6QGZt5+kBmbePMCQy7eYGdl18wJMd1TxAkR3NPECSy4+YGdtf5gZmV+QMza1PEDM2rQD\n"
                                   "K2p8wMragDK2cDK2YDI2UDIkoF6SAXpIBejwLkeBduAruArkCuQK5AZAqAAAAAAAAAAAAAAAAAAA\n"
                                   "AAAAAAAAAAAAAAAAAAAAAAAAAAAMMrgNbVS4yBoa+q5gc7XVmM8QNBV3DHeBq5rj5gQZLn3ZAhyX\n"
                                   "Pn2gIUtzVO8CM+6Y+VxAwOuy59oC34WVe8CiXVfEC9t0XmrgMzbsviBIZdfFwGVt3+kBIju/D2gJ\n"
                                   "Ed37sgSY7v8ASAkR3b6QEyK74x2gJcd38wJcV2z3gSorn5gSo7ineoEqO457wJcdaniBnZWeYEll\n"
                                   "WgGdlSBnZOBlbMBlbMBkSYDIkoGRJALkeBejwLkcBduAu3AVyBXIDIFcgMgVAAAAAAAAAAAAAAAA\n"
                                   "AAAAAAAAAAAAAAAAAAAAAAAACjlAiTu4Aaatl4KBzFyqsZA5S41nMDnaqs58QNVUVfHGeAGvnrfM\n"
                                   "CDLWru4KBDkrVzzAiSVq+IGF1aBYtYviA9dUC5KxQMrK5U7wMiVygZmVy+IGZlcvjwAztuPLiBnj\n"
                                   "uC55gSo7kqLzAkR3PzAmR3XlxAlR3RfnATIrt5gTobpnvAnQXPzAmxXPPeBNhuHmBMirfMCYysTh\n"
                                   "xAkx1XHmBJZUgZ21HmBmbOBmbMBkbMBlbKBkbKBekgF6PAuR4FyPAuRwF24CuQKgVyBXIDIFQAAA\n"
                                   "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGN68AIFU/goHP3KfgoHIXap58QORuFTzA5ysqlA1VRU\n"
                                   "qBr56lc8wIEtSviBEkqFAwPm8wMSzAW9YA60CvXKBek6gXtnAvSoUDKlSoGRtSviBmbVqneBlZWL\n"
                                   "4gSG1nmBIjruQEiOuXvUCXHcFTvAlxXNeHECdFc18QJ9PcvMCfDc14cQNjDcuXECfDcc94E6Gu8w\n"
                                   "JkVb5gS46tPECSyqAzsqAM7ZwMzZwMzZgMjZQMiSgZEkAyJIBcjwL0eBcjgLkcBcjgLsgALgAFQA\n"
                                   "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAooGGVeAGsrH4RQOXus3MDirxU8wOPuNW1qqBz1XVIqga\n"
                                   "moqFAhS1CqBCkmAjvlAwueBbvApvAbgG4C7eBckgFySAXJIBkbMoF6TAXpOBkScDMyoAzsqwM8dU\n"
                                   "oEhlX54Alx13LiBNhuKN7wJ0Ny8wJ8NxVE5gbKnufLiBsYLj5gTobj5gT4q9FxxAmxV3mBLjrAJM\n"
                                   "dUBIZU+YEhlSBmbUIBmbOBlbMBlbKBkSUC9JAMiSAXo8C9HgXI4C9HAXIoFwACoAAAAAAAAAAAAA\n"
                                   "AAAAAAAAAAAAAAAAAAAsUDBM7gBpLhJwUDkbvPhFA4W71PF3EDjrjUcVA0NVPxUDWTTKBDkkAjue\n"
                                   "BicoFiqBTIFAAACuQK5ArkC7IFyOAuRwF+4C5HgZEkAyJKBkSUDM2dQM8dR5gSGVIEuOrAmxVq+I\n"
                                   "E+Cu8wNhBX+YGwgr+XaA2EFf5gbGGv8AMCdFWp4gTI6zzAlx1YEqOq8wJDKkCQyoAztnAzNnAzNm\n"
                                   "AytlAytkAytkAyNeBkRwGRHAXooF6KBUCoFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFAxuUCLUOw\n"
                                   "gHPXKXgoHFXuoxuA4G71GVXiByFwqO0oGlnn4gQZZMgRpHgYlUCxVAtApkAAAAVAAVAqBcBUC7IF\n"
                                   "yKBcigXo7xAvR4F6PAytkAytlAzxzqgEplQBKZVKBMhq+HMCfDW47wJ8NcvLIGwgrwNjBXYTioE6\n"
                                   "Gu8wJsVb5gTIqzzAlx1gEqOr8wJTKkDO2pAzsnAkNnAzNmAzNlAztkAyteBma8DK1wGRFAvQC4AB\n"
                                   "UAAAAAAAAAAAAAAAAAAAAAAAAAAAACigYXqBAq3cFA5m6y8wOFvsyrnAHAXeo4uA5OulVcgaiaQC\n"
                                   "I9wGJygY1UCgFAAFAAFQAFQAFUAvQCqAVAqgF6KBVAKpzAyAXtcBeiqBka/AGZkgEhkqgSI5wJUd\n"
                                   "TxAmwVeAJ8NaBOgq1VeYE6Cs44yBPjq1XkoE2GuAmRVarwyBMirMc1AlxVfmBLjqgJMdSBJZUgSY\n"
                                   "6gCSyYCQyTIGdkgEhrwMzXAZ2qBlRQLkAqBUAAAAAAAAAAAAAAAAAAAAAAAAAAAAC1wGCRQNZWu4\n"
                                   "KByd4kVMgcFfZ/aA8+u0vacBzFXLxA1krgI7lAsVQLQKAAKAAAFQAFQKogFyIBdgCoBEAuQC7AFy\n"
                                   "IBVALwKoBegF6AZGgZWqBma8DNG8CRHMBLimAmw1CoBLiqV5gToqzzAmQ1ffkCbDWATYqsCZFVgT\n"
                                   "YqrlhQJUdWgEuGpTxAlxVAEyKYCZHKBJjkAlMeBIjcBJjcBnaBegFwBAKgAAAAAAAAAAAAAAAAAA\n"
                                   "AAAAAAAAAscBGlUDVVzuCgcheH8HAee3569oDgbtJxUDmqt3ECA9QMKqBYAAoAAoAAqAwBUC7aBe\n"
                                   "jQL0YBVGgV2oBVGeADAFcAXe4CqIBdgC5ALsAXtQC9AL2gZEwBlYBmauAJDJAJDZPACVHKoElk6g\n"
                                   "S4qgCUyoAmw1XACZFVeYEyGq8wJkVUgE2Go5cQJsVSBPhqQNhFMBNikAlxyASo3gSo3ASWKBlQC5\n"
                                   "AKgVAAAAAAAAAAAAAAAAAAAAAAAAAAABjeBGmA09evZUDjry7g4Dz2+PzuA4K7O9oDmql3ECE4DE\n"
                                   "oFAAFAADAFcAALkaBkawDI2MDK2FQL0g4gXer8QK9TxAdVgC1YwK9WBbsAqjFAuRALscAKogF6IB\n"
                                   "c1OIGRG8QMiJlQMjUwBkTxAzNAyNUDOxQM7HgSGSASI5gJUUygSopuIEuKfiBNjqOIE2Cpx3gTYq\n"
                                   "nIGyp6jkBsoJwNjDKBOikRQJsTwJcbgJUbgJDVAvQCoFQAAAAAAAAAAAAAAAAAAAAAAAAAAAY3gR\n"
                                   "Zu8DS3DkoHG3vijgPPL4q4cBwd0xlQOcqF4qBDeBiAAAAFcAV2gNigXpGBlZEoEmKnAkx0meHeBI\n"
                                   "bRqncBkSjw3IF6Ui+AFvqoFvqqrxRALfVu7AGN1PjggGN1OoBYALUjXAFUYBVGdwF23AF23hkC9u\n"
                                   "QL2oBkanegGRnhzAyoncBeiKBmagGRucAZo1QDMxeOAM7Hq0CQyTCZAkxTASYp/MCbDP3oBOgnA2\n"
                                   "NPOBtaabkBtYJcgToZAJ8EgE6J4EyNwEljgMqKBcgFwAAAAAAAAAAAAAAAAAAAAAAAAAAAMbwIsw\n"
                                   "Gmr/AGVA42894Hnl++WBwV29pQObqeYENwGMCoDAF6NAvbGBekKgZW06gZoqVV7gJkVEvgBsILcv\n"
                                   "DKAT4rUvgBLZa/IDJ8FeXACvwUvgBjW18+AGNbfj5IGB1BheQGJ1DhOQGB9GqIq4AwerL4AWOgxk\n"
                                   "C3qccwLepAdWA2AXJGBckYGRqcAL2pxAytTgBkRvDIGRnEDIBlbwAvTIGVoGVqgZ2OAkRuAlRSgS\n"
                                   "4ZcAbGmlA21NKBt6aXggGwhlA2EEnICfDIBOheBKjeBna4DIigXAVAqAAAAAAAAAAAAAAAAAAAAA\n"
                                   "AAAAMbwI0wGork7KgcfeWcHAeeX2P2sgcBd0XcoHN1LeKgQXgWAVRAL2tAzMiUCVHTfaBKjo1Alx\n"
                                   "W9V7gJ0FsXhwA2dNaF5qgG1prT5AbSCz+KASm2hE7gMiWpMeyBRbV3YAxOtXPgBFktWO4CM+2Y7u\n"
                                   "IEWW3qi8gI0lABEdQKi8gI7qDxAwupVAsdSeIGF1PgCnUgUSLuAqkYDq8AXtbj3qBeiKigZWoBka\n"
                                   "0DI1niBeiKBlRoFyIBkagGVigZmKBmY5UAlRPwBOp5eIG2ppQNtTSAbKCQDYQSgbCGQCdDKBNjeB\n"
                                   "IY8DMigZEUC4C5AAAAAAAAAAAAAAAAAAAAAAAAABY4CPKgGrrG8FA5O8R8HcAPP77D7XADz27xYV\n"
                                   "QOVq2rlQIDkAs2gXo0CRFCuQJ9PTLnkBsqeh3YA2sFt3Y4AbSntPkBtaa0fRA21NZvogbWmtH0QJ\n"
                                   "8dq8gJLLV5AX/BeO4Cx1sTwAwutnHkBHktnHkBDltvkBDmtyL3AQprb5AQpKDHDAEWS38+AEZ1Dj\n"
                                   "uAiyUa+AGBaPgBidSY4AY30wFnqy7uADqMKBb1QF+wC7YBkamAMrWZAyNaoF23IFzWAZEjAv28gM\n"
                                   "jWruAysRcgZ2ATIncQNnTPA21M/gBsoHgbCCQCfDIBOgkAnRPAlRuAktcBmaoF4FwFQAAAAAAAAA\n"
                                   "AAAAAAAAAAAAAAC1wGCRANfVM4KBzd2h4KBwN+gXjwA89vcC9oDgbxdbTRSOZU1LGPTnHnc79VuV\n"
                                   "A52bVtnT2esk/Nb/ALyoBgXWNvzwhlx7m/vAvZrS257UM2PJGr/iQDYUms9PqqdY+SL85mf7O4Dr\n"
                                   "LFX2m5Lijqo5nc1Yi4fj81cKB11Fbk4Ab6jtacOyBuqS0eQG3p7SidwGzgtnLgBsYrf5AS47engB\n"
                                   "mSh8gKrReQGN1F5AYn0PkBFkofICLLQoBCloU8AIMtv8gIc1B5AQpaHyAiy0PkBEdQeQEWShXwAw\n"
                                   "SUSoBgfRrnkBgdSKgGNaZQLVpkAp1KeAFEg8QLuqwBdt5AZdqgXMYBejFAyIxUAu2KBejFQC9rFA\n"
                                   "zsbyAkRoBPpwNpTqBsYXAT4XqBPheBPgeBPhcBMiUCUxQJDVAyoBcBUAAAAAAAAAAAAAAAAAAAAA\n"
                                   "AAAooGF6ARJ28ANHcYMtUDib3R5RwHn98oua4A+btdW2O3anrIIm7YnK2RqKqr7bUc7n9LIGhAAA\n"
                                   "J9ntElzqOpbIkfi5UyB7NorojtFC2G8T1MtXWxPRYWpiONFwvHamXKv6WAPT6G3cuHADo6K3Jw4A\n"
                                   "byloExyA2cFB5AToqNPACXHSgZ20+AL+oAdQBasAGF9OgEaSnTwAiyU6eAESSm8gIklN5ARJKTyA\n"
                                   "hy0WeAEWSi8gIr6NqdwESSiRQIslD5AYH0ffgCNJR8wMDqXjyAwPpfLgBYtN5AWrD5AWpAoDqe4C\n"
                                   "9IwLkY1vMC9rMgXpEoGVsYFyRAXJGBejAM8bQJsIGwgAnQqBPhcBOhcBsIFA2ESgTYVAmRgSGAZk\n"
                                   "AuQCoAAAAAAAAAAAAAAAAAAAAAAABRQLHIBHlbwA1dZDlFA5e7UeUXgBw94tvtLgD5u6bLd6rqen\n"
                                   "lxhs9Mn2te5F+7AHnoAAB0eiv5Q+sD6X0hB11ta3wwv3AdpQ27GOAG9pKLlwA28FJgCfHTgSWQAZ\n"
                                   "2wgZUiAu6tACxgWOjAwvjAjviAjviAjPgAjPgAjSUwEaSlAjPpAI0lJ5AR5KPyAiyUfkBGko/ICM\n"
                                   "+iTjwAjyUQEd9F5AYXUgGJ1JgDE6lXwAs6hfACiQ8cgV6kC9IvADIkSgZGxAZEiQC9IQLkh8gMrI\n"
                                   "gJMbMAS4WgTYkUCdCgE6JAJ8CAbGECdCgEyICSwDKgFwFQAAAAAAAAAAAAAAAAAAAAAAAABYoGJy\n"
                                   "ARKiLKAaWvpdyKBy9ytu7PAD5z9Jaz9QlkrUbhN1RC9ffsc38FA8NAAAOj0V/KH1gfVXRrT9dRu4\n"
                                   "ckaB6NS0PkBtIKXHcBsIacCUyIDO2MDIjAL0aBXaBRWgWK0DE5gGFzQML4wMD4gMDoQMD4QML6cD\n"
                                   "A+nAjyU3kBgdTAYH0nkBHkpPICNJRpgCO+j8gI76PyAjvpPIDA6kVOYEd9KBidT4Ax+rgWrBx5AX\n"
                                   "NiwBkSHPcBk6vyAvSEDL1XAC5IQLkiAzsjwBJiYBLjaBMiaBNiaBsIEA2MKATokAmRoBIYgGRALk\n"
                                   "AAAAAAAAAAAAAAAAAAAAAAAAAACigWOQDC9mQIFRABqqqiR2eAHhPpTWTPR9BVonGkuETlX6L2SM\n"
                                   "X73IB8oAAAHR6K/lD6wPprSWuNK6P09PcdQ1iU0btjaeFEV80zkzlscacV815J3qByt59MPZM5lg\n"
                                   "04nUp7E9dN2l98USYb/tFAw2n0zL3FK34U01SzxZ7fqs8kLseKb0mTgB7r0ZdOOgdfuSltlS6kvG\n"
                                   "Fc601iJHMqJzWNUVWSJ39lc45ogHpLWAZEaBdgCuAKgUAsUDG5AMTkAxq0DG5gGJ0YGN0QGJ0IGN\n"
                                   "0AGF1OBhdTgYXUwGF9L5AYHUoEd9J5AYHUnkBgfSJ4ARn0WVAjPouIGGWjXuQCO6m8gMS068QLUg\n"
                                   "xzAvbCBkSLhxAvbEBlSJAL0jAuSJPADK2HKgZo4uIEtkYEuJgEuJigToG4A2MLQJsSAS40AkNAvA\n"
                                   "qAAAAAAAAAAAAAAAAAAAAAAAAAAAC1QMbmgYpI8gRJKbIHmPpD2Va3of1E1G9uGKKpavh1E7JHf1\n"
                                   "WqB8IAAAHR6K/lD6wOo6YnqtJp9nc1tS5Pr6r9wHmgADLSVdVR1UVVSTPp6qByPhnicrHsc3ijmu\n"
                                   "TCoqAfe3QJ0yUmu9HQPu1VTwakpJPVK2BZI2Pnc1rVbUMi4KiSI7uTG5FwNR6vgCoAABQC1QLFAx\n"
                                   "qgFitAsVALVaBarALVjAt6oCxYAMbqcDE6nAxOpgML6YDC6lAwupQML6QCO+jAjvo/ICPJSeQEZ1\n"
                                   "Hz4AYHUoGFaXyAp6sBckAF6ReQGRsIFyRAZEhAyNhAzMhUCTHGBKiiAlxRgTIYwJ0TQJcbQJcaAZ\n"
                                   "mgXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAUUCmALFaBYrQOd6QbQl00LqK3bdy1dtq4Wp37nwORuOC\n"
                                   "8c+QH5rAAAHR6K/lD6wN90vPRZ7OzvbTOcqe9/8AwA8+AAAOx6MG0tRfXUU8skDpWb6eaFUa9skf\n"
                                   "gqouOyqmeXgQ+1ehLUl4rKGvsd6uHwjWW1Y5KGpkbtlko5W9lZFyu9zJGuYq+GM8ycdtYHTa56St\n"
                                   "FaHoUq9SXOOjV6KsFL7dRLj+bibl68e/GE71Lj571X6bj974tJ6dbsTPV1d0kXj4Zp4FTH+1A85u\n"
                                   "PpadNVW5VgudNb0X5NPRwORP9u2dQLKD0o+mZJV9Y1Du3c19UosfZ1OE+oD0TTXpQa3Xb66tJWov\n"
                                   "PrIti/8AdKxPuA9a0x086fum2O5U76CR3+tYvWxfXwRyfYoHpFNVUtXAyopZWzwP4skYqOav1oBe\n"
                                   "qAUwBTADaA2AOrAp1YFvVAWLCBjWADG6BAMa04GJ1OBhfTgYn0wGB1IBHkpPICPJSeQEaSj8gMC0\n"
                                   "nkBjWlwBb6v5AVSnAvSAC7qQMiQgZEhAzMhAzshAkxxASWRAS4YwJcbAJUbQJDUAyoBcAAAAAAAA\n"
                                   "AAAAAAAAAAAAAAAAAAAAAApgCmAKYAtdG1zVa5MtXgqL4Afl9fLctsvVwtrudFUzU655/FPVn7AI\n"
                                   "QADo9Ffyh9YG26W5FW722PubQtd+tLJ/ugcMAAAZaSpqKWpZPTyuhmYvYlauFTPDmgHpcF26UdJ0\n"
                                   "f8KI7/JE2JzKWPbO5yydfl/V4Tm3EO5fcUpMdB59fr/etQXWe7Xmslr7jUrumqJnbnL4J5InJETg\n"
                                   "ici4gAAAE2guc1K9OPZA7zT+qfZ7YHsvRz0nVVlrGKj1kopFT1mmzwcning5O5QPpmCaKogjqIXb\n"
                                   "4pWo+N6d7XJlF+wC/ADAFcAXbQK7QG0CmwC3YBasYFqxAWLEBjdCBjWADG6ADE6nAxOpgMD6UCO+\n"
                                   "l8gI76XyAwOpQMa0oFPVwLkgwBXqAL0hAvSEDIyEDOyICQyICQyMCTHGBKYwDO1oGZqAXgVAAAAA\n"
                                   "AAAAAAAAAAAAAAAAAAAAAAAA57UPSFoXTm74cv1Db3t5wzTsSX6os71+pANRYOmvowv1FcLhQ36n\n"
                                   "Zb7Y9sVVWVWaSPc9FVqNWo6tXeyvJAOQ1H6WvQ/aHPjpaqqvUzeGKCBdmf6SdYGqnm3IHnt19OFM\n"
                                   "q206T4fJmqqz8Y44v8YGhl9NrXKvVYrBbGx9zXLUOX7Ue38APBNSXuW/ahud7mhZTzXSqmrJYYs9\n"
                                   "W1871kcjdyquMu4cQNcAA6PRX8ofWBO6U37tQ06Zzso4k93aev7QOOAAdHp/Srb/AGWu+DOtm1FR\n"
                                   "SRyNtzUR3X0j1SNzokRNyyRyObuT5q+SgQ9T2ajs1wS2w1iVtVTsRtxexE6plT8uKJyK7rEj9lX9\n"
                                   "65xw4qGytVruN4sj6y73pLdp6kmbBHLU9dMj6jYqpHDDGj3Oc1i5cvBERefFCNBraDTdVdr6602R\n"
                                   "7a9yuxDOqpA17Mom/wCOVu3nyXiSLo9I3mbUVZYKdsc1ZQPnZVSpI1sDG0qqksqyv2NSNu1V3LgD\n"
                                   "He9M3Ozx01RULDNRVm/1StppWTwyLGqI9EcxVw5u5MtdheKcANUAAy09VLA/cxfqA7Cxap2Y3P24\n"
                                   "55A+6+ievbcejbTla16vSahiXK8+WMfo4wB1mAK4ArgC7AFcAVwAwAwBTAFqtAtVgFOrAsWMCxYg\n"
                                   "LFiAsdCBidABhfTgYH0wGF1MBhWnAs9XAt6gCvU+QFUhAvSADI2EDMyIDOyIDOyMDOxgGdrQMqIB\n"
                                   "kQC4AAAAAAAAAAAAAAAAAAAAAAAAAANfqG6/A9guV26rr/g6lnq+p3bN/URrJt3YdjO3GcAfLet/\n"
                                   "Sb6To6SuqbelvtFvb6v8FVMUDqqWrWqZ1zdrp3IxEZDlXr1a7XYavPgHlS9JGuNS0Vwuur9R3Wtt\n"
                                   "NKsUS22kqko2zzT7la3DWrE1qMjcrndWvcnygPP611uR8zKNJJGLM5YaibDH9UirsRY2q9EcqYV3\n"
                                   "aXjwTxUIoAAAAAAAEmguFVQVDZ6d2HNVFwvFF8lA7VLr0eard1upJ67Tt2bEkbaykjbXUL9nLMDl\n"
                                   "injX3SP+oDgno1HKjV3NReDuWUAoB1+kdW0WkaVl0trUqdTzS7FWaPMNNSNVN7W7uDpKhOy5cdlm\n"
                                   "ccXcAw1l7s1mvtZNp6CjuFprkZLBBcKVJ3U+5NywfHNyjonKrFcxcOREUDprBqG7Vmj6Oi09crfa\n"
                                   "LlS3CsnuNNUyUtKx8NWkSskj9ZwxY4+re1zGrnGOCgRIaK23rpgjmsDIEs8NwpJZ5GbIadGMfElR\n"
                                   "KxjtmIlk3ORET2QJ+nqG702vNW1UlM6W5tpa6pp7K9mUr2VEu10To+Lnx9W9ZFaztLjgqcwNX0iM\n"
                                   "bHpfTCR0D7E2T1yR+n3q5dj97EWrb1uZts+NqJIvDZw4cQOAAAAGVA+19MdJqaC9GfTOp0tvwl1U\n"
                                   "cdL6p13UZzM+Pdv2S/N5bQOP/wAuP/oV/wCJ/wDlAH+XJ/0K/wDE/wDygFf8uX/oT/4n/wCUA+md\n"
                                   "PXV11s9FWyxJS1c8EUtVRI/reolexHPi34bu2OXG7CZA2QAAAAAUwAwBTAFMAU2gW7QKKwCxYwMa\n"
                                   "xAY3QgYXQAYnU4GNacCxYALepAqkIFyQgZGxAZGxAZmxgZmsAyNYBlagF6IBcgFQAAAAAAAAAAAA\n"
                                   "AAAAAAAAAAAABZLLFExZJXtjjTm9y4RPrUDQ66fHUaA1G6F7Xsfa61GvRybf83entcgPgXUmprX8\n"
                                   "F2y2UEvWVGlKnq7VUOak0VTE/wCMnlc2Tczb6zHljVbxY7C8gORul0rbnWSVlY5rppPa6uNkLEwm\n"
                                   "OzHE1jG8E7kAigAAAAAAAAAHrnRD0Et1vaJr1crg+ioEkdBTRwtR0j3MRNzlV3BrUVccsrx5d4dh\n"
                                   "0Y+jhZpOlu4ae1TJ8JWehtyXGmjY58Dqhs0vUs39W5Ht2K1+7a7njuUDYv8ARx6PZ9b6qsPXV8Ed\n"
                                   "pqKaWk6iZnZp62nSVsTutjlVdj9yI7mqY78gY630TtPOYvqN9q4X9yzxxyp/V6oDibv6Nl7t27rb\n"
                                   "rFHHuwytkhkWjazxmkh66aNffBt+kB5ff9O3Sx10tLWxLsZI+OGra1/UVDWOVvWwPe1m+N2Mtdji\n"
                                   "gGsAqx72PR7HK17eLXJwVFAvnqKiolWaokdNK72pJFVzl96rxAxgAAAD2fUvShbJegDRmgoUbPXv\n"
                                   "klqbqrV4QQxVtQ2GNfpycHrx4J+cgHmGpbdFS1kbqaPbTzQskTbxRF9lePvbkDTgXwLEk8azJuiR\n"
                                   "yLIic1bnj4dwH1hpXpg0tI9jtM6l9Vl+TZdQOfEnHkyOsXrNvhhXSJ5Aew2DpXt8zoaS/wAL7TWT\n"
                                   "YSJ021YZVX+anYropM92Fz9FAO9jkjlYj43I9i8nJxQC4AAAAAAFMAMAUwBTADaBTYBarAMaxgY1\n"
                                   "iAsWIDGsQFvVAU6oC5IgLkjAvSMDI1gGRGgXo0DIiAVAqAAAAAAAAAAAAAAAAAAAAAAAAAOf1/rC\n"
                                   "j0bo27amq29ZFbYFkbFnG+RyoyKPPdvkc1uQPlWt6L+lDpXtzNV6n1G2Caub6za7O5kjqeKKRMxo\n"
                                   "iI5EhRW+DXLjnlQPGqW/610RcbpaKSvmoJPj6C6UbH7oZEVHRSNezix3BVwuPNAObAAAAAAAAAAA\n"
                                   "AD07os6c7poS2zWp9vbdLbJIs0USyrA+ORyIjsP2yptXHLbzAjTdO+u29IDta26ZlDX9R6lHTI3r\n"
                                   "IUpc7upcj/aTd28/O4pgDWWzpa1pRa5n1m6sWoutbJuuLX8IqhnBOqcxuERqNREbj2cJgD680Lra\n"
                                   "z6y0/DebY7DXdipp3L24ZkTtRv8AdngvenEDoQNNNY5aRZZrL1MSTLuq7TUs623VXj1kPJj1/nGc\n"
                                   "fHPICHD0V9B+vevgrNLxWTUECZq6KlctJKzP+tj6hWRTRqvJ+1fNEXgBx2o/QjsUu5+m9R1NI7m2\n"
                                   "CviZUNXy6yLqFan6KgeW6j9ErpgtCOfSUtLeoW8d1DOm7H5lQkDlXybkDy++6Q1Xp9+y+Westi5w\n"
                                   "nrUEkSL7leiIv1AagAAAuiTMjfegHcVSKzRtcqfNjT7ZWIBwoAABtbPqvUdnY6K3XCWGnf8AlaRV\n"
                                   "307/AM+B+6J/6TQPRdD+klrnS0rWxqyeiz26N2eqXxwxyrs8kjVrU8APcLf6YNnrW0yJa6WkklYz\n"
                                   "rWXCtqKZd6rh/VqyiqYVYmOCvlaB1NL07agqoVqKHR3wpSIn5e2XaiqkyvLgvVqBbJ6S9loVxfNJ\n"
                                   "aktad876JkkGP6Rkv4IBPtHpOdClzVrE1AlJK7/V1cE8OPe9WdX/AFgO8smr9KX5qLZLzRXPKZxS\n"
                                   "VEUy/WjHKqfWBtwAAAAAYAAUwBRWgWqwCxWAWLGBb1YFOrAbAK7ALkaBejQLkQC7AFyAVAAAAAAA\n"
                                   "AAAAAAAAAAAAAAAAAAADhenDSFfq7osv9it6b6+aFk1JGny5KaVk6R+9/V7Uz3qB8y6S9JiOx6Xg\n"
                                   "s15s0011tcSUkTo3NjY/qU2NSVH9qNyIiI7CL+wDxDUF7rL7fK68VmPWa+Z88iN9lFeudrfJqcEA\n"
                                   "14AAAAAAAAAAAAAAADtOinpGrdDamjrUVz7XU4iulKny4s+21Pnx5y37O8D7VoqylrqOGspJWzUt\n"
                                   "SxssEzeLXMemWuT3ooGYDi+lPUVt03YPh6STqbtQu3WmaNyMnSV3BdmUXc1U9tqorVTgoGv0P6Y2\n"
                                   "kq+nhp9VUc1rrsI2SqhTrady/Px7bEXw4ge1ab15o3UsaSWO8U1dnj1ccidZ9ca4en2AbuWKKaN0\n"
                                   "UrGyRvTD2OTLVTwVFA4TUXQN0Rag3ur9M0kcz+c9G1aN+fHNOseV9+QPLNRehNpGp3v0/fqy2vXi\n"
                                   "2KqZHVx+5NvUPRPeqgeMaz9F3pZ03K51Nbfh6hTi2qtvxrvcsC4mz7mqnmB5fNb6633D1W4U8tJU\n"
                                   "sXtwTsdG9vva5EVAOvuuE0bUfSWLH66KBwoAAAAAVdI9+3c5XbU2tyucJ4J9oGair66hqG1FFUS0\n"
                                   "tQ32ZoXujenuc3Cgek6V9IjX1mcyOvlZe6NvOOq4TY+jO3tZ83o4D1qwa66HekbbS3S30sF3l4eq\n"
                                   "18caSOcv8zUJjdnyVHeQC++jVoasXrbRNVWWpTjH1b+uiRfHbJl/2SIBp/gT0ltC9vTmpJb7b4+V\n"
                                   "M+RJ1Rid3q9ZvxnwidkDb6c9Mq+Wyr+DtfaZWOaNcTz0SOgmb76WoXiv/aNA920N0x9HOtkayw3i\n"
                                   "KStcnG3T/EVScMqiRSYV+O9WZTzA7QAAAAAAFAKYAoqAW7QKbQG0BgBgC7AFQKgVQCoAAAAAAAAA\n"
                                   "AAAAAAAAAAAAAAAAAAPz49IrWNk1T0o3KqstNBFQ0mKRKqFiNWrkiVesqJFT2lV3ZavzUQDzMAAA\n"
                                   "AAAAAAAAAAAAAAAfR/oxdIfWUlRo64zYWla6qtb3rj4rOZYs/RVd6e9fAD1LpI6QqTRWnku0kK1f\n"
                                   "XP6qna1eCvVFVMr4cAPGtMaJ1d0sXhNR6qlfT2HdmCBMpub82NOWPMD1fUvQ3oq6WNtFT2ynp6qm\n"
                                   "b/E6hG7Vy35Mqtwrmu5L9wHDN9HG0XeiS6aQvNRZq+Nyx1Fuq13rBUR+3Gsse13BeS7eKYXvARXT\n"
                                   "0oujxO059/tcXjitbtT/AL1ifYB1GmvTHtW9KbV1jnts6cHzU3bbn+jftcn2qB7Fpbpa6PNUNb8D\n"
                                   "3ummldyp3u6qb3bH7VX6gOtR7V7wNdetNacvkXVXq10lyjxt21cMc2EXw3ouAPMdSeiv0V3aCeOg\n"
                                   "hqbEtR7aUMyrErkduRepn65jeKfI2/eoHjeqPQp1fSbpNN3qkusacUhqmupJvc3HXRqvmrmgeRao\n"
                                   "6Huk7S+51605WQQM9qqjZ6xTp75oOsjT61A44AAAAAAAD1/ou6f7vYJIbXqR77jZODW1LsvqadO7\n"
                                   "CrxkYnzV4p3eAH07brjQ3Khhr6CdlTR1Dd8M8a5a5q+CgQtQ6U05qOl9Vvdvhrovk9Y3ttz8yRMP\n"
                                   "Yvm1UA8O1v6M1TArq/RdW6RWrvbbalyNkRU4/FT8E9yPx+cBF0P6S/ShoGuSy6rhlvFDTLslpLhu\n"
                                   "ZWxJ9CdUVy+W9HJ4KgH1f0ddK+i+kC3etafrUfURtRau3S9iqgz8+Pjw+k3LfMDsAAAAAAAUApgC\n"
                                   "mAGAGAGAAFQKgVAAAAAAAAAAAAAAAAAAAAAAAAAAAB5t6QmvXaL6L7nXU8nV3Ouxb7a5OaTVCKiv\n"
                                   "TzjiR7080A/PUAAAAAAAAAAAAAAAAAAANnpi/wBXp7UFBeqT8tQzNlRvzm8nsXye1VavvA+pulS3\n"
                                   "2fVfRfVVtujar+pjuNI9iY3Iibs4T/m1UC30fL9WXTo+hp2VDVmtcjqZ0Mjc9n22dpqovysd/ID0\n"
                                   "xayrj/L0jlT58CpIn2Ltd9wGgrrnTWi/RXWCXZTXFWUt0gciscknKnqNrsLzXq3L4KngBO1P0iWf\n"
                                   "TFqkuNznRjGp8XF8qR3zWoB8/so9T9NerPhCphZb9P0zuEmxE7GfZ3cFe5QO3vvoxaTqE66wXKot\n"
                                   "dSicEf8AGxqv1bXN+8DTQ2f0kdA8bNcX3m3RcoWO9Zbj+hk7afUgG+sXpeXSgmSj1np6Snlb2ZJq\n"
                                   "bcxU98Un+8B63pXp76NtRoxtFeIoqh3/ALtVfESe7t4av1KB3sVyhkajmuRWrxRUXgBnbUxr3gct\n"
                                   "qfoq6NNUo9b3p6iqppPaqmxpDUf7eLZL/WA8i1R6Fmiq3fJp28VdolXikM6NrIU8ET8lIn1vUDyL\n"
                                   "VPokdLNmSSWghpr7TM4otFLtl2+cU3VLnybuA8cr7fXW+sloq+nkpKyB2yemnY6ORjk7nMdhUUDA\n"
                                   "AAAAPV+gjpSl0zeY7Fcpv+QLlJty7lTzv4NkRe5rlwj/ALfeH1aAA5rW/R5pjWVB6td6bM7EVKau\n"
                                   "j7M8Ofmu70+iuUA+XtVaO1v0Valp66lqpIdj91rvdLliO+i7ntdj2mLlF80A+pugL0jKHXjGWC/9\n"
                                   "XRasiZ2Fb2Ya1rU4uiT5MiJxcz628Mo0PbwAAAAAAAKYAAUAAVAAAKgAAAAAAAAAAAAAAAAAAAAA\n"
                                   "AAAAAA+PvTW1Y6q1TZdLxP8AibbTLWVDU5ddVO2tRfNscWU/OA+bQAAAAAAAAAAAAAAAAAAAAfQ3\n"
                                   "QvqdtZon4LqXb/U3SUr2u74n9pv1YerfqA13QfeJNNa9vWnJXYiqN3Vp4vhcqov6iqB9FU11ikRM\n"
                                   "qBfc6Chu9tqKCqaj6epjdG/y3JjKeac0A+eLl0cXDUOo0nvVdsoqJy081IzOd8C7H7UXgiPVMp5K\n"
                                   "B6haHraKKKit6ReqQpiOLCxr+sm5FX6gNpFqZzfy8Mkf0kTrG/1Mr9qAbCl1DTzfkpmvXvRF4/Wg\n"
                                   "HnfSp0r6IpKZ9unoKe/XRU2tp3sR7WL5u5/UigeX6N6E73qyZ90rUbYLdL2oWtaqrx5bGKuce9QO\n"
                                   "pZoLpw0U5ZNK3t1fRt4pAyTu84Zeyv1ZA2tr9J7XFhnSj1pp9yq3g6aNrqeT37XZav1YA9Q0v6Rn\n"
                                   "RzfNrG3L1Cod/qa1Oq/rcWfeB6PR3+nqImywTNlid7MjHI5q+5U4ATo7s3xA4Ppc6JdJ9JNpc2qY\n"
                                   "2kv0LMW+8Mb8Yxe5kn85Gq82ry7sAfCeqtL3rS1+q7HeYFgr6R+16fJcnyXsXhuY5OLVA1IAAAA+\n"
                                   "1ejC+z1+kbbBdJGpeqaLqKuJXor3LCuxsnNc72ojs+YHXgANdqDT9p1BaKi03WBKiiqW4exeaL3O\n"
                                   "avc5q8UUD441xpG9dH+sPVEme18D21VquEfZc6NHZjkRU9lzVbhfBUA+2fR/6WW9Iui21FW5qaht\n"
                                   "itprvE3CbnY+LnRqcmyoi/pI5OQHpwAAAAAAAAAAwAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfn\n"
                                   "T083xb10v6prN+9sdc+kjVOW2jRKZMeXxQHBAAAAAB23RT0T6i6R7+ttteKejp0R9xucjVdFTsdn\n"
                                   "HDhue7C7WIvHyRFUzyZYpBEPrCxeiT0QW+jbFX0lReqj5dTU1M0S58m0zoWonvyefkyZbcs+C+kN\n"
                                   "Nrj0PNC3Chkk0pNLY7m1FWCKSR9TSvX5r0kV8rc8tyP4eCl8Wa9eedUTD5F1Npq86ZvtZY7zTrTX\n"
                                   "Ghf1c0a8vFHNXva5OLV70PQrbWNVWsJAAAAAAAAAB3PRXeHUVfWU+7DZo2vx5xrj/GBP1LcFtWvL\n"
                                   "df4lw2RWOkx9HsuT62ge42/USKjVR+UXiigdJQ6g5doDk9UVaU+pJ5mLiOvjjn/7RqdU/wDqsZ9o\n"
                                   "EWO7+YEqO7+YGO6yNuNuqKXcjJZmKxkyplWqvegHK6T6MbJZ6j12pnWur85ZJI1FYn6K5yoHosV5\n"
                                   "r4kRNsczU+avVr9i5T7wJcWpo0/Ko+H89OH6zct+8CVNV2u50/VVUUNZTr8iRrZG/fkDz7WfRb0W\n"
                                   "LRTXGozZdqZWaB3Zz/Ruzn3JgDyHSC67+HJodBV1Y+GJezJu6pqtT56Kuz7QPSaPp86VNMSJT6ts\n"
                                   "vrMacFmViwvX3Ob8Wv2Aeh6a9JTQV12x1NRJa6hebKlvYz5PblPtwBE6a9FWjpI0v8LWOSKqv1sY\n"
                                   "r6KaBzX9fFzdTuVvjzZ4O96gfICorVVFTCpwVFAAAAH0LTvd1UT89ra1c+eAPR3UHSppyNJJ6OWu\n"
                                   "ocbkf/nLdvjuYqvb+kBKtvSRap16uvifRS8lX22Z96dpPsA6ilrKSri62lmZNH85jkcn3AeY+kXp\n"
                                   "OK8aEfdWMzXWRyTxuTmsL1RkzfdjD/0QPNfRN1TNZul2joN+KS+wzUU7c8NzWLNEuPHfHtT84D7t\n"
                                   "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/Lm+Vy3C9V9ert61dTLOr+PHrHq7PHj39\n"
                                   "4EIAAAAXdXJtV+1diYRXY4Jnl9uAPvj0Z9LUti6IrO6NiJVXZq3KrlTm506/F/qxIxDy7ZPeXtH2\n"
                                   "Xep4+0p7vXh4SlTH2lJjTuPlz02NL0aQ6f1RExG1Svfbap/e9mFmhz+biT7Tt2a/xbisvm6n08r7\n"
                                   "DJdpHysam7qtsDnxdlUT42ZFRI1eqqjOC5VO47VUxui5mXN1BU1Cslip2z1DYolle17p0p1ia3Ld\n"
                                   "yse7tcU5LjPDIc/VQOp6mWncqOdC90auauWqrVxlF70AxgAAAAAA2FirFpbg2TOOCooG81FWNrra\n"
                                   "12cvgduT3LwUDstJandLaabe7tsbsd+jw/ADs6DUHLtAYNWXVJIqOozxjV8Wf6REd/8AbA0kd4+k\n"
                                   "BLjvH0gJcd4+kBKju/0gJcd3+kBLju/0gMiVlM9dyoiO+e3su+1MKBp9W6cg1PSQUtRXyxRQvV+3\n"
                                   "CPznuz2VwBudOR0unqFtFQ0bWwt9p8Lk3OXxdu2/iBu/h6gqGdTU7Va72op24RfqdwUDnL10Z6Av\n"
                                   "SK91ClJM7/XUi9X/AFeLfuA46o6G9TWab1vSV/e17eLWOc6B/u3NVWr9eAPMNZaZ1Va6x1bfqR0M\n"
                                   "lZI5Vn4bJJObly3hlc5A50AAA+gLeqrQUyrxVYmZX9FAPablrfUdv6SaqGnrFfb6S2SPhoncader\n"
                                   "ti1bctTGVWVM7kXdjhnAHzT0w6+1ZVaupq2SvclT6kxsjmI1rX4llw50aJ1eccM7eSAaazdL+o7f\n"
                                   "I172tkcn+siV0En2ty3+qB6XF0u1+pdBX6nmp0lbJR1NMqy4R6PdAuHI5vBcbu9APJeim6NtfSRp\n"
                                   "2tdyjrok4eMi7E+9wH3raddQyoiPcigdNS3ajqETa9EUCaiovIAAAAAAAAAAAAAAAAAAAAAAAAAA\n"
                                   "AAAAAAAAAAAAAAPysAAAAADqq58jrZNEjkWOqp4qtUc5jnM28u1hFVVVHdnmiLxzgD7J9F/V9Hfu\n"
                                   "ie20zZEWvsaLQVkOeLdir1C48HRY+tF8Dy74/d3tb7rvWs495nGTd7pUz9pWba+PWB8q+mrrCjlm\n"
                                   "sekqd6PqIFdca5E+Rub1cDV81RXrjwx4nds9PHf+6svnql1BTRWRKR8cjquGOogg4p1Csqsblc1e\n"
                                   "O5uFxjnw5Y49irLbdRUsG1rnVFN/FY6f1ulx1zXRz9b2cub2XJw5/uUNJcKllVX1NSyNIWTyvkbC\n"
                                   "3kxHuVUanLgmcAYAAAAAAAEVU4oBnZWSIxWO4tVMAbCx3V1Lujz2VXKAdbQah5doDY3K89dbl7Xs\n"
                                   "Lu/qr+8DQx3fzAlx3fzAlR3jzAlx3jzAlx3jzAlx3jzAlx3jzAlx3jzAlx3fzAlMuyKmF4oBkjq4\n"
                                   "ObMxL4xrt+5OAEqO51jPYmSRPCROP6zcfgBpOkGN1+0lWUUtOvXxJ6xSvYqPRJIuPDkvaTLeXeB8\n"
                                   "6AAAHvdl/keg/wCrxf2EA9MvX/7hV/8A8ml//wAFQPm/pXhxeKObPt0+zH5j3L/jA4gD0XQLVdo+\n"
                                   "8tTmvWon+xQDnujxGrqql3Ii4R7kymcOa3c1U80VEVAPdqDUlfSqna3IgHX2XpCVqtRz9q+Cgeg2\n"
                                   "PpBYqt3vy3vQD0hjmvYj2rlrkyi+SgVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPy+1NQO\n"
                                   "t+pLrQOTa6jrKiBU4Jjq5XN7uHcBrQAAAAA6ro46StTdH9/beLFKmXJsq6OXKwVEfzZGoqcu5U4o\n"
                                   "UyY4tHiPqbT3pldHVZSNW8UNdaaxE+MY1jamLPgyRitcv1sQ4rYL15dFtWl1z6Z9kjo5KfRlrmqa\n"
                                   "92WsrrgiRQM8Htja5z5Pc7aXps8zzmr5VvF4ud5ulTdbpUvrLhWPWWpqZVy5zl/9YRE4Ih2RGiqG\n"
                                   "SAAAAAAAAAAAAAZoauaNeCgbSO6ySUNUmfZj/FyJ+0DWNrJUAzMuT0AkR3ZfECXHd/pASo7v9ICX\n"
                                   "Hd/pAS47v9ICVHd/pAS47x9ICXHePpAS47x9ICXHePpAS47v5geDXKNkVxqoo/YZK9rPcjlRAI4A\n"
                                   "D3bTf+j1r/6pB/doB6ddJEk17VyJwR9kkdj32FQPnzpbp1bLbKjPCRs0aJ/R7F/xgefAekdHKKul\n"
                                   "rqicVV8mE/7JAOZ6PnKmrKNPnJKn/dOX9gHsQACTTXKtpl+KkX3LxQD6q0RXPrtIWeqk9uSki3e9\n"
                                   "rdufrwBvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD88/SJsLrL0y6mgx2Kqp9fjdyRUrGJ\n"
                                   "O77HvcnvQDzgAAAAAAG5uFBQU8aYajmQSRsqHxOd1nxjFdhd6bOO1cK3l35AlQ221tuFYyVjGQNq\n"
                                   "o4IkkV6psdu3NbtXO/CJhV4eIHPSsVkj2KmFaqoqL5AWgAAAAAAAAAAAAAASo+xbZXfzsjWJ+iiu\n"
                                   "X8UAigAAAC5JHp3gZG1Uqd4GZlxkQCRHdl8QJUd38wJUd38wJcd38wJcd38wJUd38wPPq926uqHf\n"
                                   "Olev9ZQMAAD3LSaoumrbj/8Ajs/AD2L4YpotcbKq3U9TTR6d6idmFjkkYlq9Zc7rU4tlcnxW9OTO\n"
                                   "AHz70zpE616bkig6rC10U0m9XdbK10L9+F9jEcjGYTwz3geWgemdGP8Ao9cP6Z392gHJaDcjdWUC\n"
                                   "+cifbE5APZQAADRydOfSrpi6TW+13x7aCmXZBSTRwzsazCKjU6xjnIieSmM2nV6eLBS1I8HUWj0x\n"
                                   "ekGnw25Wy3V7E5ua2WCRfrR72f1B7ySdiq7O0+mjYZNqXfTVVTctzqSeOo9+EkSn/Et7xlOxT0l2\n"
                                   "tp9Kbodr8ddcai2vX5NXTS/ZmFJm/eTvwynZbu1tPSb0d3fCW7UltqJHcokqYkk/2blR/wBxbWGM\n"
                                   "4rR0dK1zXtRzVRzXJlrk4oqKSoqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPkz02tJLHcbBq2GPs\n"
                                   "TxvtlZInLfGqzQZ83NdJ+qB8vgAAAAAAzTVtVNE2KWRXxsxtRfJMJ78JwQDJHdK+OSSRsy75V3vV\n"
                                   "cL2k5O48nJngoEVVVVyvFV5qAAAAAAAAAAAAAAAAlVnxcVPT97G73/nScf7OAIoAAAAAAAAABVHv\n"
                                   "TkoGRtTKneBmZcJEAzsurk7wNfI7dI53iqqBaAA9t0WqLpa3Y/msfYqgenve5+rHPdxc7T2VXzXT\n"
                                   "wHjHTHG9NO6ckVOw6rubWr5tjolX+0gHlQHqHRR/I1X/ANY/wNA4vRLkTVNvVfnqn2sVAPaAAADy\n"
                                   "vWjNupavhhF2Kn1xt/aYX4vX2XkhpCjoAAACfbNQX61O3Wu5VVA7Oc000kK5/QVoVmsS7jT3pBdL\n"
                                   "tpqYFZqKeshY5u+CtRlSj2ouVa50qOkwvJVRyL5k78wrXZaWnTR9k9GXSTZNe6dZdLeqR1ceGXGg\n"
                                   "Vcvp5V7l5Za7GWu7/eiobUvvQ83atmthtpLri7mAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOK6Y9Ct1\n"
                                   "x0dXewtTNa+Pr7cvhVQduLj3blTYvkoH5xyRyRyOjkarJGKrXscmFRU4KioveBaAAAAAAAAAAAAA\n"
                                   "AAAAAAAAAAy0jInVDetXESdp/ubxx9fICRFRV9yfNPDHvXdl/FE5+GcAYZrfXQ/lYHtTxVq4+0DA\n"
                                   "AAAAAAAAAAAAAAAAAe06DcjtJ29U+a9PskcgHsn8Gr6ty+GfUpPgr+DPW+u8Oq2/Avq+N3Ld1vDb\n"
                                   "7XfjHEDxDpma7+BelnYXalyu6KvdlYLdj8APIQPUOij+Rqv/AKx/gaBxel/9L6P/AKx+8D2gAAA8\n"
                                   "y143GoZF+dGxfux+wwvxersnI55GOVMoiqniUdSioqc+AQoAx5hGgEpVtiSavhhVUzLvazcu1N/V\n"
                                   "u6vLuSdvHFeHiOhWbRaNPHx9HXdH+vr7ofUcV3tblR8a9XW0T1VGTR57UUifgvcvExiZrL0smOm0\n"
                                   "U0/Yl9z6G1vY9aaep73aJd0UqYngVU6yCVE7UUidzk+9OKcDurbWHyufBbFbdl0BZiAAAAAAAAAA\n"
                                   "AAAAAAAAAAAAAAAAAAAfE3pZdFTtN6u/hZbocWTUL1dPtTsw1/tSNX+m4yJ57vADwUAAAAAAAAAA\n"
                                   "AAAAAAAAAAAABmqYEg2MVfjdu6RPmqvJv2Ab2x3m10lG2CRXMkyrpHK3KKq+7K8gN3Dc7fN+TqGK\n"
                                   "vhnC/YvEC+Wio5+MsLJM96tRfvAgzaatUnJjol+g79+QIE2kE/1NR9T2/tT9wEGbTF1j9lrZU+i7\n"
                                   "/ewBAmoK2H8rA9ieKtXH2gYAAAAAAAAAAAB7J0eORdI0SJ8lZUX/AGrl/aB6Jbtf6yt0EdPR3aeO\n"
                                   "CFEbFFlHNa1EwiIjkVMAcN0g3ufUFRZ7bfv4xZbQk0kNDSNgolzUe1tfHEqJ2mo5ctXPHxyBza2X\n"
                                   "o3cm34IuTM/LbcolVPdmjwB0ekqfQlqppqaG61lP1r+sT1ymRzU7KJjrKd73Ly/mkA4GOxRUOqaG\n"
                                   "pgudDcKeWvRGeqSO3p289qKVsUjU89uAPVNqgMKAA846Q24vka/Op2r/AFnJ+wxycXp7HyebTU6q\n"
                                   "6kdGuG4RyxyNdhc/MVvfnuMnUkvbNHcqub2ZHq/1STdjtK7LVaq8fZzhQhJoYquKL1qWRz6nbtZD\n"
                                   "x63Y9dquVPbVGc0/cQSjsmo6a6sasbmq97fWZJnZVqP9tNrWtwqbuPPkSNhVUlJR218zWx+sW9jq\n"
                                   "CZFc1yvnkVHo9G7eOEdIn6KeRCGhtH8q0vf2l/sOLTwaV569/SW3mh9aWnRX7JUa2Nki8lTbHta/\n"
                                   "HHCK5ePd9xjE9JejekxO9Xj+XTdF/SZfOjzUiVkCOkoZdrLrbVd2Zo+aKi8U3Ii7mPT8FJraaSzz\n"
                                   "YabTT+fxL7i0xqaz6msdLerPOlRQ1bdzHfKavymPTjte1eDkO6J1fL5cU0tuzxbQlmAAAAAAAAAA\n"
                                   "AAAAAAAAAAAAaXWeqqDSelrlqO4NfJSW2LrpI48b3cUajW7lRMqqoicQPA6r03tMNz6ppmtl+b1s\n"
                                   "8UXDz2pKBqar05JFylLo5G8eD5bhnLfzW06YX6wNTU+m5rF3+badt8XH/WPnk4fUsYGoqPTP6V5c\n"
                                   "dXRWeDGfYp51z799Q/kByWsfSK6S9X2Oosd6npJbZVIiTQNpY04tdua5HcXNc1U4KigeZAAAAAAA\n"
                                   "AAAAAAAAAAAAAAASaXqoWLUvw56Lthj+l85fJMgR3Oc5yucuXLxVVAoAAyRVNRD+SlfH+aqoBs7f\n"
                                   "e7s+qhg6/KSPazL2o7G5cZ7l+8D3ZnQbqGWijqKO60VY+RqO2bXxJx+kizfgBp67op17R87Z6w1O\n"
                                   "b6eRj0+xVY7+qBzlbarpQ59eop6VE+VNE+NPtciIBrZaKhqEzJDHJn5Soi/eBBm0zapPZY6JfoO/\n"
                                   "fkCDNpD+ZqPcj2/tT9wECbTF1j9lrZU+g7/ewBBmoK2H8rA9ieKtXH2gYAAAAAA9g6N3IulYE+bJ\n"
                                   "Ii/rZ/aB1AHKaoa5Lg12OCxphfrUDTgXwQvmmZEzi964QDkbezqdZ08bV9i4tZnySbAHtwACgHmW\n"
                                   "v66OovywM/8AdI2xuX6Tu3+DkMcnF6Wxcvm5ozdrPQRRTVkMUu7ZI5G9jiuV4J94RLaUNmpquelp\n"
                                   "c9XLXdarJVVVazq1VGphMrx2cckaqzLBdKCnjgSqpmPjh9YmpdsjkcuYtqovDHHD+PAJiWsV7lzl\n"
                                   "VXcuXea+JKWa3u23ClXOPjWp9q4/aD/KO8N8z2ofez8ITnew1SRydW9zUVyxuXh37Vy9ceXBVx9n\n"
                                   "ntx8Jefpas2vTjvTr/L0boU6Ya/QV7TrFdPp2tcnwnRJxVvck0fg9nf85OC9ypFbTSU58VNqprHN\n"
                                   "H7pL7oO18wAAAAAAAAAAAAAAAAAAAAAAQ7xZrVerbNbLtSRV1vqMdfSztR8b9rkem5q8Fw5qKB8/\n"
                                   "ek70YaDsfRTU3Ox6eorfWwVdNmqpoWRvRj37FTLccFygHxyAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n"
                                   "AAAAH0HoboxtVwsVNU6f15V0VwexrpqeGoarI3r8lY2qz8QOnTS/T/aF3WzU9HeoG/6usj2Kv6qO\n"
                                   "X+uBa/pA6Z7U3F+0Qy4xt9qahfnKfmJ1zgNXUdLfRdVTdVqnSdRa6lfafUUqZT60xJ9wF8NJ0AXx\n"
                                   "P4he0t0j+58zolz5Nqc/cBIl6EqCrZ1tlv8AHNGvso9Gvz+kxyJ9wGjr+hfW9MirFFDWJ3dTJx/r\n"
                                   "7AOdr9G6qoFVKq1VLMc3JGr2/rM3IBoKi3UsjlSop2q/v3N7X7wNfNpi1Sey10S/Qd/vZAgTaQ/m\n"
                                   "aj6nt/an7gIM2mbrH7LGyp9B378AQZqGsh/KwPYnirVx9oHqnRk/dplE+bPIn4L+0DsaamnqaiKm\n"
                                   "p2LJPM5I4o283OcuERPeoE/VWi7vYpoqa+0TWLM3fDlWSNVE4LhzVVMp3gaGp09QxSuiqKPqpW+1\n"
                                   "G5HMcmePLgBSmtFvppethi2vTkuVXH2qoHkEnxWunbPkXRdv1VAHtYACjnNa1XOXDU4qoHjUNHdr\n"
                                   "1Jc7tT08k0CTK+aRE4M6zKtbnxwnBOZneHbsmWtfCUN7HserHtVr28HNXgqKYvRVjkdG9r2cHNXK\n"
                                   "Lz4/WBJjuldFjq5Njmqqse3g5u72tq92SDRStuVTWKnW7Uw5z1RiI1Fe/wBpyoneuARCKSlnoG77\n"
                                   "hRt+dUQp/wB4hKtunePy3zPag97PwhOZ7KLTNVH1CZ7k++myWt0ZYuNv93pCslJA6rkVcxq5/ae1\n"
                                   "M85HIq7eGeHmN5X3Pxb1fCX6IaZrZK/TtsrZGvZJU0sMr2ScXor2Iqo5UymUzx4nfHB8nlrpaY/l\n"
                                   "siVAAAAAAAAAAAAAAAAAAAAAADyb0qIWydBuoHqvGF9E9vv9dhZ/iA+BQAHW9GnRvdukG9VVktE0\n"
                                   "UVxho5KyBs+UZKsT2NWPcnsqqP4Ljn9qBp9S6W1Fpi6SWq/2+a3V8XOGZuMp85juLXtXuc1VRQNU\n"
                                   "AAAAAAAAAAAAAAAAAAAAAAAAAAFUbkBsUDNBTVDk6yLOWrzTmgG9tmt9e2l6JQ3mth28o1lc9n6j\n"
                                   "9zfuA6+1ekZ0nUGG1EsFwanP1iHj9sSx/gB1lH6T9BVM6m/6abIxeD3QvbJn9CRrfxAkfws9GvUS\n"
                                   "Yr7W22Syc16h0K5830/D7wM9L0UdEdzm67SerZKCpX2WU1Wxyp9S/GfeBsk6N+me0tzp/XCVzE4t\n"
                                   "jrEzw/Of14Ff4T+kRZVxcNP0l6p2+1JTKiOX7HZ/qAeRdLesNQX+50tVcLDNp6Wna5m129u/PflW\n"
                                   "R+AHFQ366xcqhXJ4Pw78eIE6HVtY38rCx6eWWr+0CdDq2hd+VifGvlhyfsAnQ3u1S+zUNT8/s/2s\n"
                                   "AdrpR8Tra9Y8K3rXcW8uSeAHonRZGyTpAszXplElc7Hm2Nzk+xUA31/qbZQT2i7ddNf9OR1NcqUd\n"
                                   "U1rHpXJxdl7URVje9WPwueCAdNBSuqukvVkdPRQ1lXmj4VLN8aUyrGlSmV4I5WLw7+HADxq5tpW3\n"
                                   "KrbScaRs0iU6r/N7l28/IDwy54i1xO5OTbhux/2uQPagAGl1jX+paarpc4e6Pqme+XscPdnIGT0Y\n"
                                   "bc64T6jgZXVFFI1lK9rqdzNrkzKipJDK2SOROKc28PrA6/UvRI/UE9xjpIKSWe3vbAtTEi0bnvdE\n"
                                   "2XCMTrYstSVPZ2JnmikTXVpjy2rweIas0Zf9MViwXWimpm82SPblip5SM3RrxXuX7ORjNHo49qrb\n"
                                   "+JaFFReRR0xKoSAZaN6MraZ6rhGzRuVfDD0UmGeTg6BnOH3s/CE5nto0f5af8xi/bTqn7C08IY4+\n"
                                   "e3f+l00m2sVmPbcuV90ilWz7+6OZet6PtMy/zlqon8efap2KehTg+P2n6lu8uiLMQAAAAAAAAAAA\n"
                                   "AAAAAAAAAADzn0iYHTdC2qmNXCpStfx8I5mPX+yB+eQAD2n0Q6nqumWmj3bfWKGrjx87DEkx/UyB\n"
                                   "9ZdL0HRc7Syv6Ro4PgVZEiiqJY5HPjleiqnVPha6VjlRq8W+4D4V6R7B0dW249ZobU/w7bJV4QT0\n"
                                   "1TBUw+TnSRRRyJ9JMe4DjgAAAAAAAAAAAAAAAAAAAAAAAABIpo8tVfMDKsQHb9G+m33OG4PVmWRr\n"
                                   "E1q+faz+wDb3jRXUVdAuz8vMsCp+dG9/4xgY59BcFXqwNPV6GcmcMA09To+dnJoGtm0/WR9ygXW7\n"
                                   "VmqrS7FBdqul2L7Ecz0bw+jnAHYWr0g+k6gwj7gyuYnyKqJq/ezq1+8CH0g9Lt61vQ01LcaOng9X\n"
                                   "dvSSDciquMd6qBwgAAAA9S6KX/8AIdUzwqVX7Y2fuA9G07eZbLfKK6xJudSStk2fOantN+tuUA3u\n"
                                   "ttS6dr6Ojtunaaemt8Ms1XN6wqblnqMZRERXdliNwnH/AIh0VJqfTly1RqJZ7mtBSXCro62jr3Mf\n"
                                   "xShfu2KnByKrV7PmgHn19rIK293Csp27IKmpmmhZ4MkkVzU+xQPB9Q7YtaVS9yVaOX63IoHtQADg\n"
                                   "uleu20VFQovGWR0r08o0wn9sDe+i7BDU6qu9M9743LQdYx8Ujo5E2TMbw2qmU7fHPAD6KpLJdLWk\n"
                                   "/wAHVbKhs8r55I6xvac9/P46PGP1FA1Ws1dXacrKW66flqZOrd6skGKhnXKm1io5nxrU49pVj5ZA\n"
                                   "+Xtd6Ek0rXsbFUMraKZMNqWcMvxlct5tXyXl9hler0Nmy6zp1cwZO8Ate5WNV6c29pPq4k14ssvL\n"
                                   "LqNrmPiY5Fa5HNRWrwXKJDwU5nuIrP8AOJv6GL+4eWngwp9S3kVKfx9q/Sd/eKVbdfL+n3j0OTJN\n"
                                   "0WaWeiquLdAzj9Buz9h34+WHye2x863d2JdzAAAAAAAAAAAAAAAAAAAAAAHFdNVP6x0SavZt34tV\n"
                                   "VJj+jiV+fq25A/OEAB6v6LVR1PTlp1NyNbMlZG7PnRTKifW5EA+v+nPRFfrXoxu9htsbZbpL1U1A\n"
                                   "17kYnWwzNfjc7CJuYjm8fED4b1B0NdKen93wppivjjZ7c8US1MKe+WDrY/vA45zXNcrXJhycFRea\n"
                                   "KBQAAAAAAAAAAAAAAAAAAAAAAAA2dCxFp08eOQNrZNO3e+3SC1Wikkra+pdthgiTKr4qvciJzVV4\n"
                                   "InMD6+0J0LLpfS9PbpcS1rszV0rfZWZ/Pb5NREanuA1UukfhjWSQUjN9Bp9H+uTp7C107NjYUX50\n"
                                   "ULnOf4bmgbOo0H2fyYGlrNB8/iwNFWaD5/FgaKt0IiIqqzCJzUD53uUkUlxqpIfyT5pHR/mq5cfc\n"
                                   "BHAAAAAAB6d0TuX4MrW9yTIv2t/4Ad0AAAAPFtXtSPWNbleHXNcq+9GqB7QBUDyDpIr/AFrU0kSL\n"
                                   "llIxsKe/23fe7AHa+i7UdV0kTMyidfbZ4+PfiSJ/D9QD6xAAcx0jaRp9UaTrresbXVaN66icqcUn\n"
                                   "j4sT3O9lfJQmJ0fG1yonUdT1fHq3tSSFXc9j+KZ5e45rRo9nFk366opDVbL+Tf7lJjizy8s9nW1i\n"
                                   "p66qo7cnW8HeP5Lic8vZpy+TXt/zqX+gj/uXk9FI+pPaPzK+r/zpq+Dl/vHFWsfv/j7e9H+TrOiD\n"
                                   "Tjtyu+Klbx+hPI3H3Hdi5Xy3tD61noRo4gAAAAAAAAAAAAAAAAAAAAADzbpt6QtD2PSV709fbolF\n"
                                   "cbxaKyOjp+rlc6TropIW7VYx7c7uHED89QAHpXo5Q1q9M2mZaanknSKod1ysa5yMY6F7XOdjkiIu\n"
                                   "eIH6EgcP0j9Mei+jyahi1I+ojW4tkdSrBCsqL1StR+cLwxvQD4H6SL9Q6g19qC92/d6jca+eople\n"
                                   "m1yxvkVWqqd2UA5wAAAAAAAAAAAAAAAAAAAAAAAAvZK9i5RQPYuir0kajQNM6lZpa31cT/ys8KrT\n"
                                   "VT/BHzqk6uRPBUA76X0wqS+TJSXClrNNWp/CeW2JFW1j0XmjZpnUzYfzkic7wwB6NpD0h/R9prbB\n"
                                   "a6C5LaaeJMRwVVNUIqq5cuc+VGyNVzl4uc5+VVcgd5bOkTovvOPg/UlqqHO5RNqoUk5Z/Jq5H/cB\n"
                                   "u3Wi31DEfHtcx3subxRQNPdbLY6WJ0tXVQUsbUy58z2xtRPFVcqIB8ydO/TFpuOmn01o6pZXzzos\n"
                                   "dwusPGGNi844Hpwe5yc3JwROXHkHzkAAAAAAABtbLqe8WZr2UMqNjkXc9jmNciqnv4gdDT9K15b/\n"
                                   "AJxSwSp9Hcxfxcn3AbWm6WaF3+c0Esfj1b2yfj1YG0pukjS03tzSQf0kbv8ABvA2tNqfT1R+SuNO\n"
                                   "q9zVkRq/Y7CgeU662rqqvVjke1yxuRzeKcYmqB7SBR72sY571w1qZcvkgHgNwqn1lfUVbvaqJHyL\n"
                                   "+kuQPQ/R2qXQdKlta1Fcs8VTHsam5V+Ic/u/MyB9dJcafO1V2uTmi8AMzaiF3JyAX7kA+aOnDRvq\n"
                                   "NTVVcEStiin6yNyIuFiqsyInDwe2Rvk1iGeSHXsl9Lafd46YvUWv9h3uJhS/CXULJ1itmxjO16p7\n"
                                   "+pMLcXq4J+COyE/hV/nQJ90X/Ef4o/1f+PqkVH+dM/Pd+MpC9un70fZno1VHW9ElrZnPUSTx+7Mi\n"
                                   "v/xnZh5XzntOPnS9RNXngAAAAAAAAAAAAAAAAAAAAAGmvui9IagngnvtlobrLTNcyB1bTxVGxr/a\n"
                                   "ROsRyccAR6bo66PqVWrS6YtMCs9hY6GmZj3YYgG0p7JZqZESnoKeFEXciRxMbx8eCIBNAAcB0t9D\n"
                                   "uk+kiiok1BU1NH8E9c+mqaV8bNqSo3rN/WskTb8Ui9wH5+6moLdbtSXW32yp9dttHWVEFFWcF66C\n"
                                   "KVzY5Mt4dtqIvADWgAAAAAAAAAAAAAAAAAABJoZLYx7vX4Jp2fJSCZsCp45V0U+fsA7LS1J0MXOe\n"
                                   "Kmv1XetPK9cLVp1FfTp5u2RQStT3McB7lavQ80LdbTHc7ZrGe40c/agqqaOF0as8ODncU7+P1Aab\n"
                                   "UvoY3SGF0um9QRVcicqWuiWBV90sayJn3sT3geC6r0ZqfSdzW26ht8tvqk4sSRMsenzo5G5Y9vm1\n"
                                   "VA0oAAAAm2293q1v32yvqaF/PdTSviX7WKgFtzvF3us/rF0rqivqF5zVMr5n/rPVVAiAAAAAAAAA\n"
                                   "AAAAAm2y2OrnSIjtvVpn7QIbmq16t8FwB9Cs4savkBp9aVi0ema16e3IzqWf9r2V+5VUDxhsKgd9\n"
                                   "0HVNZbek+zVlE1zqxiVSUzGJuc6R9JMxjUTjncrsAfWk1bNLUXue4sSO4ttUDZ417OKt1I6rciJ8\n"
                                   "5GU3JAMduu+n3OtliqGIy4O9SqJZ1XDpPWsSPiXHso2J6d4GVbhY1o4qenWf4YSiiq5URU6pySwt\n"
                                   "kTGcrze3wA5zphoaKTSNTRpVJVsc2RJHpw2T0ip17G/oux9YTWdJ1fHzmq1ytcmFTgqHK91QDpka\n"
                                   "jIKbb3wUzlz3q6KmVfvUyycZehsk/Kr2RJk+PhXPOF/3RR/vI6LT9WO0/mGeoT+Mt/Pd/alIaT0/\n"
                                   "ej649FOp67oylj3Z9XuEsfuzDC/H9c68HK+e9rR83yeyGzzAAAAAAAAAAAAAAAAAAAAAAAAAAANL\n"
                                   "rDWFg0hYKm/X6pSmoKZOK83vevsxxt+U93cn7APhbpf6ftXdIlVJTb3WzTTXfEWiFy4eicnVDkx1\n"
                                   "rvL2U7k71Dy8AAAAAAAAAAAAAAAAAAAAAAB23Rb0t6q6O7v61apllts7k+EbTIvxE7e/x2SInsvT\n"
                                   "inmnAD7p0Lrmwa207T32yTdZTy9maJ35SGZERXxSJ3Obn604pwUDJrHRWm9YWWWz3+jbVUknFjuU\n"
                                   "kT8cJIn82PTxT3LwA+F+l3olvXRzqD1KqVam1VWX2u5bdrZWJjc1ycdsjM4cn18lA4QAAAAAAAAA\n"
                                   "AAAAAAAAAMKB0GlGLvqfzW/tA1UkDlnk/OX8QPcaK+WORjWev0/WImHIsjU4pzxxwv1Ac90kTsmp\n"
                                   "KKkge2Rr3umerVRU7CbW8vzlA4dlsd4AbbT81ZZbxS3Ske6CqpX74ZmcHNfjCKgH0PoHU9vfZ6Jl\n"
                                   "/ZPXX/VlTXyUNbvVEYqQep5kTLd27dI1OC47gMsFsqlvdq1fO7baqiG1pbkTDlncltzMiceysK0y\n"
                                   "quQJdDreCe+Q2ZlJAyK02q3ddXI342SOf4Pa5JV5rsWTCAed6ruNxppap9Uispa2qroYEcvN0Umy\n"
                                   "XsrxTCqif/gDw+v41s6/84/+0c08Xt4uWOzAQ0dIx/WU1MuMYhgb+rHTt/YZZOZ27F9Kvb+0eo9q\n"
                                   "nX6D0/7iP9xHRpb6kebJWv2SI7Ge2v8AbkQhpL6o9ESbOiLxBn2Ljv29/bpoUz9ew6tn4PC9sR8y\n"
                                   "O3q92N3kAAAAAAAAAAAAAAAAAAAAcNZtUa1vst2da6e1sp7Zcqu2OjqZZ2zotLJtRZGsY9E6xm2R\n"
                                   "vi1yL3gct0idNN+0A6FNQUdI1k7tkU0Mda+Jztu7CSLG1i4TnhQOL/yxrX/NU/8As6n9wHolD0la\n"
                                   "3rqGnraeytfT1UbJoXpSXRcskbuauUgVOS9wE6h1l0hVlXHTNs8MTpVwkk9Nc4o0/Oe6BGonvA3U\n"
                                   "tT0jwxPmmjsccUbVfJI+eqRrWpxVVVY8IiIB8QdOHTHe+kS/o2WRjLJbVdHb6an3pE9c4dUKj8OV\n"
                                   "z+7KJhvcnEDzUAAAAAAAAAAAAAAAAAAAAAAAAAekdBfStU9H+r45Z3uXT9xVsF4g5ojc9idqfOiV\n"
                                   "c+aZTvA+9YpYpomSxPSSKREdHI1ctc1eKKipwVFQDmeknQNq11pKssFeiNdKm+iqsZdBUN/Jyt93\n"
                                   "JfFMoB+fN6sFyst4rLRcYuprqGV0FRH4OYuOHii80XvQCK2mcoF3qjvAAlI7PICi0rkUCx0DkAxq\n"
                                   "xQKYUAAAAAAFdqgXJGqgZmUzlAkxUDl7gOo0nbHdZUcPkt/aBgSyPdO/DflL+IGxg0+q/J+oCbBp\n"
                                   "2T2tvLmBKdZduERADrZjm0DB6tPTPZPC90Usbt8UrHK1zXJyVFTiigYl1DqWlhpYILlUNp7f1vqc\n"
                                   "PWOWOLr0Vsmxi5am5HLkDWz6w1Iye4z+tZnudMyiqpdrUcsMT4nsRuETaqLTM4oBI1r0oar1vd6G\n"
                                   "pvHUpJTxtpY2UzFjYuXq58ity7tyOdlygcxUNV88jvnOVftU5pe3j5Y7MaQKQu6C3UsvwbTvfxR6\n"
                                   "LtVePBsjI/u2GeTi7Nin5cef5kqaZc0v6f8A9O0iOEtMnPXvPqrcqZ23l8v/AO48q0mfT0fS3ohy\n"
                                   "Ys2oqfKdioppMd/biVOPl2Dp2d43tjmq+gjoeMAAAAAAAAAAAAAAAAAAAB5ro/UmlbDqPXlDdbxQ\n"
                                   "2+qfqBKhKeqqYYZFZUWyhVr9r3NXDlRyIvfhQPIvTJ1Lpy76a09FarrSXCSKtldKylnjmVqLFjLk\n"
                                   "Y52APlMD9EdCdIGkoNEaegfWuWWK2UbJGsgqH4c2BiKnZjXvA3ydIWmV9h1Y/wDMt1e/+zAoHjPp\n"
                                   "R9MlLR6G/g3Z/W4bjfl6ud9RS1NHiib+V2+sRxbusXDOHcqgfGwAAAAAAAAAAAAAAAAAAAAAAAAA\n"
                                   "AVRMgfa3or67k1DoFbLWP31+nHNpkVebqV6KtOv6O1zPc1APaAPmL0q+j9jb1b9WUsaI24N9UuCp\n"
                                   "/PxJmJy+bo0VP0APDorI7OEaBmbYnKuETiBLTTD3UrlRvbZxVAIT7K5ytVE94GCSxSvdsa3K81A1\n"
                                   "8lpencBgda39Wq45AR1tz/ACxaB6dwFvqb/AB6o/wAubRuXuAzx29y9wE2C1uVfZA2lNZHO+SBua\n"
                                   "PTjuHZ5gdhpjTDm9a7bzRP2gS6fS3xj1Vvfz94Gzh0z2tyt7PeoEn+D2Mrj3IBGltPDb1fECDPak\n"
                                   "Z3cV55A1VfTYTCRMVPzQNU98cbHMfQU07c/6xr0X7WOYoGqqEtT/AG7OxP6GaZv9t0oGGhtmnpKp\n"
                                   "H+pVcKxosmUqI3pw5cFhYvPzEprGs6I1RZYuud6sj+p+R1mN3LjnHDmcz2YsrFY5HYwg0N51FJZH\n"
                                   "fBNAiR42sk3L45q1XJXJHi6Nkv8AD5ytnsT1bT8OSu++BEKxDXJfxjv6Sur7E/Yq7cYd/jeRovOT\n"
                                   "9/6e1+i/A6jn1BCrdvWtpXefxe9P8Ztgeb7UnXd83vm46Hjq7gK7gK5AZAqAAAAAAAAAAAAAAB5N\n"
                                   "pzS9ur+mPpSivNHT19HXxaeqIoZmJIiIymmjRcOTg5JIMoqcuC8wPJfS405X2HTGn6Rt1muFk9cl\n"
                                   "9Rpq342ppl2KuxKrO6WJGqjW9YivTHF7s8A+XwP0x6Pl/wDYHTX/AMqov/p2Ab7cB8A+kpq9+pel\n"
                                   "y8K1+6ktLktdKnglNlJftnV6geXAAAAAAAAAAAAAAAAAAAAAAAAAAgEiGPKge1ejFepLL0lU1Oq4\n"
                                   "prxDJRTZ5bsdZEvv3xo36wPs0DkulXT7L5oW5Uqt3SwsSqhXvR0C71x72oqfWB85QaQVWbscfACT\n"
                                   "DpJOtbuaBvKzRaQwJV0+FbjtoBoanS7GplG8V8gKUGlHsSTZFumk7LANHW6RdDK6ORnbReIEV2k1\n"
                                   "WF2Gd/gBD/gm7rNrmAR6nST43L2fcBFdph3NWgWrpWX2tvBQLo9MP3Y2gbGj0lJwyzh7gNxR6Qek\n"
                                   "ns4wB0FHozPHbnzA39JpPajW7c+IHVWnTjYmqm1OQEiGwsbu7PmBmS1t6pWo3mBg+CcZ7PECDUWf\n"
                                   "tL2QNXUWNVVVX6gNVWWBzs4aBqJ9LucvLAEKTSjvmgZqfSOyJVVvak/sp/xK2b4I8dUhukcp7Jno\n"
                                   "699LbpJrWou3PdyGiu+3VBpdfVImKmUbuTHhmTd+0WhpgyaRPdWbTUfVx5ZlUX/C1CsQvfJw7stR\n"
                                   "pdHxuw3v8OPNw3Uzldp0SW11vvVf2cdZBz9zm/vL44c+131rD1VJDV56qSAXJIBcjwLtwFyKBdkC\n"
                                   "oAAAAAAAAAAAAfIDfS4jteu9Q3qPSizJcoaOi6la/Yrfg59T8Zn1d2esSp5d2Oa54BxXTd6QP/6o\n"
                                   "Wu20HwD8EfB075+s9b9Z372bcY6mHH2geQAfQli9MXUlo0/bLSzT1HKtupo6VZ1llTekLUY123HZ\n"
                                   "XDePFQJi+mxqn/4bof8AbSgfOlZVz1lXPV1Dt9RUSOlmf4veu5y/WqgYgAAAAAAAAAAAAAAAAAAA\n"
                                   "AAAAABcxOIG1oINygehaIatBebdcmcJKKphnav8ARvR37APuYCyaJk0MkL+LJGqx3uVMKB49S2WS\n"
                                   "LdvjRdq4+oCUyzRPXK+wgEmpsqKxG06O6tfkqnACEtha2RvxeXOymPECRR2/1WdX9Tu4YRoEGs01\n"
                                   "HU1T5HQ7dy52gR5NKwp3Y8sAYP4I06u37Mp4YAhzaOR73IrMJ5oBFl0U3C9jlyAquj0VrcR4AzUu\n"
                                   "iWI525vPyA2dDovrJEa1mMAbOLSbY3JluccwNjS6dYnJnECc2ybcYQDZw25rU4p/6QC1be3wAtWi\n"
                                   "ZywBatubjiBgfbfogRZLNlFdjincBEfZM8m+9QMD9PpuVFTmBjj0sjnKqs4d4Gb+DbXfJ4JyKt4n\n"
                                   "RmbpvwZwI0N5kbYGsc3scVJ0N5NS0L1CJtwm5eH6pEwmllUscatTczl/wGibXXTWuJvuTmn2jQ3m\n"
                                   "w07RsguLpWfKjc37Vav7CYVyW8HSbyzBVJAL0kAyI8DI14GRHAZEUC5AKgAAAAAAAAKKBaqgflzd\n"
                                   "v5UrP6eT+2oEUAAAAAAAAAAAERV4ImVAKipwXmAAAAAAAAAAAAAAAAAAMkPMDobSxNyAej6cpGOR\n"
                                   "qeIH2VbXK6gpnLzWJir+qgEoDhpGu9Yla1jdm7n9YEplPTRpya5yrlW55IviBOnZDJD1cKJnvVAI\n"
                                   "bbai70lw7h2F8AK09AxXdr2e/AGWooYusyzvAJa2Lu5AILWxJM/JQCtTat7usxhF4KBidZY1TGMA\n"
                                   "X/AMOEw3iBljsbNq5aBJgtmzk36wMq2tiO5ZUC5KBiJwQCvqacvsAy+rIBVlGzOcAY5aRjV8MgEo\n"
                                   "UWNfndwGP1TAFrqJFRQKRWyNeYGJKCJZdnf3gX+o7VViJwAuSga1OWVCdRKXLeANVPUfaR+F+aDV\n"
                                   "a2DuX2efD/15EJiyskUaYx3g3lFgauU4DQ3l9FDtqNycUwEzLYKSoAXIBlbkDIgGVoGVoGRAKgAA\n"
                                   "AAAAAALVAxOUD8vbr/KlZ/Tyf21AigAAAAAAAAAADf6fpmRQS10ydlEw3PgnMDRzydbO+TGN7lXH\n"
                                   "vA3tXBFR2FrHNTrpcce/K8QMVio6d9HU1E7UcjeWe7CZA1VFCk1XDEvJzkRfcBKvlJDS1qRwphux\n"
                                   "Fx55UDotHWG3V9huNTUxo+aJXJE7wwzIHNWWjhrLtS0sy4imkRjl94E7V9jhs129VhVViWNr2q7n\n"
                                   "xyn7AOr1Voi0QdHts1FbGr1siRLVrlVTtphfd2wPOQAAAAAAAMkPMDoLS/CoB6Vpaoa3blfeB9lU\n"
                                   "bOqpIYl5sja3j5JgDK+RrI3PXk1Mr9QHH7pMybEzuXLl93d/+ALGRTbsJwVeaqBuIWMgpcouXeIF\n"
                                   "Yvnv4Z5ogGRkeEymMovEAqbl4Jy5gSIosMUC9kDUXh3gZXx54dyAXxwJ3/WBlSnTwAzMp02qA6lE\n"
                                   "5IA6oC1YkAokIF3VgUVnACxYNy8QKsjxwAtWECnUgV6rDQKMpmpl2OIFVi8PtAt6lQLHR4x7wKYT\n"
                                   "OXfYBgVnuz3gYpEVfZTlzAojccMY8QJFFCzc5UAl7AKdWBcjAL0YBkRoF6IBkagGRAKgAAAAAAAU\n"
                                   "UCxwGF6gfmBdf5UrP6eT+2oEUAAAAAAAAAAyU8Lp5mRN9p64A3t+mZS0cVBF4dr3IBqrRS+s18bP\n"
                                   "kou5/uQCXqSq6ysSFvsQpj61Alp/FtM/SlT+2v7gNXY25usHvX8FAyaifuuj0+ajU+7P7QOy6Pf9\n"
                                   "GLr+c/8Au0A4KgqPV66nqP5qRj/1XZA7XpTgzLb6tOUjHMVfdhU/FQOr6PFTUPRddbE/tTU3WNiR\n"
                                   "fpJ1jF/WA8YVFRVReCpzQABmo6KqraqOkpInTVMy7Y4mJlVUC2pp5qaolp527JoXKyRi9zmrhUAx\n"
                                   "gAAFzF4gba3zbXIB6f0bfx7UlrpUTKSzs3/mIu56/U1FA+uYbu13ygKXO6tZROTvl7Dfr5/cBBon\n"
                                   "OkTK8mt4IBXfuf2Wrx7wJcOHYjdxwoEpGYaiJ4gZFVGouOfeBfFlOPcBKjTMfvAMbgDO1qZAzIne\n"
                                   "BkaBlbyAooFMAU2gNoDaBXaBbgBtAbUApt7wGEAdwFigWOcBiXbniBjdjOEAxK16+w1VXvAuZDUd\n"
                                   "0aogFPUqt3NuE96ASKSjfDu3Y4+AEnYA2AEYBkRoF20CqIBeiAXAAAAAAAAAKKBjcBheB4v/AJKX\n"
                                   "RGszppqetne5yvfvqnJuVy5+QjPHuA8z9IzoV0DozQNNdtNW59PWrcooZ531E0vxD4ZlVu2R7m+2\n"
                                   "1vHGQPHejfV2k7Fc8aq01T3+1S8JFdlKiFO90Xaax3ucnuVAOz6OqLQ9/wDSRpKe3UFPU6Sq5qp9\n"
                                   "LQTwo6Hq0oJZGNdFIip2XpnC96AfW8HRx0ewIrYNL2mJq8VRlDTN4/UwD4S6XorXF0oaoitbEjoo\n"
                                   "7jUNZG3CNRyPxIjUTgjes3YTwA5AAAAAb3TdK1vWVsnssTDf2gamvqnVVU+Ze9ez7u4DdWCNtNQz\n"
                                   "1z/Pb7k/4gaF7nzTK5eL5HfeoG+1G5IqKlpk9/6qY/aBC023dc2r81qr+z9oGC9O3XSoXz/BEA7f\n"
                                   "o9/0Yuv5z/7tAPOwPQ9XZrtC22t5uj6pz1/ObtX71Ay9Bd3Sl1RNb3riO4QqiJ4vj4p9yqBy+vrT\n"
                                   "8FavudJjDOuWSP8ANk7aY92cAc+B7z0TaRp7Nol2pqpiLcbtuSlcvOOlYu3h4LI5FVfLAHlWvkhd\n"
                                   "fZJ2cHS/lE807wObAAACASqeXaqAexdCbOrr5rzL7FO1Yadf+cenaVPc3h9YHuFFqNrlzuAvZqH4\n"
                                   "Qrmqx/8AF4uyzzXvUDr7VJ2E4Y3JzAzSM2S9hctXigEiJERqbV+0CSjtzGp3gZFcir2vqwBliblO\n"
                                   "KcQJTeXAC5oGWMDOi8QL0AyIoFcgUApwArkABQABRAK7XZ5AV2OAosTgK9T5gOpaBT1eLwAJDEny\n"
                                   "UArsanJMAVwAApgBgCm0BtAqiAXIgF2AGAKgVAAAAAAAAAUUCxwGFyAYXIBEuFtobjSS0VfTR1dH\n"
                                   "O3bNTzNSSNyeDmuyigfOvSd6ItBV9bctCTpRVC5c6z1LlWBy88Qyrl0fudlPNAPnGhrNW9H+sEqY\n"
                                   "UdbNQ2aZzFR7Wv2PVqxvaqLua5HNcqeaKB9WdG/pU6Uvtsli1KjLNfaaF8u3P8VqerYrlSF7s7Hu\n"
                                   "xwY76lcoHx1XVk9dW1FbULuqKqR80zvF8jtzl+1QMAAABdFG6WRsbeLnLhAOgvMjaG2xUMftPTte\n"
                                   "7v8AtA5+ON0kjWN9py4QDf32RtLb4KFnf7XuT/iBqbTD1txgZ3bsr+jxAl6mm33DZ3RtRPrXiBfp\n"
                                   "Zua6R3zY/wAVT9wGtr3bq6oX/nHfiB3vR7/oxdfzn/3aAedgeh23+P8ARlUw83UyP/qO6xPuA4/T\n"
                                   "N0datQW+4IuPV5mOcv0c4d/VVQPQunm1tS4268xp2KuLqnu82dpv2o5QPKgPpy41sNP0e6fhgdmJ\n"
                                   "trpNq8s5gaucefMD521FU9fdJF8ANYAAAAJNvpZqupbDH3+05eTU8VA9Ot+o7dZ6KKihkRkcScvl\n"
                                   "Kveqp4qoGxg1tLVokMCuZG723d6p4e4DvNMV73JHl3ZT8QPULTcZNqcc5A6KnkjaxHO9pQJKuZt3\n"
                                   "t5Y4gXUzuC7lx4AZF3KBIicjV7TuYGXrURcIBlSRqgZGybfMDM2T6wMrN6/JUDJtk8ALkjkAqka9\n"
                                   "4FdnmARiIBXagFcJ4AVAAAAAAAAoAAAMAUwAwBXADADADAFQLgKYAqAAAAAAAAAAALVAxOQDErQL\n"
                                   "VYBTYB81VfRvZtRdPNfT3ql9atldUVPrEWXNz/FXq1Uc1Ucio5EVFRQPP+nX0cv4AUDtRWi5JVWB\n"
                                   "0zYfVanhVRPkztRFRNsreHPgvkvMDxAAAAAbrTdIiyvq5PYi9n3ga+51a1VZJL8nkz3IBM05S9bW\n"
                                   "9a72IUz9agRrzVes18jk9lvZb9QEzS8W6sfL3Rs/H/8AAGuuM3XV08ni9ce5OAG20qnaqXeCN/aB\n"
                                   "o5Xb5Xu+c5V+0D0Lo9/0Yuv5z/7tAPOwPQejR7ai13S3u5L2sf0jdv8AhA8/exzHuY7g5q4X3oB7\n"
                                   "NfP/AGl6F6Wu9uptyNc5e/MK9W9f1cqB4wB61ar7W3PQFFAkMr5qJq03ZY5dzY/YVvDjhuE96Aec\n"
                                   "1Fg1FJO9/wAGVfaVV/ISfuAs/g5qH/8Aq6v/AGEn+6BHq7ZcaNGrWUs1Mj/YWWNzM4543IgEYBwA\n"
                                   "ypVTtZ1bHbGLzRvDPv71ArC/CgdLZqxWuQD1DTFzkZswi/iB63YKmsnaxI4Xv/RUDsaakucmFWmk\n"
                                   "andlqp+IG5ZQVixI3bt8cqgF7LXVL7StAlNt7sIiyfYgGZttZ8p7l93ACTHRRN8V94GZlLAnyEAk\n"
                                   "Nii+Yn2AZEaicgLkAqAAAUAAVAAAADAACoACgDAAABUBgBgBgBgBgBgCoAAAAAAAAAAAAAAFFAtV\n"
                                   "ALFaB5h06dKd66O7VbK21Wpl1krp3wyRv39hGs3Z7GQPHP8ALC17/wDB0H21H7gOeh9I/VsWpVv6\n"
                                   "aTj9ZVzn7Pj8dtisXuzyUDQ9MfT5qfpBsdHZbnZ47TT09T632FlzI5rHRtzvxwTrFA8jAAAKsa57\n"
                                   "ka3irlwgHRXJ7bdaWUjPykiYd+0DnAOjpv8Ak+wulXhLNxT9LkBzgHQ2L+L2qpqV784/RT94HPAd\n"
                                   "Dpvs0NVJ/wCuCf8AEDngPROj3/Ri6/nP/u0A87A7Hovqdl8mg+TNCv2tVMfioGovdluDtQV8FLTS\n"
                                   "zqkzlRImOfwcu5PZRfED1fohtN4/g3d7LdqGanpqjKw9exWZ6xu1yIjseAHFr0K61Rksjm08bI8+\n"
                                   "3JxVE7+yjgORpIb2+Z1HQJUTSMVU6qn3u5c8NaB1dt6LOme5YWl07ela7gj5IZ4Wrxx7UuxAO90X\n"
                                   "6NfTjNcY6ytpo7ZDTrvxX1bXdZj5LWQOmXP521PMDa6g9HLpn1I+GGpt9DRR0znbZvWmOR27HHCb\n"
                                   "nd3gBdQ+hPrV+Frb3boUXmkfXSKn2xsT7wOkovQgoERFrdVSOX5TIqRET6nOl/YB0NH6F3RnG1PW\n"
                                   "7jdJ396skhjb9nVPX7wOjtHoq9DFv/KWqa4O+dVVMv4RLEn3AdVbeh/owtn+Z6aoU/pYuu/vd4G8\n"
                                   "p7BY6L/M7fTU2P5mGOP+yiAZpGgYlaBbtAqjAL0YBkawDI1gGRGgZEQCuALgAAAAwAwAAYArgAAA\n"
                                   "YAYAYAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAApgBgCmAGAK4A8q6augCzdJnU1zq+W23yjh6ikqE+\n"
                                   "MgVm5X7ZIeHe5e01UX38gPjvpF6F+kDQM7vhu3q+3ZxHdqXMtI/PLt4RWKvg9EUDhgAG405RpLUr\n"
                                   "UP8AycPL3gRLvWrV1r3/ACG9lnuQDFQUy1NXHD85ePu7wNpqapTrI6RnsxplU8+4DRgdLJDKzTsU\n"
                                   "ELHPkmx2WIqr2u0vICJR6K1bWLintFUue90bmJ9r9qAdpYuivWS2meGWmZTSy7tvWyN70wnsbwM9\n"
                                   "F6P96kx63c4IV+bGx0v49WB6HpLoXdb7dPQxuq671lVV7o4lTm3bwwjgNvavRityKi/AMsjk+VVT\n"
                                   "K1PrarkT7gO0s3o/toXpLTUFuoZE+WiZf9rWL+IHT0fQ8zG6qr0a7vbBEn9py/sA3FN0V6ai/Kuq\n"
                                   "J/J0iNT+ojQNpT6G0lB7Nsif/S5l/vFcBuKalpqWJIaaJkETeUcbUa1PqTCAZQAAAAAAAKKBjcgG\n"
                                   "J7AMSsAt2AXJGBekYGRGAXo0C5GgVwBXAFcAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n"
                                   "AAAAAAAAAAAAMc8EFRBJBURtmglarJYnojmua7grXNXgqKgHg3SZ6IujdQdZX6UemnLo7KrTNarq\n"
                                   "GR39Hzh/Q4J80D5V130V660NWpTaitklPG9+ynrmfGUsq93VzN7OVTjtXDvFAN/Q9HOrn2VkVHR7\n"
                                   "XTJxle9rU7XNeefuAuougPU8q/xqspqdPo75F+zDfxA63T/QJHRy9ZUV01RK5NrUii2fjvA6yj9G\n"
                                   "aiqJllmtVZUveuVdO90afdsQDrrT6NtBDjFnoIMcnzYld9vbUDsKHoYjiajZauKJqcmwxfv2gbqm\n"
                                   "6KbBGnx008y+SoxPsRFA2tPoLSkOMUDZFTvkVzvxXAG1p7RaqfHUUcMWOStjai/gBLAAAAAAAAAA\n"
                                   "AAAAAAAKKgFitAsVgFNgF2wC5GgXbQK4AqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n"
                                   "AAAAAAAAAAAAAAAAi3O2UF0oJqC4U7KqjqGqyaCVqPY5F8UdlANDQ9G2kaNiMZSLIxvBiSPcuETw\n"
                                   "4oBuKfT9jp0xFQQNx37EVftXKgT2sYxNrERqeCcAKgAAAAAAAAAAAAAAAAAAAAAAAACmAKYAYArg\n"
                                   "CuAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n"
                                   "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n"
                                   "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n"
                                   "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n"
                                   "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n"
                                   "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n"
                                   "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB\n"
                                   "/9k="}}
        response = self.client.put(path=reverse('api_identities_contacts', kwargs={'object_ptr': self.contact.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        self.assertEquals(data['contact_type']['id'], updates['contact_type'])
        for value in data['contactvalue_set']:
            if value['name'] == 'Test':
                self.assertEquals(value['value'], updates['Test___0'])
            elif value['name'] == 'picture':
                self.assertTrue(
                    value['value'].endswith(updates['picture___0']['name']))

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

import handlers
from django.conf.urls import patterns, url
from treeio.core.api.auth import auth_engine
from treeio.core.api.doc import documentation_view
from treeio.core.api.resource import CsrfExemptResource

ad = {'authentication': auth_engine}

# identities resources
contactFieldResource = CsrfExemptResource(
    handler=handlers.ContactFieldHandler, **ad)
contactTypeResource = CsrfExemptResource(
    handler=handlers.ContactTypeHandler, **ad)
contactResource = CsrfExemptResource(handler=handlers.ContactHandler, **ad)

urlpatterns = patterns('',
    # Identities
    url(r'^doc$', documentation_view, kwargs={
        'module': handlers}, name="api_identities_doc"),
    url(r'^fields$', contactFieldResource,
        name="api_identities_fields"),
    url(r'^field/(?P<object_ptr>\d+)',
        contactFieldResource, name="api_identities_fields"),
    url(r'^types$', contactTypeResource,
        name="api_identities_types"),
    url(r'^type/(?P<object_ptr>\d+)',
        contactTypeResource, name="api_identities_types"),
    url(r'^contacts$', contactResource,
        name="api_identities_contacts"),
    url(r'^contact/(?P<object_ptr>\d+)',
        contactResource, name="api_identities_contacts"),
)

########NEW FILE########
__FILENAME__ = csvapi
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Import/Export Contacts API
"""

import csv
import StringIO
from treeio.identities.models import Contact, ContactType, ContactValue
import re
import urlparse


class ProcessContacts():

    "Import/Export Contacts"

    """
    def export_contacts(self, contacts):
        "Export contacts into CSV file"

        response = HttpResponse(mimetype='text/csv')
        response['Content-Disposition'] = 'attachment; filename=Contacts.csv'

        writer = csv.writer(response)
        headers = ['name', 'type']

        fields = ContactField.objects.filter(trash=False)
        for field in fields:
            headers.append(field.name)
        writer.writerow(headers)
        for contact in contacts:
            row = []
            row.append(contact)
            row.append(contact.contact_type)
            vals = contact.contactvalue_set.all()
            for field in fields:
                inserted = False
                for val in vals:
                    if val.field == field:
                        row.append(val.value)
                        inserted = True
                if not inserted:
                    row.append('')
            writer.writerow(row)
        return response
    """

    def import_contacts(self, content):
        "Import contacts from CSV file"

        f = StringIO.StringIO(content)
        contacts = csv.DictReader(f, delimiter=',')

        self.parse_contacts(contacts)

    def verify_email(self, email):
        "Verify email format"
        try:
            email_matched = re.findall(
                '[a-zA-Z0-9+_\-\.]+@[0-9a-zA-Z][.-0-9a-zA-Z]*.[a-zA-Z]+', email)
            if email_matched:
                return email  # Contact Email Address
        except Exception:
            return None

    def verify_url(self, url):
        "Verify url"
        if url:
            if '://' not in url:
                # If no URL scheme given, assume http://
                url = u'http://%s' % url
            url_fields = list(urlparse.urlsplit(url))
            if not url_fields[2]:
                # the path portion may need to be added before query params
                url_fields[2] = '/'
                url = urlparse.urlunsplit(url_fields)
        return url

    def parse_contacts(self, contacts):
        "Break down CSV file into fields"

        for row in contacts:

            # Tidy up keys (iterkeys strip())

            try:
                type = row['type']
            except Exception:
                pass  # Set type to default type

            try:
                name = row['name']
            except Exception:
                try:
                    firstname = row['firstname']
                    surname = row['surname']
                    name = firstname + " " + surname
                except Exception:
                    continue

            contact_type = ContactType.objects.filter(name=type)
            if contact_type:
                contact_type = contact_type[0]

            # Create a new contact if it doesn't exist
            contact_exists = Contact.objects.filter(
                name=name, contact_type__name=type, trash=False)

            # TODO: If one does exist then append the data on that contact

            if not contact_exists:

                contact = Contact()
                contact.name = name
                contact.contact_type = contact_type
                contact.auto_notify = False
                contact.save()

                fields = contact_type.fields.filter(trash=False)

                for field in fields:
                    if field.name in row:
                        x = row[field.name]
                        if field.field_type == 'email':
                            x = self.verify_email(x)
                        if field.field_type == 'url':
                            x = self.verify_url(x)
                        if x:
                            contact_value = ContactValue()
                            contact_value.field = field
                            contact_value.contact = contact
                            contact_value.value = x
                            contact_value.save()

########NEW FILE########
__FILENAME__ = forms
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Identities module forms
"""
from django import forms
from django.core.files.storage import default_storage
from django.template import defaultfilters
from django.core.urlresolvers import reverse
from django.utils.translation import ugettext as _
from treeio.core.conf import settings
from treeio.core.models import AccessEntity, Object, ModuleSetting
from treeio.core.decorators import preprocess_form
from treeio.identities.models import Contact, ContactValue, ContactType, ContactField
from unidecode import unidecode
from PIL import Image
import re

preprocess_form()


class MassActionForm(forms.Form):

    """ Mass action form for Reports """

    delete = forms.ChoiceField(label=_("With selected"), choices=(('', '-----'), ('delete', _('Delete Completely')),
                                                                  ('trash', _('Move to Trash'))), required=False)

    instance = None

    def __init__(self, user, *args, **kwargs):
        if 'instance' in kwargs:
            self.instance = kwargs['instance']
            del kwargs['instance']

        super(MassActionForm, self).__init__(*args, **kwargs)

        self.fields['delete'] = forms.ChoiceField(label=_("With selected"), choices=(('', '-----'), ('delete', _('Delete Completely')),
                                                                                     ('trash', _('Move to Trash'))), required=False)

    def save(self, *args, **kwargs):
        "Process form"

        if self.instance:
            if self.is_valid():
                if self.cleaned_data['delete']:
                    if self.cleaned_data['delete'] == 'delete':
                        self.instance.delete()
                    if self.cleaned_data['delete'] == 'trash':
                        self.instance.trash = True
                        self.instance.save()


class ContactFieldForm(forms.ModelForm):

    "Contact Field Form"

    def clean_name(self):
        "Ensure the name of the field only contains alphanumeric"
        name = self.cleaned_data['name']
        if not re.match(r'^[a-zA-Z0-9-_]+$', name):
            raise forms.ValidationError(
                _("Sorry, field names can only contain letters, numbers, hyphens (-) and underscores (_)"))
        return name

    def __init__(self, *args, **kwargs):
        super(ContactFieldForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")
        self.fields['label'].label = _("Label")
        self.fields['field_type'].label = _("Field type")
        self.fields['required'].label = _("Required")
        self.fields['details'].label = _("Details")

    class Meta:

        "Fields Form"
        model = ContactField
        fields = ('name', 'label', 'field_type', 'required', 'details')


class ContactTypeForm(forms.ModelForm):

    "Contact Type Form"

    def __init__(self, user, *args, **kwargs):

        super(ContactTypeForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")

        self.fields['fields'].queryset = Object.filter_permitted(
            user, ContactField.objects.all())
        self.fields['fields'].help_text = ''
        self.fields['fields'].label = _("Fields")

        self.fields['details'].label = _("Details")

    def clean_name(self):
        "Ensures a contact with the same name doesn't already exists"
        instance = getattr(self, 'instance', None)
        name = self.cleaned_data['name']
        if instance and not instance.id:
            slug = unicode(name).replace(" ", "-")
            slug = defaultfilters.slugify(unidecode(slug))
            if ContactType.objects.filter(slug=slug).exists():
                raise forms.ValidationError(
                    _("Contact Type with such name already exists."))
        return name

    class Meta:

        "Contact Type Form"
        model = ContactType
        fields = ('name', 'fields', 'details')


class ContactForm(forms.Form):

    """ ContactForm """

    name = forms.CharField(
        max_length=256, widget=forms.TextInput(attrs={'size': '50'}))
    instance = None
    files = {}

    def _get_form_field(self, field, value=None):
        "Generate a Django-friendly field from Hardtree spec in DB"
        form_field = None
        if field.field_type == 'text':
            form_field = forms.CharField(label=field.label, max_length=512,
                                         widget=forms.TextInput(attrs={'size': '30'}))
        elif field.field_type == 'textarea':
            form_field = forms.CharField(label=field.label,
                                         widget=forms.Textarea(attrs={'class': 'no-editor'}))
        elif field.field_type == 'details':
            form_field = forms.CharField(
                label=field.label, widget=forms.Textarea())
        elif field.field_type == 'email':
            form_field = forms.EmailField(
                label=field.label, widget=forms.TextInput(attrs={'size': '30'}))
        elif field.field_type == 'url':
            form_field = forms.URLField(
                label=field.label, widget=forms.TextInput(attrs={'size': '50'}))
        elif field.field_type == 'phone':
            form_field = forms.CharField(label=field.label, max_length=256,
                                         widget=forms.TextInput(attrs={'size': '30'}))
        elif field.field_type == 'picture':
            form_field = forms.ImageField(
                label=field.label, widget=forms.FileInput)
        elif field.field_type == 'date':
            form_field = forms.DateTimeField(label=field.label)
            form_field.widget.attrs.update({'class': 'datetimepicker'})
        form_field.required = field.required

        if value:
            if isinstance(form_field, forms.FileField) and value.value:
                form_field = forms.ChoiceField(
                    label=field.label, widget=forms.RadioSelect())
                filename = full_filename = value.value
                match = re.match('.*[a-z0-9]{32}__(?P<filename>.+)$', filename)
                if match:
                    filename = match.group('filename')
                form_field.choices = ((full_filename, _("Keep existing: ") + unicode(filename)),
                                      ('delete', _("Delete ")))
                form_field.initial = full_filename
                form_field.required = False
            else:
                form_field.initial = value.value

        return form_field

    def _get_free_field_name(self, field):
        "Generate an available name for a field"
        num = 0
        field_name = unicode(field.name) + u"___" + unicode(num)
        while field_name in self.fields:
            num = num + 1
            field_name = unicode(field.name) + u"___" + unicode(num)
        return field_name

    def _get_upload_name(self, filename):
        "Returns an upload_to path to a new file"
        import hashlib
        import random
        while True:
            hasher = hashlib.md5()
            hasher.update(str(random.random()))
            filepath = u"identities/" + hasher.hexdigest() + u"__" + filename
            fullpath = settings.MEDIA_ROOT + filepath
            if not default_storage.exists(fullpath):
                return filepath

    def _handle_uploaded_file(self, field_name):
        "Process an uploaded file"
        try:
            file = self.files[field_name]
            filepath = self._get_upload_name(file.name)
        except KeyError:
            return ''
        destination = open(settings.MEDIA_ROOT + filepath, 'wb+')
        for chunk in file.chunks():
            destination.write(chunk)
        destination.close()
        return settings.MEDIA_URL + filepath

    def _image_resize(self, filepath):
        "Resizes Image if it's over the maximum dimension"
        filepath = filepath.replace(settings.MEDIA_URL, '')
        filepath = settings.MEDIA_ROOT + filepath
        try:
            img = Image.open(filepath)
            expected_size = getattr(
                settings, 'HARDTREE_IMAGE_MAX_SIZE', [400, 300])
            if img.size[0] > expected_size[0] or img.size[1] > expected_size[1]:
                filter_name = getattr(
                    settings, 'HARDTREE_IMAGE_RESIZE_FILTER', 'ANTIALIAS')
                filter = getattr(Image, filter_name, Image.ANTIALIAS)
                aspect = img.size[0] / float(img.size[1])
                newsize = list(expected_size)
                if img.size[0] > expected_size[0]:
                    newsize[0] = expected_size[0]
                    newsize[1] = round(newsize[0] / aspect)
                if newsize[1] > expected_size[1]:
                    newsize[1] = expected_size[1]
                    newsize[0] = round(newsize[1] * aspect)
                img = img.resize(newsize, filter)
                img.save(filepath)
        except Exception:
            pass

    def __init__(self, user=None, contact_type=None, *args, **kwargs):
        "Populates form with fields from given ContactType"

        if 'instance' in kwargs:
            self.instance = kwargs['instance']
            values = self.instance.contactvalue_set.all()
            del kwargs['instance']

        super(ContactForm, self).__init__(*args, **kwargs)

        self.fields['parent'] = forms.ModelChoiceField(
            label='Parent', queryset=[], required=False)
        self.fields['parent'].queryset = Object.filter_permitted(
            user, Contact.objects)
        self.fields['parent'].widget.attrs.update({'class': 'autocomplete',
                                                   'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['parent'].widget.attrs.update(
            {'popuplink': reverse('identities_contact_add')})
        self.fields['parent'].label = _('Parent')
        self.fields['name'].label = _('Name')

        if 'files' in kwargs:
            self.files = kwargs['files']

        for field in contact_type.fields.all():
            if self.instance:
                initial_field_name = self._get_free_field_name(field)
                self.fields[initial_field_name] = self._get_form_field(field)
                for value in values:
                    if value.field == field:
                        field_name = self._get_free_field_name(field)
                        self.fields[field_name] = self._get_form_field(
                            field, value)
                        if initial_field_name in self.fields:
                            del self.fields[initial_field_name]
            else:
                field_name = self._get_free_field_name(field)
                self.fields[field_name] = self._get_form_field(field)

        if user.is_admin('treeio.identities'):
            self.fields['related_user'] = forms.ModelChoiceField(label=_('Attach to User'),
                                                                 queryset=[], required=False)
            self.fields['related_user'].queryset = AccessEntity.objects.all()
            self.fields['related_user'].widget.attrs.update({'class': 'autocomplete',
                                                             'callback': reverse('identities_ajax_access_lookup')})
            self.fields['related_user'].label = _('Related user')

        if self.instance:
            self.fields['name'].initial = self.instance.name
            self.fields['parent'].initial = self.instance.parent_id
            if 'related_user' in self.fields:
                self.fields[
                    'related_user'].initial = self.instance.related_user_id

    def save(self, request, contact_type=None):
        "Process form and create DB objects as required"
        if self.instance:
            contact = self.instance
        else:
            contact = Contact()
            contact.contact_type = contact_type

        contact.name = unicode(self.cleaned_data['name'])

        if 'parent' in self.cleaned_data:
            contact.parent = self.cleaned_data['parent']

        if 'related_user' in self.cleaned_data:
            contact.related_user = self.cleaned_data['related_user']

        contact.save()

        if self.instance:
            contact.contactvalue_set.all().delete()
        for field in contact.contact_type.fields.all():
            for form_name in self.cleaned_data:
                if re.match(str("^" + field.name + "___\d+$"), form_name):
                    if isinstance(self.fields[form_name], forms.FileField):
                        value = ContactValue(field=field, contact=contact,
                                             value=self._handle_uploaded_file(form_name))
                        if isinstance(self.fields[form_name], forms.ImageField):
                            self._image_resize(value.value)
                    else:
                        if field.field_type == 'picture' and isinstance(self.fields[form_name],
                                                                        forms.ChoiceField):
                            if self.cleaned_data[form_name] != 'delete':
                                value = ContactValue(field=field, contact=contact,
                                                     value=self.cleaned_data[form_name])
                        else:
                            value = ContactValue(field=field, contact=contact,
                                                 value=self.cleaned_data[form_name])
                    value.save()
        return contact


class FilterForm(forms.ModelForm):

    """ Filter form definition """

    def __init__(self, user, skip=[], *args, **kwargs):
        super(FilterForm, self).__init__(*args, **kwargs)

        if 'name' in skip:
            del self.fields['name']
        else:
            self.fields['name'].required = False
            self.fields['name'].label = _("Name")

        if 'contact_type' in skip:
            del self.fields['contact_type']
        else:
            self.fields['contact_type'].queryset = Object.filter_permitted(
                user, ContactType.objects)
            self.fields['contact_type'].required = True
            self.fields['contact_type'].label = _("Contact type")

    class Meta:

        "Filter"
        model = Contact
        fields = ('name', 'contact_type')


class SettingsForm(forms.Form):

    """ Administration settings form """

    default_contact_type = forms.ModelChoiceField(
        label=_('Default Contact Type'), queryset=[])

    def __init__(self, user, *args, **kwargs):
        "Sets choices and initial value"
        super(SettingsForm, self).__init__(*args, **kwargs)
        self.fields['default_contact_type'].queryset = Object.filter_permitted(
            user, ContactType.objects)

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.identities', 'default_contact_type')[0]
            default_task_status = ContactType.objects.get(pk=long(conf.value))
            self.fields[
                'default_contact_type'].initial = default_task_status.id
        except Exception:
            pass

    def save(self):
        "Form processor"
        try:
            ModuleSetting.set_for_module('default_contact_type',
                                         self.cleaned_data[
                                             'default_contact_type'].id,
                                         'treeio.identities')

        except Exception:
            return False

########NEW FILE########
__FILENAME__ = hmodule
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Identities: Hardtree module definition
"""

PROPERTIES = {
    'title': 'Contacts',
    'details': 'Manage users, groups, companies and corresponding contacts',
    'url': '/contacts/',
    'system': True,
    'type': 'minor',
}


URL_PATTERNS = [
    '^/contacts/',
]

########NEW FILE########
__FILENAME__ = identicon
#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
identicon.py
identicon python implementation.
by Shin Adachi <shn@glucose.jp>

= usage =

== commandline ==
>>> python identicon.py [code]

== python ==
>>> import identicon
>>> identicon.render_identicon(code, size)

Return a PIL Image class instance which have generated identicon image.
```size``` specifies `patch size`. Generated image size is 3 * ```size```.
"""
# g
# Pillow Modules
from PIL import Image, ImageDraw, ImagePath, ImageColor

__all__ = ['render_identicon', 'IdenticonRendererBase']


class Matrix2D(list):

    """Matrix for Patch rotation"""

    def __init__(self, initial=[0.] * 9):
        assert isinstance(initial, list) and len(initial) == 9
        list.__init__(self, initial)

    def clear(self):
        for i in xrange(9):
            self[i] = 0.

    def set_identity(self):
        self.clear()
        for i in xrange(3):
            self[i] = 1.

    def __str__(self):
        return '[%s]' % ', '.join('%3.2f' % v for v in self)

    def __mul__(self, other):
        r = []
        if isinstance(other, Matrix2D):
            for y in xrange(3):
                for x in xrange(3):
                    v = 0.0
                    for i in xrange(3):
                        v += (self[i * 3 + x] * other[y * 3 + i])
                    r.append(v)
        else:
            raise NotImplementedError
        return Matrix2D(r)

    def for_PIL(self):
        return self[0:6]

    @classmethod
    def translate(kls, x, y):
        return kls([1.0, 0.0, float(x),
                    0.0, 1.0, float(y),
                    0.0, 0.0, 1.0])

    @classmethod
    def scale(kls, x, y):
        return kls([float(x), 0.0, 0.0,
                    0.0, float(y), 0.0,
                    0.0, 0.0, 1.0])

    """
    # need `import math`
    @classmethod
    def rotate(kls, theta, pivot=None):
        c = math.cos(theta)
        s = math.sin(theta)

        matR = kls([c, -s, 0., s, c, 0., 0., 0., 1.])
        if not pivot:
            return matR
        return kls.translate(-pivot[0], -pivot[1]) * matR * kls.translate(*pivot)
    """

    @classmethod
    def rotateSquare(kls, theta, pivot=None):
        theta = theta % 4
        c = [1., 0., -1., 0.][theta]
        s = [0., 1., 0., -1.][theta]

        matR = kls([c, -s, 0., s, c, 0., 0., 0., 1.])
        if not pivot:
            return matR
        return kls.translate(-pivot[0], -pivot[1]) * matR * kls.translate(*pivot)


class IdenticonRendererBase(object):
    PATH_SET = []

    def __init__(self, code):
        """
        @param code code for icon
        """
        if not isinstance(code, int):
            code = int(code)
        self.code = code

    def render(self, size):
        """
        render identicon to PIL.Image

        @param size identicon patchsize. (image size is 3 * [size])
        @return PIL.Image
        """

        # decode the code
        middle, corner, side, foreColor, backColor = self.decode(self.code)

        # make image
        image = Image.new("RGB", (size * 3, size * 3))
        draw = ImageDraw.Draw(image)

        # fill background
        draw.rectangle((0, 0, image.size[0], image.size[1]), fill=0)

        kwds = {
            'draw': draw,
            'size': size,
            'foreColor': foreColor,
            'backColor': backColor
        }
        # middle patch
        self.drawPatch((1, 1), middle[2], middle[1], middle[0], **kwds)

        # side patch
        kwds['type'] = side[0]
        for i in xrange(4):
            pos = [(1, 0), (2, 1), (1, 2), (0, 1)][i]
            self.drawPatch(pos, side[2] + 1 + i, side[1], **kwds)

        # corner patch
        kwds['type'] = corner[0]
        for i in xrange(4):
            pos = [(0, 0), (2, 0), (2, 2), (0, 2)][i]
            self.drawPatch(pos, corner[2] + 1 + i, corner[1], **kwds)

        return image

    def drawPatch(self, pos, turn, invert, type, draw, size, foreColor, backColor):
        """
        @param size patch size
        """
        path = self.PATH_SET[type]
        if not path:
            # blank patch
            invert = not invert
            path = [(0., 0.), (1., 0.), (1., 1.), (0., 1.), (0., 0.)]
        patch = ImagePath.Path(path)
        if invert:
            foreColor, backColor = backColor, foreColor

        mat = Matrix2D.rotateSquare(turn, pivot=(0.5, 0.5)) *\
            Matrix2D.translate(*pos) *\
            Matrix2D.scale(size, size)

        patch.transform(mat.for_PIL())
        draw.rectangle(
            (pos[0] * size, pos[1] * size, (pos[0] + 1) * size, (pos[1] + 1) * size), fill=backColor)
        draw.polygon(patch, fill=foreColor, outline=foreColor)

    # virtual functions
    def decode(self, code):
        raise NotImplementedError


class DonRenderer(IdenticonRendererBase):

    """
    Don Park's implementation of identicon
    see : http://www.docuverse.com/blog/donpark/2007/01/19/identicon-updated-and-source-released
    """

    PATH_SET = [
        [(0, 0), (4, 0), (4, 4), (0, 4)],   # 0
        [(0, 0), (4, 0), (0, 4)],
        [(2, 0), (4, 4), (0, 4)],
        [(0, 0), (2, 0), (2, 4), (0, 4)],
        [(2, 0), (4, 2), (2, 4), (0, 2)],   # 4
        [(0, 0), (4, 2), (4, 4), (2, 4)],
        [(2, 0), (4, 4), (2, 4), (3, 2), (1, 2), (2, 4), (0, 4)],
        [(0, 0), (4, 2), (2, 4)],
        [(1, 1), (3, 1), (3, 3), (1, 3)],   # 8
        [(2, 0), (4, 0), (0, 4), (0, 2), (2, 2)],
        [(0, 0), (2, 0), (2, 2), (0, 2)],
        [(0, 2), (4, 2), (2, 4)],
        [(2, 2), (4, 4), (0, 4)],
        [(2, 0), (2, 2), (0, 2)],
        [(0, 0), (2, 0), (0, 2)],
        []                                  # 15
    ]
    MIDDLE_PATCH_SET = [0, 4, 8, 15]

    # modify path set
    for idx in xrange(len(PATH_SET)):
        if PATH_SET[idx]:
            p = map(lambda vec: (vec[0] / 4.0, vec[1] / 4.0), PATH_SET[idx])
            PATH_SET[idx] = p + p[:1]

    def decode(self, code):
        # decode the code
        middleType = self.MIDDLE_PATCH_SET[code & 0x03]
        middleInvert = (code >> 2) & 0x01
        cornerType = (code >> 16) & 0x0F
        cornerInvert = (code >> 7) & 0x01
        cornerTurn = (code >> 8) & 0x03
        sideType = (code >> 10) & 0x0F
        sideInvert = (code >> 14) & 0x01
        sideTurn = (code >> 15) & 0x03
        blue = 127 + (code % 100)  # (code << 16) & 0x0F
        green = 160  # (code >> 21) & 0x1F
        red = 130  # (code >> 27) & 0x1F

        #foreColor = (red << 3, green << 3, blue << 3)
        foreColor = (red, green, blue)

        return (middleType, middleInvert, 0), \
               (cornerType, cornerInvert, cornerTurn), \
               (sideType, sideInvert, sideTurn), \
            foreColor, ImageColor.getrgb('#FFFFFF')


def render_identicon(code, size=24, renderer=None):
    if not renderer:
        renderer = DonRenderer
    return renderer(code).render(size)

if __name__ == '__main__':
    import sys

    if len(sys.argv) < 2:
        print 'usage: python identicon.py [CODE]....'
        raise SystemExit

    for code in sys.argv[1:]:
        if code.startswith('0x') or code.startswith('0X'):
            code = int(code[2:], 16)
        elif code.startswith('0'):
            code = int(code[1:], 8)
        else:
            code = int(code)

        icon = render_identicon(code, 24)
        icon.save('%08x.png' % code, 'PNG')

########NEW FILE########
__FILENAME__ = integration
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Identities Integration library
"""
from treeio.core.models import Object, ModuleSetting
from treeio.identities.models import Contact, ContactType, ContactValue
from nuconnector import Connector, DataBlock
from django.db.models import Q
from django.db import transaction
from treeio.core.conf import settings


def _clean_missing(resource_id, items, user):
    "Clean items missing from data of their original resource"
    key = '#' + unicode(resource_id) + '.'
    contacts = Object.filter_permitted(
        user, Contact.objects).filter(nuvius_resource__contains=key)
    if not len(contacts) == len(items):
        candidates = []
        for contact in contacts:
            found = False
            for item in items:
                itemkey = key + unicode(item.id.raw)
                if itemkey in contact.nuvius_resource:
                    found = True
            if not found:
                candidates.append(contact)
        for victim in candidates:
            victim.subscribers.clear()
            victim.delete()


def _find_duplicates(resource_id, item, user):
    "Finds matching items"

    dups = []
    item_id = None
    if 'id' in item.raw:
        item_id = item.id.raw

    # Finding previously syncd items
    if item_id:
        key = '#' + unicode(resource_id) + '.' + unicode(item_id) + '#'
        dups = Object.filter_permitted(user, Contact.objects).filter(
            nuvius_resource__contains=key)
        if dups:
            return dups

    # Finding equivalent items
    # If name and (email or phone) are the same - it's same person
    if item.name:
        candidates = Object.filter_permitted(
            user, Contact.objects).filter(name=item.name.raw).distinct()
        dups = []
        if candidates and (item.email or item.phone):
            for candidate in candidates:
                matching_emails = []
                emails = candidate.contactvalue_set.filter(
                    field__field_type='email')
                if item.email.raw and emails:
                    matching_emails = emails.filter(value__in=item.email.raw)
                phones = candidate.contactvalue_set.filter(
                    field__field_type='phone')
                matching_phones = []
                if item.phone.raw and phones:
                    matching_phones = phones.filter(value__in=item.phone.raw)
                # If anything matches or if we have no emails or no phones at
                # all - add to duplicates
                if matching_emails or matching_phones or (not emails and not phones):
                    dups.append(candidate)
        elif not candidates and (item.email or item.phone):
            query = Q()
            if item.email:
                query = query & Q(contactvalue__value__in=item.email.raw)
            if item.phone:
                query = query | Q(contactvalue__value__in=item.phone.raw)
            dups = Object.filter_permitted(
                user, Contact.objects).filter(query).distinct()
        else:
            dups = candidates
    elif item.email or item.phone:
        query = Q()
        if item.email:
            query = query & Q(contactvalue__value__in=item.email.raw)
        if item.phone:
            query = query & Q(contactvalue__value__in=item.phone.raw)
        dups = Object.filter_permitted(user, Contact.objects).filter(query)

    return dups


def _get_contact_type(user):
    "Returns default contact_type for integration"
    contact_type_name = getattr(
        settings, 'HARDTREE_IDENTITIES_DEFAULT_TYPE', 'person')
    contact_type = Object.filter_permitted(
        user, ContactType.objects).filter(name__iexact=contact_type_name)
    try:
        contact_type = contact_type[0]
    except IndexError:
        contact_type = None
    return contact_type


@transaction.commit_manually
def _do_sync(data, user):
    "Run updates"

    resource_id = data.info.application.id.raw

    contact_type = _get_contact_type(user)

    for item in data.result:
        item_id = None
        if 'id' in item.raw:
            item_id = item.id.raw
        dups = _find_duplicates(resource_id, item, user)
        if dups:
            for contact in dups:
                transaction.commit()
                try:
                    fields = contact.contact_type.fields
                    contact.add_nuvius_resource(resource_id, item_id)
                    if item.name.raw:
                        contact.name = item.name.raw
                    if item.email:
                        fs = fields.filter(field_type='email')
                        if fs:
                            for iemail in item.email:
                                values = contact.contactvalue_set.filter(
                                    field__in=fs, value=iemail.raw)
                                if not values:
                                    value = ContactValue(
                                        contact=contact, field=fs[0], value=iemail.raw)
                                    value.save()
                    if item.phone:
                        fs = fields.filter(field_type='phone')
                        if fs:
                            for iphone in item.phone:
                                values = contact.contactvalue_set.filter(
                                    field__in=fs, value=iphone.raw)
                                if not values:
                                    value = ContactValue(
                                        contact=contact, field=fs[0], value=iphone.raw)
                                    value.save()

                    if item.address:
                        fs = fields.filter(name='address')
                        if fs:
                            for iaddress in item.address:
                                values = contact.contactvalue_set.filter(
                                    field__in=fs, value__icontains=iaddress.raw)
                                if not values:
                                    value = ContactValue(
                                        contact=contact, field=fs[0], value=iaddress.raw)
                                    value.save()
                    if item.website:
                        fs = fields.filter(name='website')
                        if fs:
                            for iwebsite in item.website:
                                values = contact.contactvalue_set.filter(
                                    field__in=fs, value__icontains=iwebsite.raw)
                                if not values:
                                    value = ContactValue(
                                        contact=contact, field=fs[0], value=iwebsite.raw)
                                    value.save()
                    contact.auto_notify = False
                    contact.save()
                    transaction.commit()
                except KeyboardInterrupt:
                    transaction.rollback()
                    break
                except:
                    transaction.rollback()
        else:
            if contact_type and item.name.raw:
                transaction.commit()
                try:
                    contact = Contact(contact_type=contact_type)
                    contact.add_nuvius_resource(resource_id, item_id)
                    contact.name = item.name.raw
                    contact.auto_notify = False
                    contact.set_user(user)
                    contact.save()
                    fields = contact_type.fields
                    if item.email:
                        fs = fields.filter(field_type='email')
                        if fs:
                            for iemail in item.email:
                                value = ContactValue(
                                    contact=contact, field=fs[0], value=iemail.raw)
                                value.save()
                    if item.phone:
                        fs = fields.filter(field_type='phone')
                        if fs:
                            for iphone in item.phone:
                                value = ContactValue(
                                    contact=contact, field=fs[0], value=iphone.raw)
                                value.save()
                    if item.address:
                        fs = fields.filter(name='address')
                        if fs:
                            for iaddress in item.address:
                                value = ContactValue(
                                    contact=contact, field=fs[0], value=iaddress.raw)
                                value.save()
                    if item.website:
                        fs = fields.filter(name='website')
                        if fs:
                            for iwebsite in item.website:
                                value = ContactValue(
                                    contact=contact, field=fs[0], value=iwebsite.raw)
                                value.save()
                    transaction.commit()
                except KeyboardInterrupt:
                    transaction.rollback()
                    break
                except:
                    transaction.rollback()

    _clean_missing(resource_id, data.result, user)


def sync(user=None):

    if user:
        conf = ModuleSetting.get('nuvius_profile', user=user, strict=True)
    else:
        conf = ModuleSetting.get('nuvius_profile')

    for item in conf:
        profile = item.loads()
        user = item.user
        if user:
            connector = Connector(profile_id=profile['id'])
            active_resources = ModuleSetting.get_for_module(
                'treeio.identities', 'integration_resource', user=user, strict=True)
            for resource in active_resources:
                res = resource.loads()
                response = connector.get(
                    '/service/contact-book/contact/data.json/id' + profile['id'] + '/app' + str(res.resource_id))
                data = DataBlock(response['data'])
                if data.result_name == 'success':
                    _do_sync(data, user)

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding model 'ContactField'
        db.create_table('identities_contactfield', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('label', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('field_type', self.gf(
                'django.db.models.fields.CharField')(max_length=64)),
            ('required', self.gf(
                'django.db.models.fields.BooleanField')(default=False)),
            ('allowed_values', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('identities', ['ContactField'])

        # Adding model 'ContactType'
        db.create_table('identities_contacttype', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('slug', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('identities', ['ContactType'])

        # Adding M2M table for field fields on 'ContactType'
        db.create_table('identities_contacttype_fields', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('contacttype', models.ForeignKey(
                orm['identities.contacttype'], null=False)),
            ('contactfield', models.ForeignKey(
                orm['identities.contactfield'], null=False))
        ))
        db.create_unique(
            'identities_contacttype_fields', ['contacttype_id', 'contactfield_id'])

        # Adding model 'Contact'
        db.create_table('identities_contact', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('contact_type', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['identities.ContactType'])),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('parent', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='child_set', null=True, to=orm['identities.Contact'])),
            ('related_user', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['core.User'], null=True, blank=True)),
            ('related_group', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['core.Group'], null=True, blank=True)),
        ))
        db.send_create_signal('identities', ['Contact'])

        # Adding model 'ContactValue'
        db.create_table('identities_contactvalue', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('field', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['identities.ContactField'])),
            ('contact', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['identities.Contact'])),
            ('value', self.gf('django.db.models.fields.CharField')
             (max_length=1024, null=True, blank=True)),
        ))
        db.send_create_signal('identities', ['ContactValue'])

    def backwards(self, orm):

        # Deleting model 'ContactField'
        db.delete_table('identities_contactfield')

        # Deleting model 'ContactType'
        db.delete_table('identities_contacttype')

        # Removing M2M table for field fields on 'ContactType'
        db.delete_table('identities_contacttype_fields')

        # Deleting model 'Contact'
        db.delete_table('identities_contact')

        # Deleting model 'ContactValue'
        db.delete_table('identities_contactvalue')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'everybody_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']"}),
            'group_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"}),
            'user_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'identities.contactvalue': {
            'Meta': {'object_name': 'ContactValue'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'field': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactField']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'value': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['identities']

########NEW FILE########
__FILENAME__ = 0002_auto__chg_field_contact_related_user
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Changing field 'Contact.related_user'
        db.alter_column('identities_contact', 'related_user_id', self.gf(
            'django.db.models.fields.related.ForeignKey')(to=orm['core.AccessEntity'], null=True))

    def backwards(self, orm):

        # Changing field 'Contact.related_user'
        db.alter_column('identities_contact', 'related_user_id', self.gf(
            'django.db.models.fields.related.ForeignKey')(to=orm['core.User'], null=True))

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.AccessEntity']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'identities.contactvalue': {
            'Meta': {'object_name': 'ContactValue'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'field': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactField']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'value': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['identities']

########NEW FILE########
__FILENAME__ = 0003_related_accessentity
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models


class Migration(DataMigration):

    def forwards(self, orm):
        "Migrate Contacts to have relate to an AccessEntity instead of User/Group"
        for contact in orm['identities.Contact'].objects.all():
            if not contact.related_user and contact.related_group:
                contact.related_user = contact.related_group.accessentity_ptr
                contact.save()

    def backwards(self, orm):
        raise RuntimeError("Cannot reverse this migration.")

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.AccessEntity']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'identities.contactvalue': {
            'Meta': {'object_name': 'ContactValue'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'field': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactField']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'value': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['identities']

########NEW FILE########
__FILENAME__ = 0004_auto__del_field_contact_related_group
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Deleting field 'Contact.related_group'
        db.delete_column('identities_contact', 'related_group_id')

    def backwards(self, orm):

        # Adding field 'Contact.related_group'
        db.add_column('identities_contact', 'related_group', self.gf('django.db.models.fields.related.ForeignKey')(
            to=orm['core.Group'], null=True, blank=True), keep_default=False)

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.AccessEntity']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'identities.contactvalue': {
            'Meta': {'object_name': 'ContactValue'},
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'field': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactField']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'value': ('django.db.models.fields.CharField', [], {'max_length': '1024', 'null': 'True', 'blank': 'True'})
        }
    }

    complete_apps = ['identities']

########NEW FILE########
__FILENAME__ = models
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Identities module objects
"""

from django.db import models
from treeio.core.models import AccessEntity, User, Object
from django.core.urlresolvers import reverse
from django.db.models.signals import post_save
from treeio.core.conf import settings
from django.template import defaultfilters
from unidecode import unidecode


class ContactField(Object):
    "Represents a field within a ContentType"
    FIELD_TYPES = (
        ('text', 'Text'),
        ('textarea', 'Multiline Text'),
        ('details', 'Details'),
        ('url', 'URL'),
        ('email', 'E-mail'),
        ('phone', 'Phone'),
        ('picture', 'Picture'),
        ('date', 'Date')
    )

    name = models.CharField(max_length=256)
    label = models.CharField(max_length=256)
    field_type = models.CharField(max_length=64, choices=FIELD_TYPES)
    required = models.BooleanField(default=False)
    allowed_values = models.TextField(blank=True, null=True)
    details = models.TextField(blank=True, null=True)

    searchable = False

    class Meta:
        "ContactField"
        ordering = ['name']

    def __unicode__(self):
        return self.label


class ContactType(Object):
    "Defines a type of Contact entities"
    name = models.CharField(max_length=256)
    slug = models.CharField(max_length=256)
    details = models.TextField(blank=True, null=True)
    fields = models.ManyToManyField(ContactField, blank=True, null=True)

    class Meta:
        "ContactType"
        ordering = ['name']

    def __unicode__(self):
        return self.name

    def get_absolute_url(self):
        "Returns absolute URL of the object"
        try:
            return reverse('identities_index_by_type', args=[self.slug])
        except Exception:
            return ""

    def save(self, *args, **kwargs):
        "Override to auto-set slug"
        self.slug = unicode(self.name).replace(" ", "-")
        self.slug = defaultfilters.slugify(unidecode(self.slug))
        super(ContactType, self).save(*args, **kwargs)


class Contact(Object):
    "Information about a company, group or user. By design allows custom fields defined in ContactField"
    contact_type = models.ForeignKey(ContactType)
    name = models.CharField(max_length=256)
    parent = models.ForeignKey(
        'self', blank=True, null=True, related_name='child_set')
    related_user = models.ForeignKey(
        AccessEntity, blank=True, null=True, on_delete=models.SET_NULL)

    access_inherit = ('parent', '*module', '*user')

    class Meta:
        "Contact"
        ordering = ['name']

    def __unicode__(self):
        return self.name

    def get_absolute_url(self):
        "Returns absolute URL of the object"
        try:
            return reverse('identities_contact_view', args=[self.id])
        except Exception:
            return ""

    def get_email(self):
        "Returns the first available e-mail"
        values = self.contactvalue_set.filter(
            field__field_type='email', value__isnull=False)
        if values:
            return values[0].value
        return ''

    def get_picture(self):
        values = self.contactvalue_set.filter(
            field__field_type='picture', value__isnull=False)
        if values and values[0].value:
            return values[0].value

        return reverse('identities_contact_view_picture', args=[self.id])

    def get_or_create_by_email(email, name=None, contact_type=None):
        """
        Using a given email tries to find an existing Contact or create new one if not found.
        If name is not specified the given email address is used for name instead.
        """
        created = False
        if not contact_type:
            try:
                contact_type = ContactType.objects.get(slug='person')
            except ContactType.DoesNotExist:
                try:
                    contact_type = ContactType.objects.all()[0]
                except KeyError:
                    return None, created

        if not name:
            name = email

        contact = Contact.objects.filter(
            contactvalue__value=email, contactvalue__field__field_type='email')[:1]
        if contact:
            return contact[0], created
        else:
            contact = Contact(contact_type=contact_type, name=name)
            contact.save()
            created = True
            try:
                emailfield = contact_type.fields.filter(
                    field_type='email')[:1][0]
                ContactValue(
                    field=emailfield, contact=contact, value=email).save()
            except IndexError:
                pass

        return contact, created

    get_or_create_by_email = staticmethod(get_or_create_by_email)


class ContactValue(models.Model):
    "A value selected for a Contact"
    field = models.ForeignKey(ContactField)
    contact = models.ForeignKey(Contact)
    value = models.CharField(max_length=1024, null=True, blank=True)

    def __unicode__(self):
        return self.value

    def name(self):
        return self.field.name


def contact_autocreate_handler(sender, instance, created, **kwargs):
    "When a User is created, automatically create a Contact of type Person"
    if created:
        try:
            contact_type = ContactType.objects.filter(
                models.Q(name='Person') | models.Q(slug='person'))[0]
            contact = Contact(
                contact_type=contact_type, name=instance.name, related_user=instance)
            contact.save()
        except:
            pass


# Autocreate a Contact when Hardtree user is created
if getattr(settings, 'HARDTREE_SIGNALS_AUTOCREATE_CONTACT', True):
    post_save.connect(contact_autocreate_handler, sender=User)

########NEW FILE########
__FILENAME__ = objects
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Contact module helpers
"""
from treeio.core.models import Module
from django.utils.translation import ugettext_lazy as _


def _get_module_objects(module, current_user, related, getter_name):

    try:
        import_name = module.name + ".identities"
        modident = __import__(import_name, fromlist=[str(module.name)])
        getter = getattr(modident, getter_name)
        return getter(current_user, related)
    except ImportError:
        pass
    except AttributeError:
        pass
    except KeyError:
        pass

    return {}


def _preformat_objects(modules, objects):
    """
    Formats objects returned from get_contact_objects or get_user_objects
    for a more convenient output and templating, structured by module
    """

    output = {}

    if objects:
        for module in modules:
            output[module.name] = {'module': module,
                                   'label': _(module.title),
                                   'count': 0,
                                   'objects': {}}
            for key in objects:
                if objects[key]['module'] == module:
                    if hasattr(objects[key]['objects'], 'count'):
                        output[module.name][
                            'count'] += objects[key]['objects'].count()
                    objects[key]['label'] = _(objects[key]['label'])
                    output[module.name]['objects'][key] = objects[key]

    return output


def get_contact_objects(current_user, contact, module=None, preformat=False):
    """
    Returns a dictionary with keys specified as contact attributes
    and values as dictionaries with labels and set of relevant objects.

    Only modules enabled for the current_user are considered.
    """

    objects = dict()

    if module:
        contact_objects = _get_module_objects(
            module, current_user, contact, 'get_contact_objects')
        if contact_objects:
            for key in contact_objects:
                contact_objects[key]['module'] = module
            objects.update(contact_objects)
        if contact.related_user:
            try:
                objects.update(
                    get_user_objects(current_user, contact.related_user.user, module))
            except:
                pass
        modules = [module]
    else:
        perspective = current_user.get_perspective()

        modules = perspective.modules.filter(display=True).order_by('title')
        if not modules:
            modules = Module.objects.filter(display=True).order_by('title')

        for module in modules:
            contact_objects = _get_module_objects(
                module, current_user, contact, 'get_contact_objects')
            if contact_objects:
                for key in contact_objects:
                    contact_objects[key]['module'] = module
                objects.update(contact_objects)
            if contact.related_user:
                try:
                    objects.update(
                        get_user_objects(current_user, contact.related_user.user, module))
                except:
                    pass

    if preformat:
        return _preformat_objects(modules, objects)

    return objects


def get_user_objects(current_user, user, module=None, preformat=False):
    """
    Returns a dictionary with keys specified as user attributes
    and values as dictionaries with labels, number of relevant objects,
    and optionally the actual set of relevant objects.

    Only modules enabled for the current_user are considered.
    """

    objects = dict()

    if module:
        user_objects = _get_module_objects(
            module, current_user, user, 'get_user_objects')
        if user_objects:
            for key in user_objects:
                user_objects[key]['module'] = module
                objects['related_user.' + key] = user_objects[key]
        modules = [module]
    else:
        perspective = current_user.get_perspective()

        modules = perspective.modules.filter(display=True).order_by('title')
        if not modules:
            modules = Module.objects.filter(display=True).order_by('title')

        for module in modules:
            user_objects = _get_module_objects(
                module, current_user, user, 'get_user_objects')
            if user_objects:
                for key in user_objects:
                    user_objects[key]['module'] = module
                    objects['related_user.' + key] = user_objects[key]

    if preformat:
        return _preformat_objects(modules, objects)
    return objects

########NEW FILE########
__FILENAME__ = identities
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Identities templatetags
"""
from coffin import template
from treeio.core.rendering import render_to_string
from jinja2 import contextfunction, Markup
from django.template import RequestContext
from treeio.identities.models import ContactField

register = template.Library()


@contextfunction
def identities_contact_list(context, contacts, skip_group=''):
    "Print a list of contacts"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    contact_fields = ContactField.objects.all().filter(trash=False)

    return Markup(render_to_string('identities/tags/contact_list',
                                   {'contacts': contacts, 'skip_group': skip_group,
                                    'contact_fields': contact_fields},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(identities_contact_list)


@contextfunction
def identities_user_list(context, users, skip_group=False):
    "Print a list of users"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('identities/tags/user_list',
                                   {'users': users, 'skip_group': skip_group},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))


register.object(identities_user_list)


@contextfunction
def identities_group_list(context, groups, skip_group=False):
    "Print a list of groups"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('identities/tags/group_list',
                                   {'groups': groups,
                                       'skip_group': skip_group},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))


register.object(identities_group_list)

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Identities: test suites
"""

from django.test import TestCase
from treeio.identities.models import Contact, ContactType, ContactField
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser
from treeio.core.models import User, Group, Perspective, ModuleSetting, Object


class IdentitiesModelsTest(TestCase):

    "Identities Model Tests"

    def test_model_contacttype(self):
        "Test ContactType model"
        obj = ContactType(name='Test', slug='test')
        obj.save()
        self.assertEquals('Test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_contact(self):
        "Test Contact model"
        type = ContactType(name='Test', slug='test')
        type.save()
        obj = Contact(name='Test', contact_type=type)
        obj.save()
        self.assertEquals('Test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_field(self):
        "Test Field model"
        obj = ContactField(name='Test', label='test', field_type='text')
        obj.save()
        self.assertEquals('Test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()


class IdentitiesViewsTest(TestCase):

    "Identities View tests"
    username = "test"
    password = "password"
    prepared = False

    def setUp(self):
        "Initial Setup"

        if not self.prepared:
            # Clean up first
            Object.objects.all().delete()

            # Create objects
            self.group, created = Group.objects.get_or_create(name='test')
            duser, created = DjangoUser.objects.get_or_create(
                username=self.username)
            duser.set_password(self.password)
            duser.save()
            self.user, created = User.objects.get_or_create(user=duser)
            self.user.save()
            perspective, created = Perspective.objects.get_or_create(
                name='default')
            perspective.set_default_user()
            perspective.save()
            ModuleSetting.set('default_perspective', perspective.id)

            self.contact_type = ContactType(name='Person')
            self.contact_type.set_default_user()
            self.contact_type.save()

            self.contact = Contact(name='Test', contact_type=self.contact_type)
            self.contact.set_default_user()
            self.contact.save()

            self.field = ContactField(
                name='Test', label='test', field_type='text')
            self.field.set_default_user()
            self.field.save()

            self.client = Client()

            self.prepared = True

    ######################################
    # Testing views when user is logged in
    ######################################
    def test_index_login(self):
        "Test index page with login at /contacts/"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('identities_index'))
        self.assertEquals(response.status_code, 200)

    def test_contact_users_login(self):
        "Test page with login at /contacts/users/"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('identities_index_users'))
        self.assertEquals(response.status_code, 200)

    def test_contact_groups_login(self):
        "Test page with login at /contacts/groups/"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('identities_index_groups'))
        self.assertEquals(response.status_code, 200)

    # Contact types
    def test_contact_type_add(self):
        "Test page with login at /contacts/types/add/"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('identities_type_add'))
        self.assertEquals(response.status_code, 200)

    def test_contact_type_view(self):
        "Test page with login at /contacts/type/view/(?P<type_id>\d+)"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('identities_type_view', args=[self.contact_type.id]))
        self.assertEquals(response.status_code, 200)

    def test_contact_type_edit(self):
        "Test page with login at /contacts/type/edit/(?P<type_id>\d+)"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('identities_type_edit', args=[self.contact_type.id]))
        self.assertEquals(response.status_code, 200)

    def test_contact_type_delete(self):
        "Test page with login at /contacts/type/delete/(?P<type_id>\d+)"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('identities_type_delete', args=[self.contact_type.id]))
        self.assertEquals(response.status_code, 200)

    # Contact fields
    def test_contact_field_add(self):
        "Test page with login at /contacts/field/add"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('identities_field_add'))
        self.assertEquals(response.status_code, 200)

    def test_contact_field_view(self):
        "Test page with login at /contacts/field/view/(?P<field_id>\d+)"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('identities_field_view', args=[self.field.id]))
        self.assertEquals(response.status_code, 200)

    def test_contact_field_edit(self):
        "Test page with login at /contacts/field/edit/(?P<field_id>\d+)"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('identities_field_edit', args=[self.field.id]))
        self.assertEquals(response.status_code, 200)

    def test_contact_field_delete(self):
        "Test page with login at /contacts/field/delete/(?P<field_id>\d+)"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('identities_field_delete', args=[self.field.id]))
        self.assertEquals(response.status_code, 200)

    # Contacts
    def test_contact_add(self):
        "Test page with login at /contacts/contact/add/"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('identities_contact_add'))
        self.assertEquals(response.status_code, 200)

    def test_contact_add_by_type(self):
        "Test page with login at /contacts/contact/add/<type_id>/"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('identities_contact_add_typed', args=[self.contact_type.id]))
        self.assertEquals(response.status_code, 200)

    def test_contact_me(self):
        "Test page with login at /contacts/me/"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('identities_contact_me'))
        self.assertEquals(response.status_code, 200)

    def test_contact_view(self):
        "Test page with login at /contacts/contact/view/<contact_id>/"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('identities_contact_view', args=[self.contact.id]))
        self.assertEquals(response.status_code, 200)

    def test_contact_edit(self):
        "Test page with login at /contacts/contact/edit/<contact_id>/"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('identities_contact_edit', args=[self.contact.id]))
        self.assertEquals(response.status_code, 200)

    def test_contact_delete(self):
        "Test page with login at /contacts/contact/delete/<contact_id>/"
        response = self.client.post('/accounts/login', {'username': self.username,
                                                        'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('identities_contact_delete', args=[self.contact.id]))
        self.assertEquals(response.status_code, 200)

    # Settings
    def test_contact_settings_view(self):
        "Test index page with login at /contacts/settings/view/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('identities_settings_view'))
        self.assertEquals(response.status_code, 200)

    ######################################
    # Testing views when user is not logged in
    ######################################
    def test_index(self):
        "Test index page at /contacts/"
        response = self.client.get('/contacts/')
        # Redirects as unauthenticated
        self.assertRedirects(response, reverse('user_login'))

    def test_contact_users_out(self):
        "Testing /contacts/users/"
        response = self.client.get(reverse('identities_index_users'))
        self.assertRedirects(response, reverse('user_login'))

    def test_contact_groups_out(self):
        "Testing /contacts/groups/"
        response = self.client.get(reverse('identities_index_groups'))
        self.assertRedirects(response, reverse('user_login'))

    # Contact types
    def test_contact_type_add_out(self):
        "Testing /contacts/types/add/"
        response = self.client.get(reverse('identities_type_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_contact_type_view_out(self):
        "Testing /contacts/type/view/(?P<type_id>\d+)"
        response = self.client.get(
            reverse('identities_type_view', args=[self.contact_type.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_contact_type_edit_out(self):
        "Testing /contacts/type/edit/(?P<type_id>\d+)"
        response = self.client.get(
            reverse('identities_type_edit', args=[self.contact_type.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_contact_type_delete_out(self):
        "Testing /contacts/type/delete/(?P<type_id>\d+)"
        response = self.client.get(
            reverse('identities_type_delete', args=[self.contact_type.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Contact fields
    def test_contact_field_add_out(self):
        "Testing /contacts/field/add"
        response = self.client.get(reverse('identities_field_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_contact_field_view_out(self):
        "Testing /contacts/field/view/(?P<field_id>\d+)"
        response = self.client.get(
            reverse('identities_field_view', args=[self.field.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_contact_field_edit_out(self):
        "Testing /contacts/field/edit/(?P<field_id>\d+)"
        response = self.client.get(
            reverse('identities_field_edit', args=[self.field.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_contact_field_delete_out(self):
        "Testing /contacts/field/delete/(?P<field_id>\d+)"
        response = self.client.get(
            reverse('identities_field_delete', args=[self.field.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Contacts
    def test_contact_add_out(self):
        "Testing /contacts/contact/add/"
        response = self.client.get(reverse('identities_contact_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_contact_add_by_type_out(self):
        "Testing /contacts/contact/add/<type_id>/"
        response = self.client.get(
            reverse('identities_contact_add_typed', args=[self.contact_type.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_contact_me_out(self):
        "Testing /contacts/me/"
        response = self.client.get(reverse('identities_contact_me'))
        self.assertRedirects(response, reverse('user_login'))

    def test_contact_view_out(self):
        "Testing /contacts/contact/view/<contact_id>/"
        response = self.client.get(
            reverse('identities_contact_view', args=[self.contact.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_contact_edit_out(self):
        "Testing /contacts/contact/edit/<contact_id>/"
        response = self.client.get(
            reverse('identities_contact_edit', args=[self.contact.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_contact_delete_out(self):
        "Testing /contacts/contact/delete/<contact_id>/"
        response = self.client.get(
            reverse('identities_contact_delete', args=[self.contact.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Settings
    def test_contact_settings_view_out(self):
        "Testing /contacts/settings/view/"
        response = self.client.get(reverse('identities_settings_view'))
        self.assertRedirects(response, reverse('user_login'))

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Identities module URLs
"""
from django.conf.urls.defaults import patterns, url

urlpatterns = patterns('treeio.identities.views',
                       url(r'^(\.(?P<response_format>\w+))?$',
                           'index', name='identities'),

                       url(r'^index(\.(?P<response_format>\w+))?$',
                           'index', name='identities_index'),
                       url(r'^users(\.(?P<response_format>\w+))?/?$',
                           'index_users', name='identities_index_users'),
                       url(r'^groups(\.(?P<response_format>\w+))?/?$',
                           'index_groups', name='identities_index_groups'),
                       url(r'^types/(?P<type_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'type_view', name='identities_index_by_type'),

                       # Types
                       url(r'^type/view/(?P<type_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'type_view', name='identities_type_view'),
                       url(r'^type/edit/(?P<type_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'type_edit', name='identities_type_edit'),
                       url(r'^type/delete/(?P<type_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'type_delete', name='identities_type_delete'),
                       url(r'^type/add(\.(?P<response_format>\w+))?/?$',
                           'type_add', name='identities_type_add'),

                       # Fields
                       url(r'^field/view/(?P<field_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'field_view', name='identities_field_view'),
                       url(r'^field/edit/(?P<field_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'field_edit', name='identities_field_edit'),
                       url(r'^field/delete/(?P<field_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'field_delete', name='identities_field_delete'),
                       url(r'^field/add(\.(?P<response_format>\w+))?/?$',
                           'field_add', name='identities_field_add'),

                       # Contacts
                       url(r'^contact/add(\.(?P<response_format>\w+))?/?$',
                           'contact_add', name='identities_contact_add'),
                       url(r'^contact/add/(?P<type_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'contact_add_typed', name='identities_contact_add_typed'),

                       url(r'^me(\.(?P<response_format>\w+))?/?$',
                           'contact_me', name='identities_contact_me'),
                       url(r'^me/objects/(?P<attribute>[a-z_.]+)/list(\.(?P<response_format>\w+))?/?$',
                           'contact_me', name='identities_contact_me_objects'),
                       url(r'^contact/view/(?P<contact_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'contact_view', name='identities_contact_view'),
                       url(r'^contact/view/(?P<contact_id>\d+)/objects/(?P<attribute>[a-z_.]+)/list(\.(?P<response_format>\w+))?/?$',
                           'contact_view', name='identities_contact_view_objects'),
                       url(r'^contact/view/(?P<contact_id>\d+)/picture/?$',
                           'contact_view_picture', name='identities_contact_view_picture'),
                       url(r'^contact/edit/(?P<contact_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'contact_edit', name='identities_contact_edit'),
                       url(r'^contact/delete/(?P<contact_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'contact_delete', name='identities_contact_delete'),

                       url(r'^user/view/(?P<user_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'user_view', name='identities_user_view'),

                       url(r'^group/view/(?P<group_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'group_view', name='identities_group_view'),

                       url(r'^settings/view(\.(?P<response_format>\w+))?/?$',
                           'settings_view', name='identities_settings_view'),

                       # Locations
                       url(r'^location/index(\.(?P<response_format>\w+))?/?$',
                           'location_index', name='identities_location_index'),
                       url(r'^location/view/(?P<location_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'location_view', name='identities_location_view'),
                       url(r'^location/edit/(?P<location_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'location_edit', name='identities_location_edit'),
                       url(r'^location/delete/(?P<location_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'location_delete', name='identities_location_delete'),
                       url(r'^location/add(\.(?P<response_format>\w+))?/?$',
                           'location_add', name='identities_location_add'),


                       # AJAX callbacks
                       url(r'^ajax/users(\.(?P<response_format>\w+))?/?$',
                           'ajax_user_lookup', name='identities_ajax_user_lookup'),
                       url(r'^ajax/access(\.(?P<response_format>\w+))?/?$',
                           'ajax_access_lookup', name='identities_ajax_access_lookup'),
                       url(r'^ajax/contacts(\.(?P<response_format>\w+))?/?$',
                           'ajax_contact_lookup', name='identities_ajax_contact_lookup'),
                       url(r'^ajax/locations(\.(?P<response_format>\w+))?/?$',
                           'ajax_location_lookup', name='identities_ajax_location_lookup'),

                       )

########NEW FILE########
__FILENAME__ = views
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Identities module: views
"""
from treeio.identities.identicon import render_identicon
from django.shortcuts import get_object_or_404
from django.template import RequestContext
from django.http import HttpResponse, HttpResponseRedirect
from django.core.urlresolvers import reverse
from django.views.decorators.cache import cache_control
from django.db.models import Q
from treeio.core.rendering import render_to_response
from treeio.core.forms import LocationForm
from treeio.core.models import User, Group, Object, Location, AccessEntity
from treeio.core.views import user_denied
from treeio.core.decorators import treeio_login_required, handle_response_format
from treeio.identities.csvapi import ProcessContacts
from treeio.identities.models import Contact, ContactType, ContactField
from treeio.identities.forms import ContactForm, FilterForm, ContactTypeForm, ContactFieldForm, \
    MassActionForm
from treeio.identities.objects import get_contact_objects


def _get_filter_query(args):
    "Creates a query to filter Identities based on FilterForm arguments"
    query = Q()

    for arg in args:
        if hasattr(Contact, arg) and args[arg]:
            kwargs = {str(arg + '__id'): long(args[arg])}
            query = query & Q(**kwargs)

    return query


def _get_default_context(request):
    "Preprocess context"

    context = {}
    types = Object.filter_by_request(
        request, ContactType.objects.order_by('name'))
    massform = MassActionForm(request.user.get_profile())
    context.update({'types': types,
                    'massform': massform})

    return context


def _process_mass_form(f):
    "Pre-process request to handle mass action form for Messages"

    def wrap(request, *args, **kwargs):
        "Wrap"
        user = request.user.get_profile()
        if 'massform' in request.POST:
            for key in request.POST:
                if 'mass-contact' in key:
                    try:
                        contact = Contact.objects.get(pk=request.POST[key])
                        form = MassActionForm(
                            user, request.POST, instance=contact)
                        if form.is_valid() and user.has_permission(contact, mode='w'):
                            form.save()
                    except Exception:
                        pass

        return f(request, *args, **kwargs)

    wrap.__doc__ = f.__doc__
    wrap.__name__ = f.__name__

    return wrap


@handle_response_format
@treeio_login_required
@_process_mass_form
def index(request, response_format='html'):
    "Default page"

    if request.GET:
        query = _get_filter_query(request.GET)
        contacts = Object.filter_by_request(
            request, Contact.objects.filter(query).order_by('name'))
    else:
        contacts = Object.filter_by_request(
            request, Contact.objects.order_by('name'))

    filters = FilterForm(request.user.get_profile(), 'name', request.GET)

    context = _get_default_context(request)
    context.update({'contacts': contacts,
                    'filters': filters})

    return render_to_response('identities/index', context,
                              context_instance=RequestContext(request), response_format=response_format)


#
# ContactTypes
#
@handle_response_format
@treeio_login_required
@_process_mass_form
def type_view(request, type_id, response_format='html'):
    "Contacts by type"

    contact_type = get_object_or_404(ContactType, pk=type_id)
    if not request.user.get_profile().has_permission(contact_type):
        return user_denied(request, message="You don't have access to this Contact Type")
    contacts = Object.filter_by_request(
        request, Contact.objects.filter(contact_type=contact_type))

    context = _get_default_context(request)
    context.update({'contacts': contacts,
                    'type': contact_type})

    return render_to_response('identities/contact_type_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def type_edit(request, type_id, response_format='html'):
    "ContactType edit"

    contact_type = get_object_or_404(ContactType, pk=type_id)
    if not request.user.get_profile().has_permission(contact_type, mode='w'):
        return user_denied(request, message="You don't have access to this Contact Type",
                           response_format=response_format)
    identities = Object.filter_by_request(request,
                                          Contact.objects.filter(contact_type=contact_type).order_by('name'))

    if request.POST:
        if not 'cancel' in request.POST:
            form = ContactTypeForm(
                request.user.get_profile(), request.POST, instance=contact_type)
            if form.is_valid():
                contact_type = form.save(request)
                return HttpResponseRedirect(reverse('identities_type_view', args=[contact_type.id]))
        else:
            return HttpResponseRedirect(reverse('identities_type_view', args=[contact_type.id]))
    else:
        form = ContactTypeForm(
            request.user.get_profile(), instance=contact_type)

    context = _get_default_context(request)
    context.update({'identities': identities,
                    'form': form,
                    'type': contact_type})

    return render_to_response('identities/contact_type_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def type_add(request, response_format='html'):
    "ContactType add"

    if not request.user.get_profile().is_admin('treeio.identities'):
        return user_denied(request,
                           message="You don't have administrator access to the Infrastructure module",
                           response_format=response_format)

    if request.POST:
        if not 'cancel' in request.POST:
            contact_type = ContactType()
            form = ContactTypeForm(
                request.user.get_profile(), request.POST, instance=contact_type)
            if form.is_valid():
                contact_type = form.save(request)
                contact_type.set_user_from_request(request)
                return HttpResponseRedirect(reverse('identities_type_view', args=[contact_type.id]))
        else:
            return HttpResponseRedirect(reverse('identities_settings_view'))
    else:
        form = ContactTypeForm(request.user.get_profile())

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('identities/contact_type_add', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def type_delete(request, type_id, response_format='html'):
    "ContactType delete page"
    type = get_object_or_404(ContactType, pk=type_id)
    if not request.user.get_profile().has_permission(type, mode="w"):
        return user_denied(request, message="You don't have write access to this ContactType")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                type.trash = True
                type.save()
            else:
                type.delete()
            return HttpResponseRedirect(reverse('identities_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('identities_type_view', args=[type.id]))

    context = _get_default_context(request)
    context.update({'type': type})

    return render_to_response('identities/contact_type_delete', context,
                              context_instance=RequestContext(request), response_format=response_format)

#
# Fields
#


@handle_response_format
@treeio_login_required
def field_view(request, field_id, response_format='html'):
    "ContactField view"

    field = get_object_or_404(ContactField, pk=field_id)
    if not request.user.get_profile().has_permission(field):
        return user_denied(request, message="You don't have access to this Field Type",
                           response_format=response_format)

    context = _get_default_context(request)
    context.update({'field': field})

    return render_to_response('identities/field_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def field_edit(request, field_id, response_format='html'):
    "ContactField edit"

    field = get_object_or_404(ContactField, pk=field_id)
    if not request.user.get_profile().has_permission(field, mode='w'):
        return user_denied(request, message="You don't have access to this Field Type",
                           response_format=response_format)

    if request.POST:
        if not 'cancel' in request.POST:
            form = ContactFieldForm(request.POST, instance=field)
            if form.is_valid():
                field = form.save(request)
                return HttpResponseRedirect(reverse('identities_field_view', args=[field.id]))
        else:
            return HttpResponseRedirect(reverse('identities_field_view', args=[field.id]))
    else:
        form = ContactFieldForm(instance=field)

    context = _get_default_context(request)
    context.update({'form': form,
                    'field': field})

    return render_to_response('identities/field_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def field_add(request, response_format='html'):
    "ContactField add"

    if not request.user.get_profile().is_admin('treeio.identities'):
        return user_denied(request,
                           message="You don't have administrator access to the Infrastructure module",
                           response_format=response_format)

    if request.POST:
        if not 'cancel' in request.POST:
            field = ContactField()
            form = ContactFieldForm(request.POST, instance=field)
            if form.is_valid():
                field = form.save(request)
                field.set_user_from_request(request)
                return HttpResponseRedirect(reverse('identities_field_view', args=[field.id]))
        else:
            return HttpResponseRedirect(reverse('identities_settings_view'))
    else:
        form = ContactFieldForm()

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('identities/field_add', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def field_delete(request, field_id, response_format='html'):
    "ContactField delete page"
    field = get_object_or_404(ContactField, pk=field_id)
    if not request.user.get_profile().has_permission(field, mode="w"):
        return user_denied(request, message="You don't have write access to this ContactField")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                field.trash = True
                field.save()
            else:
                field.delete()
            return HttpResponseRedirect(reverse('identities_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('identities_field_view', args=[field.id]))

    context = _get_default_context(request)
    context.update({'field': field})

    return render_to_response('identities/field_delete', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def contact_add(request, response_format='html'):
    "Contact add"

    types = Object.filter_by_request(
        request, ContactType.objects.order_by('name'))

    return render_to_response('identities/contact_add',
                              {'types': types},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def contact_add_typed(request, type_id, response_format='html'):
    "Contact add with preselected type"

    contact_type = get_object_or_404(ContactType, pk=type_id)
    if not request.user.get_profile().has_permission(contact_type, mode='x'):
        return user_denied(request, message="You don't have access to create " + unicode(contact_type))

    if request.POST:
        if not 'cancel' in request.POST:
            form = ContactForm(
                request.user.get_profile(), contact_type, request.POST, files=request.FILES)
            if form.is_valid():
                contact = form.save(request, contact_type)
                contact.set_user_from_request(request)
                return HttpResponseRedirect(reverse('identities_contact_view', args=[contact.id]))
        else:
            return HttpResponseRedirect(reverse('identities_index'))
    else:
        form = ContactForm(request.user.get_profile(), contact_type)

    types = Object.filter_by_request(
        request, ContactType.objects.order_by('name'))

    return render_to_response('identities/contact_add_typed',
                              {'type': contact_type,
                                  'types': types, 'form': form},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def contact_view(request, contact_id, attribute='', response_format='html'):
    "Contact view"

    contact = get_object_or_404(Contact, pk=contact_id)
    if not request.user.get_profile().has_permission(contact):
        return user_denied(request, message="You don't have access to this Contact")
    types = Object.filter_by_request(
        request, ContactType.objects.order_by('name'))

    subcontacts = Object.filter_by_request(request, contact.child_set)
    contact_values = contact.contactvalue_set.order_by('field__name')

    objects = get_contact_objects(
        request.user.get_profile(), contact, preformat=True)

    module = None
    for key in objects:
        if not attribute:
            if objects[key]['count']:
                #attribute = objects[key]['objects'].keys()[0]
                module = objects[key]['module']
        else:
            if attribute in objects[key]['objects'].keys():
                module = objects[key]['module']
                break

    return render_to_response('identities/contact_view',
                              {'contact': contact,
                               'subcontacts': subcontacts,
                               'objects': objects,
                               'current_module': module,
                               'attribute': attribute,
                               'types': types,
                               'contact_values': contact_values},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def contact_me(request, attribute='', response_format='html'):
    "My Contact card"

    contact = request.user.get_profile().get_contact()
    if not request.user.get_profile().has_permission(contact):
        return user_denied(request, message="You don't have access to this Contact")
    types = Object.filter_by_request(
        request, ContactType.objects.order_by('name'))

    if not contact:
        return render_to_response('identities/contact_me_missing', {'types': types},
                                  context_instance=RequestContext(request), response_format=response_format)

    subcontacts = Object.filter_by_request(request, contact.child_set)
    contact_values = contact.contactvalue_set.order_by('field__name')

    objects = get_contact_objects(
        request.user.get_profile(), contact, preformat=True)

    module = None
    for key in objects:
        if not attribute:
            if objects[key]['count']:
                #attribute = objects[key]['objects'].keys()[0]
                module = objects[key]['module']
        else:
            if attribute in objects[key]['objects'].keys():
                module = objects[key]['module']
                break

    return render_to_response('identities/contact_me',
                              {'contact': contact, 'types': types,
                               'subcontacts': subcontacts,
                               'objects': objects,
                               'current_module': module,
                               'attribute': attribute,
                               'types': types,
                               'contact_values': contact_values},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@cache_control(private=True, max_age=31536000)
def contact_view_picture(request, contact_id, response_format='html'):
    "Contact view Picture"
    response = HttpResponse(mimetype="image/png")
    render_identicon(contact_id * 5000).save(response, "PNG")
    return response


@handle_response_format
@treeio_login_required
def contact_edit(request, contact_id, response_format='html'):
    "Contact edit"

    contact = get_object_or_404(Contact, pk=contact_id)
    if not request.user.get_profile().has_permission(contact, mode='w'):
        return user_denied(request, message="You don't have write access to this Contact")

    if request.POST:
        if not 'cancel' in request.POST:
            form = ContactForm(request.user.get_profile(), contact.contact_type, request.POST,
                               files=request.FILES, instance=contact)
            if form.is_valid():
                contact = form.save(request)
                return HttpResponseRedirect(reverse('identities_contact_view', args=[contact.id]))
        else:
            return HttpResponseRedirect(reverse('identities_contact_view', args=[contact.id]))
    else:
        form = ContactForm(
            request.user.get_profile(), contact.contact_type, instance=contact)

    types = Object.filter_by_request(
        request, ContactType.objects.order_by('name'))

    return render_to_response('identities/contact_edit',
                              {'contact': contact,
                               'types': types,
                               'form': form},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def contact_delete(request, contact_id, response_format='html'):
    "Contact delete"

    contact = get_object_or_404(Contact, pk=contact_id)
    if not request.user.get_profile().has_permission(contact, mode='w'):
        return user_denied(request, message="You don't have access to this Contact")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                contact.trash = True
                contact.save()
            else:
                contact.delete()
            return HttpResponseRedirect(reverse('identities_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('identities_contact_view', args=[contact.id]))

    types = Object.filter_by_request(
        request, ContactType.objects.order_by('name'))

    return render_to_response('identities/contact_delete',
                              {'contact': contact, 'types': types},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def index_users(request, response_format='html'):
    "User List"

    users = User.objects.exclude(disabled=True).order_by('user__username')
    types = Object.filter_by_request(
        request, ContactType.objects.order_by('name'))

    return render_to_response('identities/index_users',
                              {'users': users, 'types': types},
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def index_groups(request, response_format='html'):
    "Group List"

    groups = Group.objects.order_by('parent', 'name')
    types = Object.filter_by_request(
        request, ContactType.objects.order_by('name'))

    return render_to_response('identities/index_groups',
                              {'groups': groups, 'types': types},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
def user_view(request, user_id, response_format='html'):
    "User view"
    user = get_object_or_404(User, pk=user_id)
    contact_id = Contact.objects.filter(related_user=user)[0].id
    return contact_view(request, contact_id, attribute='', response_format=response_format)


@handle_response_format
@treeio_login_required
def group_view(request, group_id, response_format='html'):
    "Group view"

    group = get_object_or_404(Group, pk=group_id)
    contacts = Object.filter_by_request(
        request, Contact.objects.filter(related_user=group).order_by('name'))
    members = User.objects.filter(
        Q(default_group=group) | Q(other_groups=group)).distinct()
    subgroups = Group.objects.filter(parent=group)
    types = Object.filter_by_request(
        request, ContactType.objects.order_by('name'))

    return render_to_response('identities/group_view',
                              {'group': group,
                               'subgroups': subgroups,
                               'members': members,
                               'contacts': contacts,
                               'types': types},
                              context_instance=RequestContext(request), response_format=response_format)


#
# Locations
#
@treeio_login_required
@handle_response_format
def location_index(request, location_id, response_format='html'):
    "Location index"

    locations = Object.filter_permitted(request.user.get_profile(),
                                        Location.objects)

    context = _get_default_context(request)
    context.update({
        'locations': locations,
    })

    return render_to_response('identities/location_index', context,
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def location_add(request, response_format='html'):
    "New location form"

    if request.POST:
        if not 'cancel' in request.POST:
            location = Location()
            form = LocationForm(
                request.user.get_profile(), None, request.POST, instance=location)
            if form.is_valid():
                location = form.save()
                location.set_user_from_request(request)
                return HttpResponseRedirect(reverse('identities_location_view', args=[location.id]))
        else:
            return HttpResponseRedirect(reverse('identities_index'))
    else:
        form = LocationForm(request.user.get_profile(), None)

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('identities/location_add', context,
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def location_view(request, location_id, response_format='html'):
    "Location view"
    location = get_object_or_404(Location, pk=location_id)
    if not request.user.get_profile().has_permission(location):
        return user_denied(request, message="You don't have access to this Location",
                           response_format=response_format)

    context = _get_default_context(request)
    context.update({
        'location': location,
    })

    return render_to_response('identities/location_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def location_edit(request, location_id, response_format='html'):
    "Location edit page"
    location = get_object_or_404(Location, pk=location_id)
    if not request.user.get_profile().has_permission(location, mode="w"):
        return user_denied(request, message="You don't have write access to this Location",
                           response_format=response_format)

    if request.POST:
        if not 'cancel' in request.POST:
            form = LocationForm(
                request.user.get_profile(), None, request.POST, instance=location)
            if form.is_valid():
                location = form.save(request)
                return HttpResponseRedirect(reverse('identities_location_view', args=[location.id]))
        else:
            return HttpResponseRedirect(reverse('identities_location_view', args=[location.id]))
    else:
        form = LocationForm(
            request.user.get_profile(), None, instance=location)

    context = _get_default_context(request)
    context.update({'location': location,
                    'form': form})

    return render_to_response('identities/location_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def location_delete(request, location_id, response_format='html'):
    "Location delete page"
    location = get_object_or_404(Location, pk=location_id)
    if not request.user.get_profile().has_permission(location, mode="w"):
        return user_denied(request, message="You don't have write access to this Location")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                location.trash = True
                location.save()
            else:
                location.delete()
            return HttpResponseRedirect(reverse('identities_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('identities_location_view', args=[location.id]))

    context = _get_default_context(request)
    context.update({'location': location})

    return render_to_response('identities/location_delete', context,
                              context_instance=RequestContext(request), response_format=response_format)


#
# Settings
#
@handle_response_format
@treeio_login_required
def settings_view(request, response_format='html'):
    "Settings"

    if not request.user.get_profile().is_admin('treeio.identities'):
        return user_denied(request, message="You are not an Administrator of the Identities module",
                           response_format=response_format)

    contact_types = ContactType.objects.all().filter(trash=False)
    contact_fields = ContactField.objects.all().filter(trash=False)
    contacts = Object.filter_by_request(
        request, Contact.objects.order_by('name'))

    context = _get_default_context(request)
    context.update({'contact_types': contact_types,
                    'contact_fields': contact_fields,
                    'contacts': contacts})

    if request.POST:
        if 'file' in request.FILES:
            csv_file = request.FILES['file']

            # TODO: check file extension
            content = csv_file.read()
            import_c = ProcessContacts()
            import_c.import_contacts(content)

            return HttpResponseRedirect(reverse('identities_index'))

    return render_to_response('identities/settings_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


#
# AJAX autocomplete handlers
#


@treeio_login_required
def ajax_access_lookup(request, response_format='html'):
    "Returns a list of matching users"

    entities = []
    if request.GET and 'term' in request.GET:
        entities = AccessEntity.objects.filter(Q(user__name__icontains=request.GET['term']) |
                                               Q(user__contact__name__icontains=request.GET['term']) |
                                               Q(group__name__icontains=request.GET['term']))

    return render_to_response('identities/ajax_access_lookup',
                              {'entities': entities},
                              context_instance=RequestContext(request),
                              response_format=response_format)


@treeio_login_required
def ajax_user_lookup(request, response_format='html'):
    "Returns a list of matching users"

    users = []
    if request.GET and 'term' in request.GET:
        users = User.objects.filter(Q(name__icontains=request.GET['term']) |
                                    Q(contact__name__icontains=request.GET['term']))

    return render_to_response('identities/ajax_user_lookup',
                              {'users': users},
                              context_instance=RequestContext(request),
                              response_format=response_format)


@treeio_login_required
def ajax_contact_lookup(request, response_format='html'):
    "Returns a list of matching contacts"

    contacts = []
    if request.GET and 'term' in request.GET:
        user = request.user.get_profile()
        contacts = Object.filter_permitted(user, Contact.objects,
                                           mode='x').filter(Q(name__icontains=request.GET['term']))[:10]

    return render_to_response('identities/ajax_contact_lookup',
                              {'contacts': contacts},
                              context_instance=RequestContext(request),
                              response_format=response_format)


@treeio_login_required
def ajax_location_lookup(request, response_format='html'):
    "Returns a list of matching locations"

    locations = []
    if request.GET and 'term' in request.GET:
        user = request.user.get_profile()
        locations = Object.filter_permitted(user, Location.objects,
                                            mode='x').filter(
            Q(name__icontains=request.GET['term'])
        )[:10]

    return render_to_response('identities/ajax_location_lookup',
                              {'locations': locations},
                              context_instance=RequestContext(request),
                              response_format=response_format)


#
# Widgets
#

@handle_response_format
@treeio_login_required
def widget_contact_me(request, response_format='html'):
    "My Contact card"

    contact = request.user.get_profile().get_contact()
    if not request.user.get_profile().has_permission(contact):
        return user_denied(request, message="You don't have access to this Contact")
    types = Object.filter_by_request(
        request, ContactType.objects.order_by('name'))
    if contact:
        return render_to_response('identities/widgets/contact_me',
                                  {'contact': contact, 'types': types},
                                  context_instance=RequestContext(request), response_format=response_format)
    else:
        return render_to_response('identities/widgets/contact_me_missing', {'types': types},
                                  context_instance=RequestContext(request), response_format=response_format)

########NEW FILE########
__FILENAME__ = widgets
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Identities module widgets
"""

WIDGETS = {'widget_contact_me': {'title': 'My Contact Card',
                                 'size': "95%"}}


def get_widgets(request):
    "Returns a set of all available widgets"

    return WIDGETS

########NEW FILE########
__FILENAME__ = admin
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Infrastructure: backend admin definitions
"""
from treeio.infrastructure.models import Item, ItemStatus, ItemType, ItemField, ItemValue
from django.contrib import admin


class ItemAdmin(admin.ModelAdmin):

    "Item backend definition"
    list_display = ('name', 'item_type')
    list_filter = ['item_type']


class ItemStatusAdmin(admin.ModelAdmin):

    "ItemStatus backend definition"
    list_display = ('name', 'active', 'hidden')


class ItemTypeAdmin(admin.ModelAdmin):

    "ItemType backend definition"
    list_display = ['name']


class ItemFieldAdmin(admin.ModelAdmin):

    "ItemField backend definition"
    list_display = ('label', 'name', 'field_type')
    list_filter = ['field_type']


class ItemValueAdmin(admin.ModelAdmin):

    "ItemValue backend definition"
    list_display = ['field', 'value']


admin.site.register(Item, ItemAdmin)
admin.site.register(ItemStatus, ItemStatusAdmin)
admin.site.register(ItemType, ItemTypeAdmin)
admin.site.register(ItemField, ItemFieldAdmin)
admin.site.register(ItemValue, ItemValueAdmin)

########NEW FILE########
__FILENAME__ = handlers
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

from __future__ import absolute_import, with_statement

__all__ = ['ItemFieldHandler',
           'ItemTypeHandler',
           'ItemTypeHandler',
           'ItemStatusHandler',
           'ItemServicingHandler',
           'ItemHandler',
           'LocationHandler',
           ]

from treeio.core.api.utils import rc
from treeio.core.api.handlers import ObjectHandler, getOrNone
from treeio.core.models import Location
from treeio.infrastructure.models import Item, ItemField, ItemType, ItemStatus, ItemServicing
from treeio.core.forms import LocationForm
from treeio.infrastructure.forms import ItemForm, ItemTypeForm, ItemStatusForm, ItemFieldForm, ServiceRecordForm


class InfrastructureCommonHandler(ObjectHandler):

    def check_create_permission(self, request, mode):
        return request.user.get_profile().is_admin('treeio.infrastructure')


class ItemFieldHandler(InfrastructureCommonHandler):

    "Entrypoint for ItemField model."
    model = ItemField
    form = ItemFieldForm

    @staticmethod
    def resource_uri():
        return ('api_infrastructure_fields', ['id'])

    def flatten_dict(self, request):
        return {'data': super(ObjectHandler, self).flatten_dict(request.data)}


class ItemTypeHandler(InfrastructureCommonHandler):

    "Entrypoint for ItemType model."

    model = ItemType
    form = ItemTypeForm

    fields = ('id',) + ItemTypeForm._meta.fields

    @staticmethod
    def resource_uri():
        return ('api_infrastructure_types', ['id'])


class ItemStatusHandler(InfrastructureCommonHandler):

    "Entrypoint for ItemStatus model."

    model = ItemStatus
    form = ItemStatusForm

    @staticmethod
    def resource_uri():
        return ('api_infrastructure_statuses', ['id'])

    def flatten_dict(self, request):
        return {'data': super(ObjectHandler, self).flatten_dict(request.data)}


class ItemServicingHandler(InfrastructureCommonHandler):

    "Entrypoint for ItemServicing model."
    model = ItemServicing
    form = ServiceRecordForm
    fields = ('id',) + form._meta.fields

    @staticmethod
    def resource_uri():
        return ('api_infrastructure_service_records', ['id'])


class ItemHandler(ObjectHandler):

    "Entrypoint for Item model."

    model = Item
    form = ItemForm

    fields = ['id', ('itemvalue_set', ('name', 'value'))] + \
        [i.name for i in Item._meta.local_fields if i.name != 'object_ptr']

    @staticmethod
    def resource_uri():
        return ('api_infrastructure_items', ['id'])

    def create(self, request, *args, **kwargs):
        if request.data is None:
            return rc.BAD_REQUEST

        item_type = getOrNone(ItemType, request.data.get('type'))
        if not item_type or not request.user.get_profile().has_permission(item_type, mode='x'):
            return rc.FORBIDDEN

        attrs = self.flatten_dict(request)

        form = ItemForm(item_type=item_type, **attrs)
        if form.is_valid():
            item = form.save(request)
            return item
        else:
            self.status = 400
            return form.errors

    def update(self, request, *args, **kwargs):
        if request.data is None:
            return rc.BAD_REQUEST

        pkfield = kwargs.get(self.model._meta.pk.name) or request.data.get(
            self.model._meta.pk.name)

        if not pkfield:
            return rc.BAD_REQUEST

        item = getOrNone(self.model, pkfield)
        if not item:
            return rc.NOT_FOUND

        if not request.user.get_profile().has_permission(item, mode="w"):
            return rc.FORBIDDEN

        attrs = self.flatten_dict(request)

        form = ItemForm(item_type=item.item_type, instance=item, **attrs)
        if form.is_valid():
            item = form.save(request)
            return item
        else:
            self.status = 400
            return form.errors


class LocationHandler(ObjectHandler):

    "Entrypoint for Location model."

    model = Location
    form = LocationForm

    @staticmethod
    def resource_uri():
        return ('api_infrastructure_locations', ['id'])

    def flatten_dict(self, request):
        dct = super(LocationHandler, self).flatten_dict(request)
        dct['location_id'] = None
        return dct

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Infrastructure: test api
"""

import json
from django.test import TestCase
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser
from treeio.core.models import User, Group, Perspective, ModuleSetting, Object
from treeio.infrastructure.models import Item, ItemValue, ItemField, ItemType, ItemStatus, ItemServicing


class InfrastructureApiTest(TestCase):

    "Infrastructure functional tests for api"

    username = "api_test"
    password = "api_password"
    prepared = False
    authentication_headers = {"CONTENT_TYPE": "application/json",
                              "HTTP_AUTHORIZATION": "Basic YXBpX3Rlc3Q6YXBpX3Bhc3N3b3Jk"}
    content_type = 'application/json'

    def setUp(self):
        "Initial Setup"
        if not self.prepared:
            # Clean up first
            Object.objects.all().delete()

            # Create objects
            try:
                self.group = Group.objects.get(name='test')
            except Group.DoesNotExist:
                Group.objects.all().delete()
                self.group = Group(name='test')
                self.group.save()

            try:
                self.user = DjangoUser.objects.get(username=self.username)
                self.user.set_password(self.password)
                try:
                    self.profile = self.user.get_profile()
                except Exception:
                    User.objects.all().delete()
                    self.user = DjangoUser(username=self.username, password='')
                    self.user.set_password(self.password)
                    self.user.save()
            except DjangoUser.DoesNotExist:
                User.objects.all().delete()
                self.user = DjangoUser(username=self.username, password='')
                self.user.set_password(self.password)
                self.user.save()

            try:
                perspective = Perspective.objects.get(name='default')
            except Perspective.DoesNotExist:
                Perspective.objects.all().delete()
                perspective = Perspective(name='default')
                perspective.set_default_user()
                perspective.save()
            ModuleSetting.set('default_perspective', perspective.id)

            self.field = ItemField(
                name='test', label='test', field_type='text')
            self.field.set_default_user()
            self.field.save()

            self.type = ItemType(name='test')
            self.type.set_default_user()
            self.type.save()
            self.type.fields.add(self.field)

            self.status = ItemStatus(name='test')
            self.status.set_default_user()
            self.status.save()

            self.item = Item(
                name='test', item_type=self.type, status=self.status)
            self.item.set_default_user()
            self.item.save()

            self.value = ItemValue(field=self.field, item=self.item)
            self.value.save()

            self.servicing = ItemServicing(name='test')
            self.servicing.set_default_user()
            self.servicing.save()

            self.client = Client()

            self.prepared = True

    def test_unauthenticated_access(self):
        "Test index page at /api/infrastructure/types"
        response = self.client.get('/api/infrastructure/types')
        # Redirects as unauthenticated
        self.assertEquals(response.status_code, 401)

    def test_get_fields_list(self):
        """ Test index page api/infrastructure/types """
        response = self.client.get(
            path=reverse('api_infrastructure_fields'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_field(self):
        response = self.client.get(path=reverse('api_infrastructure_fields', kwargs={
                                   'object_ptr': self.field.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_field(self):
        updates = {"name": "Api_name", "label": "Api label", "field_type": "text",
                   "required": True, "details": "Api details"}
        response = self.client.put(path=reverse('api_infrastructure_fields', kwargs={'object_ptr': self.field.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        self.assertEquals(data['label'], updates['label'])
        self.assertEquals(data['field_type'], updates['field_type'])
        self.assertEquals(data['required'], updates['required'])
        self.assertEquals(data['details'], updates['details'])

    def test_get_types_list(self):
        """ Test index page api/infrastructure/types """
        response = self.client.get(
            path=reverse('api_infrastructure_types'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_type(self):
        response = self.client.get(path=reverse('api_infrastructure_types', kwargs={
                                   'object_ptr': self.type.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_type(self):
        updates = {"name": "Api type", "parent": None,
                   "details": "api test details", "fields": [self.field.id]}
        response = self.client.put(path=reverse('api_infrastructure_types', kwargs={'object_ptr': self.type.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        self.assertIsNone(data['parent'])
        self.assertEquals(data['details'], updates['details'])
        for i, field in enumerate(data['fields']):
            self.assertEquals(field['id'], updates['fields'][i])

    def test_get_statuses_list(self):
        """ Test index page api/infrastructure/types """
        response = self.client.get(
            path=reverse('api_infrastructure_statuses'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_status(self):
        response = self.client.get(path=reverse('api_infrastructure_statuses', kwargs={
                                   'object_ptr': self.status.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_status(self):
        updates = {"name": "Api type", "active": True,
                   "hidden": False, "details": "Api details"}
        response = self.client.put(path=reverse('api_infrastructure_statuses', kwargs={'object_ptr': self.status.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        self.assertEquals(data['active'], updates['active'])
        self.assertEquals(data['hidden'], updates['hidden'])
        self.assertEquals(data['details'], updates['details'])

    def test_get_services(self):
        """ Test index page api/infrastructure/service_records """
        response = self.client.get(
            path=reverse('api_infrastructure_service_records'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_service(self):
        response = self.client.get(path=reverse('api_infrastructure_service_records', kwargs={
                                   'object_ptr': self.servicing.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_service(self):
        updates = {"name": "Api servicing", "items": [self.item.id], "start_date": "2011-06-01",
                   "expiry_date": "2011-10-01", "details": "Api details"}
        response = self.client.put(path=reverse('api_infrastructure_service_records', kwargs={'object_ptr': self.servicing.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        for i, item in enumerate(data['items']):
            self.assertEquals(item['id'], updates['items'][i])
        self.assertEquals(data['start_date'], updates['start_date'])
        self.assertEquals(data['expiry_date'], updates['expiry_date'])
        self.assertEquals(data['details'], updates['details'])

    def test_get_items_list(self):
        """ Test index page api/infrastructure/items """
        response = self.client.get(
            path=reverse('api_infrastructure_items'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_item(self):
        response = self.client.get(path=reverse('api_infrastructure_items', kwargs={
                                   'object_ptr': self.item.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_item(self):
        pass
        updates = {"name": "Close_API", "item_type": self.type.id,
                   "status": self.status.id, "test___1": "api test"}
        response = self.client.put(path=reverse('api_infrastructure_items', kwargs={'object_ptr': self.item.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        print response.content
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        self.assertEquals(data['item_type']['id'], updates['item_type'])
        self.assertEquals(data['status']['id'], updates['status'])
        self.assertEquals(
            data['itemvalue_set'][0]["value"], updates['test___1'])

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

import handlers
from django.conf.urls import patterns, url
from treeio.core.api.auth import auth_engine
from treeio.core.api.doc import documentation_view
from treeio.core.api.resource import CsrfExemptResource

ad = {'authentication': auth_engine}

# infrastructure resources
typeResource = CsrfExemptResource(handler=handlers.ItemTypeHandler, **ad)
fieldResource = CsrfExemptResource(handler=handlers.ItemFieldHandler, **ad)
itemResource = CsrfExemptResource(handler=handlers.ItemHandler, **ad)
statusResource = CsrfExemptResource(handler=handlers.ItemStatusHandler, **ad)
serviceRecordResource = CsrfExemptResource(
    handler=handlers.ItemServicingHandler, **ad)
locationResource = CsrfExemptResource(handler=handlers.LocationHandler, **ad)

urlpatterns = patterns('',
    # Infrastructure
    url(r'^doc$', documentation_view, kwargs={
        'module': handlers}, name="api_infrastructure_doc"),
    url(r'^fields$', fieldResource,
        name="api_infrastructure_fields"),
    url(r'^field/(?P<object_ptr>\d+)', fieldResource,
        name="api_infrastructure_fields"),
    url(r'^types$', typeResource,
        name="api_infrastructure_types"),
    url(r'^type/(?P<object_ptr>\d+)', typeResource,
        name="api_infrastructure_types"),
    url(r'^statuses$', statusResource,
        name="api_infrastructure_statuses"),
    url(r'^status/(?P<object_ptr>\d+)', statusResource,
        name="api_infrastructure_statuses"),
    url(r'^items$', itemResource,
        name="api_infrastructure_items"),
    url(r'^item/(?P<object_ptr>\d+)', itemResource,
        name="api_infrastructure_items"),
    url(r'^service_records$', serviceRecordResource,
        name="api_infrastructure_service_records"),
    url(r'^service_record/(?P<object_ptr>\d+)', serviceRecordResource,
        name="api_infrastructure_service_records"),
    url(r'^locations$', locationResource,
        name="api_infrastructure_locations"),
    url(r'^location/(?P<object_ptr>\d+)', locationResource,
        name="api_infrastructure_locations"),
)

########NEW FILE########
__FILENAME__ = events
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Infrastructure integration with Events module

Provides ItemServicing as EventRenderer instances
"""

from treeio.infrastructure.models import ItemServicing
from treeio.core.models import Object
from treeio.events.rendering import EventRenderer
from django.db.models import Q
import datetime


def get_events(request):
    "Return a list of EventRenderers from available ItemServicing"
    events = []

    query = Q(expiry_date__isnull=False)
    service_records = Object.filter_by_request(
        request, manager=ItemServicing.objects.filter(query))
    for record in service_records:
        if record.expiry_date:
            old = record.expiry_date
            new_expiry_date = datetime.datetime(
                year=old.year, month=old.month, day=old.day, hour=12, minute=0, second=0)
            event = EventRenderer(
                record.name, None, new_expiry_date, record.get_absolute_url())
        event.css_class += " infrastructure-calendar-servicing"
        events.append(event)

    return events

########NEW FILE########
__FILENAME__ = forms
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Infrastructure module forms
"""
from django import forms
from treeio.core.conf import settings
from django.core.files.storage import default_storage
from treeio.infrastructure.models import Item, ItemValue, ItemField, ItemType, ItemStatus, ItemServicing
from treeio.finance.models import Asset, Transaction
from treeio.identities.models import Contact
from treeio.core.models import Object, Location, ModuleSetting
from django.core.urlresolvers import reverse
from django.utils.translation import ugettext as _
import re
from PIL import Image
from treeio.core.decorators import preprocess_form
preprocess_form()


class ItemForm(forms.Form):

    "Item Form"
    instance = None
    files = {}

    def _get_form_field(self, field, value=None):
        "Generate a Django-friendly field from Hardtree spec in DB"
        form_field = None
        if field.field_type == 'text':
            form_field = forms.CharField(label=field.label, max_length=512,
                                         widget=forms.TextInput(attrs={'size': '30'}))
        elif field.field_type == 'details':
            form_field = forms.CharField(
                label=field.label, widget=forms.Textarea())
        elif field.field_type == 'url':
            form_field = forms.URLField(
                label=field.label, widget=forms.TextInput(attrs={'size': '50'}))
        elif field.field_type == 'picture':
            form_field = forms.ImageField(
                label=field.label, widget=forms.FileInput)
        elif field.field_type == 'date':
            form_field = forms.DateTimeField(label=field.label)
            form_field.widget.attrs.update({'class': 'datetimepicker'})
        form_field.required = field.required

        if value:
            if isinstance(form_field, forms.FileField) and value.value:
                form_field = forms.ChoiceField(
                    label=field.label, widget=forms.RadioSelect())
                filename = full_filename = value.value
                match = re.match('.*[a-z0-9]{32}__(?P<filename>.+)$', filename)
                if match:
                    filename = match.group('filename')
                form_field.choices = ((full_filename, _("Keep existing: ") + unicode(filename)),
                                      ('delete', _("Delete ")))
                form_field.initial = full_filename
                form_field.required = False
            else:
                form_field.initial = value.value

        return form_field

    def _get_free_field_name(self, field):
        "Generate an available name for a field"
        num = 0
        field_name = unicode(field.name) + u"___" + unicode(num)
        while field_name in self.fields:
            num = num + 1
            field_name = unicode(field.name) + u"___" + unicode(num)
        return field_name

    def _get_upload_name(self, filename):
        "Returns an upload_to path to a new file"
        import hashlib
        import random
        while True:
            hasher = hashlib.md5()
            hasher.update(str(random.random()))
            filepath = u"infrastructure/" + \
                hasher.hexdigest() + u"__" + filename
            fullpath = settings.MEDIA_ROOT + filepath
            if not default_storage.exists(fullpath):
                return filepath

    def _handle_uploaded_file(self, field_name):
        "Process an uploaded file"
        try:
            file = self.files[field_name]
            filepath = self._get_upload_name(file.name)
        except KeyError:
            return ''
        destination = open(settings.MEDIA_ROOT + filepath, 'wb+')
        for chunk in file.chunks():
            destination.write(chunk)
            destination.close()
        return settings.MEDIA_URL + filepath

    def _image_resize(self, filepath):
        "Resizes Image if it's over the maximum dimension"
        filepath = filepath.replace(settings.MEDIA_URL, '')
        filepath = settings.MEDIA_ROOT + filepath
        try:
            img = Image.open(filepath)
            expected_size = getattr(
                settings, 'HARDTREE_IMAGE_MAX_SIZE', [400, 300])
            if img.size[0] > expected_size[0] or img.size[1] > expected_size[1]:
                filter_name = getattr(
                    settings, 'HARDTREE_IMAGE_RESIZE_FILTER', 'ANTIALIAS')
                filter = getattr(Image, filter_name, Image.ANTIALIAS)
                aspect = img.size[0] / float(img.size[1])
                newsize = list(expected_size)
                if img.size[0] > expected_size[0]:
                    newsize[0] = expected_size[0]
                    newsize[1] = round(newsize[0] / aspect)
                if newsize[1] > expected_size[1]:
                    newsize[1] = expected_size[1]
                    newsize[0] = round(newsize[1] * aspect)
                img = img.resize(newsize, filter)
                img.save(filepath)
        except Exception:
            pass

    def __init__(self, user, item_type, *args, **kwargs):
        "Populates form with fields from given AssetType"

        self.item_type = item_type
        if 'instance' in kwargs:
            self.instance = kwargs['instance']
            values = self.instance.itemvalue_set.all()
            del kwargs['instance']

        super(ItemForm, self).__init__(*args, **kwargs)

        if 'files' in kwargs:
            self.files = kwargs['files']

        # Model fields
        self.fields['name'] = forms.CharField(max_length=512,
                                              widget=forms.TextInput(attrs={'size': '50'}))
        self.fields['name'].label = _("Name")
        self.fields['parent'] = forms.ModelChoiceField(
            label=_('Parent'), queryset=[], required=False)
        self.fields['status'] = forms.ModelChoiceField(
            label=_('Status'), queryset=[], required=True)
        self.fields['manufacturer'] = forms.ModelChoiceField(label=_('Manufacturer'),
                                                             queryset=[], required=False)
        self.fields['supplier'] = forms.ModelChoiceField(
            label=_('Supplier'), queryset=[], required=False)
        self.fields['owner'] = forms.ModelChoiceField(
            label=_('Owner'), queryset=[], required=False)
        self.fields['location'] = forms.ModelChoiceField(
            label=_('Location'), queryset=[], required=False)
        self.fields['asset'] = forms.ModelChoiceField(label=_('Asset Record'),
                                                      queryset=[], required=False)

        self.fields['parent'].queryset = Object.filter_permitted(
            user, Item.objects, mode='x')
        self.fields['status'].queryset = Object.filter_permitted(
            user, ItemStatus.objects, mode='x')
        self.fields['manufacturer'].queryset = Object.filter_permitted(
            user, Contact.objects, mode='x')
        self.fields['supplier'].queryset = Object.filter_permitted(
            user, Contact.objects, mode='x')
        self.fields['owner'].queryset = Object.filter_permitted(
            user, Contact.objects, mode='x')
        self.fields['location'].queryset = Object.filter_permitted(
            user, Location.objects, mode='x')
        self.fields['asset'].queryset = Object.filter_permitted(
            user, Asset.objects, mode='x')

        self.fields['manufacturer'].widget.attrs.update({'class': 'autocomplete',
                                                         'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['manufacturer'].widget.attrs.update(
            {'popuplink': reverse('identities_contact_add')})
        self.fields['supplier'].widget.attrs.update({'class': 'autocomplete',
                                                     'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['supplier'].widget.attrs.update(
            {'popuplink': reverse('identities_contact_add')})
        self.fields['owner'].widget.attrs.update({'class': 'autocomplete',
                                                  'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['owner'].widget.attrs.update(
            {'popuplink': reverse('identities_contact_add')})
        #self.fields['asset'].widget.attrs.update({'class': 'autocomplete', 'callback': reverse('finance_ajax_asset_lookup')})

        self.fields['location'].widget.attrs.update(
            {'popuplink': reverse('infrastructure_location_add')})
        self.fields['location'].widget.attrs.update({'class': 'autocomplete',
                                                     'callback': reverse('identities_ajax_location_lookup')})
        self.fields['asset'].widget.attrs.update(
            {'popuplink': reverse('finance_asset_add')})

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.infrastructure', 'default_item_status')[0]
            default_item_status = ItemStatus.objects.get(
                pk=long(conf.value), trash=False)
            self.fields['status'].initial = default_item_status.id
        except Exception:
            pass

        if self.instance:
            self.fields['name'].initial = self.instance.name
            self.fields['status'].initial = self.instance.status_id
            self.fields['parent'].initial = self.instance.parent_id
            self.fields['manufacturer'].initial = self.instance.manufacturer_id
            self.fields['supplier'].initial = self.instance.supplier_id
            self.fields['owner'].initial = self.instance.owner_id
            self.fields['location'].initial = self.instance.location_id
            self.fields['asset'].initial = self.instance.asset_id

        # AssetField <-> AssetValue fields
        for field in item_type.fields.all():
            if self.instance:
                initial_field_name = self._get_free_field_name(field)
                self.fields[initial_field_name] = self._get_form_field(field)
                for value in values:
                    if value.field == field:
                        field_name = self._get_free_field_name(field)
                        self.fields[field_name] = self._get_form_field(
                            field, value)
                        if initial_field_name in self.fields:
                            del self.fields[initial_field_name]
            else:
                field_name = self._get_free_field_name(field)
                self.fields[field_name] = self._get_form_field(field)

    def save(self, request):
        "Process form and create DB objects as required"

        if self.instance:
            item = self.instance
        else:
            item = Item()
            item.item_type = self.item_type

        item.name = unicode(self.cleaned_data['name'])
        item.parent = self.cleaned_data['parent']
        item.status = self.cleaned_data['status']
        item.manufacturer = self.cleaned_data['manufacturer']
        item.supplier = self.cleaned_data['supplier']
        item.owner = self.cleaned_data['owner']
        item.location = self.cleaned_data['location']
        item.asset = self.cleaned_data['asset']

        if not item.id:
            item.set_user_from_request(request)
        item.save()
        if self.instance:
            item.itemvalue_set.all().delete()
        for field in item.item_type.fields.all():
            for form_name in self.cleaned_data:
                if re.match(str("^" + field.name + "___\d+$"), form_name):
                    value = None
                    if isinstance(self.fields[form_name], forms.FileField):
                        value = ItemValue(field=field, item=item,
                                          value=self._handle_uploaded_file(form_name))
                        if isinstance(self.fields[form_name], forms.ImageField):
                            self._image_resize(value.value)
                    else:
                        if field.field_type == 'picture' and isinstance(self.fields[form_name],
                                                                        forms.ChoiceField):
                            if self.cleaned_data[form_name] != 'delete':
                                value = ItemValue(field=field, item=item,
                                                  value=self.cleaned_data[form_name])
                        else:
                            value = ItemValue(
                                field=field, item=item, value=self.cleaned_data[form_name])
                    if value:
                        if not value.value:
                            value.value = ''
                        value.save()

        return item


class ItemFieldForm(forms.ModelForm):

    """ ItemField add/edit form """

    def clean_name(self):
        "Ensure the name of the field only contains alphanumeric"
        name = self.cleaned_data['name']
        if not re.match(r'^[a-zA-Z0-9-_]+$', name):
            raise forms.ValidationError(
                _("Sorry, field names can only contain letters, numbers, hyphens (-) and underscores (_)"))
        return name

    def __init__(self, *args, **kwargs):
        super(ItemFieldForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")
        self.fields['label'].label = _("Label")
        self.fields['field_type'].label = _("Field type")
        self.fields['required'].label = _("Required")
        self.fields['details'].label = _("Details")

    class Meta:

        "Fields Form"
        model = ItemField
        fields = ('name', 'label', 'field_type', 'required', 'details')


class ItemTypeForm(forms.ModelForm):

    """ ItemType add/edit form """

    def __init__(self, user, *args, **kwargs):

        super(ItemTypeForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")
        self.fields['parent'].label = _("Parent")
        self.fields['fields'].label = _("Fields")
        self.fields['details'].label = _("Details")

        self.fields['fields'].queryset = Object.filter_permitted(
            user, ItemField.objects.all(), mode='x')
        self.fields['fields'].help_text = ''
        self.fields['parent'].queryset = Object.filter_permitted(user,
                                                                 ItemType.objects.all().exclude(
                                                                     pk=self.instance.id),
                                                                 mode='x')

    class Meta:

        "Item Type"
        model = ItemType
        fields = ('name', 'parent', 'fields', 'details')


class ItemStatusForm(forms.ModelForm):

    """ ItemStatus add/edit form """

    class Meta:

        "Item Status Form"
        model = ItemStatus
        fields = ('name', 'active', 'hidden', 'details')


class ServiceRecordForm(forms.ModelForm):

    """ ServiceRecord add/edit form """

    def __init__(self, user, service_record=None, *args, **kwargs):
        super(ServiceRecordForm, self).__init__(*args, **kwargs)

        self.fields['items'].queryset = Object.filter_permitted(
            user, Item.objects.all(), mode='x')
        self.fields['items'].help_text = ""
        self.fields['supplier'].queryset = Object.filter_permitted(
            user, Contact.objects.all(), mode='x')
        self.fields['payments'].queryset = Object.filter_permitted(
            user, Transaction.objects.all(), mode='x')
        self.fields['payments'].help_text = ""
        self.fields['payments'].widget.attrs.update(
            {'popuplink': reverse('finance_transaction_add')})

        self.fields['start_date'].widget.attrs.update({'class': 'datepicker'})
        self.fields['expiry_date'].widget.attrs.update({'class': 'datepicker'})

        self.fields['name'].label = _("Name")
        self.fields['items'].label = _("Items")
        self.fields['supplier'].label = _("Supplier")
        self.fields['start_date'].label = _("Start date")
        self.fields['expiry_date'].label = _("Expiry date")
        self.fields['payments'].label = _("Payments")
        self.fields['details'].label = _("Details")

    class Meta:

        "Service Record Form"
        model = ItemServicing
        fields = ('name', 'items', 'supplier', 'start_date',
                  'expiry_date', 'payments', 'details')


class FilterForm(forms.ModelForm):

    """ Item Filters definition """

    def __init__(self, user, skip=[], *args, **kwargs):
        super(FilterForm, self).__init__(*args, **kwargs)

        if 'item_type' in skip:
            del self.fields['item_type']
        else:
            self.fields['item_type'].required = False
            self.fields['item_type'].label = _("Item type")

        if 'status' in skip:
            del self.fields['status']
        else:
            self.fields['status'].required = False
            self.fields['status'].label = _("Status")

        if 'owner' in skip:
            del self.fields['owner']
        else:
            self.fields['owner'].widget.attrs.update({'class': 'autocomplete',
                                                      'callback': reverse('identities_ajax_contact_lookup')})
            self.fields['owner'].label = _("Owner")

        self.fields['manufacturer'].widget.attrs.update({'class': 'autocomplete',
                                                         'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['manufacturer'].label = _("Manufacturer")

        self.fields['supplier'].widget.attrs.update({'class': 'autocomplete',
                                                     'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['supplier'].label = _("Supplier")

        self.fields['location'].label = _("Location")

    class Meta:

        "Filter Form"
        model = Item
        fields = ('item_type', 'status', 'manufacturer',
                  'supplier', 'owner', 'location')


class MassActionForm(forms.Form):

    """ Mass action form for Tickets """

    status = forms.ModelChoiceField(queryset=[], required=False)
    location = forms.ModelChoiceField(queryset=[], required=False)
    delete = forms.ChoiceField(label=_("Delete"), choices=(('', '-----'), ('delete', _('Delete Completely')),
                                                           ('trash', _('Move to Trash'))), required=False)
    instance = None

    def __init__(self, user, *args, **kwargs):
        if 'instance' in kwargs:
            self.instance = kwargs['instance']
            del kwargs['instance']

        super(MassActionForm, self).__init__(*args, **kwargs)

        self.fields['status'].queryset = Object.filter_permitted(
            user, ItemStatus.objects, mode='x')
        self.fields['location'].queryset = Object.filter_permitted(
            user, Location.objects, mode='x')

        self.fields['status'].label = _('Status')
        self.fields['location'].label = _('Location')

        self.fields['delete'] = forms.ChoiceField(label=_("Delete"), choices=(('', '-----'),
                                                                              ('delete', _(
                                                                                  'Delete Completely')),
                                                                              ('trash', _('Move to Trash'))), required=False)

    def save(self, *args, **kwargs):
        "Process form"
        if self.instance:
            if self.is_valid():
                if self.cleaned_data['location']:
                    self.instance.location = self.cleaned_data['location']
                if self.cleaned_data['status']:
                    self.instance.status = self.cleaned_data['status']
                self.instance.save()
                if self.cleaned_data['delete']:
                    if self.cleaned_data['delete'] == 'delete':
                        self.instance.delete()
                    if self.cleaned_data['delete'] == 'trash':
                        self.instance.trash = True
                        self.instance.save()


class SettingsForm(forms.Form):

    """ Administration settings form """

    default_item_status = forms.ModelChoiceField(
        label='Default Item Status', queryset=[])

    def __init__(self, user, *args, **kwargs):
        "Sets choices and initial value"
        super(SettingsForm, self).__init__(*args, **kwargs)
        self.fields['default_item_status'].queryset = ItemStatus.objects.filter(
            trash=False)

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.infrastructure', 'default_item_status')[0]
            default_item_status = ItemStatus.objects.get(
                pk=long(conf.value), trash=False)
            self.fields['default_item_status'].initial = default_item_status.id
        except Exception:
            pass

    def save(self):
        "Form processor"
        try:
            ModuleSetting.set_for_module('default_item_status',
                                         self.cleaned_data[
                                             'default_item_status'].id,
                                         'treeio.infrastructure')

        except Exception:
            return False

########NEW FILE########
__FILENAME__ = hmodule
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Infrastructure: Hardtree module definition
"""


PROPERTIES = {
    'title': 'Infrastructure',
    'details': 'Manage infrastructure (fixed assets)',
    'url': '/infrastructure/',
    'system': False,
    'type': 'minor',
}


URL_PATTERNS = [
    '^/infrastructure/',
]

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding model 'ItemField'
        db.create_table('infrastructure_itemfield', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('label', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('field_type', self.gf(
                'django.db.models.fields.CharField')(max_length=64)),
            ('required', self.gf(
                'django.db.models.fields.BooleanField')(default=False)),
            ('allowed_values', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('infrastructure', ['ItemField'])

        # Adding model 'ItemType'
        db.create_table('infrastructure_itemtype', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=512)),
            ('parent', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='child_set', null=True, to=orm['infrastructure.ItemType'])),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('infrastructure', ['ItemType'])

        # Adding M2M table for field fields on 'ItemType'
        db.create_table('infrastructure_itemtype_fields', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('itemtype', models.ForeignKey(
                orm['infrastructure.itemtype'], null=False)),
            ('itemfield', models.ForeignKey(
                orm['infrastructure.itemfield'], null=False))
        ))
        db.create_unique(
            'infrastructure_itemtype_fields', ['itemtype_id', 'itemfield_id'])

        # Adding model 'ItemStatus'
        db.create_table('infrastructure_itemstatus', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('active', self.gf('django.db.models.fields.BooleanField')
             (default=True)),
            ('hidden', self.gf('django.db.models.fields.BooleanField')
             (default=False)),
        ))
        db.send_create_signal('infrastructure', ['ItemStatus'])

        # Adding model 'Item'
        db.create_table('infrastructure_item', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=512)),
            ('item_type', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['infrastructure.ItemType'])),
            ('status', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['infrastructure.ItemStatus'])),
            ('parent', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='child_set', null=True, to=orm['infrastructure.Item'])),
            ('manufacturer', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='items_manufactured', null=True, to=orm['identities.Contact'])),
            ('supplier', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='items_supplied', null=True, to=orm['identities.Contact'])),
            ('location', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['core.Location'], null=True, blank=True)),
            ('owner', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='items_owned', null=True, to=orm['identities.Contact'])),
            ('asset', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['finance.Asset'], null=True, blank=True)),
        ))
        db.send_create_signal('infrastructure', ['Item'])

        # Adding model 'ItemValue'
        db.create_table('infrastructure_itemvalue', (
            ('id', self.gf('django.db.models.fields.AutoField')
             (primary_key=True)),
            ('field', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['infrastructure.ItemField'])),
            ('item', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['infrastructure.Item'])),
            ('value', self.gf(
                'django.db.models.fields.TextField')(blank=True)),
        ))
        db.send_create_signal('infrastructure', ['ItemValue'])

        # Adding model 'ItemServicing'
        db.create_table('infrastructure_itemservicing', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('supplier', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='itemservice_supplied', null=True, to=orm['identities.Contact'])),
            ('start_date', self.gf('django.db.models.fields.DateField')
             (null=True, blank=True)),
            ('expiry_date', self.gf('django.db.models.fields.DateField')
             (null=True, blank=True)),
            ('details', self.gf(
                'django.db.models.fields.TextField')(blank=True)),
        ))
        db.send_create_signal('infrastructure', ['ItemServicing'])

        # Adding M2M table for field items on 'ItemServicing'
        db.create_table('infrastructure_itemservicing_items', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('itemservicing', models.ForeignKey(
                orm['infrastructure.itemservicing'], null=False)),
            ('item', models.ForeignKey(orm['infrastructure.item'], null=False))
        ))
        db.create_unique(
            'infrastructure_itemservicing_items', ['itemservicing_id', 'item_id'])

        # Adding M2M table for field billing on 'ItemServicing'
        db.create_table('infrastructure_itemservicing_payments', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('itemservicing', models.ForeignKey(
                orm['infrastructure.itemservicing'], null=False)),
            ('transaction', models.ForeignKey(
                orm['finance.transaction'], null=False))
        ))
        db.create_unique(
            'infrastructure_itemservicing_payments', ['itemservicing_id', 'transaction_id'])

    def backwards(self, orm):

        # Deleting model 'ItemField'
        db.delete_table('infrastructure_itemfield')

        # Deleting model 'ItemType'
        db.delete_table('infrastructure_itemtype')

        # Removing M2M table for field fields on 'ItemType'
        db.delete_table('infrastructure_itemtype_fields')

        # Deleting model 'ItemStatus'
        db.delete_table('infrastructure_itemstatus')

        # Deleting model 'Item'
        db.delete_table('infrastructure_item')

        # Deleting model 'ItemValue'
        db.delete_table('infrastructure_itemvalue')

        # Deleting model 'ItemServicing'
        db.delete_table('infrastructure_itemservicing')

        # Removing M2M table for field items on 'ItemServicing'
        db.delete_table('infrastructure_itemservicing_items')

        # Removing M2M table for field billing on 'ItemServicing'
        db.delete_table('infrastructure_itemservicing_payments')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.location': {
            'Meta': {'object_name': 'Location', '_ormbases': ['core.Object']},
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Location']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'everybody_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']"}),
            'group_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"}),
            'user_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'finance.account': {
            'Meta': {'ordering': "['name']", 'object_name': 'Account', '_ormbases': ['core.Object']},
            'balance': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"})
        },
        'finance.asset': {
            'Meta': {'ordering': "['-purchase_date']", 'object_name': 'Asset', '_ormbases': ['core.Object']},
            'asset_type': ('django.db.models.fields.CharField', [], {'default': "'fixed'", 'max_length': '32'}),
            'current_value': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'depreciation_rate': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'depreciation_type': ('django.db.models.fields.CharField', [], {'default': "'straight'", 'max_length': '32', 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'endlife_value': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'initial_value': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'lifetime': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'purchase_date': ('django.db.models.fields.DateField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'blank': 'True'})
        },
        'finance.category': {
            'Meta': {'object_name': 'Category', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'finance.liability': {
            'Meta': {'ordering': "['-due_date']", 'object_name': 'Liability', '_ormbases': ['core.Object']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Account']"}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Category']", 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'due_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_liability_source'", 'to': "orm['identities.Contact']"}),
            'target': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_liability_target'", 'to': "orm['identities.Contact']"}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'finance.transaction': {
            'Meta': {'ordering': "['-datetime']", 'object_name': 'Transaction', '_ormbases': ['core.Object']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Account']"}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Category']", 'null': 'True', 'blank': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'liability': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Liability']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_transaction_source'", 'to': "orm['identities.Contact']"}),
            'target': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_transaction_target'", 'to': "orm['identities.Contact']"}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'infrastructure.item': {
            'Meta': {'ordering': "['name']", 'object_name': 'Item', '_ormbases': ['core.Object']},
            'asset': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Asset']", 'null': 'True', 'blank': 'True'}),
            'item_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['infrastructure.ItemType']"}),
            'location': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Location']", 'null': 'True', 'blank': 'True'}),
            'manufacturer': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'items_manufactured'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'items_owned'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['infrastructure.Item']"}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['infrastructure.ItemStatus']"}),
            'supplier': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'items_supplied'", 'null': 'True', 'to': "orm['identities.Contact']"})
        },
        'infrastructure.itemfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ItemField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'infrastructure.itemservicing': {
            'Meta': {'ordering': "['-expiry_date']", 'object_name': 'ItemServicing', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'expiry_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'items': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['infrastructure.Item']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'payments': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['finance.Transaction']", 'null': 'True', 'blank': 'True'}),
            'start_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'supplier': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'itemservice_supplied'", 'null': 'True', 'to': "orm['identities.Contact']"})
        },
        'infrastructure.itemstatus': {
            'Meta': {'ordering': "('hidden', '-active', 'name')", 'object_name': 'ItemStatus', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'infrastructure.itemtype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ItemType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['infrastructure.ItemField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['infrastructure.ItemType']"})
        },
        'infrastructure.itemvalue': {
            'Meta': {'object_name': 'ItemValue'},
            'field': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['infrastructure.ItemField']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'item': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['infrastructure.Item']"}),
            'value': ('django.db.models.fields.TextField', [], {'blank': 'True'})
        }
    }

    complete_apps = ['infrastructure']

########NEW FILE########
__FILENAME__ = models
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Infrastructure module objects
"""
from django.db import models
from django.core.urlresolvers import reverse
from treeio.core.models import Object, Location
from treeio.identities.models import Contact
from treeio.finance.models import Transaction, Asset
import datetime


class ItemField(Object):

    """ ItemField model """
    name = models.CharField(max_length=256)
    label = models.CharField(max_length=256)
    field_type = models.CharField(max_length=64, choices=(('text', 'Text'),
                                                          ('details',
                                                           'Details'),
                                                          ('url', 'URL'),
                                                          ('picture',
                                                           'Picture'),
                                                          ('date', 'Date')
                                                          ))
    required = models.BooleanField(default=False)
    allowed_values = models.TextField(blank=True, null=True)
    details = models.TextField(blank=True, null=True)

    searchable = False

    class Meta:

        "ItemField"
        ordering = ['name']

    def __unicode__(self):
        return self.label


class ItemType(Object):

    """ ItemType model """
    name = models.CharField(max_length=512)
    parent = models.ForeignKey(
        'self', blank=True, null=True, related_name='child_set')
    fields = models.ManyToManyField(ItemField, blank=True, null=True)
    details = models.TextField(blank=True, null=True)

    access_inherit = ('parent', '*module', '*user')

    class Meta:

        "ItemType"
        ordering = ['name']

    def __unicode__(self):
        return self.name


class ItemStatus(Object):

    "State information about an infrastructure Item"
    name = models.CharField(max_length=256)
    details = models.TextField(blank=True, null=True)
    active = models.BooleanField(default=True)
    hidden = models.BooleanField(default=False)

    class Meta:

        "ItemStatus"
        ordering = ('hidden', '-active', 'name')

    def __unicode__(self):
        return self.name


class Item(Object):

    """ Item model """
    name = models.CharField(max_length=512)
    item_type = models.ForeignKey(ItemType)
    status = models.ForeignKey(ItemStatus)
    parent = models.ForeignKey(
        'self', blank=True, null=True, related_name='child_set')
    manufacturer = models.ForeignKey(
        Contact, blank=True, null=True, related_name='items_manufactured', on_delete=models.SET_NULL)
    supplier = models.ForeignKey(
        Contact, blank=True, null=True, related_name='items_supplied', on_delete=models.SET_NULL)
    location = models.ForeignKey(
        Location, blank=True, null=True, on_delete=models.SET_NULL)
    owner = models.ForeignKey(
        Contact, blank=True, null=True, related_name='items_owned', on_delete=models.SET_NULL)
    asset = models.ForeignKey(
        Asset, blank=True, null=True, on_delete=models.SET_NULL)

    access_inherit = ('parent', 'item_type', '*module', '*user')

    class Meta:

        "Item"
        ordering = ['name']

    def get_absolute_url(self):
        "Returns absolute URL of the object"
        try:
            return reverse('infrastructure_item_view', args=[self.id])
        except Exception:
            return ""

    def get_servicing(self):
        "Returns a QuerySet of all ItemServicing records"

        return self.itemservicing_set.filter()

    def get_active_servicing(self):
        "Returns a QuerySet of active ItemServicing records with expiry date in the future"
        now = datetime.datetime.now()
        return self.itemservicing_set.filter(expiry_date__gte=now.date())

    def __unicode__(self):
        return self.name


class ItemValue(models.Model):

    """ ItemValue model """
    field = models.ForeignKey(ItemField)
    item = models.ForeignKey(Item)
    value = models.TextField(blank=True)

    def name(self):
        return self.field.name

    def __unicode__(self):
        return self.value


class ItemServicing(Object):

    """ ServiceRecord model """
    name = models.CharField(max_length=256)
    items = models.ManyToManyField(Item, blank=True, null=True)
    supplier = models.ForeignKey(
        Contact, blank=True, null=True, related_name='itemservice_supplied', on_delete=models.SET_NULL)
    start_date = models.DateField(blank=True, null=True)
    expiry_date = models.DateField(blank=True, null=True)
    payments = models.ManyToManyField(Transaction, blank=True, null=True)
    details = models.TextField(blank=True)

    def __unicode__(self):
        return self.name

    class Meta:

        "ItemServicing"
        ordering = ['-expiry_date']

    def get_absolute_url(self):
        "Returns absolute URL of the object"
        try:
            return reverse('infrastructure_service_record_view', args=[self.id])
        except Exception:
            return ""

########NEW FILE########
__FILENAME__ = infrastructure
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Infrastructure templatetags
"""
from coffin import template
from treeio.core.rendering import render_to_string
from jinja2 import contextfunction, Markup
from django.template import RequestContext

register = template.Library()


@contextfunction
def infrastructure_item_list(context, items, skip_group=False):
    "Print a list of tasks"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('infrastructure/tags/item_list',
                                   {'items': items, 'skip_group': skip_group},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(infrastructure_item_list)


@contextfunction
def infrastructure_servicing_list(context, items, skip_group=False):
    "Print a list of tasks"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('infrastructure/tags/servicing_list',
                                   {'service_records': items,
                                       'skip_group': skip_group},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(infrastructure_servicing_list)

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Infrastructure: test suites
"""

from django.test import TestCase
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser
from treeio.core.models import User, Group, Perspective, ModuleSetting
from treeio.infrastructure.models import Item, ItemValue, ItemField, ItemType, ItemStatus, ItemServicing


class InfrastructureModelsTest(TestCase):

    "Infrastructure models tests"

    def test_model_item_field(self):
        "Test item field model"
        obj = ItemField(name='test', label='test', field_type='text')
        obj.save()
        self.assertEquals('test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_item_type(self):
        "Test item type model"
        obj = ItemType(name='test')
        obj.save()
        self.assertEquals('test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_item_status(self):
        "Test item status model"
        obj = ItemStatus(name='test')
        obj.save()
        self.assertEquals('test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_item(self):
        "Test item model"

        type = ItemType(name='test')
        type.save()

        status = ItemStatus(name='test')
        status.save()

        obj = Item(name='test', item_type=type, status=status)
        obj.save()
        self.assertEquals('test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_item_value(self):
        "Test item value model"

        status = ItemStatus(name='test')
        status.save()

        type = ItemType(name='test')
        type.save()

        item = Item(name='test', item_type=type, status=status)
        item.save()

        field = ItemField(name='test', label='test', field_type='text')
        field.save()

        obj = ItemValue(value='test', field=field, item=item)
        obj.save()
        self.assertEquals('test', obj.value)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_item_servicing(self):
        "Test item servicing model"
        obj = ItemServicing(name='test')
        obj.save()
        self.assertEquals('test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()


class InfrastructureViewsTest(TestCase):

    "Infrastructure functional tests for views"

    username = "test"
    password = "password"
    prepared = False

    def setUp(self):
        "Initial Setup"
        if not self.prepared:
            self.group, created = Group.objects.get_or_create(name='test')
            duser, created = DjangoUser.objects.get_or_create(
                username=self.username)
            duser.set_password(self.password)
            duser.save()
            self.user, created = User.objects.get_or_create(user=duser)
            self.user.save()
            perspective, created = Perspective.objects.get_or_create(
                name='default')
            perspective.set_default_user()
            perspective.save()
            ModuleSetting.set('default_perspective', perspective.id)

            self.type = ItemType(name='test')
            self.type.set_default_user()
            self.type.save()

            self.status = ItemStatus(name='test')
            self.status.set_default_user()
            self.status.save()

            self.field = ItemField(
                name='test', label='test', field_type='text')
            self.field.set_default_user()
            self.field.save()

            self.item = Item(
                name='test', item_type=self.type, status=self.status)
            self.item.set_default_user()
            self.item.save()

            self.value = ItemValue(field=self.field, item=self.item)
            self.value.save()

            self.servicing = ItemServicing(name='test')
            self.servicing.set_default_user()
            self.servicing.save()

            self.client = Client()

            self.prepared = True

    ######################################
    # Testing views when user is logged in
    ######################################
    def test_index_login(self):
        "Test index page with login at /infrastructure/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('infrastructure'))
        self.assertEquals(response.status_code, 200)

    def test_index_infrastructure_login(self):
        "Test index page with login at /infrastructure/index/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('infrastructure_index'))
        self.assertEquals(response.status_code, 200)

    def test_infrastructure_index_owned(self):
        "Test index page with login at /infrastructure/owned/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('infrastructure_index_owned'))
        self.assertEquals(response.status_code, 200)

    # Type
    def test_infrastructure_type_add(self):
        "Test index page with login at /infrastructure/type/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('infrastructure_type_add'))
        self.assertEquals(response.status_code, 200)

    def test_infrastructure_type_view(self):
        "Test index page with login at /infrastructure/type/view/<type_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('infrastructure_type_view', args=[self.type.id]))
        self.assertEquals(response.status_code, 200)

    def test_infrastructure_type_edit(self):
        "Test index page with login at /infrastructure/type/edit/<type_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('infrastructure_type_edit', args=[self.type.id]))
        self.assertEquals(response.status_code, 200)

    def test_infrastructure_type_delete(self):
        "Test index page with login at /infrastructure/type/delete/<type_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('infrastructure_type_delete', args=[self.type.id]))
        self.assertEquals(response.status_code, 200)

    # Field
    def test_infrastructure_field_add(self):
        "Test index page with login at /infrastructure/field/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('infrastructure_field_add'))
        self.assertEquals(response.status_code, 200)

    def test_infrastructure_field_view(self):
        "Test index page with login at /infrastructure/field/view/<field_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('infrastructure_field_view', args=[self.field.id]))
        self.assertEquals(response.status_code, 200)

    def test_infrastructure_field_edit(self):
        "Test index page with login at /infrastructure/field/edit/<field_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('infrastructure_field_edit', args=[self.field.id]))
        self.assertEquals(response.status_code, 200)

    def test_infrastructure_field_del(self):
        "Test index page with login at /infrastructure/field/delete/<field_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('infrastructure_field_delete', args=[self.field.id]))
        self.assertEquals(response.status_code, 200)

    # Status
    def test_infrastructure_status_add(self):
        "Test index page with login at /infrastructure/status/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('infrastructure_status_add'))
        self.assertEquals(response.status_code, 200)

    def test_infrastructure_status_view(self):
        "Test index page with login at /infrastructure/status/view/<status_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('infrastructure_status_view', args=[self.status.id]))
        self.assertEquals(response.status_code, 200)

    def test_infrastructure_status_edit(self):
        "Test index page with login at /infrastructure/status/edit/<status_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('infrastructure_status_edit', args=[self.status.id]))
        self.assertEquals(response.status_code, 200)

    def test_infrastructure_status_del(self):
        "Test index page with login at /infrastructure/status/delete/<status_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('infrastructure_status_delete', args=[self.status.id]))
        self.assertEquals(response.status_code, 200)

    # Item
    def test_infrastructure_item_add(self):
        "Test index page with login at /infrastructure/item/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('infrastructure_item_add'))
        self.assertEquals(response.status_code, 200)

    def test_infr_item_add_typed(self):
        "Test index page with login at /infrastructure/item/add/<type_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('infrastructure_item_add_typed', args=[self.type.id]))
        self.assertEquals(response.status_code, 200)

    def test_infrastructure_item_view(self):
        "Test index page with login at /infrastructure/item/view/<item_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('infrastructure_item_view', args=[self.item.id]))
        self.assertEquals(response.status_code, 200)

    def test_infrastructure_item_edit(self):
        "Test index page with login at /infrastructure/item/edit/<item_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('infrastructure_item_edit', args=[self.item.id]))
        self.assertEquals(response.status_code, 200)

    def test_infrastructure_item_del(self):
        "Test index page with login at /infrastructure/item/delete/<item_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('infrastructure_item_delete', args=[self.item.id]))
        self.assertEquals(response.status_code, 200)

    # Service Record
    def test_infr_service_record_index(self):
        "Test index page with login at /infrastructure/service_record/index/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('infrastructure_service_record_index'))
        self.assertEquals(response.status_code, 200)

    def test_infr_service_record_add(self):
        "Test index page with login at /infrastructure/service_record/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('infrastructure_service_record_add'))
        self.assertEquals(response.status_code, 200)

    def test_infr_service_record_view(self):
        "Test index page with login at /infrastructure/service_record/view/<service_record_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('infrastructure_service_record_view', args=[self.servicing.id]))
        self.assertEquals(response.status_code, 200)

    def test_infr_service_record_edit(self):
        "Test index page with login at /infrastructure/service_record/edit/<service_record_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('infrastructure_service_record_edit', args=[self.servicing.id]))
        self.assertEquals(response.status_code, 200)

    def test_infr_service_record_delete(self):
        "Test index page with login at /infrastructure/service_record/delete/<service_record_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('infrastructure_service_record_delete', args=[self.servicing.id]))
        self.assertEquals(response.status_code, 200)

    ######################################
    # Testing views when user is not logged in
    ######################################
    def test_index(self):
        "Testing /infrastructure/"
        response = self.client.get('/infrastructure/')
        # Redirects as unauthenticated
        self.assertRedirects(response, reverse('user_login'))

    def test_index_infrastructure_out(self):
        "Testing /infrastructure/index/"
        response = self.client.get(reverse('infrastructure_index'))
        self.assertRedirects(response, reverse('user_login'))

    def test_infrastructure_index_owned_out(self):
        "Testing /infrastructure/owned/"
        response = self.client.get(reverse('infrastructure_index_owned'))
        self.assertRedirects(response, reverse('user_login'))

    # Type
    def test_infrastructure_type_add_out(self):
        "Testing /infrastructure/type/add/"
        response = self.client.get(reverse('infrastructure_type_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_infrastructure_type_view_out(self):
        "Testing /infrastructure/type/view/<type_id>"
        response = self.client.get(
            reverse('infrastructure_type_view', args=[self.type.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_infrastructure_type_edit_out(self):
        "Testing /infrastructure/type/edit/<type_id>"
        response = self.client.get(
            reverse('infrastructure_type_edit', args=[self.type.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_infrastructure_type_delete_out(self):
        "Testing /infrastructure/type/delete/<type_id>"
        response = self.client.get(
            reverse('infrastructure_type_delete', args=[self.type.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Field
    def test_infrastructure_field_add_out(self):
        "Testing /infrastructure/field/add/"
        response = self.client.get(reverse('infrastructure_field_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_infrastructure_field_view_out(self):
        "Testing /infrastructure/field/view/<field_id>"
        response = self.client.get(
            reverse('infrastructure_field_view', args=[self.field.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_infrastructure_field_edit_out(self):
        "Testing /infrastructure/field/edit/<field_id>"
        response = self.client.get(
            reverse('infrastructure_field_edit', args=[self.field.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_infrastructure_field_del_out(self):
        "Testing /infrastructure/field/delete/<field_id>"
        response = self.client.get(
            reverse('infrastructure_field_delete', args=[self.field.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Status
    def test_infrastructure_status_add_out(self):
        "Testing /infrastructure/status/add/"
        response = self.client.get(reverse('infrastructure_status_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_infrastructure_status_view_out(self):
        "Testing /infrastructure/status/view/<status_id>"
        response = self.client.get(
            reverse('infrastructure_status_view', args=[self.status.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_infrastructure_status_edit_out(self):
        "Testing /infrastructure/status/edit/<status_id>"
        response = self.client.get(
            reverse('infrastructure_status_edit', args=[self.status.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_infrastructure_status_del_out(self):
        "Testing /infrastructure/status/delete/<status_id>"
        response = self.client.get(
            reverse('infrastructure_status_delete', args=[self.status.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Item
    def test_infrastructure_item_add_out(self):
        "Testing /infrastructure/item/add/"
        response = self.client.get(reverse('infrastructure_item_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_infr_item_add_typed_out(self):
        "Testing /infrastructure/item/add/<type_id>"
        response = self.client.get(
            reverse('infrastructure_item_add_typed', args=[self.type.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_infrastructure_item_view_out(self):
        "Testing /infrastructure/item/view/<item_id>"
        response = self.client.get(
            reverse('infrastructure_item_view', args=[self.item.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_infrastructure_item_edit_out(self):
        "Testing /infrastructure/item/edit/<item_id>"
        response = self.client.get(
            reverse('infrastructure_item_edit', args=[self.item.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_infrastructure_item_del_out(self):
        "Testing /infrastructure/item/delete/<item_id>"
        response = self.client.get(
            reverse('infrastructure_item_delete', args=[self.item.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Service Record
    def test_infr_service_record_index_out(self):
        "Testing /infrastructure/service_record/index/"
        response = self.client.get(
            reverse('infrastructure_service_record_index'))
        self.assertRedirects(response, reverse('user_login'))

    def test_infr_service_record_add_out(self):
        "Testing /infrastructure/service_record/add/"
        response = self.client.get(
            reverse('infrastructure_service_record_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_infr_service_record_view_out(self):
        "Testing /infrastructure/service_record/view/<service_record_id>"
        response = self.client.get(
            reverse('infrastructure_service_record_view', args=[self.servicing.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_infr_service_record_edit_out(self):
        "Testing /infrastructure/service_record/edit/<service_record_id>"
        response = self.client.get(
            reverse('infrastructure_service_record_edit', args=[self.servicing.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_infr_service_record_delete_out(self):
        "Testing /infrastructure/service_record/delete/<service_record_id>"
        response = self.client.get(
            reverse('infrastructure_service_record_delete', args=[self.servicing.id]))
        self.assertRedirects(response, reverse('user_login'))

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Infrastructure module URLs
"""
from django.conf.urls.defaults import patterns, url

urlpatterns = patterns('treeio.infrastructure.views',
                       url(r'^(\.(?P<response_format>\w+))?$',
                           'index', name='infrastructure'),

                       url(r'^index(\.(?P<response_format>\w+))?$',
                           'index', name='infrastructure_index'),
                       url(r'^owned(\.(?P<response_format>\w+))?/?$',
                           'index_owned', name='infrastructure_index_owned'),

                       # Types
                       url(r'^type/view/(?P<type_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'type_view', name='infrastructure_type_view'),
                       url(r'^type/edit/(?P<type_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'type_edit', name='infrastructure_type_edit'),
                       url(r'^type/delete/(?P<type_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'type_delete', name='infrastructure_type_delete'),
                       url(r'^type/add(\.(?P<response_format>\w+))?/?$',
                           'type_add', name='infrastructure_type_add'),

                       # Fields
                       url(r'^field/view/(?P<field_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'field_view', name='infrastructure_field_view'),
                       url(r'^field/edit/(?P<field_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'field_edit', name='infrastructure_field_edit'),
                       url(r'^field/delete/(?P<field_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'field_delete', name='infrastructure_field_delete'),
                       url(r'^field/add(\.(?P<response_format>\w+))?/?$',
                           'field_add', name='infrastructure_field_add'),

                       # Statuses
                       url(r'^status/view/(?P<status_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'status_view', name='infrastructure_status_view'),
                       url(r'^status/edit/(?P<status_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'status_edit', name='infrastructure_status_edit'),
                       url(r'^status/delete/(?P<status_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'status_delete', name='infrastructure_status_delete'),
                       url(r'^status/add(\.(?P<response_format>\w+))?/?$',
                           'status_add', name='infrastructure_status_add'),

                       # Items
                       url(r'^item/view/(?P<item_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'item_view', name='infrastructure_item_view'),
                       url(r'^item/edit/(?P<item_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'item_edit', name='infrastructure_item_edit'),
                       url(r'^item/delete/(?P<item_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'item_delete', name='infrastructure_item_delete'),
                       url(r'^item/add(\.(?P<response_format>\w+))?/?$',
                           'item_add', name='infrastructure_item_add'),
                       url(r'^item/add/(?P<type_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'item_add_typed', name='infrastructure_item_add_typed'),


                       url(r'^settings/view(\.(?P<response_format>\w+))?/?$',
                           'settings_view', name='infrastructure_settings_view'),
                       url(r'^settings/edit(\.(?P<response_format>\w+))?/?$',
                           'settings_edit', name='infrastructure_settings_edit'),

                       # Service Records
                       url(r'^service_record/index(\.(?P<response_format>\w+))?/?$',
                           'service_record_index', name='infrastructure_service_record_index'),
                       url(r'^service_record/view/(?P<service_record_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'service_record_view', name='infrastructure_service_record_view'),
                       url(r'^service_record/edit/(?P<service_record_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'service_record_edit', name='infrastructure_service_record_edit'),
                       url(r'^service_record/delete/(?P<service_record_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'service_record_delete', name='infrastructure_service_record_delete'),
                       url(r'^service_record/add(\.(?P<response_format>\w+))?/?$',
                           'service_record_add', name='infrastructure_service_record_add'),

                       # Location
                       url(r'^location/view/(?P<location_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'location_view', name='infrastructure_location_view'),
                       url(r'^location/edit/(?P<location_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'location_edit', name='infrastructure_location_edit'),
                       url(r'^location/delete/(?P<location_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'location_delete', name='infrastructure_location_delete'),
                       url(r'^location/add(\.(?P<response_format>\w+))?/?$',
                           'location_add', name='infrastructure_location_add'),

                       )

########NEW FILE########
__FILENAME__ = views
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Infrastructure module views
"""
from django.shortcuts import get_object_or_404
from django.template import RequestContext
from treeio.core.rendering import render_to_response
from treeio.infrastructure.models import Item, ItemField, ItemType, ItemStatus, ItemServicing
from treeio.infrastructure.forms import ItemForm, ItemTypeForm, ItemStatusForm, FilterForm, \
    MassActionForm, ItemFieldForm, ServiceRecordForm, SettingsForm
from treeio.core.forms import LocationForm
from treeio.core.models import Object, ModuleSetting, Location
from treeio.core.views import user_denied
from treeio.core.decorators import treeio_login_required, handle_response_format, module_admin_required
from django.http import HttpResponseRedirect
from django.core.urlresolvers import reverse
from django.db.models import Q


def _get_filter_query(args, model=Item):
    "Creates a query to filter Items based on FilterForm arguments"
    query = Q()

    for arg in args:
        if hasattr(model, arg) and args[arg]:
            kwargs = {str(arg + '__id'): long(args[arg])}
            query = query & Q(**kwargs)

    return query


def _get_default_context(request):
    "Returns default context for all views as dict()"

    types = Object.filter_by_request(
        request, ItemType.objects.filter(parent__isnull=True))
    statuses = Object.filter_by_request(request, ItemStatus.objects)
    locations = Object.filter_by_request(request, Location.objects)
    massform = MassActionForm(request.user.get_profile())

    context = {
        'statuses': statuses,
        'types': types,
        'massform': massform,
        'locations': locations
    }

    return context


def _process_mass_form(f):
    "Pre-process request to handle mass action form for Tasks and Milestones"

    def wrap(request, *args, **kwargs):
        "Wrap"
        if 'massform' in request.POST:
            for key in request.POST:
                if 'mass-item' in key:
                    try:
                        item = Item.objects.get(pk=request.POST[key])
                        form = MassActionForm(
                            request.user.get_profile(), request.POST, instance=item)
                        if form.is_valid() and request.user.get_profile().has_permission(item, mode='w'):
                            form.save()
                    except Exception:
                        pass

        return f(request, *args, **kwargs)

    wrap.__doc__ = f.__doc__
    wrap.__name__ = f.__name__

    return wrap


@treeio_login_required
@handle_response_format
@_process_mass_form
def index(request, response_format='html'):
    "Index page: displays all Items"

    query = Q(status__hidden=False)
    if request.GET:
        if 'status' in request.GET and request.GET['status']:
            query = _get_filter_query(request.GET)
        else:
            query = query & _get_filter_query(request.GET)
    if request.GET:
        query = query & _get_filter_query(request.GET)

    items = Object.filter_by_request(
        request, Item.objects.filter(query).order_by('name'))

    filters = FilterForm(request.user.get_profile(), '', request.GET)

    context = _get_default_context(request)
    context.update({'items': items,
                    'filters': filters})

    return render_to_response('infrastructure/index', context,
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
@_process_mass_form
def index_owned(request, response_format='html'):
    "Items owned by current user"

    query = Q(owner=request.user.get_profile().get_contact())
    if request.GET:
        query = query & _get_filter_query(request.GET)
    items = Object.filter_by_request(
        request, Item.objects.filter(query).order_by('-date_created'))

    filters = FilterForm(request.user.get_profile(), ['owner'], request.GET)

    context = _get_default_context(request)
    context.update({'items': items,
                    'filters': filters})

    return render_to_response('infrastructure/index_owned', context,
                              context_instance=RequestContext(request), response_format=response_format)

#
# ItemTypes
#


@treeio_login_required
@handle_response_format
@_process_mass_form
def type_view(request, type_id, response_format='html'):
    "ItemType view"

    item_type = get_object_or_404(ItemType, pk=type_id)
    if not request.user.get_profile().has_permission(item_type):
        return user_denied(request, message="You don't have access to this Item Type",
                           response_format=response_format)

    query = Q(item_type=item_type)
    if request.GET:
        query = query & _get_filter_query(request.GET)
    items = Object.filter_by_request(
        request, Item.objects.filter(query).order_by('name'))

    filters = FilterForm(
        request.user.get_profile(), ['item_type'], request.GET)

    context = _get_default_context(request)
    context.update({'items': items,
                    'filters': filters,
                    'item_type': item_type})

    return render_to_response('infrastructure/item_type_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def type_edit(request, type_id, response_format='html'):
    "ItemType edit"

    item_type = get_object_or_404(ItemType, pk=type_id)
    if not request.user.get_profile().has_permission(item_type, mode='w'):
        return user_denied(request, message="You don't have access to this Item Type",
                           response_format=response_format)
    infrastructure = Object.filter_by_request(request,
                                              Item.objects.filter(item_type=item_type).order_by('name'))

    if request.POST:
        if not 'cancel' in request.POST:
            form = ItemTypeForm(
                request.user.get_profile(), request.POST, instance=item_type)
            if form.is_valid():
                item_type = form.save(request)
                return HttpResponseRedirect(reverse('infrastructure_type_view', args=[item_type.id]))
        else:
            return HttpResponseRedirect(reverse('infrastructure_type_view', args=[item_type.id]))
    else:
        form = ItemTypeForm(request.user.get_profile(), instance=item_type)

    context = _get_default_context(request)
    context.update({'infrastructure': infrastructure,
                    'form': form,
                    'item_type': item_type})

    return render_to_response('infrastructure/item_type_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def type_add(request, response_format='html'):
    "ItemType add"

    if not request.user.get_profile().is_admin('treeio.infrastructure'):
        return user_denied(request, message="You don't have administrator access to the Infrastructure module",
                           response_format=response_format)

    if request.POST:
        if not 'cancel' in request.POST:
            item_type = ItemType()
            form = ItemTypeForm(
                request.user.get_profile(), request.POST, instance=item_type)
            if form.is_valid():
                item = form.save(request)
                item_type.set_user_from_request(request)
                return HttpResponseRedirect(reverse('infrastructure_type_view', args=[item.id]))
        else:
            return HttpResponseRedirect(reverse('infrastructure_settings_view'))
    else:
        form = ItemTypeForm(request.user.get_profile())

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('infrastructure/item_type_add', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def type_delete(request, type_id, response_format='html'):
    "ItemType delete page"
    type = get_object_or_404(ItemType, pk=type_id)
    if not request.user.get_profile().has_permission(type, mode="w"):
        return user_denied(request, message="You don't have write access to this ItemType")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                type.trash = True
                type.save()
            else:
                type.delete()
            return HttpResponseRedirect(reverse('infrastructure_settings_view'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('infrastructure_item_type_view', args=[type.id]))

    context = _get_default_context(request)
    context.update({'item_type': type})

    return render_to_response('infrastructure/item_type_delete', context,
                              context_instance=RequestContext(request), response_format=response_format)

#
# Fields
#


@treeio_login_required
@handle_response_format
@_process_mass_form
def field_view(request, field_id, response_format='html'):
    "ItemField view"

    field = get_object_or_404(ItemField, pk=field_id)
    if not request.user.get_profile().has_permission(field):
        return user_denied(request, message="You don't have access to this Field Type",
                           response_format=response_format)

    context = _get_default_context(request)
    context.update({'field': field})

    return render_to_response('infrastructure/field_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def field_edit(request, field_id, response_format='html'):
    "ItemField edit"

    field = get_object_or_404(ItemField, pk=field_id)
    if not request.user.get_profile().has_permission(field, mode='w'):
        return user_denied(request, message="You don't have access to this Field Type",
                           response_format=response_format)

    if request.POST:
        if not 'cancel' in request.POST:
            form = ItemFieldForm(request.POST, instance=field)
            if form.is_valid():
                item = form.save(request)
                return HttpResponseRedirect(reverse('infrastructure_field_view', args=[item.id]))
        else:
            return HttpResponseRedirect(reverse('infrastructure_field_view', args=[item.id]))
    else:
        form = ItemFieldForm(instance=field)

    context = _get_default_context(request)
    context.update({'form': form,
                    'field': field})

    return render_to_response('infrastructure/field_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def field_add(request, response_format='html'):
    "ItemField add"

    if not request.user.get_profile().is_admin('treeio.infrastructure'):
        return user_denied(request,
                           message="You don't have administrator access to the Infrastructure module",
                           response_format=response_format)

    if request.POST:
        if not 'cancel' in request.POST:
            field = ItemField()
            form = ItemFieldForm(request.POST, instance=field)
            if form.is_valid():
                field = form.save(request)
                field.set_user_from_request(request)
                return HttpResponseRedirect(reverse('infrastructure_field_view', args=[field.id]))
        else:
            return HttpResponseRedirect(reverse('infrastructure_settings_view'))
    else:
        form = ItemFieldForm()

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('infrastructure/field_add', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def field_delete(request, field_id, response_format='html'):
    "ItemField delete page"
    field = get_object_or_404(ItemField, pk=field_id)
    if not request.user.get_profile().has_permission(field, mode="w"):
        return user_denied(request, message="You don't have write access to this ItemField")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                field.trash = True
                field.save()
            else:
                field.delete()
            return HttpResponseRedirect(reverse('infrastructure_settings_view'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('infrastructure_field_view', args=[field.id]))

    context = _get_default_context(request)
    context.update({'field': field})

    return render_to_response('infrastructure/field_delete', context,
                              context_instance=RequestContext(request), response_format=response_format)


#
# Statuses
#
@treeio_login_required
@handle_response_format
@_process_mass_form
def status_view(request, status_id, response_format='html'):
    "ItemStatus view"

    item_status = get_object_or_404(ItemStatus, pk=status_id)
    if not request.user.get_profile().has_permission(item_status):
        return user_denied(request, message="You don't have access to this Item Status",
                           response_format=response_format)

    query = Q(status=item_status)
    if request.GET:
        query = query & _get_filter_query(request.GET)
    items = Object.filter_by_request(
        request, Item.objects.filter(query).order_by('name'))

    filters = FilterForm(request.user.get_profile(), ['status'], request.GET)

    context = _get_default_context(request)
    context.update({'items': items,
                   'filters': filters,
                   'item_status': item_status
                    })

    return render_to_response('infrastructure/item_status_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def status_edit(request, status_id, response_format='html'):
    "ItemStatus edit"

    item_status = get_object_or_404(ItemStatus, pk=status_id)
    if not request.user.get_profile().has_permission(item_status, mode='w'):
        return user_denied(request, message="You don't have access to this Item Status",
                           response_format=response_format)

    if request.POST:
        if not 'cancel' in request.POST:
            form = ItemStatusForm(request.POST, instance=item_status)
            if form.is_valid():
                item_status = form.save(request)
                return HttpResponseRedirect(reverse('infrastructure_status_view', args=[item_status.id]))
        else:
            return HttpResponseRedirect(reverse('infrastructure_status_view', args=[item_status.id]))
    else:
        form = ItemStatusForm(instance=item_status)

    context = _get_default_context(request)
    context.update({'item_status': item_status,
                    'form': form})

    return render_to_response('infrastructure/item_status_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def status_delete(request, status_id, response_format='html'):
    "ItemStatus delete"

    item_status = get_object_or_404(ItemStatus, pk=status_id)
    if not request.user.get_profile().has_permission(item_status, mode='w'):
        return user_denied(request, message="You don't have access to this Item Status",
                           response_format=response_format)

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                item_status.trash = True
                item_status.save()
            else:
                item_status.delete()
            return HttpResponseRedirect(reverse('infrastructure_settings_view'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('infrastructure_item_view', args=[item_status.id]))

    context = _get_default_context(request)
    context.update({'item_status': item_status})

    return render_to_response('infrastructure/item_status_delete', context,
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def status_add(request, response_format='html'):
    "ItemStatus edit"

    if not request.user.get_profile().is_admin('treeio.infrastructure'):
        return user_denied(request, message="You are not an Administrator of the Infrastructure module",
                           response_format=response_format)

    if request.POST:
        if not 'cancel' in request.POST:
            item_status = ItemStatus()
            form = ItemStatusForm(request.POST, instance=item_status)
            if form.is_valid():
                item_status = form.save(request)
                item_status.set_user_from_request(request)
                return HttpResponseRedirect(reverse('infrastructure_status_view', args=[item_status.id]))
        else:
            return HttpResponseRedirect(reverse('infrastructure_settings_view'))
    else:
        form = ItemStatusForm()

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('infrastructure/item_status_add', context,
                              context_instance=RequestContext(request), response_format=response_format)
#
# Items
#


@treeio_login_required
@handle_response_format
def item_add(request, response_format='html'):
    "New item form"

    context = _get_default_context(request)

    return render_to_response('infrastructure/item_add', context,
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def item_add_typed(request, type_id, response_format='html'):
    "Item add with preselected type"

    item_type = get_object_or_404(ItemType, pk=type_id)
    if not request.user.get_profile().has_permission(item_type, mode='x'):
        return user_denied(request, message="You don't have access to create " + unicode(item_type),
                           response_format=response_format)

    if request.POST:
        if not 'cancel' in request.POST:
            form = ItemForm(
                request.user.get_profile(), item_type, request.POST, files=request.FILES)
            if form.is_valid():
                item = form.save(request)
                return HttpResponseRedirect(reverse('infrastructure_item_view', args=[item.id]))
        else:
            return HttpResponseRedirect(reverse('infrastructure_index'))
    else:
        form = ItemForm(request.user.get_profile(), item_type)

    context = _get_default_context(request)
    context.update({'item_type': item_type,
                    'form': form})

    return render_to_response('infrastructure/item_add_typed', context,
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def item_view(request, item_id, response_format='html'):
    "Item view"
    item = get_object_or_404(Item, pk=item_id)
    if not request.user.get_profile().has_permission(item):
        return user_denied(request, message="You don't have access to this Item",
                           response_format=response_format)

    context = _get_default_context(request)
    context.update({'item': item})

    return render_to_response('infrastructure/item_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def item_edit(request, item_id, response_format='html'):
    "Item edit page"
    item = get_object_or_404(Item, pk=item_id)
    if not request.user.get_profile().has_permission(item, mode="w"):
        return user_denied(request, message="You don't have write access to this Item",
                           response_format=response_format)

    if request.POST:
        if not 'cancel' in request.POST:
            form = ItemForm(request.user.get_profile(), item.item_type, request.POST,
                            files=request.FILES, instance=item)
            if form.is_valid():
                item = form.save(request)
                return HttpResponseRedirect(reverse('infrastructure_item_view', args=[item.id]))
        else:
            return HttpResponseRedirect(reverse('infrastructure_item_view', args=[item.id]))
    else:
        form = ItemForm(
            request.user.get_profile(), item.item_type, instance=item)

    context = _get_default_context(request)
    context.update({'item': item,
                    'form': form})

    return render_to_response('infrastructure/item_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def item_delete(request, item_id, response_format='html'):
    "Item delete page"
    item = get_object_or_404(Item, pk=item_id)
    if not request.user.get_profile().has_permission(item, mode="w"):
        return user_denied(request, message="You don't have write access to this Item")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                item.trash = True
                item.save()
            else:
                item.delete()
            return HttpResponseRedirect(reverse('infrastructure_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('infrastructure_item_view', args=[item.id]))

    context = _get_default_context(request)
    context.update({'item': item})

    return render_to_response('infrastructure/item_delete', context,
                              context_instance=RequestContext(request), response_format=response_format)


#
# Locations
#
@treeio_login_required
@handle_response_format
def location_add(request, response_format='html'):
    "New location form"

    if request.POST:
        if not 'cancel' in request.POST:
            location = Location()
            form = LocationForm(
                request.user.get_profile(), None, request.POST, instance=location)
            if form.is_valid():
                location = form.save()
                location.set_user_from_request(request)
                return HttpResponseRedirect(reverse('infrastructure_location_view', args=[location.id]))
        else:
            return HttpResponseRedirect(reverse('infrastructure_index'))
    else:
        form = LocationForm(request.user.get_profile(), None)

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('infrastructure/location_add', context,
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
@_process_mass_form
def location_view(request, location_id, response_format='html'):
    "Location view"
    location = get_object_or_404(Location, pk=location_id)
    if not request.user.get_profile().has_permission(location):
        return user_denied(request, message="You don't have access to this Location",
                           response_format=response_format)

    query = Q(location=location)
    if request.GET:
        query = query & _get_filter_query(request.GET)
    items = Object.filter_by_request(
        request, Item.objects.filter(query).order_by('name'))

    context = _get_default_context(request)
    context.update({
        'location': location,
        'items': items
    })

    return render_to_response('infrastructure/location_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def location_edit(request, location_id, response_format='html'):
    "Location edit page"
    location = get_object_or_404(Location, pk=location_id)
    if not request.user.get_profile().has_permission(location, mode="w"):
        return user_denied(request, message="You don't have write access to this Location",
                           response_format=response_format)

    if request.POST:
        if not 'cancel' in request.POST:
            form = LocationForm(
                request.user.get_profile(), None, request.POST, instance=location)
            if form.is_valid():
                location = form.save(request)
                return HttpResponseRedirect(reverse('infrastructure_location_view', args=[location.id]))
        else:
            return HttpResponseRedirect(reverse('infrastructure_location_view', args=[location.id]))
    else:
        form = LocationForm(
            request.user.get_profile(), None, instance=location)

    context = _get_default_context(request)
    context.update({'location': location,
                    'form': form})

    return render_to_response('infrastructure/location_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def location_delete(request, location_id, response_format='html'):
    "Location delete page"
    location = get_object_or_404(Location, pk=location_id)
    if not request.user.get_profile().has_permission(location, mode="w"):
        return user_denied(request, message="You don't have write access to this Location")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                location.trash = True
                location.save()
            else:
                location.delete()
            return HttpResponseRedirect(reverse('infrastructure_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('infrastructure_location_view', args=[location.id]))

    context = _get_default_context(request)
    context.update({'location': location})

    return render_to_response('infrastructure/location_delete', context,
                              context_instance=RequestContext(request), response_format=response_format)


#
# Settings
#
@handle_response_format
@treeio_login_required
@module_admin_required('treeio.infrastructure')
def settings_view(request, response_format='html'):
    "Settings"

    if not request.user.get_profile().is_admin('treeio.infrastructure'):
        return user_denied(request, message="You are not an Administrator of the Infrastructure module",
                           response_format=response_format)

    item_types = ItemType.objects.all().filter(trash=False)
    item_statuses = ItemStatus.objects.all().filter(trash=False)
    item_fields = ItemField.objects.all().filter(trash=False)

    default_item_status = None
    try:
        conf = ModuleSetting.get_for_module(
            'treeio.infrastructure', 'default_item_status')[0]
        default_item_status = ItemStatus.objects.get(
            pk=long(conf.value), trash=False)
    except Exception:
        pass

    context = _get_default_context(request)
    context.update({'item_types': item_types,
                    'item_fields': item_fields,
                    'item_statuses': item_statuses,
                    'default_item_status': default_item_status})

    return render_to_response('infrastructure/settings_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@module_admin_required('treeio.infrastructure')
def settings_edit(request, response_format='html'):
    "Settings"

    if request.POST:
        if not 'cancel' in request.POST:
            form = SettingsForm(request.user.get_profile(), request.POST)
            if form.is_valid():
                form.save()
                return HttpResponseRedirect(reverse('infrastructure_settings_view'))
        else:
            return HttpResponseRedirect(reverse('infrastructure_settings_view'))
    else:
        form = SettingsForm(request.user.get_profile())

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('infrastructure/settings_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)

#
# Service Records
#


@treeio_login_required
@handle_response_format
@_process_mass_form
def service_record_index(request, response_format='html'):
    "Index page: displays all Items"
    query = Q()
    if request.GET:
        query = query & _get_filter_query(request.GET)
    service_records = Object.filter_by_request(
        request, ItemServicing.objects.filter(query))

    filters = FilterForm(request.user.get_profile(), '', request.GET)

    context = _get_default_context(request)
    context.update({'service_records': service_records,
                    'filters': filters})

    return render_to_response('infrastructure/service_record_index', context,
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def service_record_add(request, response_format='html'):
    "New service_record form"

    if not request.user.get_profile().is_admin('treeio.infrastructure'):
        return user_denied(request,
                           message="You don't have administrator access to the Infrastructure module")

    service_record = ItemServicing()

    if request.POST:
        if not 'cancel' in request.POST:
            form = ServiceRecordForm(
                request.user.get_profile(), service_record, request.POST)
            if form.is_valid():
                record = form.save(request)
                return HttpResponseRedirect(reverse('infrastructure_service_record_view', args=[record.id]))
        else:
            return HttpResponseRedirect(reverse('infrastructure_service_record_index'))
    else:
        form = ServiceRecordForm(request.user.get_profile(), service_record)

    context = _get_default_context(request)
    context.update({'service_record': service_record,
                    'form': form})

    return render_to_response('infrastructure/service_record_add', context,
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def service_record_view(request, service_record_id, response_format='html'):
    "ServiceRecord view"
    service_record = get_object_or_404(ItemServicing, pk=service_record_id)
    if not request.user.get_profile().has_permission(service_record):
        return user_denied(request, message="You don't have access to this ServiceRecord",
                           response_format=response_format)

    context = _get_default_context(request)
    context.update({'service_record': service_record})

    return render_to_response('infrastructure/service_record_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def service_record_edit(request, service_record_id, response_format='html'):
    "ServiceRecord edit page"

    service_record = get_object_or_404(ItemServicing, pk=service_record_id)
    if not request.user.get_profile().has_permission(service_record, mode="w"):
        return user_denied(request, message="You don't have write access to this ServiceRecord",
                           response_format=response_format)

    if request.POST:
        if not 'cancel' in request.POST:
            form = ServiceRecordForm(
                request.user.get_profile(), None, request.POST, instance=service_record)
            if form.is_valid():
                service_record = form.save(request)
                return HttpResponseRedirect(reverse('infrastructure_service_record_view',
                                                    args=[service_record.id]))
        else:
            return HttpResponseRedirect(reverse('infrastructure_service_record_view',
                                                args=[service_record.id]))
    else:
        form = ServiceRecordForm(
            request.user.get_profile(), None, instance=service_record)

    context = _get_default_context(request)
    context.update({'service_record': service_record,
                    'form': form})

    return render_to_response('infrastructure/service_record_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def service_record_delete(request, service_record_id, response_format='html'):
    "ServiceRecord delete page"
    service_record = get_object_or_404(ItemServicing, pk=service_record_id)
    if not request.user.get_profile().has_permission(service_record, mode="w"):
        return user_denied(request, message="You don't have write access to this ServiceRecord")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                service_record.trash = True
                service_record.save()
            else:
                service_record.delete()
            return HttpResponseRedirect(reverse('infrastructure_settings_view'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('infrastructure_service_record_view',
                                                args=[service_record.id]))

    context = _get_default_context(request)
    context.update({'service_record': service_record})

    return render_to_response('infrastructure/service_record_delete', context,
                              context_instance=RequestContext(request), response_format=response_format)

########NEW FILE########
__FILENAME__ = admin
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Knowledge management: admin page
"""
from treeio.knowledge.models import KnowledgeFolder, KnowledgeItem, KnowledgeCategory
from django.contrib import admin


class KnowledgeFolderAdmin(admin.ModelAdmin):

    """ Knowledge type admin """
    list_display = ('name', 'details')
    search_fields = ['name']


class KnowledgeItemAdmin(admin.ModelAdmin):

    """ Knowledge item admin """
    list_display = ('name', 'folder', 'category', 'body')
    search_fields = ['name']


class KnowledgeCategoryAdmin(admin.ModelAdmin):

    """ Knowledge category admin """
    list_display = ('name', 'details')
    search_fields = ['name']

admin.site.register(KnowledgeFolder, KnowledgeFolderAdmin)
admin.site.register(KnowledgeItem, KnowledgeItemAdmin)
admin.site.register(KnowledgeCategory, KnowledgeCategoryAdmin)

########NEW FILE########
__FILENAME__ = handlers
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

from __future__ import absolute_import, with_statement

__all__ = ['KnowledgeFolderHandler', 'KnowledgeCategoryHandler',
           'KnowledgeItemHandler']

from treeio.core.api.handlers import ObjectHandler, getOrNone
from treeio.knowledge.models import KnowledgeFolder, KnowledgeCategory, KnowledgeItem
from treeio.knowledge.forms import KnowledgeFolderForm, KnowledgeItemForm, KnowledgeCategoryForm


class KnowledgeFolderHandler(ObjectHandler):
    "Entrypoint for KnowledgeFolder model."
    model = KnowledgeFolder
    form = KnowledgeFolderForm

    @staticmethod
    def resource_uri():
        return ('api_knowledge_folders', ['id'])

    def check_create_permission(self, request, mode):
        return True

    def flatten_dict(self, request):
        dct = super(KnowledgeFolderHandler, self).flatten_dict(request)
        dct['knowledgeType_id'] = None
        parent = request.data.get('parent')
        if parent:
            parent = getOrNone(KnowledgeFolder, pk=parent)
            if not parent or not request.user.get_profile().has_permission(parent, mode='x'):
                request.data['parent'] = None
        return dct


class KnowledgeCategoryHandler(ObjectHandler):
    "Entrypoint for KnowledgeCategory model."
    model = KnowledgeCategory
    form = KnowledgeCategoryForm

    @staticmethod
    def resource_uri():
        return ('api_knowledge_categories', ['id'])

    def flatten_dict(self, request):
        return {'data': request.data}

    def check_create_permission(self, request, mode):
        return True


class KnowledgeItemHandler(ObjectHandler):
    "Entrypoint for KnowledgeItem model."
    model = KnowledgeItem
    form = KnowledgeItemForm

    @staticmethod
    def resource_uri():
        return ('api_knowledge_items', ['id'])

    def check_create_permission(self, request, mode):
        return True

    def flatten_dict(self, request):
        dct = super(KnowledgeFolderHandler, self).flatten_dict(request)
        dct['knowledgeType_id'] = None
        return dct

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Knowledge api: test suites
"""
import json
from django.test import TestCase
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser
from treeio.core.models import User, Group, Perspective, ModuleSetting, Object
from treeio.knowledge.models import KnowledgeFolder, KnowledgeItem, KnowledgeCategory


class KnowledgeViewsTest(TestCase):

    "Knowledge functional tests for views"

    username = "api_test"
    password = "api_password"
    prepared = False
    authentication_headers = {"CONTENT_TYPE": "application/json",
                              "HTTP_AUTHORIZATION": "Basic YXBpX3Rlc3Q6YXBpX3Bhc3N3b3Jk"}
    content_type = 'application/json'
    prepared = False

    def setUp(self):
        "Initial Setup"
        if not self.prepared:
            # Clean up first
            Object.objects.all().delete()

            # Create objects
            try:
                self.group = Group.objects.get(name='test')
            except Group.DoesNotExist:
                Group.objects.all().delete()
                self.group = Group(name='test')
                self.group.save()

            try:
                self.user = DjangoUser.objects.get(username=self.username)
                self.user.set_password(self.password)
                try:
                    self.profile = self.user.get_profile()
                except Exception:
                    User.objects.all().delete()
                    self.user = DjangoUser(username=self.username, password='')
                    self.user.set_password(self.password)
                    self.user.save()
            except DjangoUser.DoesNotExist:
                User.objects.all().delete()
                self.user = DjangoUser(username=self.username, password='')
                self.user.set_password(self.password)
                self.user.save()

            try:
                perspective = Perspective.objects.get(name='default')
            except Perspective.DoesNotExist:
                Perspective.objects.all().delete()
                perspective = Perspective(name='default')
                perspective.set_default_user()
                perspective.save()
            ModuleSetting.set('default_perspective', perspective.id)

            self.folder = KnowledgeFolder(name='test', treepath='test')
            self.folder.set_default_user()
            self.folder.save()

            self.category = KnowledgeCategory(name='test', treepath='test')
            self.category.set_default_user()
            self.category.save()

            self.item = KnowledgeItem(name='test', folder=self.folder,
                                      category=self.category, treepath='test')
            self.item.set_default_user()
            self.item.save()

            # parent folder
            self.parent = KnowledgeFolder(name='test', treepath='test')
            self.parent.set_default_user()
            self.parent.save()

            self.client = Client()

            self.prepared = True

    def test_unauthenticated_access(self):
        "Test index page at /api/knowledge/folders"
        response = self.client.get('/api/knowledge/folders')
        # Redirects as unauthenticated
        self.assertEquals(response.status_code, 401)

    def test_get_folders_list(self):
        """ Test index page api/knowledge/folders """
        response = self.client.get(
            path=reverse('api_knowledge_folders'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_folder(self):
        response = self.client.get(path=reverse('api_knowledge_folders', kwargs={
                                   'object_ptr': self.folder.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_folder(self):
        updates = {'name': 'Api folder update',
                   'parent': self.parent.id, 'details': '<p>api details</p>'}
        response = self.client.put(path=reverse('api_knowledge_folders', kwargs={'object_ptr': self.folder.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(updates["name"], data["name"])
        self.assertEquals(updates["parent"], data["parent"]["id"])
        self.assertEquals(updates["details"], data["details"])

    def test_get_categories_list(self):
        """ Test index page api/knowledge/categories """
        response = self.client.get(
            path=reverse('api_knowledge_categories'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_category(self):
        response = self.client.get(path=reverse('api_knowledge_categories', kwargs={
                                   'object_ptr': self.category.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_category(self):
        updates = {
            'name': 'Api catagory update', 'details': '<p>api details</p>'}
        response = self.client.put(path=reverse('api_knowledge_categories', kwargs={'object_ptr': self.category.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(updates["name"], data["name"])
        self.assertEquals(updates["details"], data["details"])

    def test_get_items_list(self):
        """ Test index page api/knowledge/items """
        response = self.client.get(
            path=reverse('api_knowledge_items'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_item(self):
        response = self.client.get(path=reverse('api_knowledge_items', kwargs={
                                   'object_ptr': self.item.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_item(self):
        updates = {'name': 'Api item update', 'folder': self.folder.id, 'category': self.category.id,
                   'body': '<p>api body</p>'}
        response = self.client.put(path=reverse('api_knowledge_items', kwargs={'object_ptr': self.item.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 400)

        #data = json.loads(response.content)
        #self.assertEquals(updates["name"], data["name"])
        #self.assertEquals(updates["body"], data["body"])
        #self.assertEquals(updates["folder"], data["folder"]["id"])
        #self.assertEquals(updates["category"], data["category"]["id"])

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

import handlers
from django.conf.urls import patterns, url
from treeio.core.api.auth import auth_engine
from treeio.core.api.doc import documentation_view
from treeio.core.api.resource import CsrfExemptResource

ad = {'authentication': auth_engine}

# knowledge resources
folderResource = CsrfExemptResource(
    handler=handlers.KnowledgeFolderHandler, **ad)
categoryResource = CsrfExemptResource(
    handler=handlers.KnowledgeCategoryHandler, **ad)
itemResource = CsrfExemptResource(handler=handlers.KnowledgeItemHandler, **ad)

urlpatterns = patterns('',
    # Knowledge
    url(r'^doc$', documentation_view, kwargs={
        'module': handlers}, name="api_knowledge_doc"),
    url(r'^folders$', folderResource,
        name='api_knowledge_folders'),
    url(r'^folder/(?P<object_ptr>\d+)',
        folderResource, name='api_knowledge_folders'),
    url(r'^categories$', categoryResource,
        name='api_knowledge_categories'),
    url(r'^category/(?P<object_ptr>\d+)',
        categoryResource, name='api_knowledge_categories'),
    url(r'^items$', itemResource,
        name='api_knowledge_items'),
    url(r'^item/(?P<object_ptr>\d+)',
        itemResource, name='api_knowledge_items'),
)

########NEW FILE########
__FILENAME__ = forms
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Knowledge base model forms
"""
from django.forms import ModelForm, Form, ChoiceField
from treeio.knowledge.models import KnowledgeFolder, KnowledgeItem, KnowledgeCategory
from treeio.core.models import Object
from treeio.core.decorators import preprocess_form
from django.utils.translation import ugettext as _
from django.core.urlresolvers import reverse
preprocess_form()


class MassActionForm(Form):

    """ Mass action form for Reports """

    delete = ChoiceField(label=_("Delete"), choices=(('', '-----'), ('delete', _('Delete Completely')),
                                                     ('trash', _('Move to Trash'))), required=False)

    instance = None

    def __init__(self, user, *args, **kwargs):
        if 'instance' in kwargs:
            self.instance = kwargs['instance']
            del kwargs['instance']

        super(MassActionForm, self).__init__(*args, **kwargs)
        self.fields['delete'] = ChoiceField(label=_("Delete"), choices=(('', '-----'),
                                                                        ('delete', _(
                                                                            'Delete Completely')),
                                                                        ('trash', _('Move to Trash'))), required=False)

    def save(self, *args, **kwargs):
        "Process form"

        if self.instance:
            if self.is_valid():
                if self.cleaned_data['delete']:
                    if self.cleaned_data['delete'] == 'delete':
                        self.instance.delete()
                    if self.cleaned_data['delete'] == 'trash':
                        self.instance.trash = True
                        self.instance.save()


class KnowledgeFolderForm(ModelForm):

    """ Knowledge folder form """

    def __init__(self, user, knowledgeType_id, *args, **kwargs):
        super(KnowledgeFolderForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")

        self.fields['parent'].label = _("Parent")
        self.fields['parent'].queryset = KnowledgeFolder.objects

        self.fields['parent'].queryset = Object.filter_permitted(
            user, KnowledgeFolder.objects, mode='x')
        if knowledgeType_id:
            self.fields['parent'].initial = knowledgeType_id

        self.fields['details'].label = _("Details")

    class Meta:

        "KnowledgeFolder"
        model = KnowledgeFolder
        fields = ('name', 'parent', 'details')


class KnowledgeItemForm(ModelForm):

    """ Knowledge item form """

    def __init__(self, user, knowledgeType_id, *args, **kwargs):
        super(KnowledgeItemForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")

        self.fields['folder'].label = _("Folder")
        self.fields['folder'].queryset = Object.filter_permitted(
            user, KnowledgeFolder.objects, mode='x')
        self.fields['folder'].widget.attrs.update(
            {'popuplink': reverse('knowledge_folder_add')})
        if knowledgeType_id:
            self.fields['folder'].initial = knowledgeType_id

        self.fields['category'].label = _("Category")
        self.fields['category'].queryset = Object.filter_permitted(
            user, KnowledgeCategory.objects, mode='x')
        self.fields['category'].widget.attrs.update(
            {'popuplink': reverse('knowledge_category_add')})

        self.fields['body'].label = _("Body")
        self.fields['body'].widget.attrs.update({'class': 'full-editor'})

    class Meta:

        "KnowledgeItem"
        model = KnowledgeItem
        fields = ('name', 'folder', 'category', 'body')


class KnowledgeCategoryForm(ModelForm):

    """ Knowledge category form """

    def __init__(self, *args, **kwargs):
        super(KnowledgeCategoryForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")
        self.fields['details'].label = _("Details")

    class Meta:

        "KnowledgeCategory"
        model = KnowledgeCategory
        fields = ('name', 'details')


class FilterForm(ModelForm):

    """ Filter form definition """

    def __init__(self, user, skip=[], *args, **kwargs):
        super(FilterForm, self).__init__(*args, **kwargs)

        if 'folder' in skip:
            del self.fields['folder']
        else:
            self.fields['folder'].queryset = Object.filter_permitted(
                user, KnowledgeFolder.objects, mode='x')
            #self.fields['folder'].required = False
            self.fields['folder'].label = _("Folder")

        if 'category' in skip:
            del self.fields['category']
        else:
            self.fields['category'].queryset = Object.filter_permitted(user,
                                                                       KnowledgeCategory.objects, mode='x')
            self.fields['category'].required = False
            self.fields['category'].label = _("Category")

    class Meta:

        "Filter"
        model = KnowledgeItem
        fields = ('folder', 'category')

########NEW FILE########
__FILENAME__ = hmodule
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Knowledge Base: Hardtree module definition
"""


PROPERTIES = {
    'title': 'Knowledge',
    'details': 'Manage your knowledge',
    'url': '/knowledge/',
    'system': False,
    'type': 'minor',
}


URL_PATTERNS = [
    '^/knowledge/',
]

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding model 'KnowledgeFolder'
        db.create_table('knowledge_knowledgefolder', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=255)),
            ('details', self.gf('django.db.models.fields.TextField')
             (max_length=255, null=True, blank=True)),
            ('parent', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='child_set', null=True, to=orm['knowledge.KnowledgeFolder'])),
            ('treepath', self.gf('django.db.models.fields.CharField')
             (max_length=800)),
        ))
        db.send_create_signal('knowledge', ['KnowledgeFolder'])

        # Adding model 'KnowledgeCategory'
        db.create_table('knowledge_knowledgecategory', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=255)),
            ('details', self.gf('django.db.models.fields.TextField')
             (max_length=255, null=True, blank=True)),
            ('treepath', self.gf('django.db.models.fields.CharField')
             (max_length=800)),
        ))
        db.send_create_signal('knowledge', ['KnowledgeCategory'])

        # Adding model 'KnowledgeItem'
        db.create_table('knowledge_knowledgeitem', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=255)),
            ('folder', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['knowledge.KnowledgeFolder'])),
            ('category', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['knowledge.KnowledgeCategory'], null=True, blank=True)),
            ('body', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('treepath', self.gf('django.db.models.fields.CharField')
             (max_length=800)),
        ))
        db.send_create_signal('knowledge', ['KnowledgeItem'])

    def backwards(self, orm):

        # Deleting model 'KnowledgeFolder'
        db.delete_table('knowledge_knowledgefolder')

        # Deleting model 'KnowledgeCategory'
        db.delete_table('knowledge_knowledgecategory')

        # Deleting model 'KnowledgeItem'
        db.delete_table('knowledge_knowledgeitem')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'everybody_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']"}),
            'group_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"}),
            'user_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'knowledge.knowledgecategory': {
            'Meta': {'ordering': "['name']", 'object_name': 'KnowledgeCategory', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'treepath': ('django.db.models.fields.CharField', [], {'max_length': '800'})
        },
        'knowledge.knowledgefolder': {
            'Meta': {'ordering': "['name']", 'object_name': 'KnowledgeFolder', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['knowledge.KnowledgeFolder']"}),
            'treepath': ('django.db.models.fields.CharField', [], {'max_length': '800'})
        },
        'knowledge.knowledgeitem': {
            'Meta': {'ordering': "['-last_updated']", 'object_name': 'KnowledgeItem', '_ormbases': ['core.Object']},
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['knowledge.KnowledgeCategory']", 'null': 'True', 'blank': 'True'}),
            'folder': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['knowledge.KnowledgeFolder']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'treepath': ('django.db.models.fields.CharField', [], {'max_length': '800'})
        }
    }

    complete_apps = ['knowledge']

########NEW FILE########
__FILENAME__ = models
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Knowledge base module objects
"""
from django.db import models
from treeio.core.models import Object
from django.core.urlresolvers import reverse
from django.template import defaultfilters
from unidecode import unidecode

# KnowledgeFolder model


class KnowledgeFolder(Object):

    """ KnowledgeFolder """
    name = models.CharField(max_length=255)
    details = models.TextField(max_length=255, null=True, blank=True)
    parent = models.ForeignKey(
        'self', blank=True, null=True, related_name='child_set')
    treepath = models.CharField(max_length=800)

    access_inherit = ('parent', '*module', '*user')

    def __unicode__(self):
        return self.name

    class Meta:

        " Type "
        ordering = ['name']

    def get_absolute_url(self):
        "Returns absolute URL of the object"
        try:
            return reverse('knowledge_folder_view', args=[self.treepath])
        except Exception:
            return ""

    def treewalk(self, save=True):
        "Walks up the tree to construct Type treepath"
        treepath = ''

        for folder in self.get_tree_path():
            slug = unicode(folder.name).replace(" ", "-")
            slug = defaultfilters.slugify(unidecode(slug))
            treepath += slug + "/"
        self.treepath = treepath

        if save:
            self.save()
        return self

    def by_path(treePath):
        "Returns a KnowledgeFolder instance matching the given treepath"
        folder = KnowledgeFolder.objects.filter(treepath=unicode(treePath))
        if folder:
            folder = folder[0]
        else:
            folder = None

        return folder
    by_path = staticmethod(by_path)

    def save(self, *args, **kwargs):
        "Overridden save() method to compute treepath and full names"
        self.treewalk(save=False)
        super(KnowledgeFolder, self).save(*args, **kwargs)


# KnowledgeCategory model
class KnowledgeCategory(Object):

    """ Knowledge Category that contains Knowledge Items"""
    name = models.CharField(max_length=255)
    details = models.TextField(max_length=255, null=True, blank=True)
    treepath = models.CharField(max_length=800)

    def __unicode__(self):
        return self.name

    class Meta:

        " Category "
        ordering = ['name']

    def get_absolute_url(self):
        "Returns absolute URL of the object"
        try:
            return reverse('knowledge_category_view', args=[self.treepath])
        except Exception:
            return ""

    def treewalk(self, save=True):
        "Walks up the tree to construct Category"
        slug = unicode(self.name).replace(" ", "-")
        slug = defaultfilters.slugify(unidecode(slug))
        treepath = slug + "/"

        self.treepath = treepath

        if save:
            self.save()
        return self

    def by_path(path):
        "Returns a Knowledge Category instance matching the given treepath"
        category = KnowledgeCategory.objects.filter(treepath=unidecode(path))

        if category:
            category = category[0]
        else:
            category = None

        return category
    by_path = staticmethod(by_path)

    def save(self, *args, **kwargs):
        "Overridden save() method to compute treepath and full names"
        self.treewalk(save=False)
        super(KnowledgeCategory, self).save(*args, **kwargs)

# KnowledgeItem model


class KnowledgeItem(Object):

    """" A readable piece of knowledge """
    name = models.CharField(max_length=255)
    folder = models.ForeignKey(KnowledgeFolder)
    category = models.ForeignKey(
        KnowledgeCategory, blank=True, null=True, on_delete=models.SET_NULL)
    body = models.TextField(null=True, blank=True)
    treepath = models.CharField(max_length=800)

    access_inherit = ('folder', '*module', '*user')

    def __unicode__(self):
        return self.name

    class Meta:

        " Item "
        ordering = ['-last_updated']

    def get_absolute_url(self):
        "Returns absolute URL of the object"
        try:
            return reverse('knowledge_item_view', args=[self.folder.treepath, self.treepath])
        except Exception:
            return ""

    def treewalk(self, save=True):
        "Walks up the tree to construct both Item treepath and item.name from database"
        slug = unicode(self.name).replace(" ", "-")
        slug = defaultfilters.slugify(unidecode(slug))
        treepath = slug + "/"

        self.treepath = treepath

        if save:
            self.save()
        return self

    def by_path(treePath, itemPath):
        "Returns a Knowledge Item instance matching the given treepath"
        folder = KnowledgeFolder.by_path(unidecode(treePath))
        item = KnowledgeItem.objects.filter(
            treepath=unidecode(itemPath), folder=folder)

        if item:
            item = item[0]
        else:
            item = None

        return item
    by_path = staticmethod(by_path)

    def save(self, *args, **kwargs):
        "Overridden save() method to compute treepath and full names"
        self.treewalk(save=False)
        super(KnowledgeItem, self).save(*args, **kwargs)

########NEW FILE########
__FILENAME__ = knowledge
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Knowledge templatetags
"""
from coffin import template
from treeio.core.rendering import render_to_string
from jinja2 import contextfunction, Markup
from django.template import RequestContext

register = template.Library()


@contextfunction
def knowledge_item_list(context, items, skip_group=False):
    "Print a list of items"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('knowledge/tags/item_list',
                                   {'items': items, 'skip_group': skip_group},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(knowledge_item_list)


@contextfunction
def knowledge_folder_list(context, subfolders, skip_group=False):
    "Print a list of types"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('knowledge/tags/folder_list',
                                   {'subfolders': subfolders,
                                       'skip_group': skip_group},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(knowledge_folder_list)

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Knowledge base: test suites
"""

from django.test import TestCase
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser
from treeio.core.models import User, Group, Perspective, ModuleSetting
from treeio.knowledge.models import KnowledgeFolder, KnowledgeItem, KnowledgeCategory


class KnowledgeModelsTest(TestCase):

    " Knowledge models tests"

    def test_model_folder(self):
        "Test folder model"
        obj = KnowledgeFolder(name='test', treepath='test')
        obj.save()
        self.assertEquals('test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_item(self):
        "Test item model"
        folder = KnowledgeFolder(name='test', treepath='test')
        folder.save()
        category = KnowledgeCategory(name='test', treepath='test')
        category.save()
        obj = KnowledgeItem(
            name='test', folder=folder, category=category, treepath='test')
        obj.save()
        self.assertEquals(folder, obj.folder)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_category(self):
        "Test category model"
        obj = KnowledgeCategory(name='test', details='test', treepath='test')
        obj.save()
        obj.delete()


class KnowledgeViewsTest(TestCase):

    "Knowledge functional tests for views"

    username = "test"
    password = "password"
    prepared = False

    def setUp(self):
        "Initial Setup"
        if not self.prepared:
            self.group, created = Group.objects.get_or_create(name='test')
            duser, created = DjangoUser.objects.get_or_create(
                username=self.username)
            duser.set_password(self.password)
            duser.save()
            self.user, created = User.objects.get_or_create(user=duser)
            self.user.save()
            perspective, created = Perspective.objects.get_or_create(
                name='default')
            perspective.set_default_user()
            perspective.save()
            ModuleSetting.set('default_perspective', perspective.id)

            self.folder = KnowledgeFolder(name='test', treepath='test')
            self.folder.set_default_user()
            self.folder.save()

            self.category = KnowledgeCategory(name='test', treepath='test')
            self.category.set_default_user()
            self.category.save()

            self.item = KnowledgeItem(name='test', folder=self.folder,
                                      category=self.category, treepath='test')
            self.item.set_default_user()
            self.item.save()

            # parent folder
            self.parent = KnowledgeFolder(name='test', treepath='test')
            self.parent.set_default_user()
            self.parent.save()

            self.client = Client()

            self.prepared = True

    ######################################
    # Testing views when user is logged in
    ######################################
    def test_index_login(self):
        "Test index page with login at /knowledge/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('knowledge'))
        self.assertEquals(response.status_code, 200)

    def test_index_categories_login(self):
        "Test index page with login at /knowledge/categories/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('knowledge_categories'))
        self.assertEquals(response.status_code, 200)

    # Knowledge folders
    def test_knowledge_folder_add(self):
        "Test index page with login at /knowledge/folder/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('knowledge_folder_add'))
        self.assertEquals(response.status_code, 200)

    def test_knowledge_folder_add_typed(self):
        "Test index page with login at /knowledge/folder/add/<folderPath>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('knowledge_folder_add_folder', args=[self.parent.treepath]))
        self.assertEquals(response.status_code, 200)

    def test_knowledge_folder_view(self):
        "Test index page with login at /knowledge/folder/view/<knowledgeType_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('knowledge_folder_view', args=[self.folder.treepath]))
        self.assertEquals(response.status_code, 200)

    def test_knowledge_folder_edit(self):
        "Test index page with login at /knowledge/folder/edit/<knowledgeType_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('knowledge_folder_edit', args=[self.folder.id]))
        self.assertEquals(response.status_code, 200)

    def test_knowledge_folder_delete(self):
        "Test index page with login at /knowledge/folder/delete/<knowledgeType_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('knowledge_folder_delete', args=[self.folder.id]))
        self.assertEquals(response.status_code, 200)

    # Knowledge items
    def test_knowledge_item_add(self):
        "Test index page with login at /knowledge/item/add"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('knowledge_item_add'))
        self.assertEquals(response.status_code, 200)

    def test_knowledge_item_add_typed(self):
        "Test index page with login at /knowledge/item/add/<folderPath>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('knowledge_item_add_folder', args=[self.folder.treepath]))
        self.assertEquals(response.status_code, 200)

    def test_knowledge_item_view(self):
        "Test index page with login at /knowledge/item/view/<knowledgeItem_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('knowledge_item_view',
                                           args=[self.item.folder.treepath, self.item.treepath]))
        self.assertEquals(response.status_code, 200)

    def test_knowledge_item_edit(self):
        "Test index page with login at /knowledge/item/edit/<knowledgeItem_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('knowledge_item_edit', args=[self.item.id]))
        self.assertEquals(response.status_code, 200)

    def test_knowledge_item_delete(self):
        "Test index page with login at /knowledge/item/delete/<knowledgeItem_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('knowledge_item_delete', args=[self.item.id]))
        self.assertEquals(response.status_code, 200)

    # Knowledge categories
    def test_knowledge_category_add(self):
        "Test index page with login at /knowledge/category/add"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('knowledge_category_add'))
        self.assertEquals(response.status_code, 200)

    def test_knowledge_category_view(self):
        "Test index page with login at /knowledge/category/view/<knowledgeCategory_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('knowledge_category_view', args=[self.category.treepath]))
        self.assertEquals(response.status_code, 200)

    def test_knowledge_category_edit(self):
        "Test index page with login at /knowledge/category/edit/<knowledgeCategory_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('knowledge_category_edit', args=[self.category.id]))
        self.assertEquals(response.status_code, 200)

    def test_knowledge_category_delete(self):
        "Test index page with login at /knowledge/category/delete/<knowledgeCategory_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('knowledge_category_delete', args=[self.category.id]))
        self.assertEquals(response.status_code, 200)

    ######################################
    # Testing views when user is not logged in
    ######################################
    def test_index(self):
        "Test index page at /knowledge/"
        response = self.client.get('/knowledge/')
        # Redirects as unauthenticated
        self.assertRedirects(response, reverse('user_login'))

    def test_index_categories_out(self):
        "Testing /knowledge/categories/"
        response = self.client.get(reverse('knowledge_categories'))
        self.assertRedirects(response, reverse('user_login'))

    # Knowledge folders

    def test_knowledge_folder_add_out(self):
        "Testing /knowledge/folder/add/"
        response = self.client.get(reverse('knowledge_folder_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_knowledge_folder_add_typed_out(self):
        "Testing /knowledge/folder/add/<folderPath>"
        response = self.client.get(
            reverse('knowledge_folder_add_folder', args=[self.parent.treepath]))
        self.assertRedirects(response, reverse('user_login'))

    def test_knowledge_folder_view_out(self):
        "Testing /knowledge/folder/view/<knowledgeType_id>"
        response = self.client.get(
            reverse('knowledge_folder_view', args=[self.folder.treepath]))
        self.assertRedirects(response, reverse('user_login'))

    def test_knowledge_folder_edit_out(self):
        "Testing /knowledge/folder/edit/<knowledgeType_id>"
        response = self.client.get(
            reverse('knowledge_folder_edit', args=[self.folder.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_knowledge_folder_delete_out(self):
        "Testing /knowledge/folder/delete/<knowledgeType_id>"
        response = self.client.get(
            reverse('knowledge_folder_delete', args=[self.folder.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Knowledge items
    def test_knowledge_item_add_out(self):
        "Testing /knowledge/item/add"
        response = self.client.get(reverse('knowledge_item_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_knowledge_item_add_typed_out(self):
        "Testing /knowledge/item/add/<folderPath>"
        response = self.client.get(
            reverse('knowledge_item_add_folder', args=[self.folder.treepath]))
        self.assertRedirects(response, reverse('user_login'))

    def test_knowledge_item_view_out(self):
        "Testing /knowledge/item/view/<knowledgeItem_id>"
        response = self.client.get(reverse('knowledge_item_view',
                                           args=[self.item.folder.treepath, self.item.treepath]))
        self.assertRedirects(response, reverse('user_login'))

    def test_knowledge_item_edit_out(self):
        "Testing /knowledge/item/edit/<knowledgeItem_id>"
        response = self.client.get(
            reverse('knowledge_item_edit', args=[self.item.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_knowledge_item_delete_out(self):
        "Testing /knowledge/item/delete/<knowledgeItem_id>"
        response = self.client.get(
            reverse('knowledge_item_delete', args=[self.item.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Knowledge categories
    def test_knowledge_category_add_out(self):
        "Testing /knowledge/category/add"
        response = self.client.get(reverse('knowledge_category_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_knowledge_category_view_out(self):
        "Testing /knowledge/category/view/<knowledgeCategory_id>"
        response = self.client.get(
            reverse('knowledge_category_view', args=[self.category.treepath]))
        self.assertRedirects(response, reverse('user_login'))

    def test_knowledge_category_edit_out(self):
        "Testing /knowledge/category/edit/<knowledgeCategory_id>"
        response = self.client.get(
            reverse('knowledge_category_edit', args=[self.category.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_knowledge_category_delete_out(self):
        "Testing /knowledge/category/delete/<knowledgeCategory_id>"
        response = self.client.get(
            reverse('knowledge_category_delete', args=[self.category.id]))
        self.assertRedirects(response, reverse('user_login'))

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Knowledge base module URLs
"""
from django.conf.urls import patterns, url

urlpatterns = patterns('treeio.knowledge.views',
    url(r'^(\.(?P<response_format>\w+))?$',
        'index', name='knowledge'),
    url(r'^index(\.(?P<response_format>\w+))?$',
        'index', name='knowledge_index'),
    url(r'^categories(\.(?P<response_format>\w+))?/?$',
        'index_categories', name='knowledge_categories'),

    # Folders
    url(r'^folder/add(\.(?P<response_format>\w+))?/?$',
        'folder_add', name='knowledge_folder_add'),
    url(r'^folder/add/(?P<folderPath>.(?:[a-z,0-9,-]+/)+)(\.(?P<response_format>\w+))?/?$',
        'folder_add_folder', name='knowledge_folder_add_folder'),
    url(r'^folder/(?P<folderPath>.(?:[a-z,0-9,-]+/)+)(\.(?P<response_format>\w+))?/?$',
        'folder_view', name='knowledge_folder_view'),
    url(r'^folder/edit/(?P<knowledgeType_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'folder_edit', name='knowledge_folder_edit'),
    url(r'^folder/delete/(?P<knowledgeType_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'folder_delete', name='knowledge_folder_delete'),

    # Knowledge Items
    url(r'^item/add(\.(?P<response_format>\w+))?/?$',
        'item_add', name='knowledge_item_add'),
    url(r'^item/add/(?P<folderPath>.(?:[a-z,0-9,-]+/)+)(\.(?P<response_format>\w+))?/?$',
        'item_add_folder', name='knowledge_item_add_folder'),
    url(r'^(?P<folderPath>.(?:[a-z,0-9,-]+/)+)(?P<itemPath>.(?:[a-z,0-9,-]+/)+)(\.(?P<response_format>\w+))?/?$',
        'item_view', name='knowledge_item_view'),
    url(r'^item/edit/(?P<knowledgeItem_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'item_edit', name='knowledge_item_edit'),
    url(r'^item/delete/(?P<knowledgeItem_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'item_delete', name='knowledge_item_delete'),

    # Categories
    url(r'^category/add(\.(?P<response_format>\w+))?/?$',
        'category_add', name='knowledge_category_add'),
    url(r'^(?P<categoryPath>.(?:[a-z,0-9,-]+/)+)(\.(?P<response_format>\w+))?/?$',
        'category_view', name='knowledge_category_view'),
    url(r'^category/edit/(?P<knowledgeCategory_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'category_edit', name='knowledge_category_edit'),
    url(r'^category/delete/(?P<knowledgeCategory_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'category_delete', name='knowledge_category_delete'),
)

########NEW FILE########
__FILENAME__ = views
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Knowledge Base module views
"""
from django.db.models import Q
from django.template import RequestContext
from django.core.urlresolvers import reverse
from django.http import HttpResponseRedirect
from django.shortcuts import get_object_or_404
from treeio.knowledge.models import KnowledgeFolder, KnowledgeItem, KnowledgeCategory
from treeio.core.models import Object
from treeio.core.views import user_denied
from treeio.core.rendering import render_to_response
from treeio.core.decorators import treeio_login_required, handle_response_format
from treeio.knowledge.forms import KnowledgeFolderForm, KnowledgeItemForm, KnowledgeCategoryForm, \
    FilterForm, MassActionForm
from django.http import Http404


def _get_filter_query(args):
    "Creates a query to filter Knowledge Items based on FilterForm arguments"
    query = Q()

    for arg in args:
        if hasattr(KnowledgeItem, arg) and args[arg]:
            kwargs = {str(arg + '__id'): long(args[arg])}
            query = query & Q(**kwargs)

    return query


def _get_default_context(request):
    "Returns default context as a dict()"

    folders = Object.filter_permitted(manager=KnowledgeFolder.objects.filter(parent__isnull=True),
                                      user=request.user.get_profile(), mode='r')

    massform = MassActionForm(request.user.get_profile())
    context = {'folders': folders,
               'massform': massform}

    return context


def _process_mass_form(f):
    "Pre-process request to handle mass action form for Knowledge Items"

    def wrap(request, *args, **kwargs):
        "Wrap"
        user = request.user.get_profile()
        if 'massform' in request.POST:
            for key in request.POST:
                if 'mass-item' in key:
                    try:
                        item = KnowledgeItem.objects.get(pk=request.POST[key])
                        form = MassActionForm(user, request.POST, instance=item)
                        if form.is_valid() and user.has_permission(item, mode='w'):
                            form.save()
                    except Exception:
                        pass

        return f(request, *args, **kwargs)

    wrap.__doc__ = f.__doc__
    wrap.__name__ = f.__name__

    return wrap


@handle_response_format
@treeio_login_required
@_process_mass_form
def index(request, response_format='html'):
    "Knowledge base index page"

    if request.GET:
        query = _get_filter_query(request.GET)
        items = Object.filter_by_request(
            request, KnowledgeItem.objects.filter(query))
    else:
        items = Object.filter_by_request(request, KnowledgeItem.objects)

    filters = FilterForm(request.user.get_profile(), 'name', request.GET)

    context = _get_default_context(request)
    context.update({'filters': filters,
                    'items': items})

    return render_to_response('knowledge/index', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def index_categories(request, response_format='html'):
    "Knowledge base categories page"

    if request.GET:
        query = _get_filter_query(request.GET)
        items = Object.filter_by_request(
            request, KnowledgeItem.objects.filter(query))
    else:
        items = Object.filter_by_request(request, KnowledgeItem.objects)

    filters = FilterForm(request.user.get_profile(), 'category', request.GET)
    categories = Object.filter_by_request(request, KnowledgeCategory.objects)

    context = _get_default_context(request)
    context.update({'filters': filters,
                    'items': items,
                    'categories': categories})

    return render_to_response('knowledge/index_categories', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def folder_add(request, response_format='html'):
    "New folder form"

    if request.POST:
        if not 'cancel' in request.POST:
            folder = KnowledgeFolder()
            form = KnowledgeFolderForm(
                request.user.get_profile(), None, request.POST, instance=folder)
            if form.is_valid():
                folder = form.save()
                folder.set_user_from_request(request)
                return HttpResponseRedirect(reverse('knowledge_folder_view', args=[folder.treepath]))
        else:
            return HttpResponseRedirect(reverse('knowledge'))
    else:
        form = KnowledgeFolderForm(request.user.get_profile(), None)

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('knowledge/folder_add', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def folder_add_folder(request, folderPath, response_format='html'):
    "Add new knowledge folder to preselected folder"

    try:
        folder = KnowledgeFolder.by_path(folderPath)
        knowledgeType_id = folder.id
    except KnowledgeFolder.DoesNotExist:
        raise Http404

    parent = None
    if knowledgeType_id:
        parent = get_object_or_404(KnowledgeFolder, pk=knowledgeType_id)
        if not request.user.get_profile().has_permission(parent, mode='x'):
            parent = None

    if request.POST:
        if not 'cancel' in request.POST:
            folder = KnowledgeFolder()
            form = KnowledgeFolderForm(request.user.get_profile(), knowledgeType_id,
                                       request.POST, instance=folder)
            if form.is_valid():
                folder = form.save()
                folder.set_user_from_request(request)
                return HttpResponseRedirect(reverse('knowledge_folder_view', args=[folder.treepath]))
        else:
            return HttpResponseRedirect(reverse('knowledge'))
    else:
        form = KnowledgeFolderForm(
            request.user.get_profile(), knowledgeType_id)

    context = _get_default_context(request)
    context.update({'form': form,
                    'parent': parent})

    return render_to_response('knowledge/folder_add_folder', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_form
def folder_view(request, folderPath, response_format='html'):
    "Single knowledge folder view page"

    folder = KnowledgeFolder.by_path(folderPath)
    if not folder:
        raise Http404

    if not request.user.get_profile().has_permission(folder):
        return user_denied(request, message="You don't have access to this Knowledge Type")

    items = Object.filter_by_request(
        request, manager=KnowledgeItem.objects.filter(folder=folder))
    subfolders = KnowledgeFolder.objects.filter(parent=folder)

    context = _get_default_context(request)
    context.update({'items': items,
                    'folder': folder,
                    'subfolders': subfolders})

    return render_to_response('knowledge/folder_view', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def folder_edit(request, knowledgeType_id, response_format='html'):
    "Knowledge folder edit page"

    folder = get_object_or_404(KnowledgeFolder, pk=knowledgeType_id)
    items = Object.filter_by_request(
        request, manager=KnowledgeItem.objects.filter(folder=folder))

    if not request.user.get_profile().has_permission(folder, mode="w"):
        return user_denied(request, message="You don't have access to this Knowledge Type")

    if request.POST:
        if not 'cancel' in request.POST:
            form = KnowledgeFolderForm(
                request.user.get_profile(), None, request.POST, instance=folder)
            if form.is_valid():
                folder = form.save()
                return HttpResponseRedirect(reverse('knowledge_folder_view', args=[folder.treepath]))
        else:
            return HttpResponseRedirect(reverse('knowledge_folder_view', args=[folder.treepath]))
    else:
        form = KnowledgeFolderForm(
            request.user.get_profile(), None, instance=folder)

    context = _get_default_context(request)
    context.update({'items': items,
                    'folder': folder,
                    'form': form})

    return render_to_response('knowledge/folder_edit', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def folder_delete(request, knowledgeType_id, response_format='html'):
    "Type delete"

    folder = get_object_or_404(KnowledgeFolder, pk=knowledgeType_id)
    items = Object.filter_by_request(
        request, manager=KnowledgeItem.objects.filter(folder=folder))

    if not request.user.get_profile().has_permission(folder, mode='w'):
        return user_denied(request, message="You don't have access to this Knowledge Type")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                folder.trash = True
                folder.save()
            else:
                folder.delete()
            return HttpResponseRedirect(reverse('knowledge_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('knowledge_folder_view', args=[folder.treepath]))

    context = _get_default_context(request)
    context.update({'items': items,
                    'folder': folder})

    return render_to_response('knowledge/folder_delete', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def item_add(request, response_format='html'):
    "Add new knowledge item"
    items = Object.filter_permitted(
        manager=KnowledgeItem.objects, user=request.user.get_profile(), mode='r')

    if request.POST:
        if not 'cancel' in request.POST:
            item = KnowledgeItem()
            form = KnowledgeItemForm(
                request.user.get_profile(), None, request.POST, instance=item)
            if form.is_valid():
                item = form.save()
                item.set_user_from_request(request)
                return HttpResponseRedirect(reverse('knowledge_item_view',
                                                    args=[item.folder.treepath, item.treepath]))
        else:
            return HttpResponseRedirect(reverse('knowledge'))
    else:
        form = KnowledgeItemForm(request.user.get_profile(), None)

    context = _get_default_context(request)
    context.update({'items': items,
                    'form': form})

    return render_to_response('knowledge/item_add', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def item_add_folder(request, folderPath, response_format='html'):
    "Add new knowledge item to preselected folder"
    items = Object.filter_permitted(
        manager=KnowledgeItem.objects, user=request.user.get_profile(), mode='r')

    try:
        folder = KnowledgeFolder.by_path(folderPath)
        knowledgeType_id = folder.id
    except KnowledgeFolder.DoesNotExist:
        raise Http404

    if request.POST:
        if not 'cancel' in request.POST:
            item = KnowledgeItem()
            form = KnowledgeItemForm(
                request.user.get_profile(), knowledgeType_id, request.POST, instance=item)
            if form.is_valid():
                item = form.save()
                item.set_user_from_request(request)
                return HttpResponseRedirect(reverse('knowledge_item_view',
                                                    args=[item.folder.treepath, item.treepath]))
        else:
            return HttpResponseRedirect(reverse('knowledge'))
    else:
        form = KnowledgeItemForm(request.user.get_profile(), knowledgeType_id)

    context = _get_default_context(request)
    context.update({'items': items,
                    'form': form,
                    'folder': folder})

    return render_to_response('knowledge/item_add_folder', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def item_view(request, folderPath, itemPath, response_format='html'):
    "Single knowledge item view page"

    try:
        item = KnowledgeItem.by_path(folderPath, itemPath)
    except KnowledgeItem.DoesNotExist:
        raise Http404
    if not item:
        raise Http404

    items = Object.filter_permitted(
        manager=KnowledgeItem.objects, user=request.user.get_profile(), mode='r')

    if not request.user.get_profile().has_permission(item):
        return user_denied(request, message="You don't have access to this Knowledge Item")

    context = _get_default_context(request)
    context.update({'items': items,
                    'item': item})

    return render_to_response('knowledge/item_view', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def item_edit(request, knowledgeItem_id, response_format='html'):
    "Knowledge item edit page"
    item = get_object_or_404(KnowledgeItem, pk=knowledgeItem_id)
    items = Object.filter_permitted(
        manager=KnowledgeItem.objects, user=request.user.get_profile(), mode='r')

    if not request.user.get_profile().has_permission(item, mode="w"):
        return user_denied(request, message="You don't have access to this Knowledge Item")

    if request.POST:
        if not 'cancel' in request.POST:
            form = KnowledgeItemForm(
                request.user.get_profile(), None, request.POST, instance=item)
            if form.is_valid():
                item = form.save()
                return HttpResponseRedirect(reverse('knowledge_item_view',
                                                    args=[item.folder.treepath, item.treepath]))
        else:
            return HttpResponseRedirect(reverse('knowledge_item_view',
                                                args=[item.folder.treepath, item.treepath]))
    else:
        form = KnowledgeItemForm(
            request.user.get_profile(), None, instance=item)

    context = _get_default_context(request)
    context.update({'form': form,
                    'item': item,
                    'items': items})

    return render_to_response('knowledge/item_edit', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def item_delete(request, knowledgeItem_id, response_format='html'):
    "Item delete"

    item = get_object_or_404(KnowledgeItem, pk=knowledgeItem_id)
    items = Object.filter_permitted(
        manager=KnowledgeItem.objects, user=request.user.get_profile(), mode='r')

    if not request.user.get_profile().has_permission(item, mode="w"):
        return user_denied(request, message="You don't have access to this Knowledge Item")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                item.trash = True
                item.save()
            else:
                item.delete()
            return HttpResponseRedirect(reverse('knowledge_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('knowledge_item_view',
                                                args=[item.folder.treepath, item.treepath]))

    context = _get_default_context(request)
    context.update({'item': item,
                    'items': items})

    return render_to_response('knowledge/item_delete', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def category_add(request, response_format='html'):
    "Add new knowledge category"

    if request.POST:
        if not 'cancel' in request.POST:
            category = KnowledgeCategory()
            form = KnowledgeCategoryForm(request.POST, instance=category)
            if form.is_valid():
                category = form.save()
                category.set_user_from_request(request)
                return HttpResponseRedirect(reverse('knowledge_category_view', args=[category.treepath]))
        else:
            return HttpResponseRedirect(reverse('knowledge_categories'))
    else:
        form = KnowledgeCategoryForm()

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('knowledge/category_add', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_form
def category_view(request, categoryPath, response_format='html'):
    "Single knowledge category view page"

    try:
        category = KnowledgeCategory.by_path(categoryPath)
    except KnowledgeCategory.DoesNotExist:
        raise Http404

    items = Object.filter_permitted(
        manager=KnowledgeItem.objects, user=request.user.get_profile(), mode='r')

    if not request.user.get_profile().has_permission(category):
        return user_denied(request, message="You don't have access to this Knowledge Category")

    context = _get_default_context(request)
    context.update({'category': category,
                    'items': items})

    return render_to_response('knowledge/category_view', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def category_edit(request, knowledgeCategory_id, response_format='html'):
    "Knowledge category edit page"
    category = get_object_or_404(KnowledgeCategory, pk=knowledgeCategory_id)
    items = Object.filter_permitted(
        manager=KnowledgeItem.objects, user=request.user.get_profile(), mode='r')

    if not request.user.get_profile().has_permission(category, mode="w"):
        return user_denied(request, message="You don't have access to this Knowledge Category")

    if request.POST:
        if not 'cancel' in request.POST:
            form = KnowledgeCategoryForm(request.POST, instance=category)
            if form.is_valid():
                category = form.save()
                return HttpResponseRedirect(reverse('knowledge_category_view', args=[category.treepath]))
        else:
            return HttpResponseRedirect(reverse('knowledge_category_view', args=[category.treepath]))
    else:
        form = KnowledgeCategoryForm(instance=category)

    context = _get_default_context(request)
    context.update({'form': form,
                    'category': category,
                    'items': items})

    return render_to_response('knowledge/category_edit', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def category_delete(request, knowledgeCategory_id, response_format='html'):
    "Knowledge Category delete"

    category = get_object_or_404(KnowledgeCategory, pk=knowledgeCategory_id)
    items = Object.filter_permitted(
        manager=KnowledgeItem.objects, user=request.user.get_profile(), mode='r')

    if not request.user.get_profile().has_permission(category, mode="w"):
        return user_denied(request, message="You don't have access to this Knowledge Category")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                category.trash = True
                category.save()
            else:
                category.delete()
            return HttpResponseRedirect(reverse('knowledge_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('knowledge_category_view', args=[category.treepath]))

    context = _get_default_context(request)
    context.update({'category': category,
                    'items': items})

    return render_to_response('knowledge/category_delete', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)

########NEW FILE########
__FILENAME__ = manage
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#!/usr/bin/env python
from django.core.management import execute_manager
import imp
try:
    imp.find_module('settings')  # Assumed to be in the same directory.
except ImportError:
    import sys
    sys.stderr.write(
        "Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n" % __file__)
    sys.exit(1)

import settings

if __name__ == "__main__":
    execute_manager(settings)

########NEW FILE########
__FILENAME__ = admin
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Messaging module: Admin page
"""
from treeio.messaging.models import Message, MessageStream
from django.contrib import admin


class MessageStreamAdmin(admin.ModelAdmin):

    """ Message stream admin """
    list_display = ('name', 'last_checked')
    search_fields = ('name', 'last_checked')


class MessageAdmin(admin.ModelAdmin):

    """ Message admin """
    list_display = ('title', 'body', 'author', 'stream', 'reply_to')
    search_fields = ('title', 'author')

admin.site.register(MessageStream, MessageStreamAdmin)
admin.site.register(Message, MessageAdmin)

########NEW FILE########
__FILENAME__ = handlers
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

from __future__ import absolute_import, with_statement

__all__ = ['MailingListHandler',
           'MessageStreamHandler',
           'MessageHandler',
           ]

import re
from treeio.core.api.utils import rc
from treeio.core.models import ModuleSetting
from django.core.exceptions import ObjectDoesNotExist
from treeio.identities.models import ContactType, Contact
from treeio.core.api.handlers import ObjectHandler, getOrNone
from treeio.messaging.models import Message, MessageStream, MailingList
from treeio.messaging.forms import MessageForm, MessageStreamForm, MessageReplyForm, MailingListForm


class MailingListHandler(ObjectHandler):

    "Entrypoint for MailingList model."

    model = MailingList
    form = MailingListForm

    fields = ('id',) + MailingListForm._meta.fields

    @staticmethod
    def resource_uri():
        return ('api_messaging_mlist', ['id'])

    def check_create_permission(self, request, mode):
        return True


class MessageStreamHandler(ObjectHandler):

    "Entrypoint for MessageStream model."

    model = MessageStream
    form = MessageStreamForm

    @staticmethod
    def resource_uri():
        return ('api_messaging_streams', ['id'])

    def check_create_permission(self, request, mode):
        return True


class MessageHandler(ObjectHandler):

    "Entrypoint for Message model."

    model = Message

    @staticmethod
    def resource_uri():
        return ('api_messaging_messages', ['id'])

    def create(self, request, *args, **kwargs):
        "Send email to some recipients"

        user = request.user.get_profile()

        if request.data is None:
            return rc.BAD_REQUEST

        if request.data.has_key('stream'):
            stream = getOrNone(MessageStream, request.data['stream'])
            if stream and not user.has_permission(stream, mode='x'):
                return rc.FORBIDDEN

        message = Message()
        message.author = user.get_contact()
        if not message.author:
            return rc.FORBIDDEN

        form = MessageForm(user, None, None, request.data, instance=message)
        if form.is_valid():
            message = form.save()
            message.recipients.add(user.get_contact())
            message.set_user_from_request(request)
            message.read_by.add(user)
            try:
                # if email entered create contact and add to recipients
                if 'multicomplete_recipients' in request.POST and request.POST['multicomplete_recipients']:
                    try:
                        conf = ModuleSetting.get_for_module(
                            'treeio.messaging', 'default_contact_type')[0]
                        default_contact_type = ContactType.objects.get(
                            pk=long(conf.value))
                    except Exception:
                        default_contact_type = None
                    emails = request.POST[
                        'multicomplete_recipients'].split(',')
                    for email in emails:
                        emailstr = unicode(email).strip()
                        if re.match('[a-zA-Z0-9+_\-\.]+@[0-9a-zA-Z][.-0-9a-zA-Z]*.[a-zA-Z]+', emailstr):
                            contact, created = Contact.get_or_create_by_email(
                                emailstr, contact_type=default_contact_type)
                            message.recipients.add(contact)
                            if created:
                                contact.set_user_from_request(request)
            except:
                pass
            # send email to all recipients
            message.send_email()
            return message
        else:
            self.status = 400
            return form.errors

    def update(self, request, *args, **kwargs):
        "Reply to message"

        if request.data is None:
            return rc.BAD_REQUEST

        pkfield = kwargs.get(self.model._meta.pk.name) or request.data.get(
            self.model._meta.pk.name)

        if not pkfield:
            return rc.BAD_REQUEST

        user = request.user.get_profile()

        try:
            message = self.model.objects.get(pk=pkfield)
        except ObjectDoesNotExist:
            return rc.NOT_FOUND

        if not user.has_permission(message):
            return rc.FORBIDDEN

        reply = Message()
        reply.author = user.get_contact()
        if not reply.author:
            return rc.FORBIDDEN

        reply.reply_to = message
        form = MessageReplyForm(
            user, message.stream_id, message, request.data, instance=reply)
        if form.is_valid():
            reply = form.save()
            reply.set_user_from_request(request)
            # Add author to recipients
            reply.recipients.add(reply.author)
            message.read_by.clear()

            try:
                # if email entered create contact and add to recipients
                if 'multicomplete_recipients' in request.POST and request.POST['multicomplete_recipients']:
                    try:
                        conf = ModuleSetting.get_for_module(
                            'treeio.messaging', 'default_contact_type')[0]
                        default_contact_type = ContactType.objects.get(
                            pk=long(conf.value))
                    except Exception:
                        default_contact_type = None
                    emails = request.POST[
                        'multicomplete_recipients'].split(',')
                    for email in emails:
                        emailstr = unicode(email).strip()
                        if re.match('[a-zA-Z0-9+_\-\.]+@[0-9a-zA-Z][.-0-9a-zA-Z]*.[a-zA-Z]+', emailstr):
                            contact, created = Contact.get_or_create_by_email(
                                emailstr, contact_type=default_contact_type)
                            reply.recipients.add(contact)
                            if created:
                                contact.set_user_from_request(request)
            except:
                pass

            # Add each recipient of the reply to the original message
            for recipient in reply.recipients.all():
                message.recipients.add(recipient)

            # send email to all recipients
            reply.send_email()
            return reply

        else:
            self.status = 400
            return form.errors

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Messaging: test api
"""

import json
from django.test import TestCase
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser
from treeio.core.models import User, Group, Perspective, ModuleSetting, Object
from treeio.messaging.models import Message, MessageStream, MailingList
from treeio.identities.models import Contact, ContactType


class MessagingApiTest(TestCase):

    "Messaging functional tests for api"

    username = "api_test"
    password = "api_password"
    prepared = False
    authentication_headers = {"CONTENT_TYPE": "application/json",
                              "HTTP_AUTHORIZATION": "Basic YXBpX3Rlc3Q6YXBpX3Bhc3N3b3Jk"}
    content_type = 'application/json'

    def setUp(self):
        "Initial Setup"

        if not self.prepared:
            # Clean up first
            Object.objects.all().delete()

            # Create objects

            try:
                self.group = Group.objects.get(name='test')
            except Group.DoesNotExist:
                Group.objects.all().delete()
                self.group = Group(name='test')
                self.group.save()

            try:
                self.user = DjangoUser.objects.get(username=self.username)
                self.user.set_password(self.password)
                try:
                    self.profile = self.user.get_profile()
                except Exception:
                    User.objects.all().delete()
                    self.user = DjangoUser(username=self.username, password='')
                    self.user.set_password(self.password)
                    self.user.save()
            except DjangoUser.DoesNotExist:
                User.objects.all().delete()
                self.user = DjangoUser(username=self.username, password='')
                self.user.set_password(self.password)
                self.user.save()

            try:
                perspective = Perspective.objects.get(name='default')
            except Perspective.DoesNotExist:
                Perspective.objects.all().delete()
                perspective = Perspective(name='default')
                perspective.set_default_user()
                perspective.save()
            ModuleSetting.set('default_perspective', perspective.id)

            self.contact_type = ContactType(name='test')
            self.contact_type.set_default_user()
            self.contact_type.save()

            self.contact = Contact(name='test', contact_type=self.contact_type)
            self.contact.set_default_user()
            self.contact.save()

            self.user_contact = Contact(
                name='test', related_user=self.user.get_profile(), contact_type=self.contact_type)
            self.user_contact.set_user(self.user)
            self.user_contact.save()

            self.stream = MessageStream(name='test')
            self.stream.set_default_user()
            self.stream.save()

            self.mlist = MailingList(name='test', from_contact=self.contact)
            self.mlist.set_default_user()
            self.mlist.save()

            self.message = Message(
                title='test', body='test', author=self.contact, stream=self.stream)
            self.message.set_default_user()
            self.message.save()

            self.client = Client()

            self.prepared = True

    def test_unauthenticated_access(self):
        "Test index page at /api/messaging/mlist"
        response = self.client.get('/api/messaging/mlist')
        # Redirects as unauthenticated
        self.assertEquals(response.status_code, 401)

    def test_get_mlist(self):
        """ Test index page api/messaging/mlist """
        response = self.client.get(
            path=reverse('api_messaging_mlist'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_one_mlist(self):
        response = self.client.get(path=reverse('api_messaging_mlist', kwargs={
                                   'object_ptr': self.mlist.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_mlist(self):
        updates = {"name": "API mailing list", "description": "API description update", "from_contact": self.contact.id,
                   "members": [self.contact.id, ]}
        response = self.client.put(path=reverse('api_messaging_mlist', kwargs={'object_ptr': self.mlist.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        self.assertEquals(data['description'], updates['description'])
        self.assertEquals(data['from_contact']['id'], updates['from_contact'])
        for i, member in enumerate(data['members']):
            self.assertEquals(member['id'], updates['members'][i])

    def test_get_streams(self):
        """ Test index page api/messaging/streams """
        response = self.client.get(
            path=reverse('api_messaging_streams'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_stream(self):
        response = self.client.get(path=reverse('api_messaging_streams', kwargs={
                                   'object_ptr': self.stream.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_stream(self):
        updates = {"name": "API stream", }
        response = self.client.put(path=reverse('api_messaging_streams', kwargs={'object_ptr': self.stream.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])

    def test_get_messages(self):
        """ Test index page api/messaging/messages """
        response = self.client.get(
            path=reverse('api_messaging_messages'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_message(self):
        response = self.client.get(path=reverse('api_messaging_messages', kwargs={
                                   'object_ptr': self.message.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_send_message(self):
        updates = {"title": "API message title", "body": "Test body", "stream": self.stream.id,
                   "multicomplete_recipients": u'test@test.com'}
        response = self.client.post(path=reverse('api_messaging_messages'), content_type=self.content_type,
                                    data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['title'], updates['title'])
        self.assertEquals(data['body'], updates['body'])
        self.assertEquals(data['stream']['id'], updates['stream'])

    def test_reply_to_message(self):
        updates = {"title": "API test", "body": "Test body", "stream": self.stream.id,
                   "multicomplete_recipients": u'test@test.com'}
        response = self.client.put(path=reverse('api_messaging_messages', kwargs={'object_ptr': self.message.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertNotEquals(data['title'], updates['title'])
        self.assertEquals(data['body'], updates['body'])
        self.assertEquals(data['stream']['id'], updates['stream'])

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

import handlers
from django.conf.urls import patterns, url
from treeio.core.api.auth import auth_engine
from treeio.core.api.doc import documentation_view
from treeio.core.api.resource import CsrfExemptResource

ad = {'authentication': auth_engine}

# messaging resources
mlistResource = CsrfExemptResource(handler=handlers.MailingListHandler, **ad)
streamResource = CsrfExemptResource(
    handler=handlers.MessageStreamHandler, **ad)
messageResource = CsrfExemptResource(handler=handlers.MessageHandler, **ad)

urlpatterns = patterns('',
    # Messaging
    url(r'^doc$', documentation_view, kwargs={
        'module': handlers}, name="api_messaging_doc"),
    url(r'^mlist$', mlistResource,
        name="api_messaging_mlist"),
    url(r'^mlist/(?P<object_ptr>\d+)',
        mlistResource, name="api_messaging_mlist"),
    url(r'^streams$', streamResource,
        name="api_messaging_streams"),
    url(r'^stream/(?P<object_ptr>\d+)',
        streamResource, name="api_messaging_streams"),
    url(r'^messages$', messageResource,
        name="api_messaging_messages"),
    url(r'^message/(?P<object_ptr>\d+)',
        messageResource, name="api_messaging_messages"),
)

########NEW FILE########
__FILENAME__ = cron
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Cron Job for Messaging module
"""
from treeio.messaging.models import MessageStream


def process_email():
    "Process email"
    streams = MessageStream.objects.filter(
        trash=False, incoming_server_username__isnull=False)

    for stream in streams:
        stream.process_email()

########NEW FILE########
__FILENAME__ = emails
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Messaging Emails
"""

from threading import Thread
from django.db.models import Q
from django.utils.html import strip_tags
from treeio.core.models import ModuleSetting
from treeio.core.mail import BaseEmail, SystemEmail
from treeio.identities.models import Contact, ContactType

from treeio.core.mail import EmailReceiver


class EmailStream(EmailReceiver):

    "EmailStream"
    active = False

    def __init__(self, stream):
        self.stream = stream
        self.active = True
        try:
            conf = ModuleSetting.get_for_module(
                'treeio.messaging', 'default_imap_folder')[0]
            folder_name = conf.value
        except:
            folder_name = None
        super(EmailStream, self).__init__(stream.incoming_server_type, stream.incoming_server_name,
                                          stream.incoming_server_username, stream.incoming_password, folder_name)

    def process_msg(self, msg, attrs, attachments):
        "Save message, Cap!"
        from treeio.messaging.models import Message

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.messaging', 'default_contact_type')[0]
            default_contact_type = ContactType.objects.get(pk=long(conf.value))
        except:
            default_contact_type = None

        email_author, created = Contact.get_or_create_by_email(
            attrs.author_email, attrs.author_name, default_contact_type)
        if created:
            email_author.copy_permissions(self.stream)

        # check if the message is already retrieved
        existing = Message.objects.filter(
            stream=self.stream, title=attrs.subject, author=email_author, body=attrs.body).exists()
        if not existing:
            message = None
            if attrs.subject[:3] == 'Re:':
                # process replies
                if attrs.subject[:4] == 'Re: ':
                    original_subject = attrs.subject[4:]
                else:
                    original_subject = attrs.subject[3:]

                try:
                    query = Q(reply_to__isnull=True) & Q(recipients=email_author) & (
                        Q(title=original_subject) | Q(title=attrs.subject))
                    original = Message.objects.filter(
                        query).order_by('-date_created')[:1][0]
                    message = Message(title=attrs.subject, body=attrs.body, author=email_author,
                                      stream=self.stream, reply_to=original)
                    if attrs.email_date:
                        message.date_created = attrs.email_date

                    message.save()
                    message.copy_permissions(original)
                    original.read_by.clear()
                except IndexError:
                    pass
            if not message:
                message = Message(
                    title=attrs.subject, body=attrs.body, author=email_author, stream=self.stream)
                if attrs.email_date:
                    message.date_created = attrs.email_date
                message.save()
                message.copy_permissions(self.stream)
                message.recipients.add(email_author)


class EmailMessage(Thread):

    "Email Message"

    def __init__(self, message):
        Thread.__init__(self)
        self.message = message

    def run(self):
        "Run"
        self.process_email()

    def send_email(self):
        "Send email"
        self.process_email()

    def get_smtp_port(self):
        "Returns tuple (port, ssl) for current message's stream"

        port = 25
        ssl = False

        if self.message.stream.outgoing_server_type == "SMTP-SSL":
            ssl = True

        return port, ssl

    def process_email(self):
        "Process email"
        message = self.message
        if message.reply_to:
            subject = "Re: %s" % message.reply_to.title
        else:
            subject = message.title
        body = strip_tags(message.body)
        html = message.body

        for recipient in message.recipients.all():
            if recipient.id == message.author_id:
                # don't send email to message author
                continue

            toaddr = recipient.get_email()

            if message.stream and message.stream.outgoing_server_name:
                fromaddr = unicode(message.author) + ' <' + \
                    unicode(message.stream.outgoing_email) + '>'
                login = message.stream.outgoing_server_username
                password = message.stream.outgoing_password

                port, ssl = self.get_smtp_port()

                BaseEmail(message.stream.outgoing_server_name,
                          login, password, fromaddr, toaddr, subject,
                          body, signature=None, html=html, port=port, ssl=ssl).send_email()

            else:
                SystemEmail(
                    toaddr, subject, body, signature=None, html=html).send_email()

########NEW FILE########
__FILENAME__ = forms
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Messaging model forms
"""
from django import forms
from django.utils.translation import ugettext as _
from django.core.urlresolvers import reverse
from treeio.core.models import Object, ModuleSetting
from treeio.core.conf import settings
from treeio.core.decorators import preprocess_form
from treeio.messaging.models import Message, MessageStream, MailingList
from django.db.models import Q
from treeio.identities.models import ContactType, Contact
preprocess_form()


class SettingsForm(forms.Form):

    """ Administration settings form """

    default_contact_type = forms.ModelChoiceField(
        label='Default Contact Type', queryset=[])
    default_imap_folder = forms.ChoiceField(label='Default IMAP Folder', choices=(('ALL', 'ALL'),
                                                                                  ('UNSEEN', _('UNSEEN'))), required=False)
    signature = forms.CharField(widget=forms.Textarea, required=False)

    def __init__(self, user, *args, **kwargs):
        "Sets choices and initial value"
        super(SettingsForm, self).__init__(*args, **kwargs)
        self.user = user

        self.fields['default_contact_type'].label = _('Default Contact Type')
        self.fields['default_contact_type'].queryset = Object.filter_permitted(user,
                                                                               ContactType.objects, mode='x')
        try:
            conf = ModuleSetting.get_for_module('treeio.messaging', 'default_contact_type',
                                                user=user)[0]
            default_contact_type = ContactType.objects.get(pk=long(conf.value))
            self.fields[
                'default_contact_type'].initial = default_contact_type.id
        except:
            pass

        self.fields['default_imap_folder'].label = _('Default IMAP Folder')
        try:
            conf = ModuleSetting.get_for_module('treeio.messaging', 'default_imap_folder',
                                                user=user)[0]
            self.fields['default_imap_folder'].initial = conf.value
        except:
            self.fields[
                'default_imap_folder'].initial = settings.HARDTREE_MESSAGING_IMAP_DEFAULT_FOLDER_NAME

        self.fields['signature'].label = _('Signature')
        try:
            conf = ModuleSetting.get_for_module('treeio.messaging', 'signature',
                                                user=user, strict=True)[0]
            signature = conf.value
            self.fields['signature'].initial = signature
        except:
            pass

    def save(self):
        "Form processor"
        try:
            ModuleSetting.set_for_module('default_contact_type',
                                         self.cleaned_data[
                                             'default_contact_type'].id,
                                         'treeio.messaging')
        except:
            pass

        try:
            ModuleSetting.set_for_module('default_imap_folder',
                                         self.cleaned_data[
                                             'default_imap_folder'],
                                         'treeio.messaging')
        except:
            pass

        try:
            ModuleSetting.set_for_module('signature',
                                         self.cleaned_data['signature'],
                                         'treeio.messaging', user=self.user)
        except:
            pass


class MassActionForm(forms.Form):

    """ Mass action form for Messages """

    mark = forms.ChoiceField(label=_("With selected"), choices=(('', '-----'), ('read', _('Mark Read')),
                                                                ('unread', _('Mark Unread')), (
                                                                    'delete', _('Delete Completely')),
                                                                ('trash', _('Move to Trash'))), required=False)
    stream = forms.ModelChoiceField(queryset=[], required=False)
    user = None
    markall = forms.ChoiceField(label=_("Mark all"), choices=(('', '-----'), ('markall', _('Mark all as Read'))),
                                required=False)

    instance = None

    def __init__(self, user, *args, **kwargs):
        if 'instance' in kwargs:
            self.instance = kwargs['instance']
            del kwargs['instance']

        self.user = user

        super(MassActionForm, self).__init__(*args, **kwargs)

        self.fields['stream'].queryset = Object.filter_permitted(
            user, MessageStream.objects, mode='x')
        self.fields['stream'].label = _("Move to")
        self.fields['mark'] = forms.ChoiceField(label=_("With selected"), choices=(('', '-----'), ('read', _('Mark Read')),
                                                                                   ('unread', _('Mark Unread')), (
                                                                                       'delete', _('Delete Completely')),
                                                                                   ('trash', _('Move to Trash'))), required=False)
        self.fields['markall'] = forms.ChoiceField(label=_("Mark all"), choices=(('', '-----'), ('markall', _('Mark all as Read'))),
                                                   required=False)

    def save(self, *args, **kwargs):
        "Save override to omit empty fields"
        if self.instance:
            if self.is_valid():
                if self.cleaned_data['stream']:
                    self.instance.stream = self.cleaned_data['stream']
                if self.user and self.cleaned_data['mark']:
                    if self.cleaned_data['mark'] == 'read':
                        try:
                            self.instance.read_by.add(self.user)
                        except Exception:
                            pass
                    if self.cleaned_data['mark'] == 'unread':
                        try:
                            self.instance.read_by.remove(self.user)
                        except Exception:
                            pass
                self.instance.save()
                if self.user and self.cleaned_data['mark']:
                    if self.cleaned_data['mark'] == 'delete':
                        self.instance.delete()
                    if self.cleaned_data['mark'] == 'trash':
                        self.instance.trash = True
                        self.instance.save()
        else:
            if self.user and self.cleaned_data['markall']:
                query = Q(reply_to__isnull=True) & ~Q(read_by=self.user)
                for message in Object.filter_permitted(self.user, Message.objects.filter(query), mode='x'):
                    try:
                        message.read_by.add(self.user)
                    except Exception:
                        pass


class MessageForm(forms.ModelForm):

    """ Message form """

    def __init__(self, user, stream_id, message=None, *args, **kwargs):
        super(MessageForm, self).__init__(*args, **kwargs)

        self.fields['title'].label = _("Subject")
        self.fields['title'].widget = forms.TextInput(attrs={'size': '40'})
        self.fields['stream'].queryset = Object.filter_permitted(
            user, MessageStream.objects, mode='x')
        self.fields['stream'].label = _("Stream")

        self.fields['recipients'].label = _("To")
        self.fields['recipients'].help_text = ""
        self.fields['recipients'].widget.attrs.update({'class': 'multicomplete',
                                                       'callback': reverse('identities_ajax_contact_lookup')})

        if stream_id:
            self.fields['stream'].initial = stream_id
            self.fields['stream'].widget = forms.HiddenInput()
        elif self.fields['stream'].queryset:
            self.fields['stream'].initial = self.fields[
                'stream'].queryset[0].id

        self.fields['body'].label = _("Body")
        # signature
        try:
            conf = ModuleSetting.get_for_module('treeio.messaging', 'signature',
                                                user=user, strict=True)[0]
            signature = conf.value
            self.fields['body'].initial = signature
        except:
            pass

    class Meta:

        "Message"
        model = Message
        fields = ('recipients', 'title', 'stream', 'body')


class MessageReplyForm(forms.ModelForm):

    """ Message reply form """

    def __init__(self, user, stream_id, message=None, *args, **kwargs):
        super(MessageReplyForm, self).__init__(*args, **kwargs)

        self.fields['recipients'].label = _("To")
        self.fields['recipients'].help_text = ""
        self.fields['recipients'].initial = [
            contact.id for contact in message.recipients.all()]
        try:
            user_contact = user.get_contact()
            self.fields['recipients'].initial.pop(
                self.fields['recipients'].initial.index(user_contact.id))
        except:
            pass
        self.fields['recipients'].widget.attrs.update({'class': 'multicomplete',
                                                       'callback': reverse('identities_ajax_contact_lookup')})

        self.fields['stream'].widget = forms.HiddenInput()
        if stream_id:
            self.fields['stream'].initial = stream_id
        elif self.fields['stream'].queryset:
            self.fields['stream'].initial = self.fields[
                'stream'].queryset[0].id

        self.fields['body'].label = _("Body")

    class Meta:

        "Message Reply"
        model = Message
        fields = ('recipients', 'stream', 'body')


class MessageStreamForm(forms.ModelForm):

    """ Message Stream form """

    def __init__(self, user, *args, **kwargs):
        super(MessageStreamForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")
        self.fields['name'].widget = forms.TextInput(attrs={'size': '30'})

        self.fields['incoming_server_name'].label = _("Incoming Mail Server")
        self.fields['incoming_server_type'].label = _("Server Type")
        self.fields['incoming_server_username'].label = _("User Name")
        self.fields['incoming_password'].label = _("Password")
        self.fields['incoming_password'].widget = forms.PasswordInput()

        self.fields['outgoing_email'].label = _("From Address")
        self.fields['outgoing_server_name'].label = _("Outgoing Mail Server")
        self.fields['outgoing_server_type'].label = _("Server Type")
        self.fields['outgoing_server_username'].label = _("User Name")
        self.fields['outgoing_password'].label = _("Password")
        self.fields['outgoing_password'].widget = forms.PasswordInput()

    def clean_incoming_password(self):
        password = self.cleaned_data['incoming_password']
        if not password and hasattr(self, 'instance') and self.instance.id:
            return self.instance.incoming_password
        return password

    def clean_outgoing_password(self):
        password = self.cleaned_data['outgoing_password']
        if not password and hasattr(self, 'instance') and self.instance.id:
            return self.instance.outgoing_password
        return password

    class Meta:

        "Message Stream"
        model = MessageStream
        fields = ('name', 'incoming_server_name', 'incoming_server_type',
                  'incoming_server_username', 'incoming_password', 'outgoing_email',
                  'outgoing_server_name', 'outgoing_server_username', 'outgoing_password',
                  'outgoing_server_type')


class MailingListForm(forms.ModelForm):

    """ Message Stream form """

    def __init__(self, user, *args, **kwargs):
        super(MailingListForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")
        self.fields['name'].widget = forms.TextInput(attrs={'size': '30'})
        self.fields['description'].label = _("Description")
        self.fields['from_contact'].label = _("Sender Contact Details")
        self.fields['members'].widget.attrs.update({'class': 'multicomplete',
                                                    'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['members'].label = _("Members")
        self.fields['members'].help_text = None
        self.fields['opt_in'].label = _("Opt-In Template")

    class Meta:

        "Message Stream"
        model = MailingList
        fields = ('name', 'description', 'from_contact', 'opt_in', 'members')


class FilterForm(forms.ModelForm):

    """ Filter form definition """

    def __init__(self, user, skip=[], *args, **kwargs):
        super(FilterForm, self).__init__(*args, **kwargs)

        if 'title' in skip:
            del self.fields['title']
        else:
            self.fields['title'].required = False
            self.fields['title'].label = _("Title")

        if 'stream' in skip:
            del self.fields['stream']
        else:
            self.fields['stream'].queryset = Object.filter_permitted(
                user, MessageStream.objects, mode='x')
            self.fields['stream'].required = False
            self.fields['stream'].label = _("Stream")

        if 'author' in skip:
            del self.fields['author']
        else:
            self.fields['author'].required = False
            self.fields['author'].label = _("Author")
            self.fields['author'].queryset = Object.filter_permitted(
                user, Contact.objects, mode='x')
            self.fields['author'].widget.attrs.update({'class': 'autocomplete',
                                                                'callback': reverse('identities_ajax_contact_lookup')})

    class Meta:

        "Filter"
        model = Message
        fields = ('title', 'author', 'stream')

########NEW FILE########
__FILENAME__ = hmodule
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Messaging: Hardtree module definition
"""

PROPERTIES = {
    'title': 'Messaging',
    'details': 'Sending messages',
    'url': '/messaging/',
    'system': False,
    'type': 'minor',
}

URL_PATTERNS = [
    '^/messaging/',
]


#
# Cron
#
from treeio.messaging.cron import process_email

CRON = [process_email]

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding model 'EmailBox'
        db.create_table('messaging_emailbox', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('email_name', self.gf(
                'django.db.models.fields.CharField')(max_length=255)),
            ('email_type', self.gf(
                'django.db.models.fields.CharField')(max_length=255)),
            ('server_name', self.gf(
                'django.db.models.fields.CharField')(max_length=255)),
            ('server_type', self.gf(
                'django.db.models.fields.CharField')(max_length=255)),
            ('server_username', self.gf(
                'django.db.models.fields.CharField')(max_length=255)),
            ('server_password', self.gf(
                'django.db.models.fields.CharField')(max_length=255)),
            ('last_checked', self.gf('django.db.models.fields.DateTimeField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('messaging', ['EmailBox'])

        # Adding model 'MessageStream'
        db.create_table('messaging_messagestream', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=255)),
            ('email_incoming', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='incoming', null=True, to=orm['messaging.EmailBox'])),
            ('email_outgoing', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='outgoing', null=True, to=orm['messaging.EmailBox'])),
        ))
        db.send_create_signal('messaging', ['MessageStream'])

        # Adding model 'Message'
        db.create_table('messaging_message', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('title', self.gf('django.db.models.fields.CharField')
             (max_length=255, null=True, blank=True)),
            ('body', self.gf('django.db.models.fields.TextField')()),
            ('author', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['identities.Contact'])),
            ('stream', self.gf('django.db.models.fields.related.ForeignKey')
             (related_name='stream', to=orm['messaging.MessageStream'])),
            ('reply_to', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='child_set', null=True, to=orm['messaging.Message'])),
        ))
        db.send_create_signal('messaging', ['Message'])

        # Adding M2M table for field read_by on 'Message'
        db.create_table('messaging_message_read_by', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('message', models.ForeignKey(
                orm['messaging.message'], null=False)),
            ('user', models.ForeignKey(orm['core.user'], null=False))
        ))
        db.create_unique(
            'messaging_message_read_by', ['message_id', 'user_id'])

    def backwards(self, orm):

        # Deleting model 'EmailBox'
        db.delete_table('messaging_emailbox')

        # Deleting model 'MessageStream'
        db.delete_table('messaging_messagestream')

        # Deleting model 'Message'
        db.delete_table('messaging_message')

        # Removing M2M table for field read_by on 'Message'
        db.delete_table('messaging_message_read_by')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'everybody_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']"}),
            'group_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"}),
            'user_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'messaging.emailbox': {
            'Meta': {'ordering': "['last_updated']", 'object_name': 'EmailBox', '_ormbases': ['core.Object']},
            'email_name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'email_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'last_checked': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'server_password': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'server_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'server_username': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'messaging.message': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'Message', '_ormbases': ['core.Object']},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'read_by': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'read_by_user'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'reply_to': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['messaging.Message']"}),
            'stream': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stream'", 'to': "orm['messaging.MessageStream']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'messaging.messagestream': {
            'Meta': {'ordering': "['name']", 'object_name': 'MessageStream', '_ormbases': ['core.Object']},
            'email_incoming': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'incoming'", 'null': 'True', 'to': "orm['messaging.EmailBox']"}),
            'email_outgoing': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'outgoing'", 'null': 'True', 'to': "orm['messaging.EmailBox']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        }
    }

    complete_apps = ['messaging']

########NEW FILE########
__FILENAME__ = 0002_auto__add_mailinglist__add_template__add_field_message_mlist__chg_fiel
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding model 'MailingList'
        db.create_table('messaging_mailinglist', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=255)),
            ('description', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('from_contact', self.gf('django.db.models.fields.related.ForeignKey')(
                related_name='from_contact_set', to=orm['identities.Contact'])),
            ('opt_in', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['messaging.Template'], null=True, blank=True)),
        ))
        db.send_create_signal('messaging', ['MailingList'])

        # Adding M2M table for field members on 'MailingList'
        db.create_table('messaging_mailinglist_members', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('mailinglist', models.ForeignKey(
                orm['messaging.mailinglist'], null=False)),
            ('contact', models.ForeignKey(
                orm['identities.contact'], null=False))
        ))
        db.create_unique(
            'messaging_mailinglist_members', ['mailinglist_id', 'contact_id'])

        # Adding model 'Template'
        db.create_table('messaging_template', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=255)),
            ('body', self.gf('django.db.models.fields.TextField')()),
            ('subject', self.gf('django.db.models.fields.CharField')
             (max_length=255)),
        ))
        db.send_create_signal('messaging', ['Template'])

        # Adding field 'Message.mlist'
        db.add_column('messaging_message', 'mlist', self.gf('django.db.models.fields.related.ForeignKey')(
            blank=True, related_name='mlist', null=True, to=orm['messaging.MailingList']), keep_default=False)

        # Adding M2M table for field recipients on 'Message'
        db.create_table('messaging_message_recipients', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('message', models.ForeignKey(
                orm['messaging.message'], null=False)),
            ('contact', models.ForeignKey(
                orm['identities.contact'], null=False))
        ))
        db.create_unique(
            'messaging_message_recipients', ['message_id', 'contact_id'])

        # Changing field 'Message.stream'
        db.alter_column('messaging_message', 'stream_id', self.gf(
            'django.db.models.fields.related.ForeignKey')(null=True, to=orm['messaging.MessageStream']))

        # Adding field 'MessageStream.incoming_server_name'
        db.add_column('messaging_messagestream', 'incoming_server_name', self.gf(
            'django.db.models.fields.CharField')(max_length=255, null=True, blank=True), keep_default=False)

        # Adding field 'MessageStream.incoming_server_type'
        db.add_column('messaging_messagestream', 'incoming_server_type', self.gf(
            'django.db.models.fields.CharField')(max_length=255, null=True, blank=True), keep_default=False)

        # Adding field 'MessageStream.incoming_server_username'
        db.add_column('messaging_messagestream', 'incoming_server_username', self.gf(
            'django.db.models.fields.CharField')(max_length=255, null=True, blank=True), keep_default=False)

        # Adding field 'MessageStream.incoming_password'
        db.add_column('messaging_messagestream', 'incoming_password', self.gf(
            'django.db.models.fields.CharField')(max_length=255, null=True, blank=True), keep_default=False)

        # Adding field 'MessageStream.outgoing_email'
        db.add_column('messaging_messagestream', 'outgoing_email', self.gf(
            'django.db.models.fields.EmailField')(max_length=255, null=True, blank=True), keep_default=False)

        # Adding field 'MessageStream.outgoing_server_name'
        db.add_column('messaging_messagestream', 'outgoing_server_name', self.gf(
            'django.db.models.fields.CharField')(max_length=255, null=True, blank=True), keep_default=False)

        # Adding field 'MessageStream.outgoing_server_type'
        db.add_column('messaging_messagestream', 'outgoing_server_type', self.gf(
            'django.db.models.fields.CharField')(max_length=255, null=True, blank=True), keep_default=False)

        # Adding field 'MessageStream.outgoing_server_username'
        db.add_column('messaging_messagestream', 'outgoing_server_username', self.gf(
            'django.db.models.fields.CharField')(max_length=255, null=True, blank=True), keep_default=False)

        # Adding field 'MessageStream.outgoing_password'
        db.add_column('messaging_messagestream', 'outgoing_password', self.gf(
            'django.db.models.fields.CharField')(max_length=255, null=True, blank=True), keep_default=False)

        # Adding field 'MessageStream.faulty'
        db.add_column('messaging_messagestream', 'faulty', self.gf(
            'django.db.models.fields.BooleanField')(default=False), keep_default=False)

        # Adding field 'MessageStream.last_checked'
        db.add_column('messaging_messagestream', 'last_checked', self.gf(
            'django.db.models.fields.DateTimeField')(null=True, blank=True), keep_default=False)

    def backwards(self, orm):

        # Deleting model 'MailingList'
        db.delete_table('messaging_mailinglist')

        # Removing M2M table for field members on 'MailingList'
        db.delete_table('messaging_mailinglist_members')

        # Deleting model 'Template'
        db.delete_table('messaging_template')

        # Deleting field 'Message.mlist'
        db.delete_column('messaging_message', 'mlist_id')

        # Removing M2M table for field recipients on 'Message'
        db.delete_table('messaging_message_recipients')

        # User chose to not deal with backwards NULL issues for
        # 'Message.stream'
        raise RuntimeError(
            "Cannot reverse this migration. 'Message.stream' and its values cannot be restored.")

        # Deleting field 'MessageStream.incoming_server_name'
        db.delete_column('messaging_messagestream', 'incoming_server_name')

        # Deleting field 'MessageStream.incoming_server_type'
        db.delete_column('messaging_messagestream', 'incoming_server_type')

        # Deleting field 'MessageStream.incoming_server_username'
        db.delete_column('messaging_messagestream', 'incoming_server_username')

        # Deleting field 'MessageStream.incoming_password'
        db.delete_column('messaging_messagestream', 'incoming_password')

        # Deleting field 'MessageStream.outgoing_email'
        db.delete_column('messaging_messagestream', 'outgoing_email')

        # Deleting field 'MessageStream.outgoing_server_name'
        db.delete_column('messaging_messagestream', 'outgoing_server_name')

        # Deleting field 'MessageStream.outgoing_server_type'
        db.delete_column('messaging_messagestream', 'outgoing_server_type')

        # Deleting field 'MessageStream.outgoing_server_username'
        db.delete_column('messaging_messagestream', 'outgoing_server_username')

        # Deleting field 'MessageStream.outgoing_password'
        db.delete_column('messaging_messagestream', 'outgoing_password')

        # Deleting field 'MessageStream.faulty'
        db.delete_column('messaging_messagestream', 'faulty')

        # Deleting field 'MessageStream.last_checked'
        db.delete_column('messaging_messagestream', 'last_checked')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.AccessEntity']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'messaging.emailbox': {
            'Meta': {'ordering': "['last_updated']", 'object_name': 'EmailBox', '_ormbases': ['core.Object']},
            'email_name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'email_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'last_checked': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'server_password': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'server_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'server_username': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'messaging.mailinglist': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'MailingList', '_ormbases': ['core.Object']},
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'from_contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'from_contact_set'", 'to': "orm['identities.Contact']"}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'members_set'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['identities.Contact']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'opt_in': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['messaging.Template']", 'null': 'True', 'blank': 'True'})
        },
        'messaging.message': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'Message', '_ormbases': ['core.Object']},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'mlist': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'mlist'", 'null': 'True', 'to': "orm['messaging.MailingList']"}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'read_by': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'read_by_user'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'recipients': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'message_recipients'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['identities.Contact']"}),
            'reply_to': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['messaging.Message']"}),
            'stream': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'stream'", 'null': 'True', 'to': "orm['messaging.MessageStream']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'messaging.messagestream': {
            'Meta': {'ordering': "['name', 'last_updated']", 'object_name': 'MessageStream', '_ormbases': ['core.Object']},
            'email_incoming': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'incoming'", 'null': 'True', 'to': "orm['messaging.EmailBox']"}),
            'email_outgoing': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'outgoing'", 'null': 'True', 'to': "orm['messaging.EmailBox']"}),
            'faulty': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'incoming_password': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'incoming_server_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'incoming_server_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'incoming_server_username': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'last_checked': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'outgoing_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_password': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_server_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_server_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_server_username': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'messaging.template': {
            'Meta': {'object_name': 'Template', '_ormbases': ['core.Object']},
            'body': ('django.db.models.fields.TextField', [], {}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        }
    }

    complete_apps = ['messaging']

########NEW FILE########
__FILENAME__ = 0003_merge_emailbox_stream
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models


class Migration(DataMigration):

    def forwards(self, orm):
        "Migrate EmailBox: merge with Stream"
        for stream in orm['messaging.MessageStream'].objects.all():
            if stream.email_incoming:
                stream.incoming_server_name = stream.email_incoming.server_name
                stream.incoming_server_type = stream.email_incoming.server_type
                stream.incoming_server_username = stream.email_incoming.server_username
                stream.incoming_password = stream.email_incoming.server_password
                stream.save()
            if stream.email_outgoing:
                stream.outgoing_email = stream.email_outgoing.server_username
                stream.outgoing_server_name = stream.email_outgoing.server_name
                stream.outgoing_server_type = stream.email_outgoing.server_type
                stream.outgoing_server_username = stream.email_outgoing.server_username
                stream.outgoing_password = stream.email_outgoing.server_password
                stream.save()

    def backwards(self, orm):
        raise RuntimeError("Cannot reverse this migration.")

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.AccessEntity']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'messaging.emailbox': {
            'Meta': {'ordering': "['last_updated']", 'object_name': 'EmailBox', '_ormbases': ['core.Object']},
            'email_name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'email_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'last_checked': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'server_password': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'server_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'server_username': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'messaging.mailinglist': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'MailingList', '_ormbases': ['core.Object']},
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'from_contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'from_contact_set'", 'to': "orm['identities.Contact']"}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'members_set'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['identities.Contact']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'opt_in': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['messaging.Template']", 'null': 'True', 'blank': 'True'})
        },
        'messaging.message': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'Message', '_ormbases': ['core.Object']},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'mlist': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'mlist'", 'null': 'True', 'to': "orm['messaging.MailingList']"}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'read_by': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'read_by_user'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'recipients': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'message_recipients'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['identities.Contact']"}),
            'reply_to': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['messaging.Message']"}),
            'stream': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'stream'", 'null': 'True', 'to': "orm['messaging.MessageStream']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'messaging.messagestream': {
            'Meta': {'ordering': "['name', 'last_updated']", 'object_name': 'MessageStream', '_ormbases': ['core.Object']},
            'email_incoming': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'incoming'", 'null': 'True', 'to': "orm['messaging.EmailBox']"}),
            'email_outgoing': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'outgoing'", 'null': 'True', 'to': "orm['messaging.EmailBox']"}),
            'faulty': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'incoming_password': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'incoming_server_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'incoming_server_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'incoming_server_username': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'last_checked': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'outgoing_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_password': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_server_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_server_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_server_username': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'messaging.template': {
            'Meta': {'object_name': 'Template', '_ormbases': ['core.Object']},
            'body': ('django.db.models.fields.TextField', [], {}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        }
    }

    complete_apps = ['messaging']

########NEW FILE########
__FILENAME__ = 0004_auto__del_emailbox__del_field_messagestream_email_outgoing__del_field_
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Deleting model 'EmailBox'
        db.delete_table('messaging_emailbox')

        # Deleting field 'MessageStream.email_outgoing'
        db.delete_column('messaging_messagestream', 'email_outgoing_id')

        # Deleting field 'MessageStream.email_incoming'
        db.delete_column('messaging_messagestream', 'email_incoming_id')

    def backwards(self, orm):

        # Adding model 'EmailBox'
        db.create_table('messaging_emailbox', (
            ('server_password', self.gf(
                'django.db.models.fields.CharField')(max_length=255)),
            ('email_type', self.gf(
                'django.db.models.fields.CharField')(max_length=255)),
            ('last_checked', self.gf('django.db.models.fields.DateTimeField')
             (null=True, blank=True)),
            ('server_type', self.gf(
                'django.db.models.fields.CharField')(max_length=255)),
            ('email_name', self.gf(
                'django.db.models.fields.CharField')(max_length=255)),
            ('server_name', self.gf(
                'django.db.models.fields.CharField')(max_length=255)),
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('server_username', self.gf(
                'django.db.models.fields.CharField')(max_length=255)),
        ))
        db.send_create_signal('messaging', ['EmailBox'])

        # Adding field 'MessageStream.email_outgoing'
        db.add_column('messaging_messagestream', 'email_outgoing', self.gf('django.db.models.fields.related.ForeignKey')(
            related_name='outgoing', null=True, to=orm['messaging.EmailBox'], blank=True), keep_default=False)

        # Adding field 'MessageStream.email_incoming'
        db.add_column('messaging_messagestream', 'email_incoming', self.gf('django.db.models.fields.related.ForeignKey')(
            related_name='incoming', null=True, to=orm['messaging.EmailBox'], blank=True), keep_default=False)

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.AccessEntity']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'messaging.mailinglist': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'MailingList', '_ormbases': ['core.Object']},
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'from_contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'from_contact_set'", 'to': "orm['identities.Contact']"}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'members_set'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['identities.Contact']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'opt_in': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['messaging.Template']", 'null': 'True', 'blank': 'True'})
        },
        'messaging.message': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'Message', '_ormbases': ['core.Object']},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'mlist': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'mlist'", 'null': 'True', 'to': "orm['messaging.MailingList']"}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'read_by': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'read_by_user'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'recipients': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'message_recipients'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['identities.Contact']"}),
            'reply_to': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['messaging.Message']"}),
            'stream': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'stream'", 'null': 'True', 'to': "orm['messaging.MessageStream']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'messaging.messagestream': {
            'Meta': {'ordering': "['name', 'last_updated']", 'object_name': 'MessageStream', '_ormbases': ['core.Object']},
            'faulty': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'incoming_password': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'incoming_server_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'incoming_server_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'incoming_server_username': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'last_checked': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'outgoing_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_password': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_server_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_server_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_server_username': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'messaging.template': {
            'Meta': {'object_name': 'Template', '_ormbases': ['core.Object']},
            'body': ('django.db.models.fields.TextField', [], {}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        }
    }

    complete_apps = ['messaging']

########NEW FILE########
__FILENAME__ = models
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Messaging models
"""
from django.db import models
from treeio.core.models import User, Object
from treeio.identities.models import Contact, ContactValue
from treeio.messaging.emails import EmailStream, EmailMessage
from django.core.urlresolvers import reverse
from django.utils.translation import ugettext as _
from jinja2.filters import do_striptags
from treeio.core.templatetags.modules import htsafe
import re

#
# Mailing Lists
#


class Template(Object):

    "A template for sending emails using template tags"
    name = models.CharField(max_length=255)
    body = models.TextField()
    subject = models.CharField(max_length=255)


class MailingList(Object):

    "A mailling list for mass mailing"
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    from_contact = models.ForeignKey(Contact, related_name="from_contact_set")
    opt_in = models.ForeignKey(Template, blank=True, null=True)
    members = models.ManyToManyField(
        Contact, blank=True, null=True, related_name="members_set")

    class Meta:

        "Message"
        ordering = ['-date_created']

    def __unicode__(self):
        return self.name


# TODO: Add segment and urltrack models


# MessageStream Model
class MessageStream(Object):
    """
    A Stream that contains a list of messages
    """
    name = models.CharField(max_length=255)

    incoming_server_name = models.CharField(
        max_length=255, null=True, blank=True)
    incoming_server_type = models.CharField(max_length=255, null=True, blank=True,
                                            choices=(('POP3', 'POP3'),
                                                     ('POP3-SSL', 'POP3-SSL'),
                                                     ('IMAP', 'IMAP'),
                                                     ('IMAP-SSL', 'IMAP-SSL'),))
    incoming_server_username = models.CharField(
        max_length=255, null=True, blank=True)
    incoming_password = models.CharField(max_length=255, null=True, blank=True)

    outgoing_email = models.EmailField(max_length=255, null=True, blank=True)
    outgoing_server_name = models.CharField(
        max_length=255, null=True, blank=True)
    outgoing_server_type = models.CharField(max_length=255, null=True, blank=True,
                                            choices=(("SMTP", "SMTP"),
                                                     ("SMTP-SSL", "SMTP-SSL")))
    outgoing_server_username = models.CharField(
        max_length=255, null=True, blank=True)
    outgoing_password = models.CharField(max_length=255, null=True, blank=True)

    faulty = models.BooleanField(default=False)
    last_checked = models.DateTimeField(null=True, blank=True)

    class Meta:

        "MessageStream"
        ordering = ['name', 'last_updated']
        verbose_name = _("Stream")
        verbose_name_plural = _("Streams")

    def __unicode__(self):
        return self.name

    def process_email(self):
        "Get email from the email box"
        email = EmailStream(self)
        email.get_emails()

    def get_absolute_url(self):
        "Returns absolute URL of the object"
        try:
            return reverse('messaging_stream_view', args=[self.id])
        except Exception:
            return ""


class Message(Object):
    """
    A Single Message
    """
    title = models.CharField(max_length=255, null=True, blank=True)
    body = models.TextField()
    author = models.ForeignKey(Contact)
    recipients = models.ManyToManyField(
        Contact, null=True, blank=True, related_name='message_recipients')
    stream = models.ForeignKey(
        MessageStream, blank=True, null=True, related_name='stream', on_delete=models.SET_NULL)
    reply_to = models.ForeignKey(
        'self', blank=True, null=True, related_name='child_set')
    read_by = models.ManyToManyField(
        User, null=True, blank=True, related_name='read_by_user')
    mlist = models.ForeignKey(
        MailingList, blank=True, null=True, related_name='mlist')

    access_inherit = ('stream', '*module', '*user')

    class Meta:
        "Message"
        ordering = ['-date_created']

    def __unicode__(self):
        return self.title

    def get_absolute_url(self):
        "Returns absolute URL of the object"
        try:
            return reverse('messaging_message_view', args=[self.id])
        except Exception:
            return ""

    def save(self, *args, **kwargs):
        "Automatically set message title"

        if not self.title:
            self.title = self.body
            self.title = re.split('<[^>]+?>', self.title)
            self.title = ''.join(self.title)
            self.title = self.title[:50]

        super(Message, self).save(*args, **kwargs)

    def is_read(self, user):
        "Checks if the message is read by the given user"
        if not isinstance(user, User):
            raise TypeError("The given user is not an instance of core.User")
        return self.read_by.filter(pk=user.id).exists()

    def get_stripped_body(self):
        "Returns body without HTML tags and other shit"
        return do_striptags(htsafe(self.body)).replace(u"\u00A0", " ")

    def send_email(self):
        "Send email"
        email = EmailMessage(self)
        if self.stream and self.stream.outgoing_server_name:
            email.send_email()

    def get_original_message_author_email(self):
        "Returns email of the original message author"
        message = self.message
        contact = message.author

        email = ContactValue.objects.filter(
            field__field_type='email', contact=contact)
        if email:
            email = email[0]

        return email

########NEW FILE########
__FILENAME__ = messaging
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Messaging templatetags
"""
from coffin import template
from treeio.core.rendering import render_to_string
from jinja2 import contextfunction, Markup
from django.template import RequestContext
from treeio.core.models import Object
from treeio.messaging.models import Message

register = template.Library()


@contextfunction
def messaging_message_list(context, messages, skip_group=False, nomass=False):
    "Print a list of messages"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    profile = request.user.get_profile()

    return Markup(render_to_string('messaging/tags/message_list',
                                   {'messages': messages,
                                    'profile': profile,
                                    'skip_group': skip_group,
                                    'nomass': nomass},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(messaging_message_list)


@contextfunction
def messaging_unread(context):
    "Print a number of unread messages"

    request = context['request']

    user = None
    if request.user.username:
        try:
            user = request.user.get_profile()
        except Exception:
            pass

    unread = 0
    messaging = None
    if user:
        modules = user.get_perspective().get_modules()
        messaging = modules.filter(name='treeio.messaging')
        if messaging:
            unread = Object.filter_permitted(user,
                                             Message.objects.filter(reply_to__isnull=True).exclude(read_by=user)).count()

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('messaging/tags/unread',
                                   {'messaging': messaging, 'unread': unread},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(messaging_unread)

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Messaging: test suites
"""

from django.test import TestCase
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser
from treeio.core.models import User, Group, Perspective, ModuleSetting
from treeio.messaging.models import Message, MessageStream
from treeio.identities.models import Contact, ContactType


class MessagingModelsTest(TestCase):

    " Messaging models tests"

    username = "test"
    password = "password"

    def test_model_message(self):
        "Test message"

        contact_type = ContactType(name='test')
        contact_type.save()

        contact = Contact(name='test', contact_type=contact_type)
        contact.save()

        self.user = DjangoUser(username=self.username, password='')
        self.user.set_password(self.password)
        self.user.save()

        user = User(name='test', user=self.user)
        user.save()

        stream = MessageStream(name='test')
        stream.save()

        obj = Message(title='test', body='test', author=contact, stream=stream)
        obj.save()
        self.assertEquals('test', obj.title)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_message_stream(self):
        "Test message"

        obj = MessageStream(name='test')
        obj.save()
        self.assertEquals('test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()


class MessagingViewsTest(TestCase):

    "Messaging functional tests for views"

    username = "test"
    password = "password"
    prepared = False

    def setUp(self):
        "Initial Setup"

        if not self.prepared:
            self.group, created = Group.objects.get_or_create(name='test')
            duser, created = DjangoUser.objects.get_or_create(
                username=self.username)
            duser.set_password(self.password)
            duser.save()
            self.user, created = User.objects.get_or_create(user=duser)
            self.user.save()
            perspective, created = Perspective.objects.get_or_create(
                name='default')
            perspective.set_default_user()
            perspective.save()
            ModuleSetting.set('default_perspective', perspective.id)

            self.contact_type = ContactType(name='test')
            self.contact_type.set_default_user()
            self.contact_type.save()

            self.contact = Contact(name='test', contact_type=self.contact_type)
            self.contact.set_default_user()
            self.contact.save()

            self.stream = MessageStream(name='test')
            self.stream.set_default_user()
            self.stream.save()

            self.message = Message(
                title='test', body='test', author=self.contact, stream=self.stream)
            self.message.set_default_user()
            self.message.save()

            self.client = Client()

            self.prepared = True

    ######################################
    # Testing views when user is logged in
    ######################################
    def test_message_index_login(self):
        "Test index page with login at /messaging/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('messaging'))
        self.assertEquals(response.status_code, 200)

    def test_message_index_sent(self):
        "Test index page with login at /messaging/sent/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('messaging_sent'))
        self.assertEquals(response.status_code, 200)

    def test_message_index_inbox(self):
        "Test index page with login at /messaging/inbox/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('messaging_inbox'))
        self.assertEquals(response.status_code, 200)

    def test_message_index_unread(self):
        "Test index page with login at /messaging/unread/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('messaging_unread'))
        self.assertEquals(response.status_code, 200)

    # Messages
    def test_message_compose_login(self):
        "Test index page with login at /message/compose/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('messaging_message_compose'))
        self.assertEquals(response.status_code, 200)

    def test_message_view_login(self):
        "Test index page with login at /message/view/<message_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('messaging_message_view', args=[self.message.id]))
        self.assertEquals(response.status_code, 200)

    def test_message_delete_login(self):
        "Test index page with login at /message/edit/<message_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('messaging_message_delete', args=[self.message.id]))
        self.assertEquals(response.status_code, 200)

    # Streams
    def test_stream_add(self):
        "Test index page with login at /stream/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('messaging_stream_edit', args=[self.stream.id]))
        self.assertEquals(response.status_code, 200)

    def test_stream_view(self):
        "Test index page with login at /stream/view/<stream_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('messaging_stream_view', args=[self.stream.id]))
        self.assertEquals(response.status_code, 200)

    def test_stream_edit(self):
        "Test index page with login at /stream/edit/<stream_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('messaging_stream_edit', args=[self.stream.id]))
        self.assertEquals(response.status_code, 200)

    def test_stream_delete(self):
        "Test index page with login at /stream/delete/<stream_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('messaging_stream_delete', args=[self.stream.id]))
        self.assertEquals(response.status_code, 200)

    # Settings
    def test_messaging_settings_view(self):
        "Test index page with login at /messaging/settings/view/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('messaging_settings_view'))
        self.assertEquals(response.status_code, 200)

    def test_finance_settings_edit(self):
        "Test index page with login at /messaging/settings/edit/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('messaging_settings_edit'))
        self.assertEquals(response.status_code, 200)

    ######################################
    # Testing views when user is not logged in
    ######################################
    def test_message_index_out(self):
        "Test index page at /messaging/"
        response = self.client.get(reverse('messaging'))
        # Redirects as unauthenticated
        self.assertRedirects(response, reverse('user_login'))

    def test_message_sent_out(self):
        "Testing /messaging/sent/"
        response = self.client.get(reverse('messaging_sent'))
        # Redirects as unauthenticated
        self.assertRedirects(response, reverse('user_login'))

    def test_message_inbox_out(self):
        "Testing /messaging/inbox/"
        response = self.client.get(reverse('messaging_inbox'))
        # Redirects as unauthenticated
        self.assertRedirects(response, reverse('user_login'))

    def test_message_unread_out(self):
        "Testing /messaging/unread/"
        response = self.client.get(reverse('messaging_unread'))
        # Redirects as unauthenticated
        self.assertRedirects(response, reverse('user_login'))

    # Messages
    def test_message_compose_out(self):
        "Testing /message/compose/"
        response = self.client.get(reverse('messaging_message_compose'))
        self.assertRedirects(response, reverse('user_login'))

    def test_message_view_out(self):
        "Test index page with login at /message/view/<message_id>"
        response = self.client.get(
            reverse('messaging_message_view', args=[self.message.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_message_delete_out(self):
        "Test index page with login at /message/edit/<message_id>"
        response = self.client.get(
            reverse('messaging_message_delete', args=[self.message.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Streams
    def test_stream_add_out(self):
        "Testing /stream/add/"
        response = self.client.get(
            reverse('messaging_stream_edit', args=[self.stream.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_stream_view_out(self):
        "Testing /stream/view/<stream_id>"
        response = self.client.get(
            reverse('messaging_stream_view', args=[self.stream.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_stream_edit_out(self):
        "Testing /stream/edit/<stream_id>"
        response = self.client.get(
            reverse('messaging_stream_edit', args=[self.stream.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_stream_delete_out(self):
        "Testing /stream/delete/<stream_id>"
        response = self.client.get(
            reverse('messaging_stream_delete', args=[self.stream.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Settings
    def test_messaging_settings_view_out(self):
        "Testing /messaging/settings/view/"
        response = self.client.get(reverse('messaging_settings_view'))
        self.assertRedirects(response, reverse('user_login'))

    def test_finance_settings_edit_out(self):
        "Testing /messaging/settings/edit/"
        response = self.client.get(reverse('messaging_settings_edit'))
        self.assertRedirects(response, reverse('user_login'))

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Messaging module URLs
"""
from django.conf.urls import patterns, url

urlpatterns = patterns('treeio.messaging.views',
    url(r'^(\.(?P<response_format>\w+))?$',
        'index', name='messaging'),
    url(r'^index(\.(?P<response_format>\w+))?$',
        'index', name='messaging_index'),
    url(r'^sent(\.(?P<response_format>\w+))?/?$',
        'index_sent', name='messaging_sent'),
    url(r'^inbox(\.(?P<response_format>\w+))?/?$',
        'index_inbox', name='messaging_inbox'),
    url(r'^unread(\.(?P<response_format>\w+))?/?$',
        'index_unread', name='messaging_unread'),

    # Messages
    url(r'^compose(\.(?P<response_format>\w+))?/?$',
        'messaging_compose', name='messaging_message_compose'),
    url(r'^view/(?P<message_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'messaging_view', name='messaging_message_view'),
    url(r'^delete/(?P<message_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'messaging_delete', name='messaging_message_delete'),

    # Streams
    url(r'^stream/add(\.(?P<response_format>\w+))?/?$',
        'stream_add', name='messaging_stream_add'),
    url(r'^stream/view/(?P<stream_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'stream_view', name='messaging_stream_view'),
    url(r'^stream/edit/(?P<stream_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'stream_edit', name='messaging_stream_edit'),
    url(r'^stream/delete/(?P<stream_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'stream_delete', name='messaging_stream_delete'),
    url(r'^stream/checkmail/(?P<stream_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'stream_checkmail', name='messaging_stream_checkmail'),

    # Mailing Lists
    url(r'^mlist/add(\.(?P<response_format>\w+))?/?$',
        'mlist_add', name='messaging_mlist_add'),
    url(r'^mlist/view/(?P<mlist_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'mlist_view', name='messaging_mlist_view'),
    url(r'^mlist/edit/(?P<mlist_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'mlist_edit', name='messaging_mlist_edit'),
    url(r'^mlist/delete/(?P<mlist_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'mlist_delete', name='messaging_mlist_delete'),

    # Administration
    url(r'^settings/view(\.(?P<response_format>\w+))?/?$',
        'settings_view', name='messaging_settings_view'),
    url(r'^settings/edit(\.(?P<response_format>\w+))?/?$',
        'settings_edit', name='messaging_settings_edit'),
)

########NEW FILE########
__FILENAME__ = views
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Messaging module views
"""
from django.shortcuts import get_object_or_404
from django.template import RequestContext
from django.http import HttpResponseRedirect
from django.core.urlresolvers import reverse
from django.utils.translation import ugettext as _
from django.contrib import messages
from django.db.models import Q
from treeio.core.models import Object, ModuleSetting
from treeio.core.views import user_denied
from treeio.core.conf import settings
from treeio.core.rendering import render_to_response
from treeio.core.decorators import treeio_login_required, handle_response_format
from treeio.identities.models import ContactType, Contact
from treeio.messaging.models import Message, MessageStream, MailingList
from treeio.messaging.forms import MessageForm, MessageStreamForm, FilterForm, MassActionForm, SettingsForm, MessageReplyForm, MailingListForm
import re


def _get_filter_query(args):
    "Creates a query to filter Messages based on FilterForm arguments"
    query = Q()

    for arg in args:
        if hasattr(Message, arg) and args[arg]:
            kwargs = {str(arg + '__id'): long(args[arg])}
            query = query & Q(**kwargs)

    return query


def _get_default_context(request):
    "Returns default context as a dict()"
    streams = Object.filter_by_request(request, MessageStream.objects)
    mlists = MailingList.objects.all()
    massform = MassActionForm(request.user.get_profile())

    context = {'streams': streams,
               'mlists': mlists,
               'massform': massform}

    return context


def _process_mass_form(f):
    "Pre-process request to handle mass action form for Messages"

    def wrap(request, *args, **kwargs):
        "Wrap"
        user = request.user.get_profile()
        if 'massform' in request.POST:
            for key in request.POST:
                if 'mass-message' in key:
                    try:
                        message = Message.objects.get(pk=request.POST[key])
                        form = MassActionForm(
                            user, request.POST, instance=message)
                        if form.is_valid() and user.has_permission(message, mode='w'):
                            form.save()
                    except Exception:
                        pass
            try:
                form = MassActionForm(request.user.get_profile(), request.POST)
                if form.is_valid():
                    form.save()
            except Exception:
                pass

        return f(request, *args, **kwargs)

    wrap.__doc__ = f.__doc__
    wrap.__name__ = f.__name__

    return wrap


@handle_response_format
@treeio_login_required
@_process_mass_form
def index(request, response_format='html'):
    "Messaging index page"

    query = Q(reply_to__isnull=True)
    if request.GET:
        query = query & _get_filter_query(request.GET)
        objects = Object.filter_by_request(
            request, Message.objects.filter(query))
    else:
        objects = Object.filter_by_request(
            request, Message.objects.filter(query))

    filters = FilterForm(request.user.get_profile(), 'title', request.GET)

    context = _get_default_context(request)
    context.update({'filters': filters,
                    'messages': objects})

    return render_to_response('messaging/index', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_form
def index_sent(request, response_format='html'):
    "Sent messages index page"

    query = Q(reply_to__isnull=True) & Q(
        author=request.user.get_profile().get_contact())
    if request.GET:
        query = query & _get_filter_query(request.GET)
        objects = Object.filter_by_request(
            request, Message.objects.filter(query))
    else:
        objects = Object.filter_by_request(
            request, Message.objects.filter(query))

    filters = FilterForm(request.user.get_profile(), 'title', request.GET)

    context = _get_default_context(request)
    context.update({'filters': filters,
                    'messages': objects})

    return render_to_response('messaging/index_sent', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_form
def index_inbox(request, response_format='html'):
    "Received messages index page"

    query = Q(reply_to__isnull=True) & ~Q(
        author=request.user.get_profile().get_contact())
    if request.GET:
        query = query & _get_filter_query(request.GET)
        objects = Object.filter_by_request(
            request, Message.objects.filter(query))
    else:
        objects = Object.filter_by_request(
            request, Message.objects.filter(query))

    filters = FilterForm(request.user.get_profile(), 'title', request.GET)
    context = _get_default_context(request)
    context.update({'filters': filters,
                    'messages': objects})

    return render_to_response('messaging/index_inbox', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_form
def index_unread(request, response_format='html'):
    "Messaging unread page"

    user = request.user.get_profile()

    query = Q(reply_to__isnull=True) & ~Q(read_by=user)
    if request.GET:
        query = query & _get_filter_query(request.GET)
        objects = Object.filter_by_request(
            request, Message.objects.filter(query))
    else:
        objects = Object.filter_by_request(
            request, Message.objects.filter(query))

    filters = FilterForm(request.user.get_profile(), 'title', request.GET)

    context = _get_default_context(request)
    context.update({'filters': filters,
                    'messages': objects})

    return render_to_response('messaging/unread', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def stream_add(request, response_format='html'):
    "New message stream"
    user = request.user.get_profile()

    if request.POST:
        if not 'cancel' in request.POST:
            stream = MessageStream()
            form = MessageStreamForm(user, request.POST, instance=stream)
            if form.is_valid():
                stream = form.save()
                stream.set_user_from_request(request)
                return HttpResponseRedirect(reverse('messaging'))
        else:
            return HttpResponseRedirect(reverse('messaging'))
    else:
        form = MessageStreamForm(user)

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('messaging/stream_add', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_form
def stream_view(request, stream_id, response_format='html'):
    "Stream view page"

    user = request.user.get_profile()

    stream = get_object_or_404(MessageStream, pk=stream_id)
    if not request.user.get_profile().has_permission(stream):
        return user_denied(request, message="You don't have access to this Stream",
                           response_format=response_format)

    if request.user.get_profile().has_permission(stream, mode='x'):
        if request.POST:
            message = Message()
            message.author = user.get_contact()
            if not message.author:
                return user_denied(request,
                                   message="You can't send message without a Contact Card assigned to you.",
                                   response_format=response_format)

            form = MessageForm(
                request.user.get_profile(), None, None, request.POST, instance=message)
            if form.is_valid():
                message = form.save()
                message.recipients.add(user.get_contact())
                message.set_user_from_request(request)
                message.read_by.add(user)
                try:
                    # if email entered create contact and add to recipients
                    if 'multicomplete_recipients' in request.POST and request.POST['multicomplete_recipients']:
                        try:
                            conf = ModuleSetting.get_for_module(
                                'treeio.messaging', 'default_contact_type')[0]
                            default_contact_type = ContactType.objects.get(
                                pk=long(conf.value))
                        except Exception:
                            default_contact_type = None
                        emails = request.POST[
                            'multicomplete_recipients'].split(',')
                        for email in emails:
                            emailstr = unicode(email).strip()
                            if re.match('[a-zA-Z0-9+_\-\.]+@[0-9a-zA-Z][.-0-9a-zA-Z]*.[a-zA-Z]+', emailstr):
                                contact, created = Contact.get_or_create_by_email(
                                    emailstr, contact_type=default_contact_type)
                                message.recipients.add(contact)
                                if created:
                                    contact.set_user_from_request(request)
                except:
                    pass
                # send email to all recipients
                message.send_email()

                return HttpResponseRedirect(reverse('messaging_stream_view', args=[stream.id]))
        else:
            form = MessageForm(request.user.get_profile(), stream_id)

    else:
        form = None

    objects = Object.filter_by_request(request, Message.objects.filter(
        reply_to__isnull=True, stream=stream).order_by('-date_created'))
    context = _get_default_context(request)
    context.update({'messages': objects,
                    'form': form,
                    'stream': stream})

    return render_to_response('messaging/stream_view', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def stream_edit(request, stream_id, response_format='html'):
    "Stream edit page"
    user = request.user.get_profile()

    stream = get_object_or_404(MessageStream, pk=stream_id)
    if not request.user.get_profile().has_permission(stream, mode="w"):
        return user_denied(request, message="You don't have access to this Stream",
                           response_format=response_format)

    if request.POST:
        if not 'cancel' in request.POST:
            form = MessageStreamForm(user, request.POST, instance=stream)
            if form.is_valid():
                stream = form.save()
                return HttpResponseRedirect(reverse('messaging_stream_view', args=[stream.id]))
        else:
            return HttpResponseRedirect(reverse('messaging_stream_view', args=[stream.id]))
    else:
        form = MessageStreamForm(user, instance=stream)

    context = _get_default_context(request)
    context.update({'form': form,
                    'stream': stream})

    return render_to_response('messaging/stream_edit', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def stream_checkmail(request, stream_id, response_format='html'):
    "Stream check mail"
    user = request.user.get_profile()

    stream = get_object_or_404(MessageStream, pk=stream_id)
    if not user.has_permission(stream):
        return user_denied(request, message="You don't have access to this Stream",
                           response_format=response_format)

    try:
        stream.process_email()
        messages.add_message(
            request, messages.INFO, _("E-mails fetched successfully."), fail_silently=True)
    except Exception, e:
        print e
        try:
            messages.add_message(request, messages.ERROR, _(
                "Failed to retrieve messages for this stream. Please check stream settings"), fail_silently=True)
        except:
            pass

    return HttpResponseRedirect(reverse('messaging_stream_view', args=[stream.id]))


@handle_response_format
@treeio_login_required
def stream_delete(request, stream_id, response_format='html'):
    "Delete stream page"

    stream = get_object_or_404(MessageStream, pk=stream_id)
    if not request.user.get_profile().has_permission(stream, mode="w"):
        return user_denied(request, message="You don't have access to this Stream",
                           response_format=response_format)

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                stream.trash = True
                stream.save()
            else:
                stream.delete()
            return HttpResponseRedirect('/messaging/')
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('messaging_stream_view', args=[stream.id]))

    context = _get_default_context(request)
    context.update({'stream': stream})

    return render_to_response('messaging/stream_delete', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def messaging_compose(request, response_format='html'):
    "New message page"

    user = request.user.get_profile()

    if request.POST:
        if not 'cancel' in request.POST:
            message = Message()
            message.author = user.get_contact()
            if not message.author:
                return user_denied(request,
                                   message="You can't send message without a Contact Card assigned to you.",
                                   response_format=response_format)

            form = MessageForm(
                request.user.get_profile(), None, None, request.POST, instance=message)
            if form.is_valid():
                message = form.save()
                message.recipients.add(user.get_contact())
                message.set_user_from_request(request)
                message.read_by.add(user)
                try:
                    # if email entered create contact and add to recipients
                    if 'multicomplete_recipients' in request.POST and request.POST['multicomplete_recipients']:
                        try:
                            conf = ModuleSetting.get_for_module(
                                'treeio.messaging', 'default_contact_type')[0]
                            default_contact_type = ContactType.objects.get(
                                pk=long(conf.value))
                        except Exception:
                            default_contact_type = None
                        emails = request.POST[
                            'multicomplete_recipients'].split(',')
                        for email in emails:
                            emailstr = unicode(email).strip()
                            if re.match('[a-zA-Z0-9+_\-\.]+@[0-9a-zA-Z][.-0-9a-zA-Z]*.[a-zA-Z]+', emailstr):
                                contact, created = Contact.get_or_create_by_email(
                                    emailstr, contact_type=default_contact_type)
                                message.recipients.add(contact)
                                if created:
                                    contact.set_user_from_request(request)
                except:
                    pass
                # send email to all recipients
                message.send_email()

                return HttpResponseRedirect(reverse('messaging'))
        else:
            return HttpResponseRedirect(reverse('messaging'))

    else:
        form = MessageForm(request.user.get_profile(), None)

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('messaging/message_compose', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def messaging_view(request, message_id, response_format='html'):
    "Single message page"

    message = get_object_or_404(Message, pk=message_id)
    user = request.user.get_profile()

    if not user.has_permission(message):
        return user_denied(request, message="You don't have access to this Message",
                           response_format=response_format)

    message.read_by.add(user)

    if request.POST and request.POST.get('body', False):
        "Unread message"

        reply = Message()
        reply.author = user.get_contact()
        if not reply.author:
            return user_denied(request,
                               message="You can't send message without a Contact Card assigned to you.",
                               response_format=response_format)
        reply.reply_to = message
        form = MessageReplyForm(
            user, message.stream_id, message, request.POST, instance=reply)
        if form.is_valid():
            reply = form.save()
            reply.set_user_from_request(request)
            # Add author to recipients
            reply.recipients.add(reply.author)
            message.read_by.clear()

            try:
                # if email entered create contact and add to recipients
                if 'multicomplete_recipients' in request.POST and request.POST['multicomplete_recipients']:
                    try:
                        conf = ModuleSetting.get_for_module(
                            'treeio.messaging', 'default_contact_type')[0]
                        default_contact_type = ContactType.objects.get(
                            pk=long(conf.value))
                    except Exception:
                        default_contact_type = None
                    emails = request.POST[
                        'multicomplete_recipients'].split(',')
                    for email in emails:
                        emailstr = unicode(email).strip()
                        if re.match('[a-zA-Z0-9+_\-\.]+@[0-9a-zA-Z][.-0-9a-zA-Z]*.[a-zA-Z]+', emailstr):
                            contact, created = Contact.get_or_create_by_email(
                                emailstr, contact_type=default_contact_type)
                            reply.recipients.add(contact)
                            if created:
                                contact.set_user_from_request(request)
            except:
                pass

            # Add each recipient of the reply to the original message
            for recipient in reply.recipients.all():
                message.recipients.add(recipient)

            # send email to all recipients
            reply.send_email()

            return HttpResponseRedirect(reverse('messaging_message_view', args=[message.id]))

    else:
        form = MessageReplyForm(
            request.user.get_profile(), message.stream_id, message)

    replies = Object.filter_by_request(request,
                                       Message.objects.filter(reply_to=message).order_by('date_created'))

    context = _get_default_context(request)
    context.update({'message': message,
                    'messages': replies,
                    'form': form})

    return render_to_response('messaging/message_view', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def messaging_delete(request, message_id, response_format='html'):
    "Delete message page"

    message = get_object_or_404(Message, pk=message_id)

    if not request.user.get_profile().has_permission(message, mode="w"):
        return user_denied(request, message="You don't have access to this Message",
                           response_format=response_format)

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                message.trash = True
                message.save()
            else:
                message.delete()
            return HttpResponseRedirect('/messaging/')
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('messaging_stream_view', args=[message.stream.id]))

    context = _get_default_context(request)
    context.update({'message': message})

    return render_to_response('messaging/message_delete', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)

"""
Mailing Lists
"""


@handle_response_format
@treeio_login_required
def mlist_add(request, response_format='html'):
    "New message mlist"
    user = request.user.get_profile()

    if request.POST:

        mlist = MailingList()

        form = MailingListForm(user, request.POST, instance=mlist)
        if form.is_valid():
            mlist = form.save()
            mlist.set_user_from_request(request)
            return HttpResponseRedirect('/messaging/')
    else:
        form = MailingListForm(user)

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('messaging/mlist_add', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_form
def mlist_view(request, mlist_id, response_format='html'):
    "Mailing List view page"

    user = request.user.get_profile()

    mlist = get_object_or_404(MailingList, pk=mlist_id)
    if not request.user.get_profile().has_permission(mlist):
        return user_denied(request, message="You don't have access to this Mailing List",
                           response_format=response_format)

    if request.user.get_profile().has_permission(mlist, mode='x'):
        if request.POST:
            message = Message()
            message.author = request.user.get_profile().get_contact()
            if not message.author:
                return user_denied(request,
                                   message="You can't send message without a Contact Card assigned to you.",
                                   response_format=response_format)
            form = MessageForm(
                request.user.get_profile(), mlist_id, None, request.POST, instance=message)
            if form.is_valid():
                message = form.save()
                message.set_user_from_request(request)
                message.read_by.add(user)
                return HttpResponseRedirect(reverse('messaging_mlist_view', args=[mlist.id]))
        else:
            form = MessageForm(request.user.get_profile(), mlist_id)

    else:
        form = None

    messages = Object.filter_by_request(request,
                                        Message.objects.filter(reply_to__isnull=True,
                                                               mlist=mlist).order_by('-date_created'))
    context = _get_default_context(request)
    context.update({'messages': messages,
                    'form': form,
                    'mlist': mlist})

    return render_to_response('messaging/mlist_view', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def mlist_edit(request, mlist_id, response_format='html'):
    "MailingList edit page"
    user = request.user.get_profile()

    mlist = get_object_or_404(MailingList, pk=mlist_id)
    if not user.has_permission(mlist, mode="w"):
        return user_denied(request, message="You don't have access to this Mailing List",
                           response_format=response_format)

    context = _get_default_context(request)
    context.update({'mlist': mlist})

    return render_to_response('messaging/mlist_edit', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def mlist_delete(request, mlist_id, response_format='html'):
    "Delete mlist page"

    mlist = get_object_or_404(MailingList, pk=mlist_id)
    if not request.user.get_profile().has_permission(mlist, mode="w"):
        return user_denied(request, message="You don't have access to this Mailing List",
                           response_format=response_format)

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                mlist.trash = True
                mlist.save()
            else:
                mlist.delete()
            return HttpResponseRedirect('/messaging/')
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('messaging_mlist_view', args=[mlist.id]))

    context = _get_default_context(request)
    context.update({'mlist': mlist})

    return render_to_response('messaging/mlist_delete', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


"""
Settings
"""


@handle_response_format
@treeio_login_required
def settings_view(request, response_format='html'):
    "Settings admin view"

    # default content type
    try:
        conf = ModuleSetting.get_for_module('treeio.messaging', 'default_contact_type',
                                            user=request.user.get_profile())[0]
        default_contact_type = ContactType.objects.get(pk=long(conf.value))
    except:
        default_contact_type = None

    # default imap folder
    try:
        conf = ModuleSetting.get_for_module(
            'treeio.messaging', 'default_imap_folder')[0]
        default_imap_folder = conf.value
    except:
        default_imap_folder = getattr(
            settings, 'HARDTREE_MESSAGING_IMAP_DEFAULT_FOLDER_NAME', 'UNSEEN')

    # signature
    try:
        conf = ModuleSetting.get_for_module('treeio.messaging', 'signature',
                                            user=request.user.get_profile(), strict=True)[0]
        signature = conf.value
    except:
        signature = ''

    types = Object.filter_by_request(
        request, ContactType.objects.order_by('name'))

    context = _get_default_context(request)
    context.update({'types': types,
                    'signature': signature,
                    'default_contact_type': default_contact_type,
                    'default_imap_folder': default_imap_folder})

    return render_to_response('messaging/settings_view', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
def settings_edit(request, response_format='html'):
    "Settings admin view"

    if request.POST:
        if not 'cancel' in request.POST:
            form = SettingsForm(request.user.get_profile(), request.POST)
            if form.is_valid():
                form.save()
                return HttpResponseRedirect(reverse('messaging_settings_view'))
        else:
            return HttpResponseRedirect(reverse('messaging_settings_view'))
    else:
        form = SettingsForm(request.user.get_profile())

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('messaging/settings_edit', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


#
# Widgets
#

@treeio_login_required
def widget_new_messages(request, response_format='html'):
    "A list of new messages. Limit by 5."

    query = Q(reply_to__isnull=True) & ~Q(read_by=request.user.get_profile())

    messages = Object.filter_by_request(
        request, Message.objects.filter(query))[:5]

    return render_to_response('messaging/widgets/new_messages',
                              {'messages': messages},
                              context_instance=RequestContext(request), response_format=response_format)

########NEW FILE########
__FILENAME__ = widgets
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Messaging module widgets
"""

WIDGETS = {'widget_new_messages': {'title': 'New Messages',
                                   'size': "95%"}}


def get_widgets(request):
    "Returns a set of all available widgets"

    return WIDGETS

########NEW FILE########
__FILENAME__ = useragents
import os.path


def load_from_search_strings_file():
    f = None
    try:
        f = open(os.path.join(os.path.dirname(__file__), 'search_strings.txt'))
        ss = f.readlines()
    finally:
        if f:
            f.close()
    return [s.strip() for s in ss if not s.startswith('#')]

search_strings = load_from_search_strings_file()

########NEW FILE########
__FILENAME__ = ajax
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
News ajax views
"""


from dajaxice.core import dajaxice_functions
from dajax.core import Dajax
from django.template import RequestContext
from django.db.models import Q
from treeio.core.rendering import render_to_string
from treeio.core.models import UpdateRecord
from treeio.news.views import _get_filter_query


def get_more(request, target='#more-news', skip=20):
    dajax = Dajax()

    profile = request.user.get_profile()
    query = _get_filter_query(profile) & (
        ~Q(author=profile) | Q(record_type='share') | Q(score__gt=0))
    updates = UpdateRecord.objects.filter(query).distinct()[skip:skip + 20]

    output = render_to_string('news/ajax/index',
                              {'updates': updates, 'skip': skip + 20},
                              context_instance=RequestContext(request),
                              response_format='html')

    dajax.add_data({'target': target, 'content': output}, 'treeio.add_data')
    return dajax.json()

dajaxice_functions.register(get_more)

########NEW FILE########
__FILENAME__ = handlers
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

from __future__ import absolute_import, with_statement

__all__ = ['UpdateRecordHandler', ]

from treeio.core.api.utils import rc
from piston.handler import BaseHandler
from treeio.core.models import UpdateRecord
from treeio.news.forms import UpdateRecordForm
from treeio.news.views import _get_filter_query


class UpdateRecordHandler(BaseHandler):

    "Entrypoint for UpdateRecord model."

    model = UpdateRecord
    form = UpdateRecordForm
    allowed_methods = ('GET', 'DELETE')
    fields = ('id', 'full_message', 'author', 'sender')

    @staticmethod
    def resource_uri():
        return ('api_news_update_records', ['id'])

    def read(self, request, record_id=None, *args, **kwargs):
        "Function shows messages in the news"
        profile = request.user.get_profile()
        query = _get_filter_query(profile, filters=request.GET)
        try:
            if record_id:
                return UpdateRecord.objects.filter(query).get(id=record_id)
            else:
                return UpdateRecord.objects.filter(query).distinct()
        except self.model.DoesNotExist:
            return rc.NOT_FOUND
        # should never happen, since we're using a PK
        except self.model.MultipleObjectsReturned:
            return rc.BAD_REQUEST

    def delete(self, request, record_id=None, *args, **kwargs):
        "Function deletes object with record_id"
        if not record_id:
            return rc.BAD_REQUEST
        try:
            inst = self.model.objects.get(pk=record_id)
            inst.delete()
            return rc.DELETED
        except self.model.MultipleObjectsReturned:
            return rc.DUPLICATE_ENTRY
        except self.model.DoesNotExist:
            return rc.NOT_HERE

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

import handlers
from django.conf.urls import patterns, url
from treeio.core.api.auth import auth_engine
from treeio.core.api.doc import documentation_view
from treeio.core.api.resource import CsrfExemptResource

ad = {'authentication': auth_engine}

# news resources
updateRecordsResource = CsrfExemptResource(
    handler=handlers.UpdateRecordHandler, **ad)


urlpatterns = patterns('',
    # News
    url(r'^doc$', documentation_view, kwargs={
        'module': handlers}, name="api_news_doc"),
    url(r'^records$', updateRecordsResource,
        name="api_news_update_records"),
    url(r'^record/(?P<record_id>\d+)', updateRecordsResource,
        name="api_news_update_records"),
)

########NEW FILE########
__FILENAME__ = forms
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
News module forms
"""

from django import forms
from django.utils.translation import ugettext as _
from django.core.urlresolvers import reverse
from treeio.core.conf import settings
from treeio.core.models import UpdateRecord, ModuleSetting, Object


class UpdateRecordForm(forms.ModelForm):

    """ UpdateRecord form """

    def __init__(self, *args, **kwargs):

        self.user = kwargs.pop('user', None)
        super(UpdateRecordForm, self).__init__(*args, **kwargs)

        self.fields['body'].required = True
        self.fields['body'].label = _("Details")

        self.fields['recipients'].help_text = ""
        self.fields['recipients'].required = False
        self.fields['recipients'].widget.attrs.update({'class': 'multicomplete',
                                                       'callback': reverse('identities_ajax_access_lookup')})

        # get default permissions from settings
        try:
            conf = ModuleSetting.get_for_module(
                'treeio.core', 'default_permissions')[0]
            default_permissions = conf.value
        except:
            default_permissions = settings.HARDTREE_DEFAULT_PERMISSIONS

        if self.user and 'userallgroups' in default_permissions:
            self.fields['recipients'].initial = [
                i.id for i in self.user.other_groups.all().only('id')]
            self.fields['recipients'].initial.append(
                self.user.default_group.id)
        elif self.user and 'usergroup' in default_permissions:
            self.fields['recipients'].initial = [self.user.default_group.id]

    class Meta:

        "TaskRecordForm"
        model = UpdateRecord
        fields = ['body', 'recipients']


class UpdateRecordFilterForm(forms.ModelForm):

    """ Filter form definition """

    def __init__(self, user, *args, **kwargs):
        super(UpdateRecordFilterForm, self).__init__(*args, **kwargs)

        self.fields['author'].label = _("Author")
        self.fields['about'].label = _("About")

        self.fields['author'].required = False
        self.fields['author'].widget.attrs.update({'class': 'autocomplete',
                                                  'callback': reverse('identities_ajax_user_lookup')})

        self.fields['about'].queryset = Object.filter_permitted(
            user, Object.objects, mode='x')
        self.fields['about'].required = False
        self.fields['about'].null = True
        self.fields['about'].help_text = ""
        self.fields['about'].widget.attrs.update({'class': 'multicomplete',
                                                  'callback': reverse('core_ajax_object_lookup')})

    class Meta:

        "Filter"
        model = UpdateRecord
        fields = ('author', 'about')

########NEW FILE########
__FILENAME__ = hmodule
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
News: Hardtree module definition
"""

PROPERTIES = {
    'title': 'News',
    'details': 'Internal and external news',
    'url': '/news/',
    'system': False,
    'type': 'minor',
}

URL_PATTERNS = [
    '^/news/',
]

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        pass

    def backwards(self, orm):
        pass

    models = {

    }

    complete_apps = ['news']

########NEW FILE########
__FILENAME__ = models
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
News models
"""

########NEW FILE########
__FILENAME__ = news
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
News templatetags
"""
from coffin import template
from treeio.core.rendering import render_to_string
from jinja2 import contextfunction, Markup
from django.template import RequestContext

register = template.Library()


@contextfunction
def news_update_list(context, updates, skip_group=False):
    "Print a list of orders"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('news/tags/update_list',
                                   {'updates': updates},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(news_update_list)

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
News: test suites
"""

from django.test import TestCase
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser
from treeio.core.models import User, Group, Perspective, ModuleSetting


class NewsViewsTest(TestCase):

    "Finance functional tests for views"

    username = "test"
    password = "password"
    prepared = False

    def setUp(self):
        "Initial Setup"
        if not self.prepared:
            self.group, created = Group.objects.get_or_create(name='test')
            duser, created = DjangoUser.objects.get_or_create(
                username=self.username)
            duser.set_password(self.password)
            duser.save()
            self.user, created = User.objects.get_or_create(user=duser)
            self.user.save()
            perspective, created = Perspective.objects.get_or_create(
                name='default')
            perspective.set_default_user()
            perspective.save()
            ModuleSetting.set('default_perspective', perspective.id)

            self.client = Client()

            self.prepared = True

    ######################################
    # Testing views when user is logged in
    ######################################
    def test_news_index_login(self):
        "Test index page with login at /news/all/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('news_index'))
        self.assertEquals(response.status_code, 200)

    def test_news_top(self):
        "Test index page with login at /news/top/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('news_top'))
        self.assertEquals(response.status_code, 200)

    def test_news_my_activity(self):
        "Test index page with login at /news/my/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('news_my_activity'))
        self.assertEquals(response.status_code, 200)

    def test_news_watchlist(self):
        "Test index page with login at /news/watchlist/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('news_my_watchlist'))
        self.assertEquals(response.status_code, 200)

    ######################################
    # Testing views when user is not logged in
    ######################################
    def test_news_index(self):
        "Testing /news/"
        response = self.client.get(reverse('news'))
        # Redirects as unauthenticated
        self.assertRedirects(response, "/accounts/login")

    def test_news_top_out(self):
        "Testing /news/top/"
        response = self.client.get(reverse('news_top'))
        self.assertRedirects(response, reverse('user_login'))

    def test_news_my_activity_out(self):
        "Testing /news/my/"
        response = self.client.get(reverse('news_my_activity'))
        self.assertRedirects(response, reverse('user_login'))

    def test_news_watchlist_out(self):
        "Testing /news/watchlist/"
        response = self.client.get(reverse('news_my_watchlist'))
        self.assertRedirects(response, reverse('user_login'))

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
News module URLs
"""
from django.conf.urls.defaults import patterns, url

urlpatterns = patterns('treeio.news.views',

                       url(r'^(\.(?P<response_format>\w+))?$',
                           'index', name='news'),
                       url(r'^all(\.(?P<response_format>\w+))?$',
                           'index', name='news_index'),
                       url(r'^top(\.(?P<response_format>\w+))?$',
                           'top_news', name='news_top'),
                       url(r'^social(\.(?P<response_format>\w+))?$',
                           'index_social', name='news_social'),
                       url(r'^my(\.(?P<response_format>\w+))?$',
                           'my_activity', name='news_my_activity'),
                       url(r'^(?P<module_name>[a-z.]+)/news(\.(?P<response_format>\w+))?$',
                           'index_by_module', name='news_index_by_module'),
                       url(r'^watchlist(\.(?P<response_format>\w+))?$',
                           'my_watchlist', name='news_my_watchlist'),


                       url(r'^widget/index(\.(?P<response_format>\w+))?$',
                           'widget_news_index', name='news_widget_index'),
                       url(r'^widget/social(\.(?P<response_format>\w+))?$',
                           'widget_news_social', name='news_widget_social'),
                       )

########NEW FILE########
__FILENAME__ = views
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
News module: views
"""
from django.shortcuts import Http404
from django.template import RequestContext
from django.http import HttpResponseRedirect
from django.core.urlresolvers import reverse
from django.utils.translation import ugettext as _
from django.db.models import Q
from treeio.core.models import UpdateRecord, Module, Object, Widget
from treeio.core.rendering import render_to_response
from treeio.core.decorators import treeio_login_required, handle_response_format
from treeio.news.forms import UpdateRecordForm, UpdateRecordFilterForm
from treeio.core.rss import ObjectFeed


def _get_default_context(request):
    "Preprocess context"

    query = Q(name__icontains='account') | Q(name__icontains='news')
    modules = request.user.get_profile(
    ).get_perspective().get_modules().exclude(query)
    filters = UpdateRecordFilterForm(request.user.get_profile(), request.GET)

    context = {'modules': modules, 'filters': filters}

    return context


def _get_filter_query(user, do_permissions=True, do_recipients=True, filters={}):

    is_admin = user.is_admin()
    query = Q()

    for arg in filters:
        if hasattr(UpdateRecord, arg) and filters[arg]:
            kwargs = {str(arg + '__id'): long(filters[arg])}
            query = query & Q(**kwargs)

    if do_permissions and not is_admin:
        query = Q(about__isnull=True) | Q(about__full_access=user) | Q(
            about__full_access__isnull=True)
        query = query | Q(about__full_access=user.default_group) | Q(
            about__full_access__in=user.other_groups.all())
        query = query | Q(about__read_access=user)
        query = query | Q(about__read_access=user.default_group) | Q(
            about__read_access__in=user.other_groups.all())
        modules = Object.filter_permitted(
            user, user.get_perspective().get_modules())
        if not len(modules) == Module.objects.all().count():
            modquery = Q()
            for module in modules:
                modquery = modquery | Q(
                    about__object_type__contains=module.name)
            query = query & modquery

    if do_recipients:
        if not is_admin:
            query = query & ((~Q(author=user) | Q(record_type='share')) & (Q(recipients=user) |
                                                                           Q(recipients__isnull=True) | Q(recipients=user.default_group) |
                                                                           Q(recipients__in=user.other_groups.all())))
        else:
            query = query & (Q(record_type='share') | (~Q(author=user) & (Q(recipients=user) |
                                                                          Q(recipients__isnull=True) | Q(recipients=user.default_group) | Q(recipients__in=user.other_groups.all()))))

    return query


@handle_response_format
@treeio_login_required
def index(request, response_format='html'):
    "Default index page"

    profile = request.user.get_profile()
    query = _get_filter_query(profile, filters=request.GET)
    updates = UpdateRecord.objects.filter(query).distinct()

    if request.POST:
        record = UpdateRecord()
        record.record_type = 'share'
        form = UpdateRecordForm(request.POST, user=profile, instance=record)
        if form.is_valid():
            record = form.save()
            record.body = record.body.replace('\n', ' <br />')
            record.save()
            record.set_user_from_request(request)
            return HttpResponseRedirect(reverse('news_index'))
    else:
        form = UpdateRecordForm(user=profile)

    if response_format == 'rss':
        return ObjectFeed(title=_('All Activity'),
                          link=request.path,
                          description=_('Updates on activity in your Tree.io'),
                          objects=updates)(request)

    context = _get_default_context(request)
    context.update({'form': form,
                    'updates': updates,
                    'profile': profile})

    return render_to_response('news/index', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def index_social(request, response_format='html'):
    "Social Activity"

    profile = request.user.get_profile()
    query = _get_filter_query(
        profile, filters=request.GET) & Q(record_type='share')
    updates = UpdateRecord.objects.filter(query).distinct()

    if request.POST:
        record = UpdateRecord()
        record.record_type = 'share'
        form = UpdateRecordForm(request.POST, user=profile, instance=record)
        if form.is_valid():
            record = form.save()
            record.body = record.body.replace('\n', ' <br />')
            record.save()
            record.set_user_from_request(request)
            return HttpResponseRedirect(reverse('news_social'))
    else:
        form = UpdateRecordForm(user=profile)

    context = _get_default_context(request)
    context.update({'form': form,
                    'updates': updates,
                    'profile': profile})

    return render_to_response('news/social', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def top_news(request, response_format='html'):
    "Default index page - top news"

    profile = request.user.get_profile()
    query = _get_filter_query(profile, filters=request.GET) & Q(score__gt=0)
    updates = UpdateRecord.objects.filter(query).distinct()

    if request.POST:
        record = UpdateRecord()
        record.record_type = 'share'
        form = UpdateRecordForm(request.POST, user=profile, instance=record)
        if form.is_valid():
            record = form.save()
            record.body = record.body.replace('\n', ' <br />')
            record.save()
            record.set_user_from_request(request)
            return HttpResponseRedirect(reverse('news_index'))
    else:
        form = UpdateRecordForm(user=profile)

    if response_format == 'rss':
        return ObjectFeed(title=_('Top News'),
                          link=request.path,
                          description=_('Updates on activity in your Tree.io'),
                          objects=updates)(request)

    context = _get_default_context(request)
    context.update({'form': form,
                    'updates': updates,
                    'profile': profile})

    return render_to_response('news/top_news', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def my_watchlist(request, response_format='html'):
    "Displays news about all objects a User is subscribed to"

    profile = request.user.get_profile()
    query = _get_filter_query(profile, do_recipients=False, filters=request.GET) & Q(
        about__in=profile.subscriptions.all()) & ~Q(author=profile)
    updates = UpdateRecord.objects.filter(query).distinct()

    if request.POST:
        record = UpdateRecord()
        record.record_type = 'share'
        form = UpdateRecordForm(request.POST, user=profile, instance=record)
        if form.is_valid():
            record = form.save(commit=False)
            record.body = record.body.replace('\n', ' <br />')
            record.save()
            record.set_user_from_request(request)
            return HttpResponseRedirect(reverse('news_index'))
    else:
        form = UpdateRecordForm(user=profile)

    if response_format == 'rss':
        return ObjectFeed(title=_('My Watchlist'),
                          link=request.path,
                          description=_(
                              'Updates on your watchlist in Tree.io'),
                          objects=updates)(request)

    context = _get_default_context(request)
    context.update({'form': form,
                    'updates': updates,
                    'profile': profile})

    return render_to_response('news/my_watchlist', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def my_activity(request, response_format='html'):
    "Default index page"

    profile = request.user.get_profile()
    updates = UpdateRecord.objects.filter(author=profile).distinct()

    if request.POST:
        record = UpdateRecord()
        record.record_type = 'share'
        form = UpdateRecordForm(request.POST, user=profile, instance=record)
        if form.is_valid():
            record = form.save(commit=False)
            record.body = record.body.replace('\n', ' <br />')
            record.save()
            record.set_user_from_request(request)
            return HttpResponseRedirect(reverse('news_my_activity'))
    else:
        form = UpdateRecordForm(user=profile)

    if response_format == 'rss':
        return ObjectFeed(title=_('My Activity'),
                          link=request.path,
                          description=_('Updates on activity in your Tree.io'),
                          objects=updates)(request)

    context = _get_default_context(request)
    context.update({'form': form,
                    'updates': updates,
                    'profile': profile})

    return render_to_response('news/my_activity', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def index_by_module(request, module_name, response_format='html'):
    "Default index page"

    profile = request.user.get_profile()
    try:
        module = profile.get_perspective().get_modules().filter(
            name__icontains=module_name)[0]
    except:
        raise Http404('No such module in your Perspective')
    query = _get_filter_query(profile, filters=request.GET) & Q(
        about__object_type__icontains=module_name) & (~Q(author=profile) | Q(score__gt=0))
    updates = UpdateRecord.objects.filter(query).distinct()

    if request.POST:
        record = UpdateRecord()
        record.record_type = 'share'
        form = UpdateRecordForm(request.POST, user=profile, instance=record)
        if form.is_valid():
            record = form.save()
            record.body = record.body.replace('\n', ' <br />')
            record.save()
            record.set_user_from_request(request)
            return HttpResponseRedirect(reverse('news_index_by_module', filters=[module_name]))
    else:
        form = UpdateRecordForm(user=profile)

    if response_format == 'rss':
        return ObjectFeed(title=(_(module.title) + ' ' + _('Activity')),
                          link=request.path,
                          description=_('Updates on activity in your Tree.io'),
                          objects=updates)(request)

    context = _get_default_context(request)
    context.update({'form': form,
                    'active_module': module,
                    'updates': updates,
                    'profile': profile,
                    'module_name': module_name})

    return render_to_response('news/index_by_module', context,
                              context_instance=RequestContext(request), response_format=response_format)

#
# Widgets
#


@handle_response_format
@treeio_login_required
def widget_news_index(request, response_format='html'):
    "Widget: All Activity"

    profile = request.user.get_profile()
    query = _get_filter_query(profile) & (
        ~Q(author=profile) | Q(record_type='share') | Q(score__gt=0))
    updates = UpdateRecord.objects.filter(query).distinct()

    # don't do updates if social widget is used
    if Widget.objects.filter(user=profile, widget_name='widget_news_social').exists():
        form = None

    else:
        if request.POST:
            record = UpdateRecord()
            record.record_type = 'share'
            form = UpdateRecordForm(
                request.POST, user=profile, instance=record)
            if form.is_valid():
                record = form.save()
                record.body = record.body.replace('\n', ' <br />')
                record.save()
                record.set_user_from_request(request)
                return HttpResponseRedirect(reverse('core_dashboard_index'))
        else:
            form = UpdateRecordForm(user=profile)

    context = _get_default_context(request)
    context.update({'form': form,
                    'updates': updates,
                    'profile': profile})

    return render_to_response('news/widgets/index', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def widget_news_social(request, response_format='html'):
    "Widget: Social Activity"

    profile = request.user.get_profile()
    query = _get_filter_query(profile) & Q(record_type='share')
    updates = UpdateRecord.objects.filter(query).distinct()

    if request.POST:
        record = UpdateRecord()
        record.record_type = 'share'
        form = UpdateRecordForm(request.POST, user=profile, instance=record)
        if form.is_valid():
            record = form.save()
            record.body = record.body.replace('\n', ' <br />')
            record.save()
            record.set_user_from_request(request)
            return HttpResponseRedirect(reverse('core_dashboard_index'))
    else:
        form = UpdateRecordForm(user=profile)

    context = _get_default_context(request)
    context.update({'form': form,
                    'updates': updates,
                    'profile': profile})

    return render_to_response('news/widgets/social', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def widget_my_watchlist(request, response_format='html'):
    "Displays news about all objects a User is subscribed to"

    profile = request.user.get_profile()
    query = _get_filter_query(profile, do_recipients=False) & Q(
        about__in=profile.subscriptions.all()) & ~Q(author=profile)
    updates = UpdateRecord.objects.filter(query).distinct()

    context = _get_default_context(request)
    context.update({'updates': updates,
                    'profile': profile})

    return render_to_response('news/widgets/my_watchlist', context,
                              context_instance=RequestContext(request), response_format=response_format)

########NEW FILE########
__FILENAME__ = widgets
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
News module widgets
"""

WIDGETS = {'widget_news_index': {'title': 'News: All Activity',
                                 'size': "95%"},
           'widget_news_social': {'title': 'News: Social Activity',
                                  'size': "95%"},
           'widget_my_watchlist': {'title': 'News: My Watchlist',
                                   'size': "95%"}}


def get_widgets(request):
    "Returns a set of all available widgets"

    widgets = {}
    widgets.update(WIDGETS)

    return widgets

########NEW FILE########
__FILENAME__ = admin
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Project management: admin page
"""
from treeio.projects.models import Project, Milestone, Task, TaskTimeSlot, TaskStatus
from django.contrib import admin


class ProjectAdmin(admin.ModelAdmin):

    """ Project admin """
    list_display = ('name', 'details', 'parent', 'manager', 'client')
    search_fields = ['name']


class MilestoneAdmin(admin.ModelAdmin):

    """ Milestone admin """
    list_display = ('name', 'details', 'project')
    search_fields = ['name']


class TaskAdmin(admin.ModelAdmin):

    """ Task admin """
    list_display = (
        'name', 'details', 'project', 'priority', 'parent', 'milestone', 'caller')
    search_fields = ['name']


class TaskStatusAdmin(admin.ModelAdmin):

    """ Task status admin """
    list_display = ('name', 'details')
    search_fields = ['name']


class TaskTimeSlotAdmin(admin.ModelAdmin):

    """ Task time slot admin """
    list_display = ('task', 'time_from', 'time_to', 'timezone', 'details')
    date_hierarchy = 'time_from'
    search_fields = ['task']


class TaskRecordAdmin(admin.ModelAdmin):

    """ Task record admin """
    list_display = ('task', 'record_type')
    list_filter = ['record_type']

admin.site.register(Project, ProjectAdmin)
admin.site.register(Milestone, MilestoneAdmin)
admin.site.register(Task, TaskAdmin)
admin.site.register(TaskStatus, TaskStatusAdmin)
admin.site.register(TaskTimeSlot, TaskTimeSlotAdmin)

########NEW FILE########
__FILENAME__ = ajax
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

from datetime import datetime
from dajaxice.core import dajaxice_functions
from dajax.core import Dajax
from treeio.projects.models import Task, Milestone
from django.contrib import messages
from django.utils.translation import ugettext as _


def gantt(request, task, start, end):
    dajax = Dajax()
    try:
        t = Task.objects.get(pk=task)
        ot = _("Task")
    except:
        t = Milestone.objects.get(pk=task)
        ot = _("Milestone")
    s = datetime.strptime(start, '%Y-%m-%d').replace(hour=12)
    e = datetime.strptime(end, '%Y-%m-%d').replace(hour=12)
    t.start_date = s
    t.end_date = e
    t.save()
    messages.add_message(request, messages.INFO, _(
        "%(ot)s \"%(t)s\" dates have been updated.") % {'ot': ot, 't': unicode(t)})
    return dajax.json()

dajaxice_functions.register(gantt)

########NEW FILE########
__FILENAME__ = handlers
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

from __future__ import absolute_import, with_statement

__all__ = ['ProjectHandler',
           'TaskStatusHandler',
           'MilestoneHandler',
           'TaskHandler',
           'StartTaskTimeHandler',
           'StopTaskTimeHandler',
           'TaskTimeHandler',
           ]

from datetime import datetime
from treeio.core.api.utils import rc
from piston.handler import BaseHandler
from treeio.core.api.handlers import ObjectHandler
from treeio.projects.models import Task, Project, Milestone, TaskStatus, TaskTimeSlot
from treeio.projects.forms import ProjectForm, TaskForm, MilestoneForm, TaskStatusForm, TaskTimeSlotForm


def check_parent_perm(request, model, pk, mode):
    try:
        parent_obj = model.objects.get(pk=pk)
        return request.user.get_profile().has_permission(parent_obj, mode=mode)
    except model.DoesNotExist:
        pass
    return True


class ProjectHandler(ObjectHandler):

    "Entrypoint for Project model."

    model = Project
    form = ProjectForm

    def flatten_dict(self, dct):
        dct = super(ProjectHandler, self).flatten_dict(dct)
        dct['project_id'] = None
        return dct

    def check_create_permission(self, request, mode):
        if 'parent' in request.data:
            return check_parent_perm(request, Project, request.data['parent'], mode)
        return True

    @staticmethod
    def resource_uri():
        return ('api_projects', ['id'])


class TaskStatusHandler(ObjectHandler):

    "Entrypoint for TaskStatus model."

    model = TaskStatus
    form = TaskStatusForm

    def check_create_permission(self, request, mode):
        return request.user.get_profile().is_admin('treeio.projects')

    @staticmethod
    def resource_uri():
        return ('api_projects_status', ['id'])


class MilestoneHandler(ObjectHandler):

    "Entrypoint for Milestone model."

    model = Milestone
    form = MilestoneForm

    def flatten_dict(self, dct):
        dct = super(MilestoneHandler, self).flatten_dict(dct)
        dct['project_id'] = None
        return dct

    def check_create_permission(self, request, mode):
        if 'project' in request.data:
            return check_parent_perm(request, Project, request.data['project'], mode)
        return True

    @staticmethod
    def resource_uri():
        return ('api_projects_milestones', ['id'])


class TaskHandler(ObjectHandler):

    "Entrypoint for Task model."

    model = Task
    form = TaskForm

    def flatten_dict(self, dct):
        dct = super(TaskHandler, self).flatten_dict(dct)
        dct['parent'] = None
        dct['project_id'] = None
        dct['milestone_id'] = None
        return dct

    def check_create_permission(self, request, mode):
        if 'project' in request.data and not check_parent_perm(request, Project, request.data['project'], mode):
            return False
        if 'milestone' in request.data and not check_parent_perm(request, Milestone, request.data['milestone'], mode):
            return False
        if 'parent' in request.data and not check_parent_perm(request, Task, request.data['parent'], mode):
            return False
        else:
            request.data.setdefault('parent', None)
        return True

    @staticmethod
    def resource_uri():
        return ('api_projects_tasks', ['id'])


class StartTaskTimeHandler(BaseHandler):

    "Start TaskTimeSlot for preselected Task"

    model = True  # for auto documentation
    allowed_methods = ('GET',)

    def read(self, request, task_id, *args, **kwargs):
        try:
            task = Task.objects.get(pk=task_id)
        except Task.DoesNotExist:
            return rc.NOT_FOUND

        if not request.user.get_profile().has_permission(task, mode='x'):
            return rc.FORBIDDEN

        if not task.is_being_done_by(request.user.get_profile()):
            task_time_slot = TaskTimeSlot(
                task=task, time_from=datetime.now(), user=request.user.get_profile())
            task_time_slot.save()
            task_time_slot.set_user_from_request(request)
            return task_time_slot
        return ("The task isn't in progress", 401)

    @staticmethod
    def resource_uri():
        return ('api_projects_tasktime_start', ['task_id'])


class StopTaskTimeHandler(BaseHandler):

    "Stop TaskTimeSlot for preselected Task"

    model = True  # for auto documentation
    allowed_methods = ('POST',)

    def create(self, request, slot_id, *args, **kwargs):
        try:
            slot = TaskTimeSlot.objects.get(pk=slot_id)
        except Task.DoesNotExist:
            return rc.NOT_FOUND

        if not request.user.get_profile().has_permission(slot, mode='x'):
            return rc.FORBIDDEN

        slot.time_to = datetime.now()
        slot.details = request.data.get('details', '')
        slot.save()

        return rc.ALL_OK

    @staticmethod
    def resource_uri():
        return ('api_projects_tasktime_stop', ['slot_id'])


class TaskTimeHandler(ObjectHandler):

    "Entrypoint for TaskTime model."

    model = TaskTimeSlot
    form = TaskTimeSlotForm

    def flatten_dict(self, dct):
        dct = super(TaskTimeHandler, self).flatten_dict(dct)
        dct['task_id'] = None
        return dct

    def create_instance(self, request, *args, **kwargs):
        return TaskTimeSlot(task=request.task, time_to=datetime.now(), user=request.user.get_profile())

    def check_create_permission(self, request, mode):
        if "task" in request.data:
            try:
                parent_obj = Task.objects.get(pk=request.data["task"])
                request.task = parent_obj
                return request.user.get_profile().has_permission(parent_obj, mode=mode)
            except Task.DoesNotExist:
                pass
        return False

    def check_instance_permission(self, request, task_time_slot, mode):
        if not request.user.get_profile().has_permission(task_time_slot, mode=mode) \
                and not request.user.get_profile().has_permission(task_time_slot.task, mode=mode):
            return False
        return True

    @staticmethod
    def resource_uri():
        return ('api_projects_tasktimes', ['id'])

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
API Project Management: test suites
"""
from time import sleep
import json
from datetime import datetime
from django.test import TestCase
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser

from treeio.identities.models import Contact, ContactType
from treeio.core.models import User, Group, Perspective, ModuleSetting, Object
from treeio.projects.models import Project, Milestone, Task, TaskStatus, TaskTimeSlot


class ProjectsAPITest(TestCase):

    "Projects functional tests for api"
    username = "api_test"
    password = "api_password"
    prepared = False
    authentication_headers = {"CONTENT_TYPE": "application/json",
                              "HTTP_AUTHORIZATION": "Basic YXBpX3Rlc3Q6YXBpX3Bhc3N3b3Jk"}
    content_type = 'application/json'

    def setUp(self):
        "Initial Setup"

        if not self.prepared:
            # Clean up first
            Object.objects.all().delete()
            User.objects.all().delete()

            # Create objects

            try:
                self.group = Group.objects.get(name='api_test')
            except Group.DoesNotExist:
                Group.objects.all().delete()
                self.group = Group(name='api_test')
                self.group.save()

            try:
                self.user = DjangoUser.objects.get(username=self.username)
                self.user.set_password(self.password)
                try:
                    self.profile = self.user.get_profile()
                except Exception:
                    User.objects.all().delete()
                    self.user = DjangoUser(username=self.username, password='')
                    self.user.set_password(self.password)
                    self.user.save()
            except DjangoUser.DoesNotExist:
                User.objects.all().delete()
                self.user = DjangoUser(username=self.username, password='')
                self.user.set_password(self.password)
                self.user.save()

            try:
                perspective = Perspective.objects.get(name='default')
            except Perspective.DoesNotExist:
                Perspective.objects.all().delete()
                perspective = Perspective(name='default')
                perspective.set_default_user()
                perspective.save()

            ModuleSetting.set('default_perspective', perspective.id)

            self.contact_type = ContactType(name='api_test')
            self.contact_type.set_default_user()
            self.contact_type.save()

            self.contact = Contact(
                name='api_test', contact_type=self.contact_type)
            self.contact.set_default_user()
            self.contact.save()

            self.project = Project(
                name='api_test', manager=self.contact, client=self.contact)
            self.project.set_default_user()
            self.project.save()

            self.status = TaskStatus(name='api_test')
            self.status.set_default_user()
            self.status.save()

            self.milestone = Milestone(
                name='api_test', project=self.project, status=self.status)
            self.milestone.set_default_user()
            self.milestone.save()

            self.task = Task(
                name='api_test', project=self.project, status=self.status, priority=3)
            self.task.set_default_user()
            self.task.save()

            self.time_slot = TaskTimeSlot(
                task=self.task, details='api_test', time_from=datetime.now(), user=self.user.get_profile())
            self.time_slot.set_default_user()
            self.time_slot.save()

            self.parent = Project(name='api_test')
            self.parent.set_default_user()
            self.parent.save()

            self.parent_task = Task(
                name='api_test', project=self.project, status=self.status, priority=3)
            self.parent_task.set_default_user()
            self.parent_task.save()

            self.client = Client()

            self.prepared = True

    def test_unauthenticated_access(self):
        "Test index page at /projects"
        response = self.client.get('/api/projects/projects')
        # Redirects as unauthenticated
        self.assertEquals(response.status_code, 401)

    # Get info about projects, milestones, status, tasks, tasktimes.

    def test_get_project_list(self):
        """ Test index page api/projects """
        response = self.client.get(
            path=reverse('api_projects'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_status_list(self):
        """ Test index page api/status """
        response = self.client.get(
            path=reverse('api_projects_status'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_milestones_list(self):
        """ Test index page api/milestones """
        response = self.client.get(
            path=reverse('api_projects_milestones'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_task_list(self):
        """ Test index page api/tasks """
        response = self.client.get(
            path=reverse('api_projects_tasks'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_tasktimes_list(self):
        """ Test index page api/tasktimes """
        response = self.client.get(
            path=reverse('api_projects_tasktimes'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_project(self):
        response = self.client.get(reverse(
            'api_projects', kwargs={'object_ptr': self.project.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['id'], self.project.id)
        self.assertEquals(data['name'], self.project.name)
        self.assertEquals(data['details'], self.project.details)

    def test_get_status(self):
        response = self.client.get(reverse('api_projects_status', kwargs={
                                   'object_ptr': self.status.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['id'], self.status.id)
        self.assertEquals(data['name'], self.status.name)

    def test_get_milestone(self):
        response = self.client.get(reverse('api_projects_milestones', kwargs={
                                   'object_ptr': self.milestone.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['id'], self.milestone.id)
        self.assertEquals(data['name'], self.milestone.name)
        self.assertEquals(data['project']['id'], self.milestone.project.id)
        self.assertEquals(data['status']['id'], self.milestone.status.id)

    def test_get_task(self):
        response = self.client.get(reverse('api_projects_tasks', kwargs={
                                   'object_ptr': self.task.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['id'], self.task.id)
        self.assertEquals(data['name'], self.task.name)
        self.assertEquals(data['priority'], self.task.priority)
        self.assertEquals(data['project']['id'], self.task.project.id)
        self.assertEquals(data['status']['id'], self.task.status.id)

    def test_get_timeslot(self):
        response = self.client.get(reverse('api_projects_tasktimes', kwargs={
                                   'object_ptr': self.time_slot.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['id'], self.time_slot.id)
        self.assertEquals(data['task']['id'], self.time_slot.task.id)

    # Common test

    def test_common_project(self):

        # create new project
        new_project = {'name': 'api test',
                       'details': '<p>test details</p>'}
        response = self.client.post(reverse('api_projects'), data=json.dumps(new_project),
                                    content_type=self.content_type, **self.authentication_headers)
        # print response.request
        self.assertEquals(response.status_code, 200)

        # check data in response
        data = json.loads(response.content)
        self.assertEquals(data['name'], new_project['name'])
        self.assertEquals(data['details'], new_project['details'])
        project_id = data['id']

        # get info about new project
        response = self.client.get(path=reverse(
            'api_projects', kwargs={'object_ptr': project_id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        # get statuses list
        response = self.client.get(
            path=reverse('api_projects_status'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        statuses = json.loads(response.content)
        fstatus = statuses[0]['id']

        # create new task status
        new_status = {'name': 'Open api test',
                      'active': True,
                      'hidden': False,
                      'details': '<p>test details</p>'}
        response = self.client.post(reverse('api_projects_status'), data=json.dumps(new_status),
                                    content_type=self.content_type, **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], new_status['name'])
        self.assertEquals(data['active'], new_status['active'])
        self.assertEquals(data['hidden'], new_status['hidden'])
        self.assertEquals(data['details'], new_status['details'])
        sstatus = data['id']

        # create new milestone
        new_milestone = {'name': 'api test milestone',
                         'status': fstatus,
                         'project': project_id,
                         'start_date': '2011-06-09 12:00:00',
                         'details': '<p>test details</p>'}
        response = self.client.post(reverse('api_projects_milestones'), data=json.dumps(new_milestone),
                                    content_type=self.content_type, **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], new_milestone['name'])
        self.assertEquals(data['status']['id'], new_milestone['status'])
        self.assertEquals(data['project']['id'], new_milestone['project'])
        self.assertEquals(data['details'], new_milestone['details'])
        milestone_id = data['id']

        #  create new task
        new_task = {'name': 'api test task',
                    'status': sstatus,
                    'project': project_id,
                    'milestone': milestone_id,
                    'priority': 5,
                    'start_date': '2011-06-02 12:00:00',
                    'estimated_time': 5000,
                    'details': '<p>test details</p>'
                    }
        response = self.client.post(reverse('api_projects_tasks'), data=json.dumps(new_task),
                                    content_type=self.content_type, **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], new_task['name'])
        self.assertEquals(data['priority'], new_task['priority'])
        self.assertEquals(data['status']['id'], new_task['status'])
        self.assertEquals(data['project']['id'], new_task['project'])
        self.assertEquals(data['milestone']['id'], new_task['milestone'])
        self.assertEquals(data['estimated_time'], new_task['estimated_time'])
        self.assertEquals(data['details'], new_task['details'])
        task_id = data['id']

        # create new subtask
        new_sub_task = {'name': 'api test task',
                        'status': sstatus,
                        'parent': task_id,
                        'project': project_id,
                        'priority': 5,
                        'start_date': '2011-06-02 13:00:00',
                        'estimated_time': 2500,
                        'details': '<p>test details</p>'
                        }

        response = self.client.post(reverse('api_projects_tasks'), data=json.dumps(new_sub_task),
                                    content_type=self.content_type, **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], new_sub_task['name'])
        self.assertEquals(data['priority'], new_sub_task['priority'])
        self.assertEquals(data['status']['id'], new_sub_task['status'])
        self.assertEquals(data['parent']['id'], new_sub_task['parent'])
        self.assertEquals(data['project']['id'], new_sub_task['project'])
        self.assertEquals(
            data['estimated_time'], new_sub_task['estimated_time'])
        self.assertEquals(data['details'], new_sub_task['details'])
        sub_task_id = data['id']

        # create task time
        new_tasktime = {'task': task_id,
                        'minutes': 400,
                        'details': '<p>test details</p>'
                        }

        response = self.client.post(reverse('api_projects_tasktimes'), data=json.dumps(new_tasktime),
                                    content_type=self.content_type, **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['task']['id'], new_tasktime['task'])
        self.assertEquals(data['details'], new_tasktime['details'])
        tasktime_id = data['id']

        # start task time
        response = self.client.get(path=reverse('api_projects_tasktime_start', kwargs={
                                   'task_id': sub_task_id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        slot_id = data['id']

        sleep(60)

        # stop task time
        response = self.client.post(reverse('api_projects_tasktime_stop', kwargs={'slot_id': slot_id}), data=json.dumps({'details': '<p>test details</p>'}),
                                    content_type=self.content_type, **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        # delete task time
        response = self.client.delete(reverse('api_projects_tasktimes', kwargs={
                                      'object_ptr': tasktime_id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 204)

        # delete task
        response = self.client.delete(reverse(
            'api_projects_tasks', kwargs={'object_ptr': task_id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 204)

        # check subtask
        response = self.client.get(path=reverse('api_projects_tasks', kwargs={
                                   'object_ptr': sub_task_id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 404)

        # delete milestone
        response = self.client.delete(reverse('api_projects_milestones', kwargs={
                                      'object_ptr': milestone_id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 204)

        # delete status
        response = self.client.delete(reverse(
            'api_projects_status', kwargs={'object_ptr': sstatus}), **self.authentication_headers)
        self.assertEquals(response.status_code, 204)

        # delete project
        response = self.client.delete(reverse(
            'api_projects', kwargs={'object_ptr': project_id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 204)

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

import handlers
from django.conf.urls import patterns, url
from treeio.core.api.auth import auth_engine
from treeio.core.api.doc import documentation_view
from treeio.core.api.resource import CsrfExemptResource

ad = {'authentication': auth_engine}

# projects resources
taskResource = CsrfExemptResource(handler=handlers.TaskHandler, **ad)
projectResource = CsrfExemptResource(handler=handlers.ProjectHandler, **ad)
statusResource = CsrfExemptResource(handler=handlers.TaskStatusHandler, **ad)
taskTimeResource = CsrfExemptResource(handler=handlers.TaskTimeHandler, **ad)
milestoneResource = CsrfExemptResource(handler=handlers.MilestoneHandler, **ad)
startTimeResource = CsrfExemptResource(
    handler=handlers.StartTaskTimeHandler, **ad)
stopTimeResource = CsrfExemptResource(
    handler=handlers.StopTaskTimeHandler, **ad)

urlpatterns = patterns('',
    # Projects
    url(r'^doc$', documentation_view, kwargs={
        'module': handlers}, name="api_projects_doc"),
    url(r'^projects$', projectResource,
        name="api_projects"),
    url(r'^project/(?P<object_ptr>\d+)',
        projectResource, name="api_projects"),
    url(r'^status$', statusResource,
        name="api_projects_status"),
    url(r'^status/(?P<object_ptr>\d+)',
        statusResource, name="api_projects_status"),
    url(r'^milestones$', milestoneResource,
        name="api_projects_milestones"),
    url(r'^milestone/(?P<object_ptr>\d+)',
        milestoneResource, name="api_projects_milestones"),
    url(r'^tasks$', taskResource,
        name="api_projects_tasks"),
    url(r'^task/(?P<object_ptr>\d+)',
        taskResource, name="api_projects_tasks"),
    url(r'^task/times$', taskTimeResource,
        name="api_projects_tasktimes"),
    url(r'^task/time/(?P<object_ptr>\d+)',
        taskTimeResource, name="api_projects_tasktimes"),
    url(r'^task/time_start/(?P<task_id>\d+)',
        startTimeResource, name='api_projects_tasktime_start'),
    url(r'^task/time_stop/(?P<slot_id>\d+)',
        stopTimeResource, name='api_projects_tasktime_stop'),
)

########NEW FILE########
__FILENAME__ = events
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Projects integration with Events module

Provides Tasks and Milestones as EventRenderer instances
"""

from treeio.projects.models import Task, Milestone
from treeio.core.models import Object
from treeio.events.rendering import EventRenderer
from django.db.models import Q


def get_events(request):
    "Return a list of EventRenderers from available Tasks and Milestones"
    events = []

    query = (Q(start_date__isnull=False) | Q(end_date__isnull=False)) & Q(
        status__hidden=False)
    tasks = Object.filter_by_request(
        request, manager=Task.objects.filter(query))
    for task in tasks:
        if task.end_date:
            event = EventRenderer(
                task.name, task.start_date, task.end_date, task.get_absolute_url())
        else:
            event = EventRenderer(
                task.name, None, task.start_date, task.get_absolute_url())
        event.css_class += " projects-calendar-task"
        events.append(event)

    query = (Q(start_date__isnull=False) | Q(end_date__isnull=False)) & Q(
        status__hidden=False)
    milestones = Object.filter_by_request(
        request, manager=Milestone.objects.filter(query))
    for milestone in milestones:
        name = "&nbsp;&nbsp;&nbsp;&nbsp;" + milestone.name
        if milestone.end_date:
            event = EventRenderer(name, milestone.start_date, milestone.end_date,
                                  milestone.get_absolute_url())
        else:
            event = EventRenderer(
                name, None, milestone.start_date, milestone.get_absolute_url())
        event.css_class += " projects-calendar-milestone"
        events.append(event)

    return events

########NEW FILE########
__FILENAME__ = forms
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Project management forms
"""
from django.forms import ModelForm, CharField, TextInput, Form, ModelChoiceField, IntegerField, ChoiceField
from treeio.projects.models import Project, Milestone, Task, TaskTimeSlot, TaskStatus
from treeio.core.models import Object, ModuleSetting, UpdateRecord
from treeio.identities.models import Contact
from datetime import timedelta
from django.core.urlresolvers import reverse
from django.utils.translation import ugettext as _
from treeio.core.decorators import preprocess_form
preprocess_form()


class SettingsForm(Form):

    """ Administration settings form """

    default_task_status = ModelChoiceField(
        label='Default Task Status', queryset=[])

    def __init__(self, user, *args, **kwargs):
        "Sets choices and initial value"
        super(SettingsForm, self).__init__(*args, **kwargs)
        self.fields['default_task_status'].queryset = Object.filter_permitted(user,
                                                                              TaskStatus.objects, mode='x')

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.projects', 'default_task_status')[0]
            default_task_status = TaskStatus.objects.get(pk=long(conf.value))
            self.fields['default_task_status'].initial = default_task_status.id
        except Exception:
            pass

    def save(self):
        "Form processor"
        try:
            ModuleSetting.set_for_module('default_task_status',
                                         self.cleaned_data[
                                             'default_task_status'].id,
                                         'treeio.projects')

        except Exception:
            return False


class MassActionForm(Form):

    """ Mass action form for Tasks and Milestones """

    status = ModelChoiceField(queryset=[], required=False)
    project = ModelChoiceField(queryset=[], required=False)
    milestone = ModelChoiceField(queryset=[], required=False)
    delete = ChoiceField(label=_("Delete"), choices=(('', '-----'), ('delete', _('Delete Completely')),
                                                     ('trash', _('Move to Trash'))), required=False)
    instance = None

    def __init__(self, user, *args, **kwargs):
        if 'instance' in kwargs:
            self.instance = kwargs['instance']
            del kwargs['instance']

        super(MassActionForm, self).__init__(*args, **kwargs)

        self.fields['status'].queryset = Object.filter_permitted(
            user, TaskStatus.objects, mode='x')
        self.fields['status'].label = _("Mark as")
        self.fields['project'].queryset = Object.filter_permitted(
            user, Project.objects, mode='x')
        self.fields['project'].label = _("Move to Project")
        self.fields['milestone'].queryset = Object.filter_permitted(
            user, Milestone.objects, mode='x')
        self.fields['milestone'].label = _("Move to Milestone")
        self.fields['delete'] = ChoiceField(label=_("Delete"), choices=(('', '-----'),
                                                                        ('delete', _(
                                                                            'Delete Completely')),
                                                                        ('trash', _('Move to Trash'))), required=False)

    def save(self, *args, **kwargs):
        "Save override to omit empty fields"
        if self.instance:
            if self.is_valid():
                if self.cleaned_data['project']:
                    self.instance.project = self.cleaned_data['project']
                if self.cleaned_data['status']:
                    self.instance.status = self.cleaned_data['status']
                if self.cleaned_data['milestone']:
                    self.instance.milestone = self.cleaned_data['milestone']
                self.instance.save()
                if self.cleaned_data['delete']:
                    if self.cleaned_data['delete'] == 'delete':
                        self.instance.delete()
                    if self.cleaned_data['delete'] == 'trash':
                        self.instance.trash = True
                        self.instance.save()


class ProjectForm(ModelForm):

    """ Project form """
    name = CharField(widget=TextInput(attrs={'size': '50'}))

    def __init__(self, user, project_id, *args, **kwargs):
        super(ProjectForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")

        self.fields['parent'].queryset = Object.filter_permitted(
            user, Project.objects, mode='x')
        self.fields['parent'].label = _("Parent")
        if project_id:
            self.fields['parent'].initial = project_id

        self.fields['manager'].queryset = Object.filter_permitted(
            user, Contact.objects, mode='x')
        self.fields['manager'].label = _("Manager")
        self.fields['manager'].widget.attrs.update({'class': 'autocomplete',
                                                    'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['manager'].widget.attrs.update(
            {'popuplink': reverse('identities_contact_add')})

        self.fields['client'].label = _("Client")
        self.fields['client'].queryset = Object.filter_permitted(
            user, Contact.objects, mode='x')
        self.fields['client'].widget.attrs.update({'class': 'autocomplete',
                                                   'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['client'].widget.attrs.update(
            {'popuplink': reverse('identities_contact_add')})

        self.fields['details'].label = _("Details")

    class Meta:

        "Project"
        model = Project
        fields = ('name', 'parent', 'manager', 'client', 'details')


class MilestoneForm(ModelForm):

    """ Milestone form """
    name = CharField(widget=TextInput(attrs={'size': '50'}))

    def __init__(self, user, project_id, *args, **kwargs):
        super(MilestoneForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")

        self.fields['project'].label = _("Project")
        self.fields['project'].queryset = Object.filter_permitted(
            user, Project.objects, mode='x')
        if project_id:
            self.fields['project'].initial = project_id

        self.fields['status'].label = _("Status")
        self.fields['status'].queryset = Object.filter_permitted(
            user, TaskStatus.objects, mode='x')
        try:
            conf = ModuleSetting.get_for_module(
                'treeio.projects', 'default_task_status')[0]
            self.fields['status'].initial = long(conf.value)
        except Exception:
            pass

        # Set datepicker
        self.fields['start_date'].label = _("Start date")
        self.fields['start_date'].widget.attrs.update(
            {'class': 'datetimepicker'})
        self.fields['end_date'].label = _("End date")
        self.fields['end_date'].widget.attrs.update(
            {'class': 'datetimepicker'})

        if 'instance' in kwargs:
            instance = kwargs['instance']
            if instance.start_date:
                self.fields['start_date'].widget.attrs.update(
                    {'initial': instance.start_date.strftime('%s')})
            if instance.end_date:
                self.fields['end_date'].widget.attrs.update(
                    {'initial': instance.end_date.strftime('%s')})

        self.fields['details'].label = _("Details")

    class Meta:

        "Milestone"
        model = Milestone
        fields = (
            'name', 'project', 'status', 'start_date', 'end_date', 'details')


class TaskForm(ModelForm):

    """ Task form """
    name = CharField(widget=TextInput(attrs={'size': '50'}))

    def __init__(self, user, parent, project_id, milestone_id, *args, **kwargs):
        "Populates form with fields from given Project"
        super(TaskForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")
        self.fields['name'].widget.attrs.update({'class': 'duplicates',
                                                 'callback': reverse('projects_ajax_task_lookup')})

        self.fields['status'].label = _("Status")
        self.fields['status'].queryset = Object.filter_permitted(
            user, TaskStatus.objects, mode='x')
        try:
            conf = ModuleSetting.get_for_module(
                'treeio.projects', 'default_task_status')[0]
            self.fields['status'].initial = long(conf.value)
        except Exception:
            pass

        self.user = user

        self.fields['assigned'].label = _("Assigned")
        self.fields['assigned'].help_text = ""
        self.fields['assigned'].widget.attrs.update({'class': 'multicomplete',
                                                     'callback': reverse('identities_ajax_user_lookup')})

        self.fields['caller'].label = _("Caller")
        self.fields['caller'].queryset = Object.filter_permitted(
            user, Contact.objects, mode='x')

        if not self.instance.id:
            contact = user.get_contact()
            if contact:
                self.fields['caller'].initial = contact.id
                self.instance.caller = contact

        self.fields['caller'].widget.attrs.update({'class': 'autocomplete',
                                                   'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['caller'].widget.attrs.update(
            {'popuplink': reverse('identities_contact_add')})

        self.fields['project'].label = _("Project")
        self.fields['project'].queryset = Object.filter_permitted(
            user, Project.objects, mode='x')
        if project_id:
            self.fields['project'].initial = project_id

        self.fields['milestone'].label = _("Milestone")
        self.fields['milestone'].queryset = Object.filter_permitted(
            user, Milestone.objects, mode='x')
        if milestone_id:
            self.fields['milestone'].initial = milestone_id

        self.fields['parent'].label = _("Parent")
        self.fields['parent'].widget.attrs.update({'class': 'autocomplete',
                                                   'callback': reverse('projects_ajax_task_lookup')})

        self.fields['depends'].label = _("Depends on")
        self.fields['depends'].widget.attrs.update({'class': 'autocomplete',
                                                   'callback': reverse('projects_ajax_task_lookup')})

        self.fields['milestone'].queryset = Object.filter_permitted(
            user, Milestone.objects, mode='x')
        self.fields['parent'].queryset = Object.filter_permitted(
            user, Task.objects, mode='x')

        self.fields['priority'].label = _("Priority")
        self.fields['priority'].initial = 3
        self.fields['priority'].choices = ((5, _('Highest')), (
            4, _('High')), (3, _('Normal')), (2, _('Low')), (1, _('Lowest')))

        self.fields['parent'].queryset = Object.filter_permitted(
            user, Task.objects, mode='x')
        if parent:
            self.fields['parent'].initial = parent.id
            self.fields['project'].initial = parent.project_id
            if parent.milestone_id:
                self.fields['milestone'].initial = parent.milestone_id

        # Set datepicker
        self.fields['start_date'].label = _("Start date")
        self.fields['start_date'].widget.attrs.update(
            {'class': 'datetimepicker'})
        self.fields['end_date'].label = _("End date")
        self.fields['end_date'].widget.attrs.update(
            {'class': 'datetimepicker'})

        if 'instance' in kwargs:
            instance = kwargs['instance']
            if instance.start_date:
                self.fields['start_date'].widget.attrs.update(
                    {'initial': instance.start_date.strftime('%s')})
            if instance.end_date:
                self.fields['end_date'].widget.attrs.update(
                    {'initial': instance.end_date.strftime('%s')})

        self.fields['details'].label = _("Details")
        self.fields['estimated_time'].label = _("Estimated time")
        self.fields['estimated_time'].help_text = _("minutes")

    def old_save(self, *args, **kwargs):
        "Override save to set Subscribers and send Notifications"
        original = None
        original_assigned = []
        if hasattr(self, 'instance'):
            try:
                original = Task.objects.get(pk=self.instance.id)
                original_assigned = list(original.assigned.all())
            except Task.DoesNotExist:
                pass

        instance = super(TaskForm, self).save(*args, **kwargs)

        if original:
            new_assigned = list(self.cleaned_data['assigned'])
            if original_assigned != new_assigned:
                for assignee in new_assigned:
                    self.instance.subscribers.add(assignee)

        return instance

    class Meta:

        "Task"
        model = Task
        fields = ('name', 'parent', 'depends', 'assigned', 'project', 'milestone', 'caller',
                  'priority', 'status', 'start_date', 'end_date', 'estimated_time', 'details')


class TaskTimeSlotForm(ModelForm):

    """ Task time slot form """
    minutes = IntegerField(widget=TextInput(attrs={'size': '5'}))

    def __init__(self, user, task_id, *args, **kwargs):
        super(TaskTimeSlotForm, self).__init__(*args, **kwargs)

        self.fields['time_from'].label = _("Started")
        self.fields['time_to'].label = _("Finished")

        # Set datepicker
        self.fields['time_from'].widget.attrs.update(
            {'class': 'datetimepicker'})
        self.fields['time_to'].widget.attrs.update({'class': 'datetimepicker'})

        if 'instance' in kwargs:
            instance = kwargs['instance']
            if instance.time_from:
                self.fields['time_from'].widget.attrs.update(
                    {'initial': instance.time_from.strftime('%s')})
            if instance.time_to:
                self.fields['time_to'].widget.attrs.update(
                    {'initial': instance.time_to.strftime('%s')})

        self.fields['minutes'].label = _("Minutes")
        self.fields['details'].label = _("Details")
        self.fields['details'].widget.attrs.update({'class': 'no-editor'})

        if 'instance' in kwargs:
            self.instance = kwargs['instance']
            if self.instance.id:
                del self.fields['minutes']
            else:
                del self.fields['time_from']
                del self.fields['time_to']
        else:
            del self.fields['time_from']
            del self.fields['time_to']

    def save(self, *args, **kwargs):
        "Override to auto-set time_from and time_to"
        if hasattr(self, 'instance') and self.instance.time_to and not self.instance.time_from:
            minutes = long(self.cleaned_data['minutes'])
            hours = 0L
            days = 0L
            if minutes >= 1440:
                hours = minutes // 60
                minutes %= 60
            if hours >= 24:
                days = hours // 24
                hours %= 24
            delta = timedelta(days=days, hours=hours, minutes=minutes)
            self.instance.time_from = self.instance.time_to - delta

        return super(TaskTimeSlotForm, self).save(*args, **kwargs)

    class Meta:

        "TaskTimeSlot"
        model = TaskTimeSlot
        fields = ('time_from', 'time_to', 'minutes', 'details')


class TaskStatusForm(ModelForm):

    """ TaskStatus form """
    name = CharField(widget=TextInput(attrs={'size': '30'}))

    def __init__(self, user, *args, **kwargs):
        super(TaskStatusForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")
        self.fields['active'].label = _("Active")
        self.fields['hidden'].label = _("Hidden")
        self.fields['details'].label = _("Details")

    class Meta:

        "TaskStatus"
        model = TaskStatus
        fields = ('name', 'active', 'hidden', 'details')


class FilterForm(ModelForm):

    """ Filter form definition """

    def __init__(self, user, skip=[], *args, **kwargs):
        super(FilterForm, self).__init__(*args, **kwargs)

        self.fields['caller'].label = _("Caller")
        if 'caller' in skip:
            del self.fields['caller']
        else:
            self.fields['caller'].queryset = Object.filter_permitted(
                user, Contact.objects, mode='x')
            self.fields['caller'].required = False
            self.fields['caller'].widget.attrs.update({'class': 'autocomplete',
                                                       'callback': reverse('identities_ajax_contact_lookup')})

        self.fields['status'].label = _("Status")
        if 'status' in skip:
            del self.fields['status']
        else:
            self.fields['status'].queryset = Object.filter_permitted(
                user, TaskStatus.objects, mode='x')
            self.fields['status'].required = False

        self.fields['assigned'].label = _("Assigned")
        self.fields['assigned'].widget.attrs.update({'class': 'multicomplete',
                                                     'callback': reverse('identities_ajax_user_lookup')})
        if 'assigned' in skip:
            del self.fields['assigned']
        else:
            self.fields['assigned'].help_text = ""

        self.fields['project'].label = _("Project")
        if 'project' in skip:
            del self.fields['project']
        else:
            self.fields['project'].queryset = Object.filter_permitted(
                user, Project.objects, mode='x')
            self.fields['project'].required = False

        self.fields['milestone'].label = _("Milestone")
        if 'milestone' in skip:
            del self.fields['milestone']
        else:
            self.fields['milestone'].queryset = Object.filter_permitted(
                user, Milestone.objects, mode='x')

    class Meta:

        "FilterForm"
        model = Task
        fields = ('caller', 'status', 'project', 'milestone', 'assigned')


class TaskRecordForm(ModelForm):

    """ TaskRecord form """

    def __init__(self, user, *args, **kwargs):
        super(TaskRecordForm, self).__init__(*args, **kwargs)

        self.fields['body'].required = True
        self.fields['body'].label = _("Details")

    class Meta:

        "TaskRecordForm"
        model = UpdateRecord
        fields = ['body']

########NEW FILE########
__FILENAME__ = hmodule
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Project Management: Hardtree module definition
"""

PROPERTIES = {
    'title': 'Projects',
    'details': 'Manage your projects',
    'url': '/projects/',
    'system': False,
    'type': 'major'
}

URL_PATTERNS = [
    '^/projects/',
]

########NEW FILE########
__FILENAME__ = identities
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Handle objects from this module relevant to a Contact or a User
"""
from treeio.core.models import Object
from treeio.projects.templatetags.projects import projects_task_list

CONTACT_OBJECTS = {}
CONTACT_OBJECTS['manager'] = {'label': 'Managed Projects',
                              'objects': [],
                              'templatetag': None}
CONTACT_OBJECTS['client'] = {'label': 'Ordered Projects',
                             'objects': [],
                             'templatetag': None}
CONTACT_OBJECTS['task_set'] = {'label': 'Managed Tasks',
                               'objects': [],
                               'templatetag': projects_task_list}

USER_OBJECTS = {}
USER_OBJECTS['task_set'] = {'label': 'Assigned Tasks',
                            'objects': [],
                            'templatetag': projects_task_list}


def get_contact_objects(current_user, contact):
    """
    Returns a dictionary with keys specified as contact attributes
    and values as dictionaries with labels and set of relevant objects.
    """

    objects = dict(CONTACT_OBJECTS)

    for key in objects:
        if hasattr(contact, key):
            manager = getattr(contact, key)
            try:
                manager = manager.filter(status__hidden=False)
            except:
                pass
            objects[key]['objects'] = Object.filter_permitted(
                current_user, manager)

    return objects


def get_user_objects(current_user, user):
    """
    Returns a dictionary with keys specified as contact attributes
    and values as dictionaries with labels and set of relevant objects.
    """

    objects = dict(USER_OBJECTS)

    for key in objects:
        if hasattr(user, key):
            manager = getattr(user, key)
            try:
                manager = manager.filter(status__hidden=False)
            except:
                pass
            objects[key]['objects'] = Object.filter_permitted(
                current_user, manager)

    return objects

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding model 'Project'
        db.create_table('projects_project', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=255)),
            ('parent', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='child_set', null=True, to=orm['projects.Project'])),
            ('manager', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='manager', null=True, to=orm['identities.Contact'])),
            ('client', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='client', null=True, to=orm['identities.Contact'])),
            ('details', self.gf('django.db.models.fields.TextField')
             (max_length=255, null=True, blank=True)),
        ))
        db.send_create_signal('projects', ['Project'])

        # Adding model 'TaskStatus'
        db.create_table('projects_taskstatus', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=255)),
            ('details', self.gf('django.db.models.fields.TextField')
             (max_length=255, null=True, blank=True)),
            ('active', self.gf('django.db.models.fields.BooleanField')
             (default=False)),
            ('hidden', self.gf('django.db.models.fields.BooleanField')
             (default=False)),
        ))
        db.send_create_signal('projects', ['TaskStatus'])

        # Adding model 'Milestone'
        db.create_table('projects_milestone', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('project', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['projects.Project'])),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=255)),
            ('status', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['projects.TaskStatus'])),
            ('details', self.gf('django.db.models.fields.TextField')
             (max_length=255, null=True, blank=True)),
            ('start_date', self.gf('django.db.models.fields.DateTimeField')
             (null=True, blank=True)),
            ('end_date', self.gf('django.db.models.fields.DateTimeField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('projects', ['Milestone'])

        # Adding model 'Task'
        db.create_table('projects_task', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('parent', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='child_set', null=True, to=orm['projects.Task'])),
            ('project', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['projects.Project'])),
            ('milestone', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['projects.Milestone'], null=True, blank=True)),
            ('status', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['projects.TaskStatus'])),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=255)),
            ('details', self.gf('django.db.models.fields.TextField')
             (max_length=255, null=True, blank=True)),
            ('caller', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['identities.Contact'], null=True, blank=True)),
            ('start_date', self.gf('django.db.models.fields.DateTimeField')
             (null=True, blank=True)),
            ('end_date', self.gf('django.db.models.fields.DateTimeField')
             (null=True, blank=True)),
            ('priority', self.gf(
                'django.db.models.fields.IntegerField')(default=3)),
            ('estimated_time', self.gf('django.db.models.fields.IntegerField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('projects', ['Task'])

        # Adding M2M table for field assigned on 'Task'
        db.create_table('projects_task_assigned', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('task', models.ForeignKey(orm['projects.task'], null=False)),
            ('user', models.ForeignKey(orm['core.user'], null=False))
        ))
        db.create_unique('projects_task_assigned', ['task_id', 'user_id'])

        # Adding model 'TaskTimeSlot'
        db.create_table('projects_tasktimeslot', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('task', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['projects.Task'])),
            ('time_from', self.gf('django.db.models.fields.DateTimeField')()),
            ('time_to', self.gf('django.db.models.fields.DateTimeField')
             (null=True, blank=True)),
            ('timezone', self.gf(
                'django.db.models.fields.IntegerField')(default=0)),
            ('details', self.gf('django.db.models.fields.TextField')
             (max_length=255, null=True, blank=True)),
        ))
        db.send_create_signal('projects', ['TaskTimeSlot'])

        # Adding model 'TaskRecord'
        db.create_table('projects_taskrecord', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('task', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['projects.Task'])),
            ('record_type', self.gf(
                'django.db.models.fields.CharField')(max_length=256)),
            ('details', self.gf('django.db.models.fields.TextField')()),
        ))
        db.send_create_signal('projects', ['TaskRecord'])

    def backwards(self, orm):

        # Deleting model 'Project'
        db.delete_table('projects_project')

        # Deleting model 'TaskStatus'
        db.delete_table('projects_taskstatus')

        # Deleting model 'Milestone'
        db.delete_table('projects_milestone')

        # Deleting model 'Task'
        db.delete_table('projects_task')

        # Removing M2M table for field assigned on 'Task'
        db.delete_table('projects_task_assigned')

        # Deleting model 'TaskTimeSlot'
        db.delete_table('projects_tasktimeslot')

        # Deleting model 'TaskRecord'
        db.delete_table('projects_taskrecord')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'everybody_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']"}),
            'group_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"}),
            'user_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'projects.milestone': {
            'Meta': {'ordering': "['name']", 'object_name': 'Milestone', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'end_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']"}),
            'start_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.TaskStatus']"})
        },
        'projects.project': {
            'Meta': {'ordering': "['name']", 'object_name': 'Project', '_ormbases': ['core.Object']},
            'client': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'client'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'manager': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'manager'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['projects.Project']"})
        },
        'projects.task': {
            'Meta': {'ordering': "('-priority', 'name')", 'object_name': 'Task', '_ormbases': ['core.Object']},
            'assigned': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'caller': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']", 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'end_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'estimated_time': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'milestone': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Milestone']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['projects.Task']"}),
            'priority': ('django.db.models.fields.IntegerField', [], {'default': '3'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']"}),
            'start_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.TaskStatus']"})
        },
        'projects.taskrecord': {
            'Meta': {'object_name': 'TaskRecord', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'record_type': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'task': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Task']"})
        },
        'projects.taskstatus': {
            'Meta': {'ordering': "('hidden', '-active', 'name')", 'object_name': 'TaskStatus', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'projects.tasktimeslot': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'TaskTimeSlot', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'task': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Task']"}),
            'time_from': ('django.db.models.fields.DateTimeField', [], {}),
            'time_to': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'timezone': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['projects']

########NEW FILE########
__FILENAME__ = 0002_updaterecords
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models


class Migration(DataMigration):

    def forwards(self, orm):
        "Migrate the UpdateRecords"
        for record in orm['projects.TaskRecord'].objects.all():
            update = orm['core.UpdateRecord'].objects.create()
            update.author = record.creator
            if record.record_type == 'manual':
                update.record_type = 'manual'
            else:
                update.record_type = 'update'
            update.body = record.details
            update.date_created = record.date_created
            update.save()
            try:
                update.about.add(record.task)
            except:
                pass

    def backwards(self, orm):
        raise RuntimeError("Cannot reverse this migration.")

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.updaterecord': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'UpdateRecord'},
            'about': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Object']"}),
            'author': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'sent_updates'", 'null': 'True', 'to': "orm['core.User']"}),
            'body': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_on_updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'format_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'format_strings': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'recipients': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'received_updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'record_type': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'sent_updates'", 'null': 'True', 'to': "orm['core.Object']"}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.AccessEntity']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.AccessEntity']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'projects.milestone': {
            'Meta': {'ordering': "['name']", 'object_name': 'Milestone', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'end_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']"}),
            'start_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.TaskStatus']"})
        },
        'projects.project': {
            'Meta': {'ordering': "['name']", 'object_name': 'Project', '_ormbases': ['core.Object']},
            'client': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'client'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'manager': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'manager'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['projects.Project']"})
        },
        'projects.task': {
            'Meta': {'ordering': "('-priority', 'name')", 'object_name': 'Task', '_ormbases': ['core.Object']},
            'assigned': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'caller': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']", 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'end_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'estimated_time': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'milestone': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Milestone']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['projects.Task']"}),
            'priority': ('django.db.models.fields.IntegerField', [], {'default': '3'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']"}),
            'start_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.TaskStatus']"})
        },
        'projects.taskrecord': {
            'Meta': {'object_name': 'TaskRecord', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'record_type': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'task': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Task']"})
        },
        'projects.taskstatus': {
            'Meta': {'ordering': "('hidden', '-active', 'name')", 'object_name': 'TaskStatus', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'projects.tasktimeslot': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'TaskTimeSlot', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'task': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Task']"}),
            'time_from': ('django.db.models.fields.DateTimeField', [], {}),
            'time_to': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'timezone': ('django.db.models.fields.IntegerField', [], {'default': '0'})
        }
    }

    complete_apps = ['projects']

########NEW FILE########
__FILENAME__ = 0003_auto__add_field_tasktimeslot_user
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding field 'TaskTimeSlot.user'
        db.add_column('projects_tasktimeslot', 'user', self.gf(
            'django.db.models.fields.related.ForeignKey')(default=1, to=orm['core.User']), keep_default=False)

    def backwards(self, orm):

        # Deleting field 'TaskTimeSlot.user'
        db.delete_column('projects_tasktimeslot', 'user_id')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.AccessEntity']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.AccessEntity']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'projects.milestone': {
            'Meta': {'ordering': "['name']", 'object_name': 'Milestone', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'end_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']"}),
            'start_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.TaskStatus']"})
        },
        'projects.project': {
            'Meta': {'ordering': "['name']", 'object_name': 'Project', '_ormbases': ['core.Object']},
            'client': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'client'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'manager': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'manager'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['projects.Project']"})
        },
        'projects.task': {
            'Meta': {'ordering': "('-priority', 'name')", 'object_name': 'Task', '_ormbases': ['core.Object']},
            'assigned': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'caller': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']", 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'end_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'estimated_time': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'milestone': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Milestone']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['projects.Task']"}),
            'priority': ('django.db.models.fields.IntegerField', [], {'default': '3'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']"}),
            'start_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.TaskStatus']"})
        },
        'projects.taskrecord': {
            'Meta': {'object_name': 'TaskRecord', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'record_type': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'task': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Task']"})
        },
        'projects.taskstatus': {
            'Meta': {'ordering': "('hidden', '-active', 'name')", 'object_name': 'TaskStatus', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'projects.tasktimeslot': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'TaskTimeSlot', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'task': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Task']"}),
            'time_from': ('django.db.models.fields.DateTimeField', [], {}),
            'time_to': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'timezone': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"})
        }
    }

    complete_apps = ['projects']

########NEW FILE########
__FILENAME__ = 0004_timeslots
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models


class Migration(DataMigration):

    def forwards(self, orm):
        "Migrate TimeSlots to set .user"
        for obj in orm['projects.TaskTimeSlot'].objects.all():
            if obj.object_ptr.creator:
                obj.user = obj.object_ptr.creator
            else:
                obj.user = orm['core.User'].objects.all()[0]
            obj.save()

    def backwards(self, orm):
        raise RuntimeError("Cannot reverse this migration.")

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.AccessEntity']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.AccessEntity']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'projects.milestone': {
            'Meta': {'ordering': "['name']", 'object_name': 'Milestone', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'end_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']"}),
            'start_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.TaskStatus']"})
        },
        'projects.project': {
            'Meta': {'ordering': "['name']", 'object_name': 'Project', '_ormbases': ['core.Object']},
            'client': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'client'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'manager': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'manager'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['projects.Project']"})
        },
        'projects.task': {
            'Meta': {'ordering': "('-priority', 'name')", 'object_name': 'Task', '_ormbases': ['core.Object']},
            'assigned': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'caller': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']", 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'end_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'estimated_time': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'milestone': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Milestone']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['projects.Task']"}),
            'priority': ('django.db.models.fields.IntegerField', [], {'default': '3'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']"}),
            'start_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.TaskStatus']"})
        },
        'projects.taskrecord': {
            'Meta': {'object_name': 'TaskRecord', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'record_type': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'task': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Task']"})
        },
        'projects.taskstatus': {
            'Meta': {'ordering': "('hidden', '-active', 'name')", 'object_name': 'TaskStatus', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'projects.tasktimeslot': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'TaskTimeSlot', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'task': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Task']"}),
            'time_from': ('django.db.models.fields.DateTimeField', [], {}),
            'time_to': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'timezone': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"})
        }
    }

    complete_apps = ['projects']

########NEW FILE########
__FILENAME__ = 0005_auto__del_taskrecord
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Deleting model 'TaskRecord'
        db.delete_table('projects_taskrecord')

    def backwards(self, orm):

        # Adding model 'TaskRecord'
        db.create_table('projects_taskrecord', (
            ('record_type', self.gf(
                'django.db.models.fields.CharField')(max_length=256)),
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('details', self.gf('django.db.models.fields.TextField')()),
            ('task', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['projects.Task'])),
        ))
        db.send_create_signal('projects', ['TaskRecord'])

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.AccessEntity']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'projects.milestone': {
            'Meta': {'ordering': "['name']", 'object_name': 'Milestone', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'end_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']"}),
            'start_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.TaskStatus']"})
        },
        'projects.project': {
            'Meta': {'ordering': "['name']", 'object_name': 'Project', '_ormbases': ['core.Object']},
            'client': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'client'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'manager': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'manager'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['projects.Project']"})
        },
        'projects.task': {
            'Meta': {'ordering': "('-priority', 'name')", 'object_name': 'Task', '_ormbases': ['core.Object']},
            'assigned': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'caller': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']", 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'end_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'estimated_time': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'milestone': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Milestone']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['projects.Task']"}),
            'priority': ('django.db.models.fields.IntegerField', [], {'default': '3'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']"}),
            'start_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.TaskStatus']"})
        },
        'projects.taskstatus': {
            'Meta': {'ordering': "('hidden', '-active', 'name')", 'object_name': 'TaskStatus', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'projects.tasktimeslot': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'TaskTimeSlot', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'task': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Task']"}),
            'time_from': ('django.db.models.fields.DateTimeField', [], {}),
            'time_to': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'timezone': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"})
        }
    }

    complete_apps = ['projects']

########NEW FILE########
__FILENAME__ = 0006_auto__add_field_task_depends
# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding field 'Task.depends'
        db.add_column('projects_task', 'depends', self.gf('django.db.models.fields.related.ForeignKey')(
            to=orm['projects.Task'], null=True, blank=True), keep_default=False)

    def backwards(self, orm):

        # Deleting field 'Task.depends'
        db.delete_column('projects_task', 'depends_id')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.AccessEntity']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'projects.milestone': {
            'Meta': {'ordering': "['start_date', 'name']", 'object_name': 'Milestone', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'end_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']"}),
            'start_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.TaskStatus']"})
        },
        'projects.project': {
            'Meta': {'ordering': "['name']", 'object_name': 'Project', '_ormbases': ['core.Object']},
            'client': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'client'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'manager': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'manager'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['projects.Project']"})
        },
        'projects.task': {
            'Meta': {'ordering': "('-priority', 'name')", 'object_name': 'Task', '_ormbases': ['core.Object']},
            'assigned': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'caller': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']", 'null': 'True', 'blank': 'True'}),
            'depends': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Task']", 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'end_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'estimated_time': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'milestone': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Milestone']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['projects.Task']"}),
            'priority': ('django.db.models.fields.IntegerField', [], {'default': '3'}),
            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Project']"}),
            'start_date': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'default': '26', 'to': "orm['projects.TaskStatus']"})
        },
        'projects.taskstatus': {
            'Meta': {'ordering': "('hidden', '-active', 'name')", 'object_name': 'TaskStatus', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'projects.tasktimeslot': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'TaskTimeSlot', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'task': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['projects.Task']"}),
            'time_from': ('django.db.models.fields.DateTimeField', [], {}),
            'time_to': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'timezone': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"})
        }
    }

    complete_apps = ['projects']

########NEW FILE########
__FILENAME__ = models
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Project management models
"""
from django.db import models
from django.core.urlresolvers import reverse
from django.utils.translation import ugettext as _
from treeio.core.models import Object, User
from treeio.identities.models import Contact
from datetime import datetime, timedelta

# Project Model


class Project(Object):

    """ Project model """
    name = models.CharField(max_length=255)
    parent = models.ForeignKey(
        'self', blank=True, null=True, related_name='child_set')
    manager = models.ForeignKey(
        Contact, related_name='manager', null=True, blank=True, on_delete=models.SET_NULL)
    client = models.ForeignKey(
        Contact, related_name='client', null=True, blank=True, on_delete=models.SET_NULL)
    details = models.TextField(max_length=255, null=True, blank=True)

    class Meta:

        "Project"
        ordering = ['name']

    def __unicode__(self):
        return self.name

    def get_absolute_url(self):
        "Returns absolute URL for the Project"
        try:
            return reverse('projects_project_view', args=[self.id])
        except Exception:
            pass


# TaskStatus model
class TaskStatus(Object):

    """ Tasks and milestones have task statuses """
    name = models.CharField(max_length=255)
    details = models.TextField(max_length=255, null=True, blank=True)
    active = models.BooleanField()
    hidden = models.BooleanField()

    class Meta:

        "TaskStatus"
        ordering = ('hidden', '-active', 'name')

    def __unicode__(self):
        return self.name

    def get_absolute_url(self):
        "Returns absolute URL for the Task Status"
        try:
            return reverse('projects_index_by_status', args=[self.id])
        except Exception:
            pass


# Milestone model
class Milestone(Object):

    """ Tasks may have milestones """
    project = models.ForeignKey(Project)
    name = models.CharField(max_length=255)
    status = models.ForeignKey(TaskStatus)
    details = models.TextField(max_length=255, null=True, blank=True)
    start_date = models.DateTimeField(null=True, blank=True)
    end_date = models.DateTimeField(null=True, blank=True)

    access_inherit = ('project', '*module', '*user')

    class Meta:

        "Milestone"
        ordering = ['start_date', 'name']

    def __unicode__(self):
        return self.name

    def save(self, *args, **kwargs):
        "Override save to update all included tickets if Milestone.project changed"

        if self.id:
            original = Milestone.objects.get(pk=self.id)
            super(Milestone, self).save(*args, **kwargs)
            if self.project != original.project:
                for task in self.task_set.all():
                    task.project = self.project
                    task.save()
        else:
            super(Milestone, self).save(*args, **kwargs)

    def get_absolute_url(self):
        "Returns absolute URL for the Milestone"
        try:
            return reverse('projects_milestone_view', args=[self.id])
        except Exception:
            pass


# Task model
class Task(Object):

    """ Single task """
    parent = models.ForeignKey(
        'self', blank=True, null=True, related_name='child_set')
    project = models.ForeignKey(Project)
    milestone = models.ForeignKey(Milestone, null=True, blank=True)
    status = models.ForeignKey(TaskStatus, default=26)
    name = models.CharField(max_length=255)
    details = models.TextField(max_length=255, null=True, blank=True)
    assigned = models.ManyToManyField(User, blank=True, null=True)
    depends = models.ForeignKey('Task', blank=True, null=True, related_name='blocked_set',
                                limit_choices_to={'status__hidden': False})
    caller = models.ForeignKey(
        Contact, blank=True, null=True, on_delete=models.SET_NULL)
    start_date = models.DateTimeField(null=True, blank=True)
    end_date = models.DateTimeField(null=True, blank=True)
    priority = models.IntegerField(default=3,
                                   choices=((5, _('Highest')), (4, _('High')), (3, _('Normal')),
                                            (2, _('Low')), (1, _('Lowest'))))
    estimated_time = models.IntegerField(null=True, blank=True)

    access_inherit = ('parent', 'milestone', 'project', '*module', '*user')

    class Meta:

        "Task"
        ordering = ('-priority', 'name')

    def __unicode__(self):
        return self.name

    def priority_human(self):
        "Returns a Human-friendly priority name"
        choices = ((5, _('Highest')), (4, _('High')), (
            3, _('Normal')), (2, _('Low')), (1, _('Lowest')))
        for choice in choices:
            if choice[0] == self.priority:
                return choice[1]

    def get_estimated_time(self):
        "Converts minutes to Human-friendly time format"
        time = timedelta(minutes=self.estimated_time)
        days = time.days
        seconds = time.seconds
        hours = days * 24 + (seconds // (60 * 60))
        seconds %= (60 * 60)
        minutes = seconds // 60
        seconds %= 60

        string = ""
        if hours or minutes:
            if hours:
                string += _("%2i hours ") % (hours)
            if minutes:
                string += _("%2i minutes") % (minutes)
        else:
            string = _("Less than 1 minute")
        return string

    def save(self, *args, **kwargs):
        "Override save method to check for Milestone-Project links and auto-Status child Tasks"

        original = None
        if self.id:
            # Existing task
            original = Task.objects.get(pk=self.id)
            if self.project_id != original.project_id:
                # Project changed, check milestone is within selected Project
                if self.milestone_id and self.milestone.project_id != self.project_id:
                    self.milestone = None
            elif self.milestone_id and self.milestone_id != original.milestone_id:
                # Milestone changed, check if it belongs to the selected
                # Project
                if self.milestone.project_id != self.project_id:
                    self.project_id = self.milestone.project_id

            if self.status_id != original.status_id:
                # Changed status
                if self.status.hidden:
                    # Changed to a 'hidden' status, perform same for subtasks
                    for task in self.child_set.exclude(status=self.status):
                        task.status_id = self.status_id
                        task.save()
                    # Close any open timeslots
                    for slot in self.tasktimeslot_set.filter(time_to__isnull=True):
                        slot.time_to = datetime.now()
                        slot.save()

        else:
            # New task
            if self.milestone_id and self.milestone.project_id != self.project_id:
                self.project_id = self.milestone.project_id

        # Inherit Project and Milestone from parent if present
        if self.parent_id:
            if self.project_id != self.parent.project_id:
                self.project_id = self.parent.project_id
            if self.milestone_id != self.parent.milestone_id:
                self.milestone_id = self.parent.milestone_id

        super(Task, self).save(*args, **kwargs)

    def get_absolute_url(self):
        "Returns absolute URL"
        try:
            return reverse('projects_task_view', args=[self.id])
        except Exception:
            pass

    def get_total_time(self):
        "Returns total time spent on the task, based on assigned TimeSlots"
        total = timedelta()
        for slot in self.tasktimeslot_set.all():
            total += slot.get_time()
        return total

    def get_total_time_tuple(self):
        "Returns total time as a tuple with number of full hours and minutes"
        time = self.get_total_time()
        if not time:
            return None
        days = time.days
        seconds = time.seconds
        hours = days * 24 + (seconds // (60 * 60))
        seconds %= (60 * 60)
        minutes = seconds // 60
        seconds %= 60
        return (hours, minutes, seconds)

    def get_total_time_string(self):
        "Returns total time as a string with number of full hours and minutes"
        time = self.get_total_time_tuple()
        if not time:
            return _("0 minutes")
        hours = time[0]
        minutes = time[1]
        string = ""
        if hours or minutes:
            if hours:
                string += _("%2i hours ") % (hours)
            if minutes:
                string += _("%2i minutes") % (minutes)
        else:
            string = _("Less than 1 minute")
        return string

    def is_being_done_by(self, user):
        "Returns true if the task is in progress"
        if self.tasktimeslot_set.filter(user=user, time_to__isnull=True).exists():
            return True
        else:
            return False


# TaskTimeSlot model
class TaskTimeSlot(Object):

    """ Task time slot """
    task = models.ForeignKey(Task)
    user = models.ForeignKey(User)
    time_from = models.DateTimeField()
    time_to = models.DateTimeField(null=True, blank=True)
    timezone = models.IntegerField(default=0)
    details = models.TextField(max_length=255, null=True, blank=True)

    access_inherit = ('task', '*module', '*user')

    searchable = False
    attached = True

    class Meta:

        "TaskTimeSlot"
        ordering = ['-date_created']

    def __unicode__(self):
        return unicode(self.task)

    def get_absolute_url(self):
        "Returns absolute URL"
        try:
            return reverse('projects_task_view', args=[self.task_id])
        except Exception:
            pass

    def get_time_secs(self):
        "Return time from epoch"
        time = datetime.now() - self.time_from
        seconds = time.days * 24 * 3600 + time.seconds
        return seconds

    def get_time(self):
        "Returns time"
        if self.time_from and self.time_to:
            return self.time_to - self.time_from
        else:
            return timedelta()

    def get_time_tuple(self, time=None):
        "Returns time as a tuple with number of full hours and minutes"
        if not time:
            time = self.get_time()
        if not time:
            return None
        days = time.days
        seconds = time.seconds
        hours = days * 24 + (seconds // (60 * 60))
        seconds %= (60 * 60)
        minutes = seconds // 60
        seconds %= 60
        return (hours, minutes, seconds)

    def get_time_string(self, time=None):
        "Returns time in string format"
        time = self.get_time_tuple(time)
        if not time and self.time_from:
            return self.get_time_string(datetime.now() - self.time_from)
        elif not time:
            return ""
        hours = time[0]
        minutes = time[1]
        string = ""
        if hours or minutes:
            if hours:
                string += _("%2i hours ") % (hours)
            if minutes:
                string += _("%2i minutes") % (minutes)
        else:
            string = _("Less than 1 minute")
        return string

    def is_open(self):
        "If task is open"
        if self.time_from and self.time_to:
            return False
        return True

########NEW FILE########
__FILENAME__ = projects
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Projects templatetags
"""
from coffin import template
from treeio.core.rendering import render_to_string
from jinja2 import contextfunction, Markup
from django.template import RequestContext

register = template.Library()


@contextfunction
def projects_task_list(context, tasks, time_slots=[], nomass=False,
                       in_progress=False, by_project=False, by_milestone=False,
                       by_assigned=False, noheader=False):
    "Print a list of tasks"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('projects/tags/task_list',
                                   {'tasks': tasks,
                                    'nomass': nomass,
                                    'by_project': by_project,
                                    'by_milestone': by_milestone,
                                    'by_assigned': by_assigned,
                                    'in_progress': in_progress,
                                    'noheader': noheader,
                                    'time_slots': time_slots},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(projects_task_list)


@contextfunction
def projects_time_slot_list(context, time_slots, no_dates=False):
    "Print a list of time slots"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('projects/tags/time_slot_list',
                                   {'time_slots': time_slots,
                                       'no_dates': no_dates},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(projects_time_slot_list)

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Project Management: test suites
"""

from django.test import TestCase
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser
from treeio.core.models import User, Group, Perspective, ModuleSetting, Object
from treeio.projects.models import Project, Milestone, Task, TaskStatus, TaskTimeSlot
from treeio.identities.models import Contact, ContactType
from datetime import datetime


class ProjectsModelsTest(TestCase):

    " Documents models tests"

    def test_model_project(self):
        "Test project"
        obj = Project(name='test')
        obj.save()
        self.assertEquals('test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_task(self):
        "Test task"
        project = Project(name='test')
        project.save()

        status = TaskStatus(name='test')
        status.save()

        obj = Task(name='test', project=project, status=status, priority=3)
        obj.save()
        self.assertEquals(project, obj.project)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_task_status(self):
        "Test task status"
        obj = TaskStatus(name='test')
        obj.save()
        self.assertEquals('test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()


class ProjectsViewsTest(TestCase):

    "Projects functional tests for views"

    username = "test"
    password = "password"
    prepared = False

    def setUp(self):
        "Initial Setup"

        if not self.prepared:
            # Clean up first
            Object.objects.all().delete()
            User.objects.all().delete()

            # Create objects

            self.group, created = Group.objects.get_or_create(name='test')
            duser, created = DjangoUser.objects.get_or_create(
                username=self.username)
            duser.set_password(self.password)
            duser.save()
            self.user, created = User.objects.get_or_create(user=duser)
            self.user.save()
            perspective, created = Perspective.objects.get_or_create(
                name='default')
            perspective.set_default_user()
            perspective.save()

            ModuleSetting.set('default_perspective', perspective.id)

            self.contact_type = ContactType(name='test')
            self.contact_type.set_default_user()
            self.contact_type.save()

            self.contact = Contact(name='test', contact_type=self.contact_type)
            self.contact.set_default_user()
            self.contact.save()

            self.project = Project(
                name='test', manager=self.contact, client=self.contact)
            self.project.set_default_user()
            self.project.save()

            self.status = TaskStatus(name='test')
            self.status.set_default_user()
            self.status.save()

            self.milestone = Milestone(
                name='test', project=self.project, status=self.status)
            self.milestone.set_default_user()
            self.milestone.save()

            self.task = Task(
                name='test', project=self.project, status=self.status, priority=3)
            self.task.set_default_user()
            self.task.save()

            self.time_slot = TaskTimeSlot(
                task=self.task, details='test', time_from=datetime.now(), user=self.user)
            self.time_slot.set_default_user()
            self.time_slot.save()

            self.parent = Project(name='test')
            self.parent.set_default_user()
            self.parent.save()

            self.parent_task = Task(
                name='test', project=self.project, status=self.status, priority=3)
            self.parent_task.set_default_user()
            self.parent_task.save()

            self.client = Client()

            self.prepared = True

    ######################################
    # Testing views when user is logged in
    ######################################
    def test_index_login(self):
        "Test index page with login at /projects/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('projects'))
        self.assertEquals(response.status_code, 200)

    # Projects
    def test_project_add(self):
        "Test index page with login at /projects/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('project_add'))
        self.assertEquals(response.status_code, 200)

    def test_project_add_typed(self):
        "Test index page with login at /projects/add/<project_id>/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('projects_project_add_typed', args=[self.parent.id]))
        self.assertEquals(response.status_code, 200)

    def test_project_view_login(self):
        "Test index page with login at /projects/view/<project_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('projects_project_view', args=[self.project.id]))
        self.assertEquals(response.status_code, 200)

    def test_project_edit_login(self):
        "Test index page with login at /projects/edit//<project_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('projects_project_edit', args=[self.project.id]))
        self.assertEquals(response.status_code, 200)

    def test_project_delete_login(self):
        "Test index page with login at /projects/delete//<project_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('projects_project_delete', args=[self.project.id]))
        self.assertEquals(response.status_code, 200)

    # Milestones
    def test_milestone_add(self):
        "Test index page with login at /projects/milestone/add"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('projects_milestone_add'))
        self.assertEquals(response.status_code, 200)

    def test_milestone_add_typed(self):
        "Test index page with login at /projects/milestone/add/<project_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('projects_milestone_add_typed', args=[self.parent.id]))
        self.assertEquals(response.status_code, 200)

    def test_milestone_view_login(self):
        "Test index page with login at /projects/milestone/view/<milestone_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('projects_milestone_view', args=[self.milestone.id]))
        self.assertEquals(response.status_code, 200)

    def test_milestone_edit_login(self):
        "Test index page with login at /projects/milestone/edit/<milestone_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('projects_milestone_edit', args=[self.milestone.id]))
        self.assertEquals(response.status_code, 200)

    def test_milestone_delete_login(self):
        "Test index page with login at /projects/milestone/delete/<milestone_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('projects_milestone_delete', args=[self.milestone.id]))
        self.assertEquals(response.status_code, 200)

    # Tasks
    def test_task_add(self):
        "Test index page with login at /projects/task/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('projects_task_add'))
        self.assertEquals(response.status_code, 200)

    def test_task_add_typed(self):
        "Test index page with login at /projects/task/add/<project_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('projects_task_add_typed', args=[self.project.id]))
        self.assertEquals(response.status_code, 200)

    def test_task_add_to_milestone(self):
        "Test index page with login at /projects/task/add/<milestone_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('projects_task_add_to_milestone', args=[self.milestone.id]))
        self.assertEquals(response.status_code, 200)

    def test_task_add_subtask(self):
        "Test index page with login at /projects/task/add/<task_id>/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('projects_task_add_subtask', args=[self.parent_task.id]))
        self.assertEquals(response.status_code, 200)

    def test_task_set_status(self):
        "Test index page with login at /projects/task/add/<task_id>/status/<status_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('projects_task_set_status', args=[self.task.id, self.status.id]))
        self.assertEquals(response.status_code, 200)

    def test_task_view_login(self):
        "Test index page with login at /projects/task/view/<task_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('projects_task_view', args=[self.task.id]))
        self.assertEquals(response.status_code, 200)

    def test_task_edit_login(self):
        "Test index page with login at /projects/task/edit/<task_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('projects_task_edit', args=[self.task.id]))
        self.assertEquals(response.status_code, 200)

    def test_task_delete_login(self):
        "Test index page with login at /projects/task/delete/<task_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('projects_task_delete', args=[self.task.id]))
        self.assertEquals(response.status_code, 200)

    # Task Time Slots
    def test_time_slot_add(self):
        "Test index page with login at /projects/task/view/time/<task_id>add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('projects_task_time_slot_add', args=[self.task.id]))
        self.assertEquals(response.status_code, 200)

    def test_time_slot_view_login(self):
        "Test index page with login at /projects/task/view/time/<time_slot_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('projects_task_view', args=[self.task.id]))
        self.assertEquals(response.status_code, 200)

    def test_time_slot_edit_login(self):
        "Test index page with login at /projects/task/edit/time/<time_slot_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('projects_task_edit', args=[self.task.id]))
        self.assertEquals(response.status_code, 200)

    def test_time_slot_delete_login(self):
        "Test index page with login at /projects/task/delete/time/<time_slot_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('projects_task_delete', args=[self.task.id]))
        self.assertEquals(response.status_code, 200)

    # Task Statuses
    def test_task_status_add(self):
        "Test index page with login at /projects/task/status/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('projects_task_status_add'))
        self.assertEquals(response.status_code, 200)

    def test_task_status_view_login(self):
        "Test index page with login at /projects/task/status/view/<status_id>/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('projects_index_by_status', args=[self.status.id]))
        self.assertEquals(response.status_code, 200)

    def test_task_status_edit_login(self):
        "Test index page with login at /projects/task/status/edit/<status_id>/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('projects_task_status_edit', args=[self.status.id]))
        self.assertEquals(response.status_code, 200)

    def test_task_status_delete_login(self):
        "Test index page with login at /projects/task/status/delete/<status_id>/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('projects_task_status_delete', args=[self.status.id]))
        self.assertEquals(response.status_code, 200)

    # Settings

    def test_project_settings_view(self):
        "Test index page with login at /projects/settings/view/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('projects_settings_view'))
        self.assertEquals(response.status_code, 200)

    def test_project_settings_edit(self):
        "Test index page with login at /projects/settings/edit/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('projects_settings_edit'))
        self.assertEquals(response.status_code, 200)

    ######################################
    # Testing views when user is not logged in
    ######################################
    def test_index(self):
        "Test index page at /projects/"
        response = self.client.get('/projects/')
        # Redirects as unauthenticated
        self.assertRedirects(response, reverse('user_login'))

    # Projects
    def test_project_add_out(self):
        "Testing /projects/add/"
        response = self.client.get(reverse('project_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_project_add_typed_out(self):
        "Testing /projects/add/<project_id>/"
        response = self.client.get(
            reverse('projects_project_add_typed', args=[self.parent.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_project_view_out(self):
        "Testing /projects/view/<project_id>"
        response = self.client.get(
            reverse('projects_project_view', args=[self.project.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_project_edit_out(self):
        "Testing /projects/edit//<project_id>"
        response = self.client.get(
            reverse('projects_project_edit', args=[self.project.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_project_delete_out(self):
        "Testing /projects/delete//<project_id>"
        response = self.client.get(
            reverse('projects_project_delete', args=[self.project.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Milestones
    def test_milestone_add_out(self):
        "Testing /projects/milestone/add"
        response = self.client.get(reverse('projects_milestone_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_milestone_add_typed_out(self):
        "Testing /projects/milestone/add/<project_id>"
        response = self.client.get(
            reverse('projects_milestone_add_typed', args=[self.parent.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_milestone_view_out(self):
        "Testing /projects/milestone/view/<milestone_id>"
        response = self.client.get(
            reverse('projects_milestone_view', args=[self.milestone.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_milestone_edit_out(self):
        "Testing /projects/milestone/edit/<milestone_id>"
        response = self.client.get(
            reverse('projects_milestone_edit', args=[self.milestone.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_milestone_delete_out(self):
        "Testing /projects/milestone/delete/<milestone_id>"
        response = self.client.get(
            reverse('projects_milestone_delete', args=[self.milestone.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Tasks
    def test_task_add_out(self):
        "Testing /projects/task/add/"
        response = self.client.get(reverse('projects_task_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_task_add_typed_out(self):
        "Testing /projects/task/add/<project_id>"
        response = self.client.get(
            reverse('projects_task_add_typed', args=[self.project.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_task_add_to_milestone_out(self):
        "Testing /projects/task/add/<milestone_id>"
        response = self.client.get(
            reverse('projects_task_add_to_milestone', args=[self.milestone.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_task_add_subtask_out(self):
        "Testing /projects/task/add/<task_id>/"
        response = self.client.get(
            reverse('projects_task_add_subtask', args=[self.parent_task.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_task_set_status_out(self):
        "Testing /projects/task/add/<task_id>/status/<status_id>"
        response = self.client.get(
            reverse('projects_task_set_status', args=[self.task.id, self.status.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_task_view_out(self):
        "Testing /projects/task/view/<task_id>"
        response = self.client.get(
            reverse('projects_task_view', args=[self.task.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_task_edit_out(self):
        "Testing /projects/task/edit/<task_id>"
        response = self.client.get(
            reverse('projects_task_edit', args=[self.task.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_task_delete_out(self):
        "Testing /projects/task/delete/<task_id>"
        response = self.client.get(
            reverse('projects_task_delete', args=[self.task.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Task Time Slots
    def test_time_slot_add_out(self):
        "Testing /projects/task/view/time/<task_id>add/"
        response = self.client.get(
            reverse('projects_task_time_slot_add', args=[self.task.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_time_slot_view_out(self):
        "Testing /projects/task/view/time/<time_slot_id>"
        response = self.client.get(
            reverse('projects_task_view', args=[self.task.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_time_slot_edit_out(self):
        "Testing /projects/task/edit/time/<time_slot_id>"
        response = self.client.get(
            reverse('projects_task_edit', args=[self.task.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_time_slot_delete_out(self):
        "Testing /projects/task/delete/time/<time_slot_id>"
        response = self.client.get(
            reverse('projects_task_delete', args=[self.task.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Task Statuses

    def test_task_status_add_out(self):
        "Testing /projects/task/status/add/"
        response = self.client.get(reverse('projects_task_status_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_task_status_view_out(self):
        "Testing /projects/task/status/view/<status_id>/"
        response = self.client.get(
            reverse('projects_index_by_status', args=[self.status.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_task_status_edit_out(self):
        "Testing /projects/task/status/edit/<status_id>/"
        response = self.client.get(
            reverse('projects_task_status_edit', args=[self.status.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_task_status_delete_out(self):
        "Testing /projects/task/status/delete/<status_id>/"
        response = self.client.get(
            reverse('projects_task_status_delete', args=[self.status.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Settings

    def test_project_settings_view_out(self):
        "Testing /projects/settings/view/"
        response = self.client.get(reverse('projects_settings_view'))
        self.assertRedirects(response, reverse('user_login'))

    def test_project_settings_edit_out(self):
        "Testing /projects/settings/edit/"
        response = self.client.get(reverse('projects_settings_edit'))
        self.assertRedirects(response, reverse('user_login'))

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Projects module URLs
"""
from django.conf.urls import patterns, url

urlpatterns = patterns('treeio.projects.views',
    url(r'^(\.(?P<response_format>\w+))?$',
        'index', name='projects'),
    url(r'^index(\.(?P<response_format>\w+))?/?$',
        'index', name='projects_index'),
    url(r'^task/owned(\.(?P<response_format>\w+))?/?$',
        'index_owned', name='projects_index_owned'),
    url(r'^task/assigned(\.(?P<response_format>\w+))?/?$',
        'index_assigned', name='projects_index_assigned'),
    url(r'^task/in_progress(\.(?P<response_format>\w+))?/?$',
        'index_in_progress', name='projects_tasks_in_progress'),

    # Projects
    url(r'^add(\.(?P<response_format>\w+))?/?$',
        'project_add', name='project_add'),
    url(r'^add/project/(?P<project_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'project_add_typed', name='projects_project_add_typed'),
    url(r'^view/(?P<project_id>\w+)(\.(?P<response_format>\w+))?/?$',
        'project_view', name='projects_project_view'),
    url(r'^edit/(?P<project_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'project_edit', name='projects_project_edit'),
    url(r'^delete/(?P<project_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'project_delete', name='projects_project_delete'),
    url(r'^gantt/(?P<project_id>\w+)(\.(?P<response_format>\w+))?/?$',
        'gantt_view', name='projects_gantt_view'),

    # Milestones
    url(r'^milestone/add(\.(?P<response_format>\w+))?/?$',
        'milestone_add', name='projects_milestone_add'),
    url(r'^milestone/add/project/(?P<project_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'milestone_add_typed', name='projects_milestone_add_typed'),
    url(r'^milestone/view/(?P<milestone_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'milestone_view', name='projects_milestone_view'),
    url(r'^milestone/edit/(?P<milestone_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'milestone_edit', name='projects_milestone_edit'),
    url(r'^milestone/set/(?P<milestone_id>\d+)/status/(?P<status_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'milestone_set_status', name='projects_milestone_set_status'),
    url(r'^milestone/delete/(?P<milestone_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'milestone_delete', name='projects_milestone_delete'),

    # Tasks
    url(r'^task/add(\.(?P<response_format>\w+))?/?$',
        'task_add', name='projects_task_add'),
    url(r'^task/add/project/(?P<project_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'task_add_typed', name='projects_task_add_typed'),
    url(r'^task/add/milestone/(?P<milestone_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'task_add_to_milestone', name='projects_task_add_to_milestone'),
    url(r'^task/view/(?P<task_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'task_view', name='projects_task_view'),
    url(r'^task/edit/(?P<task_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'task_edit', name='projects_task_edit'),
    url(r'^task/set/(?P<task_id>\d+)/status/(?P<status_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'task_set_status', name='projects_task_set_status'),
    url(r'^task/delete/(?P<task_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'task_delete', name='projects_task_delete'),

    # Subtask
    url(r'^task/add/subtask/(?P<task_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'task_add_subtask', name='projects_task_add_subtask'),

    # Times Slots
    url(r'^task/time/(?P<task_id>\w+)/add(\.(?P<response_format>\w+))?/?$',
        'task_time_slot_add', name='projects_task_time_slot_add'),
    url(r'^task/time/(?P<task_id>\w+)/start(\.(?P<response_format>\w+))?/?$',
        'task_time_slot_start', name='projects_task_time_slot_start'),

    url(r'^task/time/stop/(?P<slot_id>\w+)(\.(?P<response_format>\w+))?/?$',
        'task_time_slot_stop', name='projects_task_time_slot_stop'),
    url(r'^task/time/view/(?P<time_slot_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'task_time_slot_view', name='projects_task_time_slot_view'),
    url(r'^task/time/edit/(?P<time_slot_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'task_time_slot_edit', name='projects_task_time_slot_edit'),
    url(r'^task/delete/time/(?P<time_slot_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'task_time_slot_delete', name='projects_task_time_slot_delete'),

    # Task Statuses
    url(r'^task/status/add(\.(?P<response_format>\w+))?/?$',
        'task_status_add', name='projects_task_status_add'),
    url(r'^task/status/view/(?P<status_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'index_by_status', name='projects_index_by_status'),
    url(r'^task/status/edit/(?P<status_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'task_status_edit', name='projects_task_status_edit'),
    url(r'^task/status/delete/(?P<status_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'task_status_delete', name='projects_task_status_delete'),

    # Settings
    url(r'^settings/view(\.(?P<response_format>\w+))?/?$',
        'settings_view', name='projects_settings_view'),
    url(r'^settings/edit(\.(?P<response_format>\w+))?/?$',
        'settings_edit', name='projects_settings_edit'),

    # AJAX lookups
    url(r'^ajax/tasks(\.(?P<response_format>\w+))?/?$',
        'ajax_task_lookup', name='projects_ajax_task_lookup'),
)

########NEW FILE########
__FILENAME__ = views
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Project Management module views
"""

from django.shortcuts import get_object_or_404
from django.template import RequestContext
from django.http import HttpResponseRedirect, Http404
from django.core.urlresolvers import reverse
from django.db.models import Q
from treeio.core.models import Object, ModuleSetting, UpdateRecord
from treeio.core.views import user_denied
from treeio.core.rendering import render_to_response
from treeio.core.decorators import treeio_login_required, handle_response_format
from treeio.projects.models import Project, Milestone, Task, TaskStatus, TaskTimeSlot
from treeio.projects.forms import ProjectForm, MilestoneForm, TaskForm, FilterForm, TaskRecordForm, \
    MassActionForm, TaskTimeSlotForm, TaskStatusForm, SettingsForm
from django.utils.translation import ugettext as _
from datetime import datetime
import json


def _get_filter_query(args):
    "Creates a query to filter Tasks based on FilterForm arguments"
    query = Q()

    for arg in args:
        if hasattr(Task, arg) and args[arg]:
            kwargs = {str(arg + '__id'): long(args[arg])}
            query = query & Q(**kwargs)

    return query


def _get_default_context(request):
    "Returns default context as a dict()"

    projects = Object.filter_by_request(request, Project.objects)
    statuses = Object.filter_by_request(request, TaskStatus.objects)
    massform = MassActionForm(request.user.get_profile())

    context = {'projects': projects,
               'statuses': statuses,
               'massform': massform}

    return context


def _process_mass_form(f):
    "Pre-process request to handle mass action form for Tasks and Milestones"

    def wrap(request, *args, **kwargs):
        "Wrap"
        if 'massform' in request.POST:
            for key in request.POST:
                if 'mass-milestone' in key:
                    try:
                        milestone = Milestone.objects.get(pk=request.POST[key])
                        form = MassActionForm(
                            request.user.get_profile(), request.POST, instance=milestone)
                        if form.is_valid() and request.user.get_profile().has_permission(milestone, mode='w'):
                            form.save()
                    except Exception:
                        pass
            for key in request.POST:
                if 'mass-task' in key:
                    try:
                        task = Task.objects.get(pk=request.POST[key])
                        form = MassActionForm(
                            request.user.get_profile(), request.POST, instance=task)
                        if form.is_valid() and request.user.get_profile().has_permission(task, mode='w'):
                            form.save()
                    except Exception:
                        pass

        return f(request, *args, **kwargs)

    wrap.__doc__ = f.__doc__
    wrap.__name__ = f.__name__

    return wrap


@handle_response_format
@treeio_login_required
@_process_mass_form
def index(request, response_format='html'):
    "Project Management index page"

    query = Q(parent__isnull=True)
    if request.GET:
        if 'status' in request.GET and request.GET['status']:
            query = query & _get_filter_query(request.GET)
        else:
            query = query & Q(
                status__hidden=False) & _get_filter_query(request.GET)
    else:
        query = query & Q(status__hidden=False)

    tasks = Object.filter_by_request(request, Task.objects.filter(query))
    milestones = Object.filter_by_request(
        request, Milestone.objects.filter(status__hidden=False))
    filters = FilterForm(request.user.get_profile(), '', request.GET)

    context = _get_default_context(request)
    context.update({'milestones': milestones,
                    'tasks': tasks,
                    'filters': filters})

    return render_to_response('projects/index', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_form
def index_owned(request, response_format='html'):
    "Tasks owned by current user"

    query = Q(
        parent__isnull=True, caller__related_user=request.user.get_profile())
    if request.GET:
        if 'status' in request.GET and request.GET['status']:
            query = query & _get_filter_query(request.GET)
        else:
            query = query & Q(
                status__hidden=False) & _get_filter_query(request.GET)
    else:
        query = query & Q(status__hidden=False)

    tasks = Object.filter_by_request(request, Task.objects.filter(query))
    milestones = Object.filter_by_request(
        request, Milestone.objects.filter(status__hidden=False))
    filters = FilterForm(request.user.get_profile(), 'status', request.GET)

    context = _get_default_context(request)
    context.update({'milestones': milestones,
                    'tasks': tasks,
                    'filters': filters})

    return render_to_response('projects/index_owned', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_form
def index_assigned(request, response_format='html'):
    "Tasks assigned to current user"

    query = Q(parent__isnull=True, assigned=request.user.get_profile())
    if request.GET:
        if 'status' in request.GET and request.GET['status']:
            query = query & _get_filter_query(request.GET)
        else:
            query = query & Q(
                status__hidden=False) & _get_filter_query(request.GET)
    else:
        query = query & Q(status__hidden=False)

    tasks = Object.filter_by_request(request, Task.objects.filter(query))

    milestones = Object.filter_by_request(
        request, Milestone.objects.filter(status__hidden=False))
    filters = FilterForm(request.user.get_profile(), 'assigned', request.GET)

    context = _get_default_context(request)
    context.update({'milestones': milestones,
                    'tasks': tasks,
                    'filters': filters})

    return render_to_response('projects/index_assigned', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_form
def index_by_status(request, status_id, response_format='html'):
    "Sort tasks by status"

    status = get_object_or_404(TaskStatus, pk=status_id)

    if not request.user.get_profile().has_permission(status):
        return user_denied(request, message="You don't have access to this Task Status")

    query = Q(parent__isnull=True, status=status)
    if request.GET:
        query = query & _get_filter_query(request.GET)
    tasks = Object.filter_by_request(request, Task.objects.filter(query))

    milestones = Object.filter_by_request(
        request, Milestone.objects.filter(task__status=status).distinct())
    filters = FilterForm(request.user.get_profile(), 'status', request.GET)

    context = _get_default_context(request)
    context.update({'milestones': milestones,
                    'tasks': tasks,
                    'status': status,
                    'filters': filters})

    return render_to_response('projects/index_by_status', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_form
def index_in_progress(request, response_format='html'):
    "A page with a list of tasks in progress"

    query = Q(parent__isnull=True)
    if request.GET:
        query = query & Q(
            status__hidden=False) & _get_filter_query(request.GET)
    else:
        query = query & Q(status__hidden=False)

    tasks = Object.filter_by_request(request, Task.objects.filter(query))

    milestones = Object.filter_by_request(
        request, Milestone.objects.filter(status__hidden=False))
    filters = FilterForm(request.user.get_profile(), 'status', request.GET)
    time_slots = Object.filter_by_request(
        request, TaskTimeSlot.objects.filter(time_from__isnull=False, time_to__isnull=True))

    context = _get_default_context(request)
    context.update({'milestones': milestones,
                    'tasks': tasks,
                    'filters': filters,
                    'time_slots': time_slots})

    return render_to_response('projects/index_in_progress', context,
                              context_instance=RequestContext(request), response_format=response_format)


#
# Projects
#
@handle_response_format
@treeio_login_required
def project_add(request, response_format='html'):
    "New project form"

    if request.POST:
        if not 'cancel' in request.POST:
            project = Project()
            form = ProjectForm(
                request.user.get_profile(), None, request.POST, instance=project)
            if form.is_valid():
                project = form.save()
                project.set_user_from_request(request)
                return HttpResponseRedirect(reverse('projects_project_view', args=[project.id]))
        else:
            return HttpResponseRedirect(reverse('projects'))
    else:
        form = ProjectForm(request.user.get_profile(), None)

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('projects/project_add', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def project_add_typed(request, project_id=None, response_format='html'):
    "Project add to preselected parent project"

    parent_project = None
    if project_id:
        parent_project = get_object_or_404(Project, pk=project_id)
        if not request.user.get_profile().has_permission(parent_project, mode='x'):
            parent_project = None

    if request.POST:
        if not 'cancel' in request.POST:
            project = Project()
            form = ProjectForm(
                request.user.get_profile(), project_id, request.POST, instance=project)
            if form.is_valid():
                project = form.save()
                project.set_user_from_request(request)
                return HttpResponseRedirect(reverse('projects_project_view', args=[project.id]))
        else:
            return HttpResponseRedirect(reverse('projects'))
    else:
        form = ProjectForm(request.user.get_profile(), project_id)

    context = _get_default_context(request)
    context.update({'form': form, 'project': parent_project})

    return render_to_response('projects/project_add_typed', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_form
def project_view(request, project_id, response_format='html'):
    "Single project view page"

    project = get_object_or_404(Project, pk=project_id)
    if not request.user.get_profile().has_permission(project):
        return user_denied(request, message="You don't have access to this Project")

    query = Q(parent__isnull=True, project=project)
    if request.GET:
        if 'status' in request.GET and request.GET['status']:
            query = query & _get_filter_query(request.GET)
        else:
            query = query & Q(
                status__hidden=False) & _get_filter_query(request.GET)
    else:
        query = query & Q(status__hidden=False)

    if request.user.get_profile().has_permission(project, mode='r'):
        if request.POST:
            record = UpdateRecord()
            record.record_type = 'manual'
            form = TaskRecordForm(
                request.user.get_profile(), request.POST, instance=record)
            if form.is_valid():
                record = form.save()
                record.set_user_from_request(request)
                record.save()
                record.about.add(project)
                project.set_last_updated()
                return HttpResponseRedirect(reverse('projects_project_view', args=[project.id]))
        else:
            form = TaskRecordForm(request.user.get_profile())
    else:
        form = None

    tasks = Object.filter_by_request(request, Task.objects.filter(query))

    tasks_progress = float(0)
    tasks_progress_query = Object.filter_by_request(
        request, Task.objects.filter(Q(parent__isnull=True, project=project)))
    if tasks_progress_query:
        for task in tasks_progress_query:
            if not task.status.active:
                tasks_progress += 1
        tasks_progress = (tasks_progress / len(tasks_progress_query)) * 100
        tasks_progress = round(tasks_progress, ndigits=1)

    filters = FilterForm(request.user.get_profile(), 'project', request.GET)

    milestones = Object.filter_by_request(request,
                                          Milestone.objects.filter(project=project).filter(status__hidden=False))
    subprojects = Project.objects.filter(parent=project)

    context = _get_default_context(request)
    context.update({'project': project,
                    'milestones': milestones,
                    'tasks': tasks,
                    'tasks_progress': tasks_progress,
                    'record_form': form,
                    'subprojects': subprojects,
                    'filters': filters})

    return render_to_response('projects/project_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def project_edit(request, project_id, response_format='html'):
    "Project edit page"

    project = get_object_or_404(Project, pk=project_id)
    if not request.user.get_profile().has_permission(project, mode='w'):
        return user_denied(request, message="You don't have access to this Project")

    if request.POST:
        if not 'cancel' in request.POST:
            form = ProjectForm(
                request.user.get_profile(), None, request.POST, instance=project)
            if form.is_valid():
                project = form.save()
                return HttpResponseRedirect(reverse('projects_project_view', args=[project.id]))
        else:
            return HttpResponseRedirect(reverse('projects_project_view', args=[project.id]))
    else:
        form = ProjectForm(request.user.get_profile(), None, instance=project)

    context = _get_default_context(request)
    context.update({'form': form, 'project': project})

    return render_to_response('projects/project_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def project_delete(request, project_id, response_format='html'):
    "Project delete"

    project = get_object_or_404(Project, pk=project_id)
    if not request.user.get_profile().has_permission(project, mode='w'):
        return user_denied(request, message="You don't have access to this Project")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                project.trash = True
                project.save()
            else:
                project.delete()
            return HttpResponseRedirect(reverse('projects_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('projects_project_view', args=[project.id]))

    context = _get_default_context(request)
    context.update({'project': project})

    return render_to_response('projects/project_delete', context,
                              context_instance=RequestContext(request), response_format=response_format)


#
# Milestones
#

@handle_response_format
@treeio_login_required
def milestone_add(request, response_format='html'):
    "New milestone form"

    if request.POST:
        if not 'cancel' in request.POST:
            milestone = Milestone()
            form = MilestoneForm(
                request.user.get_profile(), None, request.POST, instance=milestone)
            if form.is_valid():
                milestone = form.save()
                milestone.set_user_from_request(request)
                return HttpResponseRedirect(reverse('projects_milestone_view', args=[milestone.id]))
        else:
            return HttpResponseRedirect(reverse('projects'))
    else:
        form = MilestoneForm(request.user.get_profile(), None)

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('projects/milestone_add', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def milestone_add_typed(request, project_id=None, response_format='html'):
    "Milestone add to preselected project"

    project = None
    if project_id:
        project = get_object_or_404(Project, pk=project_id)
        if not request.user.get_profile().has_permission(project, mode='x'):
            project = None

    if request.POST:
        if not 'cancel' in request.POST:
            milestone = Milestone()
            form = MilestoneForm(
                request.user.get_profile(), project_id, request.POST, instance=milestone)
            if form.is_valid():
                milestone = form.save()
                milestone.set_user_from_request(request)
                return HttpResponseRedirect(reverse('projects_milestone_view', args=[milestone.id]))
        else:
            return HttpResponseRedirect(reverse('projects'))
    else:
        form = MilestoneForm(request.user.get_profile(), project_id)

    context = _get_default_context(request)
    context.update({'form': form, 'project': project})

    return render_to_response('projects/milestone_add_typed', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_form
def milestone_view(request, milestone_id, response_format='html'):
    "Single milestone view page"

    milestone = get_object_or_404(Milestone, pk=milestone_id)
    project = milestone.project
    if not request.user.get_profile().has_permission(milestone):
        return user_denied(request, message="You don't have access to this Milestone")

    query = Q(milestone=milestone, parent__isnull=True)
    if request.GET:
        if 'status' in request.GET and request.GET['status']:
            query = query & _get_filter_query(request.GET)
        else:
            query = query & Q(
                status__hidden=False) & _get_filter_query(request.GET)
        tasks = Object.filter_by_request(request, Task.objects.filter(query))
    else:
        tasks = Object.filter_by_request(request,
                                         Task.objects.filter(query & Q(status__hidden=False)))

    filters = FilterForm(request.user.get_profile(), 'milestone', request.GET)

    tasks_progress = float(0)
    tasks_progress_query = Object.filter_by_request(
        request, Task.objects.filter(Q(parent__isnull=True, milestone=milestone)))
    if tasks_progress_query:
        for task in tasks_progress_query:
            if not task.status.active:
                tasks_progress += 1
        tasks_progress = (tasks_progress / len(tasks_progress_query)) * 100
        tasks_progress = round(tasks_progress, ndigits=1)

    context = _get_default_context(request)
    context.update({'milestone': milestone,
                    'tasks': tasks,
                    'tasks_progress': tasks_progress,
                    'filters': filters,
                    'project': project})

    return render_to_response('projects/milestone_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def milestone_edit(request, milestone_id, response_format='html'):
    "Milestone edit page"

    milestone = get_object_or_404(Milestone, pk=milestone_id)
    project = milestone.project
    if not request.user.get_profile().has_permission(milestone, mode='w'):
        return user_denied(request, message="You don't have access to this Milestone")

    if request.POST:
        if not 'cancel' in request.POST:
            form = MilestoneForm(
                request.user.get_profile(), None, request.POST, instance=milestone)
            if form.is_valid():
                milestone = form.save()
                return HttpResponseRedirect(reverse('projects_milestone_view', args=[milestone.id]))
        else:
            return HttpResponseRedirect(reverse('projects_milestone_view', args=[milestone.id]))
    else:
        form = MilestoneForm(
            request.user.get_profile(), None, instance=milestone)

    context = _get_default_context(request)
    context.update({'form': form,
                    'milestone': milestone,
                    'project': project})

    return render_to_response('projects/milestone_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def milestone_delete(request, milestone_id, response_format='html'):
    "Milestone delete"

    milestone = get_object_or_404(Milestone, pk=milestone_id)
    project = milestone.project
    if not request.user.get_profile().has_permission(milestone, mode='w'):
        return user_denied(request, message="You don't have access to this Milestone")

    query = Q(milestone=milestone, parent__isnull=True)
    if request.GET:
        query = query & _get_filter_query(request.GET)
    tasks = Object.filter_by_request(request, Task.objects.filter(query))

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                milestone.trash = True
                milestone.save()
            else:
                milestone.delete()
            return HttpResponseRedirect(reverse('projects_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('projects_milestone_view', args=[milestone.id]))

    context = _get_default_context(request)
    context.update({'milestone': milestone,
                    'tasks': tasks,
                    'project': project})

    return render_to_response('projects/milestone_delete', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def milestone_set_status(request, milestone_id, status_id, response_format='html'):
    "Milestone quick set: Status"

    milestone = get_object_or_404(Milestone, pk=milestone_id)
    if not request.user.get_profile().has_permission(milestone, mode='x'):
        return user_denied(request, message="You don't have access to this Milestone")

    status = get_object_or_404(TaskStatus, pk=status_id)
    if not request.user.get_profile().has_permission(status):
        return user_denied(request, message="You don't have access to this Milestone Status")

    if not milestone.status == status:
        milestone.status = status
        milestone.save()

    return milestone_view(request, milestone_id, response_format)

#
# Tasks
#


@handle_response_format
@treeio_login_required
def task_add(request, response_format='html'):
    "New task form"

    if request.POST:
        if not 'cancel' in request.POST:
            task = Task()
            form = TaskForm(
                request.user.get_profile(), None, None, None, request.POST, instance=task)
            if form.is_valid():
                task = form.save()
                task.set_user_from_request(request)
                return HttpResponseRedirect(reverse('projects_task_view', args=[task.id]))
        else:
            return HttpResponseRedirect(reverse('projects'))
    else:
        form = TaskForm(request.user.get_profile(), None, None, None)

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('projects/task_add', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def task_add_typed(request, project_id=None, response_format='html'):
    "Task add to preselected project"

    project = None
    if project_id:
        project = get_object_or_404(Project, pk=project_id)
        if not request.user.get_profile().has_permission(project, mode='x'):
            project = None

    if request.POST:
        if not 'cancel' in request.POST:
            task = Task()
            form = TaskForm(
                request.user.get_profile(), None, project_id, None, request.POST, instance=task)
            if form.is_valid():
                task = form.save()
                task.set_user_from_request(request)
                return HttpResponseRedirect(reverse('projects_task_view', args=[task.id]))
        else:
            return HttpResponseRedirect(reverse('projects_project_view', args=[project.id]))
    else:
        form = TaskForm(request.user.get_profile(), None, project_id, None)

    context = _get_default_context(request)
    context.update({'form': form,
                    'project': project})

    return render_to_response('projects/task_add_typed', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def task_add_to_milestone(request, milestone_id=None, response_format='html'):
    "Task add to preselected project"

    milestone = None
    if milestone_id:
        milestone = get_object_or_404(Milestone, pk=milestone_id)
        if not request.user.get_profile().has_permission(milestone, mode='x'):
            milestone = None

    project = milestone.project
    project_id = milestone.project.id

    if request.POST:
        if not 'cancel' in request.POST:
            task = Task()
            form = TaskForm(request.user.get_profile(), None,
                            project_id, milestone_id, request.POST, instance=task)
            if form.is_valid():
                task = form.save()
                task.set_user_from_request(request)
                return HttpResponseRedirect(reverse('projects_task_view', args=[task.id]))
        else:
            return HttpResponseRedirect(reverse('projects_milestone_view', args=[milestone.id]))
    else:
        form = TaskForm(
            request.user.get_profile(), None, project_id, milestone_id)

    context = _get_default_context(request)
    context.update({'form': form,
                    'project': project,
                    'milestone': milestone})

    return render_to_response('projects/task_add_to_milestone', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def task_add_subtask(request, task_id=None, response_format='html'):
    "New subtask form"

    parent = None
    if task_id:
        parent = get_object_or_404(Task, pk=task_id)
        if not request.user.get_profile().has_permission(parent, mode='x'):
            parent = None

    if request.POST:
        if not 'cancel' in request.POST:
            task = Task()
            form = TaskForm(
                request.user.get_profile(), parent, None, None, request.POST, instance=task)
            if form.is_valid():
                task = form.save()
                task.set_user_from_request(request)
                return HttpResponseRedirect(reverse('projects_task_view', args=[parent.id]))
        else:
            return HttpResponseRedirect(reverse('projects_task_view', args=[parent.id]))
    else:
        form = TaskForm(request.user.get_profile(), parent, None, None)

    context = _get_default_context(request)
    context.update({'form': form,
                    'task': parent})

    return render_to_response('projects/task_add_subtask', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_form
def task_view(request, task_id, response_format='html'):
    "Single task view page"

    task = get_object_or_404(Task, pk=task_id)
    if not request.user.get_profile().has_permission(task):
        return user_denied(request, message="You don't have access to this Task")

    if request.user.get_profile().has_permission(task, mode='x'):
        if request.POST:
            if 'add-work' in request.POST:
                return HttpResponseRedirect(reverse('projects_task_time_slot_add', args=[task.id]))
            elif 'start-work' in request.POST:
                return HttpResponseRedirect(reverse('projects_task_view', args=[task.id]))
            record = UpdateRecord()
            record.record_type = 'manual'
            form = TaskRecordForm(
                request.user.get_profile(), request.POST, instance=record)
            if form.is_valid():
                record = form.save()
                record.set_user_from_request(request)
                record.save()
                record.about.add(task)
                task.set_last_updated()
                return HttpResponseRedirect(reverse('projects_task_view', args=[task.id]))
        else:
            form = TaskRecordForm(request.user.get_profile())
    else:
        form = None

    subtasks = Object.filter_by_request(
        request, Task.objects.filter(parent=task))
    time_slots = Object.filter_by_request(
        request, TaskTimeSlot.objects.filter(task=task))

    context = _get_default_context(request)
    context.update({'task': task,
                    'subtasks': subtasks,
                    'record_form': form,
                    'time_slots': time_slots})

    if 'massform' in context and 'project' in context['massform'].fields:
        del context['massform'].fields['project']

    return render_to_response('projects/task_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def task_edit(request, task_id, response_format='html'):
    "Task edit page"

    task = get_object_or_404(Task, pk=task_id)
    if not request.user.get_profile().has_permission(task, mode='w'):
        return user_denied(request, message="You don't have access to this Task")

    if request.POST:
        if not 'cancel' in request.POST:
            form = TaskForm(
                request.user.get_profile(), None, None, None, request.POST, instance=task)
            if form.is_valid():
                task = form.save()
                return HttpResponseRedirect(reverse('projects_task_view', args=[task.id]))
        else:
            return HttpResponseRedirect(reverse('projects_task_view', args=[task.id]))
    else:
        form = TaskForm(
            request.user.get_profile(), None, None, None, instance=task)

    context = _get_default_context(request)
    context.update({'form': form,
                    'task': task})

    return render_to_response('projects/task_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def task_delete(request, task_id, response_format='html'):
    "Task delete"

    task = get_object_or_404(Task, pk=task_id)
    if not request.user.get_profile().has_permission(task, mode='w'):
        return user_denied(request, message="You don't have access to this Task")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                task.trash = True
                task.save()
            else:
                task.delete()
            return HttpResponseRedirect(reverse('projects_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('projects_task_view', args=[task.id]))

    subtasks = Object.filter_by_request(
        request, Task.objects.filter(parent=task))
    time_slots = Object.filter_by_request(
        request, TaskTimeSlot.objects.filter(task=task))

    context = _get_default_context(request)
    context.update({'task': task,
                    'subtasks': subtasks,
                    'time_slots': time_slots})

    return render_to_response('projects/task_delete', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def task_set_status(request, task_id, status_id, response_format='html'):
    "Task quick set: Status"

    task = get_object_or_404(Task, pk=task_id)
    if not request.user.get_profile().has_permission(task, mode='x'):
        return user_denied(request, message="You don't have access to this Task")

    status = get_object_or_404(TaskStatus, pk=status_id)
    if not request.user.get_profile().has_permission(status):
        return user_denied(request, message="You don't have access to this Task Status")

    if not task.status == status:
        task.status = status
        task.save()

    return task_view(request, task_id, response_format)


#
# Task Time Slots
#

@handle_response_format
@treeio_login_required
def task_time_slot_start(request, task_id, response_format='html'):
    "Start TaskTimeSlot for preselected Task"

    task = get_object_or_404(Task, pk=task_id)
    if not request.user.get_profile().has_permission(task, mode='x'):
        return user_denied(request, message="You don't have access to this Task")

    if not task.is_being_done_by(request.user.get_profile()):
        task_time_slot = TaskTimeSlot(
            task=task, time_from=datetime.now(), user=request.user.get_profile())
        task_time_slot.save()
        task_time_slot.set_user_from_request(request)

    return HttpResponseRedirect(reverse('projects_task_view', args=[task_id]))


@handle_response_format
@treeio_login_required
def task_time_slot_stop(request, slot_id, response_format='html'):
    "Stop TaskTimeSlot for preselected Task"

    slot = get_object_or_404(TaskTimeSlot, pk=slot_id)
    if not request.user.get_profile().has_permission(slot, mode='w'):
        return user_denied(request, message="You don't have access to this TaskTimeSlot")

    if request.POST and 'stop' in request.POST:
        slot.time_to = datetime.now()
        slot.details = request.POST['details']
        slot.save()

    return HttpResponseRedirect(reverse('projects_task_view', args=[slot.task_id]))


@handle_response_format
@treeio_login_required
def task_time_slot_add(request, task_id, response_format='html'):
    "Time slot add to preselected task"

    task = get_object_or_404(Task, pk=task_id)
    if not request.user.get_profile().has_permission(task, mode='x'):
        return user_denied(request, message="You don't have access to this Task")

    if request.POST:
        task_time_slot = TaskTimeSlot(
            task=task, time_to=datetime.now(), user=request.user.get_profile())
        form = TaskTimeSlotForm(
            request.user.get_profile(), task_id, request.POST, instance=task_time_slot)
        if 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('projects_task_view', args=[task.id]))
        elif form.is_valid():
            task_time_slot = form.save()
            task_time_slot.set_user_from_request(request)
            return HttpResponseRedirect(reverse('projects_task_view', args=[task.id]))
    else:
        form = TaskTimeSlotForm(request.user.get_profile(), task_id)

    subtasks = Object.filter_by_request(
        request, Task.objects.filter(parent=task))
    time_slots = Object.filter_by_request(
        request, TaskTimeSlot.objects.filter(task=task))

    context = _get_default_context(request)
    context.update({'form': form,
                    'task': task,
                    'subtasks': subtasks,
                    'time_slots': time_slots})

    return render_to_response('projects/task_time_add', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def task_time_slot_view(request, time_slot_id, response_format='html'):
    "Task time slot edit page"

    task_time_slot = get_object_or_404(TaskTimeSlot, pk=time_slot_id)
    task = task_time_slot.task
    if not request.user.get_profile().has_permission(task_time_slot) \
            and not request.user.get_profile().has_permission(task):
        return user_denied(request, message="You don't have access to this Task Time Slot")

    context = _get_default_context(request)
    context.update({'task_time_slot': task_time_slot,
                    'task': task})

    return render_to_response('projects/task_time_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def task_time_slot_edit(request, time_slot_id, response_format='html'):
    "Task time slot edit page"

    task_time_slot = get_object_or_404(TaskTimeSlot, pk=time_slot_id)
    task = task_time_slot.task

    if not request.user.get_profile().has_permission(task_time_slot, mode='w') \
            and not request.user.get_profile().has_permission(task, mode='w'):
        return user_denied(request, message="You don't have access to this Task Time Slot")

    if request.POST:
        form = TaskTimeSlotForm(
            request.user.get_profile(), None, request.POST, instance=task_time_slot)
        if form.is_valid():
            task_time_slot = form.save()
            return HttpResponseRedirect(reverse('projects_task_view', args=[task.id]))

        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('projects_task_view', args=[task.id]))
    else:
        form = TaskTimeSlotForm(
            request.user.get_profile(), None, instance=task_time_slot)

    context = _get_default_context(request)
    context.update({'form': form,
                    'task_time_slot': task_time_slot,
                    'task': task})

    return render_to_response('projects/task_time_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def task_time_slot_delete(request, time_slot_id, response_format='html'):
    "Task time slot delete"

    task_time_slot = get_object_or_404(TaskTimeSlot, pk=time_slot_id)
    task = task_time_slot.task

    if not request.user.get_profile().has_permission(task_time_slot, mode='w') \
            and not request.user.get_profile().has_permission(task, mode='w'):
        return user_denied(request, message="You don't have access to this Task Time Slot")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                task_time_slot.trash = True
                task_time_slot.save()
            else:
                task_time_slot.delete()
            return HttpResponseRedirect(reverse('projects_task_view', args=[task.id]))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('projects_task_view', args=[task.id]))

    context = _get_default_context(request)
    context.update({'task_time_slot': task_time_slot,
                    'task': task})

    return render_to_response('projects/task_time_delete', context,
                              context_instance=RequestContext(request), response_format=response_format)

#
# Task Statuses
#


@handle_response_format
@treeio_login_required
def task_status_add(request, response_format='html'):
    "TaskStatus add"

    if not request.user.get_profile().is_admin('treeio.projects'):
        return user_denied(request, message="You don't have administrator access to the Projects module")

    if request.POST:
        if not 'cancel' in request.POST:
            status = TaskStatus()
            form = TaskStatusForm(
                request.user.get_profile(), request.POST, instance=status)
            if form.is_valid():
                status = form.save()
                status.set_user_from_request(request)
                return HttpResponseRedirect(reverse('projects_index_by_status', args=[status.id]))
        else:
            return HttpResponseRedirect(reverse('projects_settings_view'))
    else:
        form = TaskStatusForm(request.user.get_profile())

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('projects/status_add', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def task_status_edit(request, status_id, response_format='html'):
    "TaskStatus edit"

    status = get_object_or_404(TaskStatus, pk=status_id)
    if not request.user.get_profile().has_permission(status, mode='w'):
        return user_denied(request, message="You don't have access to this Task Status")

    if request.POST:
        if not 'cancel' in request.POST:
            form = TaskStatusForm(
                request.user.get_profile(), request.POST, instance=status)
            if form.is_valid():
                status = form.save()
                return HttpResponseRedirect(reverse('projects_index_by_status', args=[status.id]))
        else:
            return HttpResponseRedirect(reverse('projects_index_by_status', args=[status.id]))
    else:
        form = TaskStatusForm(request.user.get_profile(), instance=status)

    context = _get_default_context(request)
    context.update({'form': form,
                    'status': status})

    return render_to_response('projects/status_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def task_status_delete(request, status_id, response_format='html'):
    "TaskStatus delete"

    status = get_object_or_404(TaskStatus, pk=status_id)
    if not request.user.get_profile().has_permission(status, mode='w'):
        return user_denied(request, message="You don't have access to this Task Status")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                status.trash = True
                status.save()
            else:
                status.delete()
            return HttpResponseRedirect(reverse('projects_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('projects_index_by_status', args=[status.id]))

    milestones = Object.filter_by_request(request, Milestone.objects)

    context = _get_default_context(request)
    context.update({'status': status,
                    'milestones': milestones})

    return render_to_response('projects/status_delete', context,
                              context_instance=RequestContext(request), response_format=response_format)


#
# Settings
#

@handle_response_format
@treeio_login_required
def settings_view(request, response_format='html'):
    "Settings"

    if not request.user.get_profile().is_admin('treeio.projects'):
        return user_denied(request, message="You don't have administrator access to the Projects module")

    # default task status
    try:
        conf = ModuleSetting.get_for_module(
            'treeio.projects', 'default_task_status')[0]
        default_task_status = TaskStatus.objects.get(
            pk=long(conf.value), trash=False)
    except Exception:
        default_task_status = None

    statuses = TaskStatus.objects.filter(trash=False)
    context = _get_default_context(request)
    context.update({'default_task_status': default_task_status,
                    'statuses': statuses})

    return render_to_response('projects/settings_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def settings_edit(request, response_format='html'):
    "Settings"

    if not request.user.get_profile().is_admin('treeio.projects'):
        return user_denied(request, message="You don't have administrator access to the Projects module")

    form = None
    if request.POST:
        if not 'cancel' in request.POST:
            form = SettingsForm(request.user.get_profile(), request.POST)
            if form.is_valid():
                form.save()
                return HttpResponseRedirect(reverse('projects_settings_view'))
        else:
            return HttpResponseRedirect(reverse('projects_settings_view'))
    else:
        form = SettingsForm(request.user.get_profile())

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('projects/settings_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)

#
# AJAX lookups
#


@treeio_login_required
def ajax_task_lookup(request, response_format='html'):
    "Returns a list of matching tasks"

    tasks = []
    if request.GET and 'term' in request.GET:
        tasks = Task.objects.filter(name__icontains=request.GET['term'])[:10]

    return render_to_response('projects/ajax_task_lookup',
                              {'tasks': tasks},
                              context_instance=RequestContext(request),
                              response_format=response_format)


#
# Widgets
#

@treeio_login_required
def widget_tasks_assigned_to_me(request, response_format='html'):
    "A list of tasks assigned to current user"

    query = Q(parent__isnull=True) & Q(status__hidden=False)

    tasks = Object.filter_by_request(request, Task.objects.filter(query))

    return render_to_response('projects/widgets/tasks_assigned_to_me',
                              {'tasks': tasks},
                              context_instance=RequestContext(request), response_format=response_format)

#
# Gantt Chart
#


@treeio_login_required
def gantt_view(request, project_id, response_format='html'):
    projects = Project.objects.filter(trash=False)
    project = projects.filter(pk=project_id)[0]
    if not project:
        raise Http404
    ganttData = []

    # generate json
    milestones = Milestone.objects.filter(project=project).filter(trash=False)
    for milestone in milestones:
        tasks = Task.objects.filter(milestone=milestone).filter(
            start_date__isnull=False).filter(end_date__isnull=False).filter(trash=False)
        series = []
        for task in tasks:
            tlabel = (
                task.name[:30] + '..') if len(task.name) > 30 else task.name
            tn = '<a href="%s" class="popup-link">%s</a>' % (
                reverse('projects_task_view', args=[task.id]), tlabel)
            series.append({'id': task.id,
                           'name': tn,
                           'label': tlabel,
                           'start': task.start_date.date().isoformat(),
                           'end': task.end_date.date().isoformat()})
        mlabel = (
            milestone.name[:30] + '..') if len(milestone.name) > 30 else milestone.name
        mn = '<a href="%s" class="popup-link projects-milestone">%s</a>' % (
            reverse('projects_milestone_view', args=[milestone.id]), mlabel)
        a = {'id': milestone.id, 'name': mn, 'label': mlabel}
        if series:
            a['series'] = series
        else:
            a['series'] = []
        if milestone.start_date and milestone.end_date:
            a['start'] = milestone.start_date.date().isoformat()
            a['end'] = milestone.end_date.date().isoformat()
            a['color'] = '#E3F3D9'
        if series or (milestone.start_date and milestone.end_date):
            ganttData.append(a)
    unclassified = Task.objects.filter(project=project).filter(milestone__isnull=True).filter(
        start_date__isnull=False).filter(end_date__isnull=False).filter(trash=False)
    series = []
    for task in unclassified:
        tlabel = (task.name[:30] + '..') if len(task.name) > 30 else task.name
        tn = '<a href="%s" class="popup-link">%s</a>' % (
            reverse('projects_task_view', args=[task.id]), tlabel)
        series.append({'id': task.id,
                       'name': tn,
                       'label': tlabel,
                       'start': task.start_date.date().isoformat(),
                       'end': task.end_date.date().isoformat()})
    if series:
        ganttData.append(
            {'id': 0, 'name': _('Unclassified Tasks'), 'series': series})
    if ganttData:
        jdata = json.dumps(ganttData)
    else:
        jdata = None

    return render_to_response('projects/gantt_view',
                              {'jdata': jdata,
                               'project': project,
                               'projects': projects},
                              context_instance=RequestContext(request), response_format=response_format)


#@treeio_login_required
def task_ajax(request, response_format='html'):
    "For AJAX"
    print request
    if request.POST:
        print request.POST

    # return HttpResponse(options,
    # mimetype=settings.HARDTREE_RESPONSE_FORMATS['json'])

########NEW FILE########
__FILENAME__ = widgets
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Projects module widgets
"""

WIDGETS = {'widget_tasks_assigned_to_me': {'title': 'Tasks Assigned To Me',
                                           'size': "95%"}}


def get_widgets(request):
    "Returns a set of all available widgets"

    return WIDGETS

########NEW FILE########
__FILENAME__ = related_fields_patch
# Django command helper to apply django related fields patch programattically
# Will cd into 1st argument and run patch
import os
import sys
from subprocess import Popen, PIPE

patch_file = os.path.join(
    os.path.abspath('.'), 'bin', 'django-related-fields.patch')

process = Popen(['patch', '-p1'], stdin=PIPE, shell=False, cwd=sys.argv[1])
process.communicate(open(patch_file).read())

########NEW FILE########
__FILENAME__ = admin
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Reports module: Admin page
"""
from treeio.reports.models import Report
from django.contrib import admin


class ReportAdmin(admin.ModelAdmin):

    """ Message stream admin """
    list_display = ('name', 'model', 'content')
    search_fields = ['name']

admin.site.register(Report, ReportAdmin)

########NEW FILE########
__FILENAME__ = forms
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Hardtree Reporting forms
"""

from django import forms
from django.shortcuts import get_object_or_404
from treeio.core.models import Object
from treeio.reports.models import Report, Chart
from django.utils.translation import ugettext as _
from treeio.core.decorators import preprocess_form
from treeio.reports.helpers import loads, dumps

preprocess_form()


class MassActionForm(forms.Form):
    """ Mass action form for Reports """

    delete = forms.ChoiceField(label=_("With selected"), choices=(('', '-----'), ('delete', _('Delete Completely')),
                                                                  ('trash', _('Move to Trash'))), required=False)

    instance = None

    def __init__(self, user, *args, **kwargs):
        if 'instance' in kwargs:
            self.instance = kwargs['instance']
            del kwargs['instance']

        super(MassActionForm, self).__init__(*args, **kwargs)
        self.fields['delete'] = forms.ChoiceField(label=_("With selected"), choices=(('', '-----'),
                                                                                     ('delete', _(
                                                                                         'Delete Completely')),
                                                                                     ('trash', _('Move to Trash'))), required=False)

    def save(self, *args, **kwargs):
        "Process form"

        if self.instance:
            if self.is_valid():
                if self.cleaned_data['delete']:
                    if self.cleaned_data['delete'] == 'delete':
                        self.instance.delete()
                    if self.cleaned_data['delete'] == 'trash':
                        self.instance.trash = True
                        self.instance.save()


class ObjChoiceForm(forms.Form):
    """ Choose an Object to Report On """

    def __init__(self, user, *args, **kwargs):

        object_types = kwargs.pop('object_types')
        object_names = kwargs.pop('object_names')

        x = ((object_types[i], object_names[i])
             for i in range(0, len(object_types)))

        super(ObjChoiceForm, self).__init__(*args, **kwargs)
        self.fields['choice'] = forms.ChoiceField(
            label=_("Choose an Object to Report on"), choices=(x))


class ReportForm(forms.ModelForm):
    "New report Form"

    def __init__(self, user, *args, **kwargs):
        super(ReportForm, self).__init__(*args, **kwargs)

    class Meta:

        "Report"
        model = Report
        fields = ('model',)


class SetForm(forms.Form):
    """ Report Set Form """

    def __init__(self, user, *args, **kwargs):
        names = kwargs.pop('names')
        obj = kwargs.pop('obj')
        super(SetForm, self).__init__(*args, **kwargs)

        for i, name in enumerate(names):
            self.fields[names[i]] = forms.BooleanField(
                label=_(names[i].title().replace('_', ' ')), required=False)
            self.fields['obj'] = forms.CharField(
                initial=str(obj), widget=forms.widgets.HiddenInput())


class ChartForm(forms.Form):
    "Google Chart Form"
    CHART_TYPES = (
        ('line', 'line'),
        ('spline', 'spline'),
        ('area', 'area'),
        ('areaspline', 'areaspline'),
        ('column', 'column'),
        ('bar', 'bar'),
        ('pie', 'pie'),
        ('scatter', 'scatter')
    )

    title = forms.CharField(required=False)
    type = forms.ChoiceField(choices=CHART_TYPES)
    grouping = forms.ChoiceField(required=True, label="Grouping")

    def clean_grouping(self):
        data = self.cleaned_data['grouping']
        if not data:
            raise forms.ValidationError(
                _("Please enter a field to group your data by."))
        return data

    def __init__(self, user, *args, **kwargs):
        self.report_id = None
        if 'report_id' in kwargs:
            self.report_id = kwargs.pop('report_id')
        if 'chart_id' in kwargs:
            self.chart_id = kwargs.pop('chart_id')
            chart = get_object_or_404(Chart, pk=self.chart_id)
            self.report_id = chart.report_id

        super(ChartForm, self).__init__(*args, **kwargs)
        if not self.report_id:
            return

        report = get_object_or_404(Report, pk=self.report_id)
        chart = None
        if hasattr(self, 'chart_id'):
            chart = get_object_or_404(Chart, pk=self.chart_id)

        model = loads(report.model)

        object = model.name
        object = object.split('.')

        module_name = object[0] + '.' + object[1] + '.' + object[2]
        import_name = object[3]

        module = __import__(
            module_name, globals(), locals(), [import_name], -1)
        classobj = getattr(module, import_name)

        unfiltered_set = classobj.objects.exclude(trash=True)

        set = []
        for s in unfiltered_set:
            filtered = False
            for field in model.fields:
                if field.filters and str(getattr(s, field.name)) not in field.filters:
                    filtered = True
            if not filtered:
                set.append(s)

        # perhaps do type checking on a setting list of types (for each type)
        self.fields['grouping'].choices = [('', '--------')]

        # Check for group
        groupname = None
        groups = None
        for field in model.fields:
            self.fields['grouping'].choices.append(
                (str(field.name), str(field.name).replace('_', ' ').title()))
            if field.groupby == 1:
                self.fields['grouping'].initial = str(field.name)

        if chart:
            options = loads(chart.options)
            for f in options:
                if f in self.fields:
                    self.fields[f].initial = options[f]

    def save(self):
        if hasattr(self, 'chart_id'):
            chart = get_object_or_404(Chart, pk=self.chart_id)
        else:
            chart = Chart()
            report = get_object_or_404(Report, pk=self.report_id)
            chart.report = report
        chart.name = self.data['title']
        chart.options = dumps(self.data)
        chart.save()
        return chart


class QueryForm(forms.Form):

    def __init__(self, user, *args, **kwargs):
        kwargs.pop('names')
        super(QueryForm, self).__init__(*args, **kwargs)


class FilterForm(forms.Form):
    "Filter Form"

    fields = {}

    def __init__(self, user, *args, **kwargs):
        if not (kwargs.has_key('report') and kwargs.has_key('field_name')):
            return
        report = kwargs.pop('report')
        field_name = kwargs.pop('field_name')
        super(FilterForm, self).__init__(*args, **kwargs)

        model = loads(report.model)

        self.report = report
        self.field_name = field_name

        classobj = model.get_class_object()
        field = classobj._meta.get_field_by_name(field_name)[0]
        # TODO: Provisions for ManyToMany fields
        self.fields['operand'] = forms.ChoiceField()
        if field.get_internal_type() == 'ForeignKey':
            self.fields['choice'] = forms.ModelChoiceField(queryset=Object.filter_permitted(user,
                                                                                            field.related.parent_model.objects.all(), mode='x'))
            fc = (('is', 'is'), ('not', 'is not'))
        elif field.get_internal_type() == 'DateTimeField':
            self.fields['choice'] = forms.DateTimeField()
            self.fields['choice'].widget.attrs.update(
                {'class': 'datetimepicker'})
            fc = (('beforedatetime', 'before'), ('afterdatetime', 'after'))
        elif field.get_internal_type() == 'DateField':
            self.fields['choice'] = forms.DateField()
            self.fields['choice'].widget.attrs.update({'class': 'datepicker'})
            fc = (('beforedate', 'before'), (
                'afterdate', 'after'), ('on', 'on'))
        else:
            self.fields['choice'] = field.formfield()
            fc = (('is', 'is'), ('not', 'is not'))

        self.fields['operand'].choices = fc
        self.fields['operand'].label = ""
        self.fields['choice'].label = ""
        self.fields['choice'].help_text = ""

    def save(self):
        # add filter to field
        if not self.data['choice']:
            return
        t = self.report
        model = loads(t.model)
        classobj = model.get_class_object()
        xfield = classobj._meta.get_field_by_name(self.field_name)[0]

        field = model.get_field(self.field_name)
        if not field.filters:
            field.filters = []

        c = self.data['choice']

        type = xfield.get_internal_type()
        if type == 'ManyToManyField':
            c = xfield.related.parent_model.objects.filter(pk=c)[0]
        if type == 'ForeignKey':
            c = xfield.related.parent_model.objects.filter(pk=c)[0]

        display_choice = c
        if hasattr(self.fields['choice'], 'choices'):
            for choice, dc in self.fields['choice'].choices:
                if unicode(c) == unicode(choice):
                    display_choice = dc
                    break

        for choice, dc in self.fields['operand'].choices:
            if unicode(self.data['operand']) == unicode(choice):
                display_operand = dc
                break

        display = "%s %s %s" % (
            field.get_human_name(), display_operand, unicode(display_choice))
        field.filters.append({'choice': c,
                              'operand': self.data['operand'],
                              'display': display
                              })
        t.model = dumps(model)
        t.save()

########NEW FILE########
__FILENAME__ = helpers
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

import re
import pickle
import base64


def loads(value):
    "Unpickle a value"
    result = None
    try:
        result = pickle.loads(base64.b64decode((value)))
    except pickle.PickleError:
        pass
    return result


def dumps(value):
    "Pickle a value"
    return base64.b64encode(pickle.dumps(value, pickle.HIGHEST_PROTOCOL))


def average(values):
    """Computes the arithmetic mean of a list of numbers.

    >>> print average([20, 30, 70])
    40.0
    """
    return sum(values) / len(values) if values else 0


number_field_regex = re.compile('(Integer|Float|Decimal)Field$')

aggregate_functions = {'avg': {'description': 'AVG', 'function': average},
                       'sum': {'description': 'SUM', 'function': sum},
                       'max': {'description': 'MAX', 'function': max},
                       'min': {'description': 'MIN', 'function': min},
                       }

########NEW FILE########
__FILENAME__ = hmodule
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Reports: Hardtree module definition
"""

PROPERTIES = {
    'title': 'Reports',
    'details': 'Create Reports',
    'url': '/reports/',
    'system': False,
    'type': 'minor',
}


URL_PATTERNS = [
    '^/reports/',
]

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding model 'Template'
        db.create_table('reports_template', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=512)),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('model', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('reports', ['Template'])

        # Adding model 'Report'
        db.create_table('reports_report', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=512)),
            ('template', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['reports.Template'], null=True, blank=True)),
            ('content', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('reports', ['Report'])

    def backwards(self, orm):

        # Deleting model 'Template'
        db.delete_table('reports_template')

        # Deleting model 'Report'
        db.delete_table('reports_report')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'everybody_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']"}),
            'group_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"}),
            'user_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'reports.report': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'Report', '_ormbases': ['core.Object']},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'template': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['reports.Template']", 'null': 'True', 'blank': 'True'})
        },
        'reports.template': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'Template', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'model': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        }
    }

    complete_apps = ['reports']

########NEW FILE########
__FILENAME__ = 0002_auto__del_template__add_chart__del_field_report_template__add_field_re
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Deleting model 'Template'
        db.delete_table('reports_template')

        # Adding model 'Chart'
        db.create_table('reports_chart', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=255)),
            ('report', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['reports.Report'])),
            ('options', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('reports', ['Chart'])

        # Deleting field 'Report.template'
        db.delete_column('reports_report', 'template_id')

        # Adding field 'Report.model'
        db.add_column('reports_report', 'model', self.gf(
            'django.db.models.fields.TextField')(null=True, blank=True), keep_default=False)

    def backwards(self, orm):

        # Adding model 'Template'
        db.create_table('reports_template', (
            ('model', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=512)),
        ))
        db.send_create_signal('reports', ['Template'])

        # Deleting model 'Chart'
        db.delete_table('reports_chart')

        # Adding field 'Report.template'
        db.add_column('reports_report', 'template', self.gf('django.db.models.fields.related.ForeignKey')(
            to=orm['reports.Template'], null=True, blank=True), keep_default=False)

        # Deleting field 'Report.model'
        db.delete_column('reports_report', 'model')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'reports.chart': {
            'Meta': {'object_name': 'Chart', '_ormbases': ['core.Object']},
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'options': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'report': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['reports.Report']"})
        },
        'reports.report': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'Report', '_ormbases': ['core.Object']},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'model': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        }
    }

    complete_apps = ['reports']

########NEW FILE########
__FILENAME__ = 0003_delete_old
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models


class Migration(DataMigration):

    def forwards(self, orm):
        "Removes all old reports (these need to be re-created manually)"
        for report in orm['reports.Report'].objects.all():
            report.delete()

    def backwards(self, orm):
        raise RuntimeError("Cannot reverse this migration.")

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.AccessEntity']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'reports.chart': {
            'Meta': {'object_name': 'Chart', '_ormbases': ['core.Object']},
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'options': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'report': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['reports.Report']"})
        },
        'reports.report': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'Report', '_ormbases': ['core.Object']},
            'content': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'model': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        }
    }

    complete_apps = ['reports']

########NEW FILE########
__FILENAME__ = models
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Reports models
"""

from django.db import models
from django.core.urlresolvers import reverse
from django.utils.translation import ugettext as _
from treeio.core.models import Object
from jinja2.filters import do_title
from treeio.reports.helpers import aggregate_functions


class Report(Object):

    "Generated Report"
    name = models.CharField(max_length=512)
    model = models.TextField(blank=True, null=True)
    content = models.TextField(blank=True, null=True)

    class Meta:

        "Report"
        ordering = ['-date_created']

    def __unicode__(self):
        return self.name

    def get_absolute_url(self):
        "Returns absolute URL for the Report"
        try:
            return reverse('reports_report_view', args=[self.id])
        except Exception:
            pass


class Model:

    def __init__(self, name='', fields=None):
        self.name = name
        self.fields = fields

    def get_field(self, name):
        for field in self.fields:
            if field.name == name:
                return field
        return None

    def get_class_object(self):
        object = self.name
        object = object.split('.')

        module_name = object[0] + '.' + object[1] + '.' + object[2]
        import_name = object[3]

        module = __import__(
            module_name, globals(), locals(), [import_name], -1)
        return getattr(module, import_name).objects.all()[0]


class Field:

    def __init__(self, name='', display=False, filters=[], aggregation=None, groupby=0, join=None):
        self.name = name
        self.display = display
        self.filters = filters
        self.aggregation = aggregation
        self.groupby = groupby
        self.join = join

    def get_human_name(self):
        "Returns translated name in Camel Case"
        human = self.name.replace('_', ' ')
        human = _(do_title(human))
        return human

    def get_aggregate_name(self):
        "Returns translated name in Camel Case"
        if self.aggregation and aggregate_functions.has_key(self.aggregation):
            return _(aggregate_functions[self.aggregation]['description'])
        return ''


class Chart(Object):
    name = models.CharField(max_length=255)
    report = models.ForeignKey(Report)
    options = models.TextField(blank=True, null=True)

    access_inherit = ('report', '*module', '*user')

    def __unicode__(self):
        return self.name

    def get_absolute_url(self):
        "Returns absolute URL for the Report"
        try:
            return reverse('reports_report_view', args=[self.report_id])
        except Exception:
            pass

########NEW FILE########
__FILENAME__ = reports
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

from __future__ import division
"""
Reports templatetags
"""
from coffin import template
from treeio.core.rendering import render_to_string
from django.utils.translation import ugettext as _
from jinja2 import contextfunction, Markup
from jinja2.utils import internalcode
from django.template import RequestContext
from random import random
from datetime import datetime
import hashlib
from treeio.reports.helpers import loads, aggregate_functions, number_field_regex
from treeio.reports.views import _get_report_content
import json

register = template.Library()


@contextfunction
def display_chart(context, chart, skip_group=False):
    "Return HTML for chart"

    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    options = loads(chart.options)

    content = _get_report_content(chart.report, request)

    objs = content['set']

    chart_dict = {}

    field_name = options['grouping']

    model = loads(chart.report.model)

    chart_dict['yAxis'] = {'allowDecimals': False,
                           'title': {'text': model.name.split('.')[-1] + " Count vs. " + field_name.replace('_', ' ').title()}}
    chart_dict['xAxis'] = {}
    try:
        xfield = objs[0]._meta.get_field_by_name(field_name)[0]
    except:
        chart.delete()
        return

    def get_date(g, mindate):
        if g and g != datetime.min.date():
            return g
        else:
            return mindate

    if xfield.get_internal_type() == 'ManyToManyField':
        l = []
        for obj in objs:
            for mi in getattr(obj, field_name).all():
                l.append(unicode(mi))
    elif xfield.get_internal_type() == 'DateTimeField' or xfield.get_internal_type() == 'DateField':
        chart_dict['xAxis']['labels'] = {  # 'rotation':90,
            'align': 'left',
            'x': 3,
            'y': 15}
        l, m, datelist = [], [], []
        maxdate = None
        mindate = None
        for obj in objs:
            if getattr(obj, field_name):
                x = getattr(obj, field_name)
                if xfield.get_internal_type() == 'DateTimeField':
                    x = x.date()
                if not maxdate or x > maxdate:
                    maxdate = x
                if not mindate or x < mindate:
                    mindate = x
                datelist.append(x)
                if unicode(x) not in m:
                    m.append(unicode(x))
            else:
                datelist.append(datetime.min.date())
        while datetime.min.date() in datelist:
            datelist.append(mindate)
            datelist.remove(datetime.min.date())
        datelist = sorted(datelist, key=lambda g: get_date(g, mindate))
        l = [unicode(g) for g in datelist]

        # chart_dict['xAxis']['categories']=m

        chart_dict['xAxis']['type'] = 'datetime'
        td = maxdate - mindate
        #print (td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6) / 10**6
        chart_dict['zoomType'] = 'x'
        chart_dict['xAxis']['tickInterval'] = (
            td.microseconds + (td.seconds + td.days * 24 * 3600) * 10 ** 6) / 10 ** 4
        #chart_dict['xAxis']['tickWidth']= 0,
        chart_dict['maxZoom'] = 14 * 24 * 3600000  # 2wks
        #chart_dict['xAxis']['gridLineWidth']= 1,
        chart_dict['series'] = [{'name': model.name.split('.')[-1], 'data':[]}]
        for x in set(l):
            chart_dict['series'][0]['data'].append(('%s UTC' % x, l.count(x)))

    else:
        l = [unicode(obj.get_field_value(field_name)) for obj in objs]

    if not 'series' in chart_dict:
        chart_dict['series'] = []
        #chart_dict['series'].append({'name':field_name, 'data': [{'name': x, 'y':l.count(x)} for x in set(l)]})
        chart_dict['series'].append({'name': field_name.replace(
            '_', ' ').title(), 'data': [[x, l.count(x)] for x in set(l)]})
    # for x in set(l):
    #    chart_dict['series'].append({'name':x, 'data': l.count(x)})
    #chart_dict['series'].append({'data':[{'name':x, 'y': [l.count(x)]} for x in set(l)]})
        if not 'xAxis' in chart_dict:
            chart_dict['xAxis']['categories'] = [x for x in set(l)]
        # Chart type specific options

        if 'legend' in options and options['legend'] == 'on':
            chart_dict['legend'] = {
                'layout': 'vertical',
                'align': 'right',
                'verticalAlign': 'top',
                'x': -10,
                'y': 100,
                'borderWidth': 0
            }
    if 'title' in options:
        chart_dict['title'] = {'text': options['title']}

    # Create a hash and use it as a unqiue div id and var name for the chart.
    hasher = hashlib.md5()
    hasher.update(str(random()))
    id = 'chartcontainer' + str(hasher.hexdigest())
    # Disable animation for when saving as PDF
    chart_dict['chart'] = {'renderTo': id,
                           'defaultSeriesType': options['type']}
    #chart_dict['plotOptions'] = {'series': {'animation': False}}

    chart_dict['plotOptions'] = {'pie': {
        'allowPointSelect': True,
        'cursor': 'pointer',
        'dataLabels': {
            'enabled': False
        },
        'showInLegend': True
    }}

    chart_dict['credits'] = {'enabled': False}

    rendered_options = json.dumps(chart_dict)

    rendered_options = rendered_options[
        :-1] + ", tooltip: {formatter: function() {return '<b>'+ this.point.name +'</b>: '+ this.y;}}}"

    if 'type' in chart_dict['xAxis'] and chart_dict['xAxis']['type'] == 'datetime':
        rendered_options += """
        datedata = [];
        jQuery.each(options.series[0].data, function(i,item){
        date = Date.parse(item[0]);
        count = item[1];
        datedata.push([date, count]);
        });
      options.series[0].data = datedata;

      function merge_options(obj1,obj2){
        var obj3 = {};
        for (attrname in obj1) { obj3[attrname] = obj1[attrname]; }
        for (attrname in obj2) { obj3[attrname] = obj2[attrname]; }
        return obj3;
      }
      var dateoptions =  {


      tooltip: {
         shared: true,
         crosshairs: true

      },

      };


    options = merge_options(options, dateoptions);

              """

    return Markup(render_to_string('reports/tags/chart',
                                   {'rendered_options': rendered_options,
                                    'id': id,
                                    'chart_id': chart.id,
                                    'chart': chart,
                                    'name': options['title']},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(display_chart)


@internalcode
def is_field_number(report, field_name):
    model = loads(report.model)

    classobj = model.get_class_object()
    field = classobj._meta.get_field_by_name(field_name)[0]

    if number_field_regex.match(field.get_internal_type()):
        return True
    return False

register.object(is_field_number)


@contextfunction
def select_for_aggregation(context, field_name, value):
    select_str = '<select type="select" name="aggregation-%(field_name)s"><option></option>%(options)s</select>'
    options = ''.join(['<option value="%s"%s>%s</option>' % (name, ' selected' if value == name else '',
                                                             _(func['description'])) for name, func in aggregate_functions.items()])
    return Markup(select_str % {'field_name': field_name,
                                'options': options})

register.object(select_for_aggregation)

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Reports: test suites
"""

from django.test import TestCase
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser
from treeio.core.models import User, Group, Perspective, ModuleSetting
from treeio.reports.models import Report, Chart


class ReportsModelsTest(TestCase):

    "Reports Models Tests"

    def test_model_report(self):
        "Test Report Model"
        obj = Report(name='test')
        obj.save()
        self.assertEquals('test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()

    def test_model_chart(self):
        "Test Chart Model"
        report = Report(name='test')
        report.save()
        obj = Chart(name='test', report=report)
        obj.save()
        self.assertEquals('test', obj.name)
        self.assertNotEquals(obj.id, None)
        obj.delete()


class ReportsViewsTest(TestCase):

    "Reports functional tests for views"

    username = "test"
    password = "password"
    prepared = False

    def setUp(self):
        "Initial Setup"

        if not self.prepared:
            self.group, created = Group.objects.get_or_create(name='test')
            duser, created = DjangoUser.objects.get_or_create(
                username=self.username)
            duser.set_password(self.password)
            duser.save()
            self.user, created = User.objects.get_or_create(user=duser)
            self.user.save()
            perspective, created = Perspective.objects.get_or_create(
                name='default')
            perspective.set_default_user()
            perspective.save()
            ModuleSetting.set('default_perspective', perspective.id)

            self.report = Report(name='test')
            self.report.set_default_user()
            self.report.save()

            self.chart = Chart(name='test_chart', report=self.report)
            self.chart.set_default_user()
            self.chart.save()

            self.client = Client()

            self.prepared = True

    ######################################
    # Testing views when user is logged in
    ######################################
    def test_reports_login(self):
        "Testing /reports/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('reports'))
        self.assertEquals(response.status_code, 200)

    def test_index_login(self):
        "Testing /reports/index/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('reports_index'))
        self.assertEquals(response.status_code, 200)

    def test_index_owned(self):
        "Testing /reports/owned/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('reports_index'))
        self.assertEquals(response.status_code, 200)

    # Charts
    def test_chart_add(self):
        "Testing /reports/chart/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('reports_chart_add'))
        self.assertEquals(response.status_code, 200)

    def test_chart_delete_login(self):
        "Testing /reports/chart/delete/<chart_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('reports_chart_delete', args=[self.chart.id]))
        self.assertEquals(response.status_code, 200)

    # Reports
    def test_report_add(self):
        "Testing /reports/report/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('reports_report_add'))
        self.assertEquals(response.status_code, 200)

    def test_report_delete_login(self):
        "Testing /reports/report/delete/<report_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('reports_report_delete', args=[self.report.id]))
        self.assertEquals(response.status_code, 200)

    ######################################
    # Testing views when user is not logged in
    ######################################
    def test_reports_out(self):
        "Testing /reports/"
        response = self.client.get(reverse('reports'))
        self.assertRedirects(response, reverse('user_login'))

    def test_index_out(self):
        "Testing /reports/index/"
        response = self.client.get(reverse('reports_index'))
        self.assertRedirects(response, reverse('user_login'))

    def test_index_owned_out(self):
        "Testing /reports/owned/"
        response = self.client.get(reverse('reports_index'))
        self.assertRedirects(response, reverse('user_login'))

    # Charts
    def test_chart_add_out(self):
        "Testing /reports/chart/add/"
        response = self.client.get(reverse('reports_chart_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_chart_add_typed_out(self):
        "Testing /reports/chart/add/<report_id>"
        response = self.client.get(
            reverse('reports_chart_add', args=[self.report.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_chart_edit_out(self):
        "Testing /reports/chart/edit/<chart_id>"
        response = self.client.get(
            reverse('reports_chart_edit', args=[self.chart.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_chart_delete_out(self):
        "Testing /reports/chart/delete/<chart_id>"
        response = self.client.get(
            reverse('reports_chart_delete', args=[self.chart.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Reports
    def test_report_add_out(self):
        "Testing /reports/report/add/"
        response = self.client.get(reverse('reports_report_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_report_view_out(self):
        "Testing /reports/report/view/<report_id>"
        response = self.client.get(
            reverse('reports_report_view', args=[self.report.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_report_edit_out(self):
        "Testing /reports/report/edit/<report_id>"
        response = self.client.get(
            reverse('reports_report_edit', args=[self.report.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_report_delete_out(self):
        "Testing /reports/report/delete/<report_id>"
        response = self.client.get(
            reverse('reports_report_delete', args=[self.report.id]))
        self.assertRedirects(response, reverse('user_login'))

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Reporting module URLs
"""
from django.conf.urls.defaults import patterns, url

urlpatterns = patterns('treeio.reports.views',

                       # Index pages
                       url(r'^(\.(?P<response_format>\w+))?$',
                           'index', name='reports'),

                       url(r'^index(\.(?P<response_format>\w+))?$',
                           'index', name='reports_index'),

                       url(r'^index/owned(\.(?P<response_format>\w+))?$',
                           'index_owned', name='reports_index_owned'),

                       # Charts

                       url(r'^chart/(?P<chart_id>\d+)/options/(?P<div_id>[a-zA-Z0-9-]+)$',
                           '_get_chart_ajax', name='reports_get_chart_ajax'),

                       url(r'^chart/add/(?P<report_id>\d+)(\.(?P<response_format>\w+))?$',
                           'chart_add', name='reports_chart_add'),

                       url(r'^chart/add/(\.(?P<response_format>\w+))?$',
                           'chart_add', name='reports_chart_add'),

                       url(r'^chart/edit/(?P<chart_id>\d+)(\.(?P<response_format>\w+))?$',
                           'chart_edit', name='reports_chart_edit'),

                       url(r'^chart/delete/(?P<chart_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'chart_delete', name='reports_chart_delete'),

                       # Reports
                       url(r'^report/edit/(?P<report_id>\d+)(\.(?P<response_format>\w+))?$',
                           'report_edit', name='reports_report_edit'),

                       url(r'^report/add(\.(?P<response_format>\w+))?$',
                           'report_add', name='reports_report_add'),

                       url(r'^report/filter/(?P<report_id>\d+)/(?P<field_name>\w+)(\.(?P<response_format>\w+))?/?$',
                           'report_filter', name='reports_report_filter'),
                       url(r'^report/filter/(?P<report_id>\d+)/(?P<field_name>\w+)/(?P<filter_index>\w+)(\.(?P<response_format>\w+))?/?$',
                           'report_filter_remove', name='reports_report_filter_remove'),
                       url(r'^report/group/(?P<report_id>\d+)/(?P<field_name>\w+)(\.(?P<response_format>\w+))?/?$',
                           'report_group', name='reports_report_group'),

                       url(r'^report/view/(?P<report_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'report_view', name='reports_report_view'),

                       url(r'^report/delete/(?P<report_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'report_delete', name='reports_report_delete'),

                       )

########NEW FILE########
__FILENAME__ = views
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Reports module views
"""
from django.shortcuts import get_object_or_404
from django.template import RequestContext
from django.http import HttpResponseRedirect, HttpResponse
from django.utils.translation import ugettext as _
from django.core.urlresolvers import reverse
from treeio.core.conf import settings
from django.db.models import Q
from treeio.core.views import user_denied
from treeio.core.models import Object, Module
from treeio.core.rendering import render_to_response
from treeio.core.decorators import treeio_login_required, handle_response_format
from treeio.reports.forms import ObjChoiceForm, MassActionForm, ChartForm, FilterForm
from treeio.reports.models import Report, Field, Model, Chart
from treeio.reports.helpers import dumps, loads, aggregate_functions, number_field_regex
from itertools import groupby
from datetime import datetime
import json
import re


def _get_default_context(request):
    "Returns default context as a dict()"

    massform = MassActionForm(request.user.get_profile())

    context = {'massform': massform}

    return context


def _process_mass_form(f):
    "Pre-process request to handle mass action form for Reports"

    def wrap(request, *args, **kwargs):
        "Wrap"
        user = request.user.get_profile()
        if 'massform' in request.POST:
            for key in request.POST:
                if 'mass-report' in key:
                    try:
                        report = Report.objects.get(pk=request.POST[key])
                        form = MassActionForm(
                            user, request.POST, instance=report)
                        if form.is_valid() and user.has_permission(report, mode='w'):
                            form.save()
                    except Exception:
                        pass

        return f(request, *args, **kwargs)

    wrap.__doc__ = f.__doc__
    wrap.__name__ = f.__name__

    return wrap


def _get_objects():
    object_types = Object.objects.all().values(
        'object_type').distinct().order_by('object_type')
    # TODO: filter these
    object_names = ["(%s)  %s" %
                    (object_types[i]['object_type'].split('.')[1].title(),
                     Object.objects.filter(
                         object_type=object_types[i]['object_type'])
                     .order_by()[0].get_human_type())
                    for i in range(0, len(object_types))]
    return object_types, object_names


def _get_module_name(path):
    "Returns real and translated module name for the given path, e.g. Service Support for treeio.services.models.Ticket"
    modulename = path
    try:
        modulepath = re.match(
            "(?P<modulepath>.*)\.models.(?P<name>\w+)$", path).group('modulepath')
        module = Module.objects.get(name=modulepath)
        modulename = _(module.title)
    except Module.DoesNotExist:
        pass
    except AttributeError:
        pass
    return modulename

#
# Charts
#


def _get_chart_ajax(request, chart_id=None, div_id=None):
    "For AJAX"
    "Reports index page"

    options = json.dumps({
        'chart': {'renderTo': div_id,
                  'defaultSeriesType': 'line'
                  },
        'title': {'text': 'Alexs Quest for Mooshoo'
                  },
        'xAxis': {
            'categories': ['Apples', 'Bananas', 'Oranges']
        },
        'yAxis': {
            'title': {
                'text': 'Howdy'
            }
        },

        'series': [{'name': 'hi', 'data': 50},
                   {'name': 'h0', 'data': 60},
                   {'name': 'hi', 'data': 50},
                   {'name': 'h0', 'data': 10},
                   {'name': 'hi', 'data': 80},
                   {'name': 'h0', 'data': 40},
                   {'name': 'hi', 'data': 50},
                   {'name': 'h0', 'data': 26},
                   {'name': 'hi', 'data': 50},
                   {'name': 'h0', 'data': 20},
                   {'name': 'hi', 'data': 30},
                   {'name': 'h0', 'data': 80},
                   {'name': 'hi', 'data': 50}]
    })

    return HttpResponse(options, mimetype=settings.HARDTREE_RESPONSE_FORMATS['json'])


def _get_report_content(report, request=None):
    model = loads(report.model)

    object = model.name
    object = object.split('.')

    module_name = object[0] + '.' + object[1] + '.' + object[2]
    import_name = object[3]

    module = __import__(module_name, globals(), locals(), [import_name], -1)
    classobj = getattr(module, import_name)

    if request:
        unfiltered_set = Object.filter_by_request(request, classobj.objects)
    else:
        unfiltered_set = classobj.objects.exclude(trash=True)

    # construct filter
    filters = {}
    excludes = {}
    for field in model.fields:
        for filter in field.filters:
            if filter['operand'] == 'is':
                filters.setdefault(field.name + '__in', []).append(filter['choice'])
            elif filter['operand'] == 'not':
                excludes.setdefault(field.name + '__in', []).append(filter['choice'])
            elif filter['operand'] == 'beforedate':
                filters[field.name + '__gte'] = datetime.date(datetime.strptime(filter['choice'], '%m/%d/%Y'))
            elif filter['operand'] == 'afterdate':
                filters[field.name + '__lte'] = datetime.date(datetime.strptime(filter['choice'], '%m/%d/%Y'))
            elif filter['operand'] == 'beforedatetime':
                filters[field.name + '__gte'] = datetime.strptime(filter['choice'], '%m/%d/%Y %H:%M')
            elif filter['operand'] == 'afterdatetime':
                filters[field.name + '__lte'] = datetime.strptime(filter['choice'], '%m/%d/%Y %H:%M')
            elif filter['operand'] == 'on':
                filters.setdefault(field.name + '__in', []).append(datetime.strptime(filter['choice'], '%m/%d/%Y'))

    set = unfiltered_set.filter(**filters).exclude(**excludes)

    # Check for group
    groupname = None
    groups = None
    for field in model.fields:
        if field.groupby == 1:
            groupname = field.name

    if groupname:
        xfield = classobj._meta.get_field_by_name(groupname)[0]
        xtype = xfield.get_internal_type()
        if xtype == 'ManyToManyField':
            set = sorted(set, key=lambda item: (
                ", ".join([unicode(i) for i in getattr(item, groupname).all()])), reverse=True)
            groups, groupnames = [], []
            for obj in set:
                for n in getattr(obj, groupname).all():
                    if n not in groupnames:
                        groupnames.append(n)
            for n in groupnames:
                l = []
                for obj in set:
                    if n in getattr(obj, groupname).all():
                        l.append(obj)
                groups.append((unicode(n), l))

        elif xtype == ('DateTimeField' or 'DateField'):
            set = set.order_by(groupname)
            #set = sorted(set, key = lambda item: getattr(item,groupname))
            # TODO: Fix this sort
            groups, groupnames, l, ng = [], [], [], []
            n = None

            if xtype == 'DateTimeField':
                def dt(ob):
                    return getattr(ob, groupname).date()
            else:
                def dt(ob):
                    return getattr(ob, groupname)

            for x in set:
                n = dt(x)
                if n:
                    break
            if n:
                for obj in set:
                    if getattr(obj, groupname):
                        if dt(obj) == n:
                            l.append(obj)
                        else:
                            groups.append((unicode(n), l))
                            l = []
                            n = dt(obj)
                            l.append(obj)
                    else:
                        ng.append(obj)
                if ng:
                    groups.append(('None', ng))

        else:
            set = sorted(set, key=lambda item: unicode(
                item.get_field_value(groupname)), reverse=True)
            groups = []
            for g, ks in groupby(set, key=lambda item: unicode(item.get_field_value(groupname))):
                groups.append((g, list(ks)))
            xfield = set[0]._meta.get_field_by_name(groupname)[0]

    # Count aggregate functions
    agg_funcs = {}
    for field in model.fields:  # get fields and aggregate functions for them
        if field.display and getattr(field, 'aggregation', None):
            xfield = classobj._meta.get_field_by_name(field.name)[0]
            if number_field_regex.match(xfield.get_internal_type()) \
                    and aggregate_functions.has_key(field.aggregation):
                agg_funcs[field.name] = aggregate_functions[
                    field.aggregation]['function']

    aggregations = {}
    if agg_funcs:
        for grouper, ls in groups if groups else (('set', set),):
            data = {}
            for s in ls:
                for key in agg_funcs:
                    data.setdefault(key, []).append(getattr(s, key, 0))
            aggrs = {}
            for key, func in agg_funcs.items():
                aggrs[key] = func(data.get(key, [0, ]))
            aggregations[grouper] = aggrs

    return {'model': model,
            'set': set,
            'groups': groups,
            'groupname': groupname,
            'aggregations': aggregations}


@treeio_login_required
@handle_response_format
@_process_mass_form
def charts_index(request, response_format='html'):
    "Charts index page"

    charts = Object.filter_by_request(request, Chart.objects)

    context = _get_default_context(request)
    context.update({'charts': charts})

    return render_to_response('reports/chart_index', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@treeio_login_required
@handle_response_format
def chart_add(request, report_id=None, response_format='html'):

    if request.POST:
        form = ChartForm(
            request.user.get_profile(), request.POST, report_id=report_id)
        if form.is_valid():
            chart = form.save()
            chart.set_user_from_request(request)
            return HttpResponseRedirect(reverse('reports_report_view', args=[chart.report.id]))

    else:
        form = ChartForm(request.user.get_profile(), report_id=report_id)

    context = {'form': form}

    return render_to_response('reports/chart_add', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@treeio_login_required
@handle_response_format
def chart_edit(request, chart_id=None, response_format='html'):

    chart = get_object_or_404(Chart, pk=chart_id)
    report_id = chart.report.id

    if request.POST:
        form = ChartForm(
            request.user.get_profile(), request.POST, chart_id=chart_id)
        if form.is_valid():
            chart = form.save()
            chart.set_user_from_request(request)
            return HttpResponseRedirect(reverse('reports_report_view', args=[report_id]))

    else:
        form = ChartForm(request.user.get_profile(), chart_id=chart_id)

    context = {
        'chart': chart,
        'form': form}

    return render_to_response('reports/chart_edit', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@treeio_login_required
@handle_response_format
def chart_view(request, chart_id=None, response_format='html'):

    chart = get_object_or_404(Chart, pk=chart_id)

    context = {'chart': chart}

    return render_to_response('reports/chart_view', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@treeio_login_required
@handle_response_format
def chart_delete(request, chart_id, response_format='html'):
    "Chart delete"

    chart = get_object_or_404(Chart, pk=chart_id)
    report = chart.report
    if not request.user.get_profile().has_permission(chart, mode='w'):
        return user_denied(request, message="You don't have access to this Event")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                chart.trash = True
                chart.save()
            else:
                chart.delete()
            return HttpResponseRedirect(reverse('reports_report_view',
                                                args=[report.id]))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('reports_report_view',
                                                args=[report.id]))

    return render_to_response('reports/chart_delete',
                              {'chart': chart},
                              context_instance=RequestContext(request), response_format=response_format)


#
# Index pages
#
@treeio_login_required
@handle_response_format
@_process_mass_form
def index(request, response_format='html'):
    "Reports index page"

    reports = Object.filter_by_request(request, Report.objects)
    context = _get_default_context(request)
    context.update({'reports': reports})

    return render_to_response('reports/index', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@treeio_login_required
@handle_response_format
@_process_mass_form
def index_owned(request, response_format='html'):
    "Reports owned by user"

    reports = Object.filter_by_request(
        request, Report.objects.filter(creator=request.user.get_profile()))

    context = _get_default_context(request)
    context.update({'reports': reports})

    return render_to_response('reports/index_owned', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@treeio_login_required
@handle_response_format
def report_add(request, response_format='html'):
    "Create new report based on user choice"
    if 'report' in request.POST:
        report_id = request.POST['report']
        return HttpResponseRedirect(reverse('reports_report_edit', args=[report_id]))
    # FIRST TIME AN OBJECT IS CHOSEN
    if 'choice' in request.POST:
        form = None
        object = request.POST['choice']
        object = str(
            object.replace("{'object_type': u'", '').replace("'}", ''))
        full_object = object
        object = object.split('.', 3)

        module_name = object[0] + '.' + object[1] + '.' + object[2]
        import_name = object[3]

        module = __import__(
            module_name, globals(), locals(), [import_name], -1)
        classobj = getattr(module, import_name)

        obj = classobj()
        names = obj.get_field_names()

        fields = []
        for name in names:
            fields.append(Field(name=name, display=True))

        model = Model(full_object, fields)

        report = Report()
        report.name = "Untitled %s Report" % (obj._meta.object_name)
        report.model = dumps(model)
        report.creator = request.user.get_profile()
        report.save()

        return HttpResponseRedirect(reverse('reports_report_edit', args=[report.id]))

    # Initial Object Type Choice
    user_modules = [mod.name for mod in request.user.get_profile().get_perspective().get_modules()]
    modules = [mod.name for mod in Module.objects.all()]
    query = Q(object_type__contains="core")
    for module in modules:
        if module not in user_modules:
            query = query | Q(object_type__contains=module)

    object_types = list(Object.objects.all().exclude(query).values(
        'object_type').distinct().order_by('object_type'))

    object_names = []
    if object_types:
        object_names = ["%s: %s" %
                        (_get_module_name(object_types[i]['object_type']),
                         (Object.objects.filter(object_type=object_types[i]['object_type']).order_by()[0].get_human_type()))
                        for i in range(0, len(object_types))]

    form = ObjChoiceForm(request.user,
                         object_types=object_types,
                         object_names=object_names,
                         )

    return render_to_response('reports/report_add',
                              {'form': form},
                              context_instance=RequestContext(request),
                              response_format=response_format)


@treeio_login_required
@handle_response_format
def report_edit(request, report_id=None, response_format='html'):
    "Create new report based on user choice"
    report = get_object_or_404(Report, pk=report_id)

    if not request.user.get_profile().has_permission(report, mode='w'):
        return user_denied(request, message="You don't have access to edit this Report")
    model = loads(report.model)

    if request.POST and 'commit' in request.POST:
        # UPDATE MODEL
        if 'report_name' in request.POST:
            report.name = request.POST['report_name']
        fieldnames = []
        aggregations = {}
        for key in request.POST:
            if 'field' in key:
                fieldnames.append(request.POST[key])
            elif 'aggregation-' in key:
                aggregations[key[12:]] = request.POST[key]

        for field in model.fields:
            field.aggregation = aggregations.get(field.name, None)
            if field.name in fieldnames:
                field.display = True
            else:
                field.display = False

        report.model = dumps(model)
        report.save()

    if 'commit' in request.POST:
        return HttpResponseRedirect(reverse('reports_report_view', args=[report.id]))

    return render_to_response('reports/report_edit',
                              {'report': report,
                               'model': model,
                               },
                              context_instance=RequestContext(request),
                              response_format=response_format)


#
# Aggregations, Filters, Joins and Grouping
#
@treeio_login_required
@handle_response_format
def report_filter(request, report_id, field_name, response_format='html'):
    "View to Filter over a given field for a Report"

    report = get_object_or_404(Report, pk=report_id)
    if not request.user.get_profile().has_permission(report, mode='w'):
        return user_denied(request, message="You don't have access to this Report")

    if request.POST:
        FilterForm(request.user.get_profile(), request.POST,
                   report=report, field_name=field_name).save()
        return HttpResponseRedirect(reverse('reports_report_edit', args=[report.id]))

    else:
        form = FilterForm(
            request.user.get_profile(), report=report, field_name=field_name)

    return render_to_response('reports/report_filter',
                              {'form': form,
                               'field_name': field_name},

                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def report_filter_remove(request, report_id, field_name, filter_index, response_format='html'):
    "Remove a Filter on a given field for a Report"

    report = get_object_or_404(Report, pk=report_id)
    if not request.user.get_profile().has_permission(report, mode='w'):
        return user_denied(request, message="You don't have write access to this Report")

    model = loads(report.model)
    field = model.get_field(field_name)
    field.filters.pop(int(filter_index) - 1)
    report.model = dumps(model)
    report.save()

    return HttpResponseRedirect(reverse('reports_report_edit', args=[int(report_id)]))


@treeio_login_required
@handle_response_format
def report_group(request, report_id, field_name, response_format='html'):
    "View to Group by a given field in a report"

    t = get_object_or_404(Report, pk=report_id)
    if not request.user.get_profile().has_permission(t, mode='w'):
        return user_denied(request, message="You don't have access to this Report")

    model = loads(t.model)

    # Check if this field is already grouped, if so then remove grouping
    thisfield = model.get_field(field_name)
    if thisfield.groupby == 1:
        thisfield.groupby = 0
    else:
        # Other wise reset grouping and set selected field as groupfield
        for field in model.fields:
            field.groupby = 0

        field = model.get_field(field_name)
        field.groupby = 1

    t.model = dumps(model)
    t.save()

    return report_edit(request, report_id=report_id, response_format=response_format)

#
# Reports
#


@treeio_login_required
@handle_response_format
def report_view(request, response_format='html', report_id=None):
    "Display the report"

    report = get_object_or_404(Report, pk=report_id)
    report_context = _get_report_content(report, request)
    context = _get_default_context(request)
    context.update(report_context)

    if response_format == "csv":
        return render_to_response('reports/gen', context,
                                  context_instance=RequestContext(request),
                                  response_format='csv')

    report_content = str(render_to_response('reports/gen', context,
                                            context_instance=RequestContext(
                                                request),
                                            response_format='html')).replace('Content-Type: text/html', '')

    charts = report.chart_set.filter(trash=False)

    # Now take the rendered report and embed it in the report view page.
    context = _get_default_context(request)
    context.update({'report': report,
                    'charts': charts,
                    'report_content': report_content})

    return render_to_response('reports/report_view', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@treeio_login_required
@handle_response_format
def report_delete(request, report_id, response_format='html'):
    "Report delete"

    report = get_object_or_404(Report, pk=report_id)
    if not request.user.get_profile().has_permission(report, mode='w'):
        return user_denied(request, message="You don't have access to this Event")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                report.trash = True
                report.save()
            else:
                report.delete()
            return HttpResponseRedirect(reverse('reports_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('reports_report_view', args=[report.id]))

    return render_to_response('reports/report_delete',
                              {'report': report},
                              context_instance=RequestContext(request), response_format=response_format)

########NEW FILE########
__FILENAME__ = admin
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Service Support: back-end administrator definitions
"""
from django.contrib import admin
from treeio.sales.models import Product, SaleOrder, SaleSource, Lead, Opportunity, SaleStatus

admin.site.register(SaleOrder)
admin.site.register(Product)
admin.site.register(SaleStatus)
admin.site.register(SaleSource)
admin.site.register(Lead)
admin.site.register(Opportunity)

########NEW FILE########
__FILENAME__ = handlers
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

from __future__ import absolute_import, with_statement

__all__ = ['SaleCommonHandler',
           'SaleStatusHandler',
           'ProductHandler',
           'SaleSourceHandler',
           'LeadHandler',
           'OpportunityHandler',
           'SaleOrderHandler',
           'SubscriptionHandler',
           'OrderedProductHandler',
           ]

from treeio.core.api.utils import rc
from treeio.core.api.handlers import ObjectHandler, getOrNone
from treeio.finance.helpers import convert
from treeio.sales.models import SaleStatus, Product, SaleSource, Lead, Opportunity, SaleOrder, Subscription, OrderedProduct
from treeio.sales.forms import OrderForm, ProductForm, SaleStatusForm, LeadForm, OpportunityForm, \
    OrderedProductForm, SubscriptionForm, SaleSourceForm


class SaleCommonHandler(ObjectHandler):

    def check_create_permission(self, request, mode):
        return request.user.get_profile().is_admin('treeio.sales')

    def check_instance_permission(self, request, inst, mode):
        return request.user.get_profile().has_permission(inst, mode=mode) \
            or request.user.get_profile().is_admin('treeio.sales')


class SaleStatusHandler(SaleCommonHandler):

    "Entrypoint for SaleStatus model."

    model = SaleStatus
    form = SaleStatusForm

    @staticmethod
    def resource_uri():
        return ('api_sales_status', ['id'])


class ProductHandler(SaleCommonHandler):

    "Entrypoint for Product model."

    model = Product
    form = ProductForm

    @staticmethod
    def resource_uri():
        return ('api_sales_products', ['id'])

    def flatten_dict(self, request):
        dct = super(ProductHandler, self).flatten_dict(request)
        dct['parent'] = None
        return dct


class SaleSourceHandler(SaleCommonHandler):

    "Entrypoint for SaleSource model."

    model = SaleSource
    form = SaleSourceForm

    @staticmethod
    def resource_uri():
        return ('api_sales_sources', ['id'])


class LeadHandler(SaleCommonHandler):

    "Entrypoint for Lead model."

    model = Lead
    form = LeadForm
    fields = ('id',) + LeadForm._meta.fields

    @staticmethod
    def resource_uri():
        return ('api_sales_leads', ['id'])


class OpportunityHandler(SaleCommonHandler):

    "Entrypoint for Opportunity model."

    model = Opportunity
    form = OpportunityForm
    fields = ('id',) + OpportunityForm._meta.fields

    @staticmethod
    def resource_uri():
        return ('api_sales_opportunities', ['id'])

    def flatten_dict(self, request):
        dct = super(OpportunityHandler, self).flatten_dict(request)
        if request.method.lower() == 'post' and 'lead' in request.data:
            dct['lead'] = getOrNone(Lead, request.data['lead'])
        else:
            dct['lead'] = None
        return dct

    def create(self, request, *args, **kwargs):
        if request.data is None:
            return rc.BAD_REQUEST

        if not self.check_create_permission(request, "x"):
            return rc.FORBIDDEN

        attrs = self.flatten_dict(request)

        form = self.form(**attrs)
        if form.is_valid():
            opportunity = form.save(commit=False)
            convert(opportunity, 'amount')
            opportunity.set_user_from_request(request)
            return opportunity
        else:
            self.status = 400
            return form.errors

    def update(self, request, *args, **kwargs):
        pkfield = kwargs.get(self.model._meta.pk.name) or request.data.get(
            self.model._meta.pk.name)

        if not pkfield or request.data is None:
            return rc.BAD_REQUEST

        try:
            obj = self.model.objects.get(pk=pkfield)
        except self.model.ObjectDoesNotExist:
            return rc.NOT_FOUND

        if not self.check_instance_permission(request, obj, "w"):
            return rc.FORBIDDEN

        attrs = self.flatten_dict(request)

        form = self.form(instance=obj, **attrs)
        if form.is_valid():
            opportunity = form.save(commit=False)
            convert(opportunity, 'amount')
            return opportunity
        else:
            self.status = 400
            return form.errors


class SaleOrderHandler(SaleCommonHandler):

    "Entrypoint for SaleOrder model."

    model = SaleOrder
    form = OrderForm
    fields = ('id', 'payment', 'total', 'total_display') + \
        OrderForm._meta.fields

    @staticmethod
    def resource_uri():
        return ('api_sales_orders', ['id'])

    def flatten_dict(self, request):
        dct = super(SaleOrderHandler, self).flatten_dict(request)
        if request.method.lower() == 'post':
            if 'lead' in request.data:
                dct['lead'] = getOrNone(Lead, request.data['lead'])
            if 'opportunity' in request.data:
                dct['opportunity'] = getOrNone(
                    Opportunity, request.data['opportunity'])
        else:
            dct['lead'] = None
            dct['opportunity'] = None
        return dct


class SubscriptionHandler(SaleCommonHandler):

    "Entrypoint for Subscription model."

    model = Subscription
    form = SubscriptionForm

    @staticmethod
    def resource_uri():
        return ('api_sales_subscriptions', ['id'])

    def create(self, request, *args, **kwargs):
        if request.data is None:
            return rc.BAD_REQUEST

        if not self.check_create_permission(request, "x"):
            return rc.FORBIDDEN

        order = getOrNone(
            SaleOrder, pk=request.data['order']) if 'order' in request.data else None
        product = getOrNone(
            OrderedProduct, pk=request.data['product']) if 'product' in request.data else None
        productset = getOrNone(
            Product, pk=request.data['productset']) if 'productset' in request.data else None
        subscription = Subscription()
        if order:
            subscription.client = order.client
        if product:
            subscription.product = product.product
        if productset:
            subscription.product = productset
        form = SubscriptionForm(
            request.user.get_profile(), request.data, instance=subscription)
        if form.is_valid():
            subscription = form.save(commit=False)
            subscription.renew()
            subscription.save()
            subscription.set_user_from_request(request)
            if product:
                product.subscription = subscription
                product.save()
            return subscription
        else:
            self.status = 400
            return form.errors


class OrderedProductHandler(SaleCommonHandler):

    "Entrypoint for OrderedProduct model."

    model = OrderedProduct
    form = OrderedProductForm

    @staticmethod
    def resource_uri():
        return ('api_sales_ordered_products', ['id'])

    def create(self, request, object_ptr, *args, **kwargs):
        if request.data is None:
            return rc.BAD_REQUEST

        order = getOrNone(SaleOrder, pk=object_ptr)
        if not order:
            return rc.NOT_FOUND

        if not request.user.get_profile().has_permission(order, mode='x'):
            return rc.FORBIDDEN

        ordered_product = OrderedProduct()
        ordered_product.order = order
        form = OrderedProductForm(
            request.user.get_profile(), order, request.data, instance=ordered_product)
        if form.is_valid():
            ordered_product = form.save(commit=False)
            convert(
                ordered_product, 'rate', currency=ordered_product.order.currency)
            ordered_product.set_user_from_request(request)
            ordered_product.order.update_total()
            return ordered_product
        else:
            self.status = 400
            return form.errors

    def update(self, request, object_ptr, *args, **kwargs):
        if request.data is None:
            return rc.BAD_REQUEST

        ordered_product = getOrNone(OrderedProduct, pk=object_ptr)
        if not request.user.get_profile().has_permission(ordered_product, mode='w'):
            return rc.FORBIDDEN

        order = ordered_product.order
        form = OrderedProductForm(
            request.user.get_profile(), order, request.data, instance=ordered_product)
        if form.is_valid():
            ordered_product = form.save(commit=False)
            convert(
                ordered_product, 'rate', currency=ordered_product.order.currency)
            ordered_product.order.update_total()
            return ordered_product
        else:
            self.status = 400
            return form.errors

    def delete_instance(self, request, ordered_product):
        if 'trash' in request.REQUEST:
            ordered_product.trash = True
            ordered_product.save()
        else:
            ordered_product.delete()
        ordered_product.order.update_total()
        return ordered_product if ordered_product.pk else rc.DELETED

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- codeing: utf-8 -*-

import json
from django.test import TestCase
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser
from treeio.core.models import User, Group, Perspective, ModuleSetting, Object
from treeio.identities.models import Contact, ContactType
from treeio.sales.models import SaleOrder, Product, OrderedProduct, Subscription, \
    SaleStatus, SaleSource, Lead, Opportunity
from treeio.finance.models import Currency


class SalesAPITest(TestCase):

    "Sales functional tests for views"

    username = "api_test"
    password = "api_password"
    prepared = False
    authentication_headers = {"CONTENT_TYPE": "application/json",
                              "HTTP_AUTHORIZATION": "Basic YXBpX3Rlc3Q6YXBpX3Bhc3N3b3Jk"}
    content_type = 'application/json'

    def setUp(self):
        "Initial Setup"

        if not self.prepared:
            # Clean up first
            Object.objects.all().delete()
            User.objects.all().delete()

            # Create objects
            try:
                self.group = Group.objects.get(name='test')
            except Group.DoesNotExist:
                Group.objects.all().delete()
                self.group = Group(name='test')
                self.group.save()

            try:
                self.user = DjangoUser.objects.get(username=self.username)
                self.user.set_password(self.password)
                try:
                    self.profile = self.user.get_profile()
                except Exception:
                    User.objects.all().delete()
                    self.user = DjangoUser(username=self.username, password='')
                    self.user.set_password(self.password)
                    self.user.save()
            except DjangoUser.DoesNotExist:
                User.objects.all().delete()
                self.user = DjangoUser(username=self.username, password='')
                self.user.set_password(self.password)
                self.user.save()

            try:
                perspective = Perspective.objects.get(name='default')
            except Perspective.DoesNotExist:
                Perspective.objects.all().delete()
                perspective = Perspective(name='default')
                perspective.set_default_user()
                perspective.save()

            ModuleSetting.set('default_perspective', perspective.id)

            self.contact_type = ContactType()
            self.contact_type.slug = 'machine'
            self.contact_type.name = 'machine'
            self.contact_type.save()

            self.contact = Contact()
            self.contact.contact_type = self.contact_type
            self.contact.set_default_user()
            self.contact.save()
            self.assertNotEquals(self.contact.id, None)

            self.status = SaleStatus()
            self.status.active = True
            self.status.use_sales = True
            self.status.use_leads = True
            self.status.use_opportunities = True
            self.status.set_default_user()
            self.status.save()
            self.assertNotEquals(self.status.id, None)

            self.currency = Currency(code="GBP",
                                     name="Pounds",
                                     symbol="L",
                                     is_default=True)
            self.currency.save()

            self.source = SaleSource()
            self.source.active = True
            self.source.save()
            self.source.set_user(self.user)
            self.assertNotEquals(self.source.id, None)

            self.product = Product(name="Test")
            self.product.product_type = 'service'
            self.product.active = True
            self.product.sell_price = 10
            self.product.buy_price = 100
            self.product.set_default_user()
            self.product.save()
            self.assertNotEquals(self.product.id, None)

            self.subscription = Subscription()
            self.subscription.client = self.contact
            self.subscription.set_default_user()
            self.subscription.save()
            self.assertNotEquals(self.subscription.id, None)

            self.lead = Lead()
            self.lead.contact_method = 'email'
            self.lead.status = self.status
            self.lead.contact = self.contact
            self.lead.set_default_user()
            self.lead.save()
            self.assertNotEquals(self.lead.id, None)

            self.opportunity = Opportunity()
            self.opportunity.lead = self.lead
            self.opportunity.contact = self.contact
            self.opportunity.status = self.status
            self.opportunity.amount = 100
            self.opportunity.amount_currency = self.currency
            self.opportunity.amount_display = 120
            self.opportunity.set_default_user()
            self.opportunity.save()
            self.assertNotEquals(self.opportunity.id, None)

            self.order = SaleOrder(reference="Test")
            self.order.opportunity = self.opportunity
            self.order.status = self.status
            self.order.source = self.source
            self.order.currency = self.currency
            self.order.total = 0
            self.order.total_display = 0
            self.order.set_default_user()
            self.order.save()
            self.assertNotEquals(self.order.id, None)

            self.ordered_product = OrderedProduct()
            self.ordered_product.product = self.product
            self.ordered_product.order = self.order
            self.ordered_product.rate = 0
            self.ordered_product.subscription = self.subscription
            self.ordered_product.set_default_user()
            self.ordered_product.save()

            self.assertNotEquals(self.ordered_product.id, None)

            self.client = Client()

            self.prepared = True

    def test_unauthenticated_access(self):
        "Test index page at /sales/statuses"
        response = self.client.get('/api/sales/statuses')
        # Redirects as unauthenticated
        self.assertEquals(response.status_code, 401)

    def test_get_statuses_list(self):
        """ Test index page api/sales/status """
        response = self.client.get(
            path=reverse('api_sales_status'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_status(self):
        response = self.client.get(path=reverse('api_sales_status', kwargs={
                                   'object_ptr': self.status.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_status(self):
        updates = {"name": "Close_API", "active": True, "details": "api test details",
                   "use_leads": True, "use_opportunities": True, "hidden": False}
        response = self.client.put(path=reverse('api_sales_status', kwargs={'object_ptr': self.status.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        self.assertEquals(data['active'], updates['active'])
        self.assertEquals(data['details'], updates['details'])
        self.assertEquals(data['use_leads'], updates['use_leads'])
        self.assertEquals(
            data['use_opportunities'], updates['use_opportunities'])
        self.assertEquals(data['hidden'], updates['hidden'])

    def test_get_products_list(self):
        """ Test index page api/sales/products """
        response = self.client.get(
            path=reverse('api_sales_products'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_product(self):
        response = self.client.get(path=reverse('api_sales_products', kwargs={
                                   'object_ptr': self.product.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_product(self):
        updates = {"name": "API product", "parent": None, "product_type": "service", "code": "api_test_code",
                   "buy_price": '100.05', "sell_price": '10.5', "active": True, "runout_action": "ignore", "details": "api details"}
        response = self.client.put(path=reverse('api_sales_products', kwargs={'object_ptr': self.product.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        self.assertEquals(data['product_type'], updates['product_type'])
        self.assertEquals(data['code'], updates['code'])
        self.assertEquals(data['buy_price'], updates['buy_price'])
        self.assertEquals(data['sell_price'], updates['sell_price'])
        self.assertEquals(data['active'], updates['active'])
        self.assertEquals(data['runout_action'], updates['runout_action'])
        self.assertEquals(data['details'], updates['details'])

    def test_get_sources_list(self):
        """ Test index page api/sales/sources """
        response = self.client.get(
            path=reverse('api_sales_sources'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_source(self):
        response = self.client.get(path=reverse('api_sales_sources', kwargs={
                                   'object_ptr': self.source.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_source(self):
        updates = {
            "name": "Api source", "active": True, "details": "api details"}
        response = self.client.put(path=reverse('api_sales_sources', kwargs={'object_ptr': self.source.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['name'], updates['name'])
        self.assertEquals(data['active'], updates['active'])
        self.assertEquals(data['details'], updates['details'])
#

    def test_get_leads_list(self):
        """ Test index page api/sales/leads """
        response = self.client.get(
            path=reverse('api_sales_leads'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_lead(self):
        response = self.client.get(path=reverse(
            'api_sales_leads', kwargs={'object_ptr': self.lead.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_lead(self):
        updates = {"status": self.status.id, "contact_method": "email", "contact": self.contact.id,
                   "products_interested": [self.product.id], "source": self.source.id, 'details': 'Api details'}
        response = self.client.put(path=reverse('api_sales_leads', kwargs={'object_ptr': self.lead.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['status']['id'], updates['status'])
        self.assertEquals(data['contact_method'], updates['contact_method'])
        self.assertEquals(data['contact']['id'], updates['contact'])
        for i, product in enumerate(data['products_interested']):
            self.assertEquals(product['id'], updates['products_interested'][i])
        self.assertEquals(data['source']['id'], updates['source'])
        self.assertEquals(data['details'], updates['details'])

    def test_get_opportunities_list(self):
        """ Test index page api/sales/opportunities """
        response = self.client.get(
            path=reverse('api_sales_opportunities'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_opportunity(self):
        response = self.client.get(path=reverse('api_sales_opportunities', kwargs={
                                   'object_ptr': self.opportunity.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_opportunity(self):
        updates = {"status": self.status.id, "products_interested": [self.product.id], "contact": self.contact.id,
                   "amount_display": 3000.56, "amount_currency": self.currency.id, "details": "API DETAILS"}
        response = self.client.put(path=reverse('api_sales_opportunities', kwargs={'object_ptr': self.opportunity.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['status']['id'], updates['status'])
        self.assertEquals(data['contact']['id'], updates['contact'])
        for i, product in enumerate(data['products_interested']):
            self.assertEquals(product['id'], updates['products_interested'][i])
        self.assertEquals(
            data['amount_currency']['id'], updates['amount_currency'])
        self.assertEquals(data['details'], updates['details'])

    def test_get_orders_list(self):
        """ Test index page api/sales/orders """
        response = self.client.get(
            path=reverse('api_sales_orders'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_order(self):
        response = self.client.get(path=reverse(
            'api_sales_orders', kwargs={'object_ptr': self.order.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_order(self):
        updates = {"datetime": "2011-04-11 12:01:15", "status": self.status.id,
                   "source": self.source.id, "details": "api details"}
        response = self.client.put(path=reverse('api_sales_orders', kwargs={'object_ptr': self.order.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)

        self.assertEquals(response.status_code, 200)
        data = json.loads(response.content)
        self.assertEquals(data['status']['id'], updates['status'])
        self.assertEquals(data['source']['id'], updates['source'])
        self.assertEquals(data['details'], updates['details'])

    def test_get_subscriptions_list(self):
        """ Test index page api/sales/subscriptions"""
        response = self.client.get(
            path=reverse('api_sales_subscriptions'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_subscription(self):
        response = self.client.get(path=reverse('api_sales_subscriptions', kwargs={
                                   'object_ptr': self.subscription.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_subscription(self):
        updates = {"product": self.product.id, "start": "2011-06-30",
                   "cycle_period": "daily", "active": True, "details": "api details"}
        response = self.client.put(path=reverse('api_sales_subscriptions', kwargs={'object_ptr': self.subscription.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['product']['id'], updates['product'])
        self.assertEquals(data['cycle_period'], updates['cycle_period'])
        self.assertEquals(data['active'], updates['active'])
        self.assertEquals(data['details'], updates['details'])

    def test_get_ordered_product(self):
        response = self.client.get(path=reverse('api_sales_ordered_products', kwargs={
                                   'object_ptr': self.ordered_product.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_ordered_product(self):
        updates = {
            "discount": '10.0', "product": self.product.id, "quantity": '10'}
        response = self.client.put(path=reverse('api_sales_ordered_products', kwargs={'object_ptr': self.ordered_product.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(data['product']['id'], updates['product'])
        self.assertEquals(data['discount'], updates['discount'])
        self.assertEquals(data['quantity'], updates['quantity'])

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

import handlers
from django.conf.urls import patterns, url
from treeio.core.api.auth import auth_engine
from treeio.core.api.doc import documentation_view
from treeio.core.api.resource import CsrfExemptResource

ad = {'authentication': auth_engine}

# sales resources
saleStatusResource = CsrfExemptResource(
    handler=handlers.SaleStatusHandler, **ad)
productResource = CsrfExemptResource(handler=handlers.ProductHandler, **ad)
sourceResource = CsrfExemptResource(handler=handlers.SaleSourceHandler, **ad)
leadResource = CsrfExemptResource(handler=handlers.LeadHandler, **ad)
opportunityResource = CsrfExemptResource(
    handler=handlers.OpportunityHandler, **ad)
orderResource = CsrfExemptResource(handler=handlers.SaleOrderHandler, **ad)
subscriptionResource = CsrfExemptResource(
    handler=handlers.SubscriptionHandler, **ad)
orderedProductResource = CsrfExemptResource(
    handler=handlers.OrderedProductHandler, **ad)

urlpatterns = patterns('',
    # Sales
    url(r'^doc$', documentation_view, kwargs={
        'module': handlers}, name="api_sales_doc"),
    url(r'^statuses$', saleStatusResource,
        name="api_sales_status"),
    url(r'^status/(?P<object_ptr>\d+)',
        saleStatusResource, name="api_sales_status"),
    url(r'^products$', productResource,
        name="api_sales_products"),
    url(r'^product/(?P<object_ptr>\d+)',
        productResource, name="api_sales_products"),
    url(r'^sources$', sourceResource,
        name="api_sales_sources"),
    url(r'^source/(?P<object_ptr>\d+)',
        sourceResource, name="api_sales_sources"),
    url(r'^leads$', leadResource, name="api_sales_leads"),
    url(r'^lead/(?P<object_ptr>\d+)',
        leadResource, name="api_sales_leads"),
    url(r'^opportunities$', opportunityResource,
        name="api_sales_opportunities"),
    url(r'^opportunity/(?P<object_ptr>\d+)',
        opportunityResource, name="api_sales_opportunities"),
    url(r'^orders$', orderResource,
        name="api_sales_orders"),
    url(r'^order/(?P<object_ptr>\d+)',
        orderResource, name="api_sales_orders"),
    url(r'^subscriptions$', subscriptionResource,
        name="api_sales_subscriptions"),
    url(r'^subscription/(?P<object_ptr>\d+)',
        subscriptionResource, name="api_sales_subscriptions"),
    url(r'^ordered_product/(?P<object_ptr>\d+)',
        orderedProductResource, name="api_sales_ordered_products"),
)

########NEW FILE########
__FILENAME__ = cron
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Sales Cron jobs
"""
from treeio.sales.models import Subscription


def subscription_check():
    "Automatically depreciate assets as per their depreciation rate"

    subscriptions = Subscription.objects.all()
    for subscription in subscriptions:
        subscription.check_status()

########NEW FILE########
__FILENAME__ = events
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Sales integration with Events module
"""

from treeio.sales.models import Opportunity
from treeio.core.models import Object
from treeio.events.rendering import EventRenderer
from django.db.models import Q
import datetime
import time


def get_events(request):
    "Return a list of EventRenderers from available Sales"
    events = []

    query = Q(expected_date__isnull=False)
    sales = Object.filter_by_request(
        request, manager=Opportunity.objects.filter(query))

    for sale in sales:
#        event = EventRenderer(sale.contact.name, None, sale.expected_date, sale.get_absolute_url())
        event = EventRenderer(sale.contact.name, None, datetime.datetime.fromtimestamp(time.mktime(
            time.strptime(str(sale.expected_date), "%Y-%m-%d"))), sale.get_absolute_url())  # bad code
        event.css_class += " projects-calendar-task"
        events.append(event)

    return events

########NEW FILE########
__FILENAME__ = forms
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# -*- coding: utf-8 -*-
"""
Sales module forms
"""
from django.shortcuts import get_object_or_404
from django import forms
from django.db.models import Q
from treeio.sales.models import Product, SaleOrder, SaleSource, Lead, Opportunity, \
    SaleStatus, OrderedProduct, Subscription, Currency
from treeio.identities.models import Contact
from treeio.core.models import Object, ModuleSetting, User, UpdateRecord
from django.core.urlresolvers import reverse
from treeio.core.decorators import preprocess_form
from django.utils.translation import ugettext as _

preprocess_form()

standard_currencies = (
    ("AED", "AED  United Arab Emirates, Dirhams"),
    ("AFN", "AFN  Afghanistan, Afghanis"),
    ("ALL", "ALL  Albania, Leke"),
    ("AMD", "AMD  Armenia, Drams"),
    ("ANG", "ANG  Netherlands Antilles, Guilders (also called Florins)"),
    ("AOA", "AOA  Angola, Kwanza"),
    ("ARS", "ARS  Argentina, Pesos"),
    ("AUD", "AUD  Australia, Dollars"),
    ("AWG", "AWG  Aruba, Guilders (also called Florins)"),
    ("AZN", "AZN  Azerbaijan, New Manats"),
    ("BAM", "BAM  Bosnia and Herzegovina, Convertible Marka"),
    ("BBD", "BBD  Barbados, Dollars"),
    ("BDT", "BDT  Bangladesh, Taka"),
    ("BGN", "BGN  Bulgaria, Leva"),
    ("BHD", "BHD  Bahrain, Dinars"),
    ("BIF", "BIF  Burundi, Francs"),
    ("BMD", "BMD  Bermuda, Dollars"),
    ("BND", "BND  Brunei Darussalam, Dollars"),
    ("BOB", "BOB  Bolivia, Bolivianos"),
    ("BRL", "BRL  Brazil, Brazil Real"),
    ("BSD", "BSD  Bahamas, Dollars"),
    ("BTN", "BTN  Bhutan, Ngultrum"),
    ("BWP", "BWP  Botswana, Pulas"),
    ("BYR", "BYR  Belarus, Rubles"),
    ("BZD", "BZD  Belize, Dollars"),
    ("CAD", "CAD  Canada, Dollars"),
    ("CDF", "CDF  Congo/Kinshasa, Congolese Francs"),
    ("CHF", "CHF  Switzerland, Francs"),
    ("CLP", "CLP  Chile, Pesos"),
    ("CNY", "CNY  China, Yuan Renminbi"),
    ("COP", "COP  Colombia, Pesos"),
    ("CRC", "CRC  Costa Rica, Colones"),
    ("CUP", "CUP  Cuba, Pesos"),
    ("CVE", "CVE  Cape Verde, Escudos"),
    ("CZK", "CZK  Czech Republic, Koruny"),
    ("DJF", "DJF  Djibouti, Francs"),
    ("DKK", "DKK  Denmark, Kroner"),
    ("DOP", "DOP  Dominican Republic, Pesos"),
    ("DZD", "DZD  Algeria, Algeria Dinars"),
    ("EGP", "EGP  Egypt, Pounds"),
    ("ERN", "ERN  Eritrea, Nakfa"),
    ("ETB", "ETB  Ethiopia, Birr"),
    ("EUR", "EUR  Euro Member Countries, Euro"),
    ("FJD", "FJD  Fiji, Dollars"),
    ("FKP", "FKP  Falkland Islands (Malvinas), Pounds"),
    ("GBP", "GBP  United Kingdom, Pounds"),
    ("GEL", "GEL  Georgia, Lari"),
    ("GGP", "GGP  Guernsey, Pounds"),
    ("GHS", "GHS  Ghana, Cedis"),
    ("GIP", "GIP  Gibraltar, Pounds"),
    ("GMD", "GMD  Gambia, Dalasi"),
    ("GNF", "GNF  Guinea, Francs"),
    ("GTQ", "GTQ  Guatemala, Quetzales"),
    ("GYD", "GYD  Guyana, Dollars"),
    ("HKD", "HKD  Hong Kong, Dollars"),
    ("HNL", "HNL  Honduras, Lempiras"),
    ("HRK", "HRK  Croatia, Kuna"),
    ("HTG", "HTG  Haiti, Gourdes"),
    ("HUF", "HUF  Hungary, Forint"),
    ("IDR", "IDR  Indonesia, Rupiahs"),
    ("ILS", "ILS  Israel, New Shekels"),
    ("IMP", "IMP  Isle of Man, Pounds"),
    ("INR", "INR  India, Rupees"),
    ("IQD", "IQD  Iraq, Dinars"),
    ("IRR", "IRR  Iran, Rials"),
    ("ISK", "ISK  Iceland, Kronur"),
    ("JEP", "JEP  Jersey, Pounds"),
    ("JMD", "JMD  Jamaica, Dollars"),
    ("JOD", "JOD  Jordan, Dinars"),
    ("JPY", "JPY  Japan, Yen"),
    ("KES", "KES  Kenya, Shillings"),
    ("KGS", "KGS  Kyrgyzstan, Soms"),
    ("KHR", "KHR  Cambodia, Riels"),
    ("KMF", "KMF  Comoros, Francs"),
    ("KPW", "KPW  Korea (North), Won"),
    ("KRW", "KRW  Korea (South), Won"),
    ("KWD", "KWD  Kuwait, Dinars"),
    ("KYD", "KYD  Cayman Islands, Dollars"),
    ("KZT", "KZT  Kazakhstan, Tenge"),
    ("LAK", "LAK  Laos, Kips"),
    ("LBP", "LBP  Lebanon, Pounds"),
    ("LKR", "LKR  Sri Lanka, Rupees"),
    ("LRD", "LRD  Liberia, Dollars"),
    ("LSL", "LSL  Lesotho, Maloti"),
    ("LTL", "LTL  Lithuania, Litai"),
    ("LVL", "LVL  Latvia, Lati"),
    ("LYD", "LYD  Libya, Dinars"),
    ("MAD", "MAD  Morocco, Dirhams"),
    ("MDL", "MDL  Moldova, Lei"),
    ("MGA", "MGA  Madagascar, Ariary"),
    ("MKD", "MKD  Macedonia, Denars"),
    ("MMK", "MMK  Myanmar (Burma), Kyats"),
    ("MNT", "MNT  Mongolia, Tugriks"),
    ("MOP", "MOP  Macau, Patacas"),
    ("MRO", "MRO  Mauritania, Ouguiyas"),
    ("MUR", "MUR  Mauritius, Rupees"),
    ("MVR", "MVR  Maldives (Maldive Islands), Rufiyaa"),
    ("MWK", "MWK  Malawi, Kwachas"),
    ("MXN", "MXN  Mexico, Pesos"),
    ("MYR", "MYR  Malaysia, Ringgits"),
    ("MZN", "MZN  Mozambique, Meticais"),
    ("NAD", "NAD  Namibia, Dollars"),
    ("NGN", "NGN  Nigeria, Nairas"),
    ("NIO", "NIO  Nicaragua, Cordobas"),
    ("NOK", "NOK  Norway, Krone"),
    ("NPR", "NPR  Nepal, Nepal Rupees"),
    ("NZD", "NZD  New Zealand, Dollars"),
    ("OMR", "OMR  Oman, Rials"),
    ("PAB", "PAB  Panama, Balboa"),
    ("PEN", "PEN  Peru, Nuevos Soles"),
    ("PGK", "PGK  Papua New Guinea, Kina"),
    ("PHP", "PHP  Philippines, Pesos"),
    ("PKR", "PKR  Pakistan, Rupees"),
    ("PLN", "PLN  Poland, Zlotych"),
    ("PYG", "PYG  Paraguay, Guarani"),
    ("QAR", "QAR  Qatar, Rials"),
    ("RON", "RON  Romania, New Lei"),
    ("RSD", "RSD  Serbia, Dinars"),
    ("RUB", "RUB  Russia, Rubles"),
    ("RWF", "RWF  Rwanda, Rwanda Francs"),
    ("SAR", "SAR  Saudi Arabia, Riyals"),
    ("SBD", "SBD  Solomon Islands, Dollars"),
    ("SCR", "SCR  Seychelles, Rupees"),
    ("SDG", "SDG  Sudan, Pounds"),
    ("SEK", "SEK  Sweden, Kronor"),
    ("SGD", "SGD  Singapore, Dollars"),
    ("SHP", "SHP  Saint Helena, Pounds"),
    ("SLL", "SLL  Sierra Leone, Leones"),
    ("SOS", "SOS  Somalia, Shillings"),
    ("SPL", "SPL  Seborga, Luigini"),
    ("SRD", "SRD  Suriname, Dollars"),
    ("STD", "STD  Sao Tome and Principe, Dobras"),
    ("SVC", "SVC  El Salvador, Colones"),
    ("SYP", "SYP  Syria, Pounds"),
    ("SZL", "SZL  Swaziland, Emalangeni"),
    ("THB", "THB  Thailand, Baht"),
    ("TJS", "TJS  Tajikistan, Somoni"),
    ("TMM", "TMM  Turkmenistan, Manats"),
    ("TND", "TND  Tunisia, Dinars"),
    ("TOP", "TOP  Tonga, Pa'anga"),
    ("TRY", "TRY  Turkey, New Lira"),
    ("TTD", "TTD  Trinidad and Tobago, Dollars"),
    ("TVD", "TVD  Tuvalu, Tuvalu Dollars"),
    ("TWD", "TWD  Taiwan, New Dollars"),
    ("TZS", "TZS  Tanzania, Shillings"),
    ("UAH", "UAH  Ukraine, Hryvnia"),
    ("UGX", "UGX  Uganda, Shillings"),
    ("USD", "USD  United States of America, Dollars"),
    ("UYU", "UYU  Uruguay, Pesos"),
    ("UZS", "UZS  Uzbekistan, Sums"),
    ("VEF", "VEF  Venezuela, Bolivares Fuertes"),
    ("VND", "VND  Viet Nam, Dong"),
    ("VUV", "VUV  Vanuatu, Vatu"),
    ("WST", "WST  Samoa, Tala"),
    ("XAF", "XAF  Communaute Financiere Africaine BEAC, Francs"),
    ("XAG", "XAG  Silver, Ounces"),
    ("XAU", "XAU  Gold, Ounces"),
    ("XCD", "XCD  East Caribbean Dollars"),
    ("XDR", "XDR  International Monetary Fund (IMF) Special Drawing Rights"),
    ("XOF", "XOF  Communaute Financiere Africaine BCEAO, Francs"),
    ("XPD", "XPD  Palladium Ounces"),
    ("XPF", "XPF  Comptoirs Francais du Pacifique Francs"),
    ("XPT", "XPT  Platinum, Ounces"),
    ("YER", "YER  Yemen, Rials"),
    ("ZAR", "ZAR  South Africa, Rand"),
    ("ZMK", "ZMK  Zambia, Kwacha"),
    ("ZWD", "ZWD  Zimbabwe, Zimbabwe Dollars")
)

dict_currencies = dict(standard_currencies)


class SettingsForm(forms.Form):

    """ Administration settings form """

    default_currency = forms.ModelChoiceField(
        label=_('Base Currency'), queryset=Currency.objects)
    default_lead_status = forms.ModelChoiceField(
        label=_('Default Lead Status'), queryset=[])
    default_opportunity_status = forms.ModelChoiceField(
        label=_('Default Opportunity Status'), queryset=[])
    default_order_status = forms.ModelChoiceField(
        label=_('Default Order Status'), queryset=[])
    default_order_source = forms.ModelChoiceField(
        label=_('Default Order Source'), queryset=[])
    default_order_product = forms.ModelChoiceField(
        label=_('Default Order Product'), queryset=[], required=False)
    order_fulfil_status = forms.ModelChoiceField(
        label=_('Order Fulfilment Status'), queryset=[])

    def __init__(self, user, *args, **kwargs):
        "Sets choices and initial value"
        super(SettingsForm, self).__init__(*args, **kwargs)
        self.fields['default_lead_status'].queryset = Object.filter_permitted(user,
                                                                              SaleStatus.objects.filter(use_leads=True))
        self.fields['default_opportunity_status'].queryset = Object.filter_permitted(user,
                                                                                     SaleStatus.objects.filter(use_opportunities=True))
        self.fields['default_order_status'].queryset = Object.filter_permitted(user,
                                                                               SaleStatus.objects.filter(use_sales=True))
        self.fields['default_order_source'].queryset = Object.filter_permitted(user,
                                                                               SaleSource.objects.all())
        self.fields['order_fulfil_status'].queryset = Object.filter_permitted(user,
                                                                              SaleStatus.objects.filter(use_sales=True))
        self.fields['default_order_product'].queryset = Object.filter_permitted(user,
                                                                                Product.objects.filter(active=True))

        # Translation

        self.fields['default_currency'].label = _('Base Currency')
        self.fields['default_lead_status'].label = _('Default Lead Status')
        self.fields['default_opportunity_status'].label = _(
            'Default Opportunity Status')
        self.fields['default_order_status'].label = _('Default Order Status')
        self.fields['default_order_source'].label = _('Default Order Source')
        self.fields['default_order_product'].label = _('Default Order Product')
        self.fields['order_fulfil_status'].label = _('Order Fulfilment Status')

        try:
            self.fields['default_currency'].queryset = Currency.objects
            self.fields['default_currency'].initial = Currency.objects.get(
                is_default__exact=True)
            self.fields['default_currency'].widget.attrs.update(
                {'popuplink': reverse('sales_currency_add')})
        except:
            pass

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.sales', 'default_opportunity_status')[0]
            default_opportunity_status = SaleStatus.objects.get(
                pk=long(conf.value))
            self.fields[
                'default_opportunity_status'].initial = default_opportunity_status.id
        except:
            pass

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.sales', 'default_lead_status')[0]
            default_lead_status = SaleStatus.objects.get(pk=long(conf.value))
            self.fields['default_lead_status'].initial = default_lead_status.id
        except:
            pass

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.sales', 'default_order_status')[0]
            default_order_status = SaleStatus.objects.get(pk=long(conf.value))
            self.fields[
                'default_order_status'].initial = default_order_status.id
        except:
            pass

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.sales', 'default_order_source')[0]
            default_order_source = SaleSource.objects.get(pk=long(conf.value))
            self.fields[
                'default_order_source'].initial = default_order_source.id
        except:
            pass

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.sales', 'default_order_product')[0]
            default_order_product = Product.objects.get(pk=long(conf.value))
            self.fields[
                'default_order_product'].initial = default_order_product.id
        except:
            pass

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.sales', 'order_fulfil_status')[0]
            order_fulfil_status = SaleStatus.objects.get(pk=long(conf.value))
            self.fields['order_fulfil_status'].initial = order_fulfil_status.id
        except:
            pass

    def save(self):
        "Form processor"
        fields = self.fields
        try:
            for field in fields:
                if self.cleaned_data[field]:
                    if field == 'default_currency':
                        ModuleSetting.set_for_module('default_currency',
                                                     self.cleaned_data[
                                                         'default_currency'],
                                                     'treeio.sales')
                        currency = Currency.objects.get(
                            pk=self.cleaned_data['default_currency'])
                        currency.is_default = True
                        currency.save()
                    else:
                        ModuleSetting.set_for_module(field, self.cleaned_data[field].id,
                                                     'treeio.sales')
            return True
        except:
            return False


class MassActionForm(forms.Form):

    """ Mass action form for Orders """

    status = forms.ModelChoiceField(queryset=[], required=False)
    assignedto = forms.ModelChoiceField(queryset=[], required=False)
    delete = forms.ChoiceField(label=_("Delete"), choices=(('', '-----'), ('delete', _('Delete Completely')),
                                                           ('trash', _('Move to Trash'))), required=False)

    instance = None

    def __init__(self, user, *args, **kwargs):
        if 'instance' in kwargs:
            self.instance = kwargs['instance']
            del kwargs['instance']

        super(MassActionForm, self).__init__(*args, **kwargs)

        self.fields['status'].queryset = Object.filter_permitted(user,
                                                                 SaleStatus.objects.filter(
                                                                     use_sales=True),
                                                                 mode='x')
        self.fields['status'].label = _("Status:")
        self.fields['delete'] = forms.ChoiceField(label=_("Delete"), choices=(('', '-----'),
                                                                              ('delete', _(
                                                                                  'Delete Completely')),
                                                                              ('trash', _('Move to Trash'))), required=False)

        self.fields['assignedto'].queryset = User.objects
        self.fields['assignedto'].label = _("Assign To:")
        # self.fields['assignedto'].widget.attrs.update({'class': 'autocomplete',
        #                                               'callback': reverse('identities_ajax_user_lookup')})

    def save(self, *args, **kwargs):
        "Process form"

        if self.instance:
            if self.is_valid():
                if self.cleaned_data['status']:
                    self.instance.status = self.cleaned_data['status']
                if self.cleaned_data['assignedto']:
                    self.instance.assigned.add(self.cleaned_data['assignedto'])
                self.instance.save()
                if self.cleaned_data['delete']:
                    if self.cleaned_data['delete'] == 'delete':
                        self.instance.delete()
                    if self.cleaned_data['delete'] == 'trash':
                        self.instance.trash = True
                        self.instance.save()


class LeadMassActionForm(forms.Form):

    """ Mass action form for Orders """

    status = forms.ModelChoiceField(queryset=[], required=False)
    assignedto = forms.ModelChoiceField(queryset=[], required=False)

    instance = None

    def __init__(self, user, *args, **kwargs):
        if 'instance' in kwargs:
            self.instance = kwargs['instance']
            del kwargs['instance']

        super(LeadMassActionForm, self).__init__(*args, **kwargs)

        self.fields['status'].queryset = Object.filter_permitted(user,
                                                                 SaleStatus.objects.filter(
                                                                     use_leads=True),
                                                                 mode='x')
        self.fields['status'].label = _("Status:")

        self.fields['assignedto'].queryset = User.objects
        self.fields['assignedto'].label = _("Assign To:")
       # self.fields['assignedto'].widget.attrs.update({'class': 'autocomplete',
       #                                                'callback': reverse('identities_ajax_user_lookup')})

    def save(self, *args, **kwargs):
        "Process form"

        if self.instance:
            if self.is_valid():
                if self.cleaned_data['status']:
                    self.instance.status = self.cleaned_data['status']
                if self.cleaned_data['assignedto']:
                    self.instance.assigned.add(self.cleaned_data['assignedto'])
                self.instance.save()


class OpportunityMassActionForm(forms.Form):

    """ Mass action form for Orders """

    status = forms.ModelChoiceField(queryset=[], required=False)
    assignedto = forms.ModelChoiceField(queryset=[], required=False)

    instance = None

    def __init__(self, user, *args, **kwargs):
        if 'instance' in kwargs:
            self.instance = kwargs['instance']
            del kwargs['instance']

        super(OpportunityMassActionForm, self).__init__(*args, **kwargs)

        self.fields['status'].queryset = Object.filter_permitted(user,
                                                                 SaleStatus.objects.filter(
                                                                     use_opportunities=True),
                                                                 mode='x')
        self.fields['status'].label = _("Status:")

        self.fields['assignedto'].queryset = User.objects
        self.fields['assignedto'].label = _("Assign To:")
     #   self.fields['assignedto'].widget.attrs.update({'class': 'autocomplete',
     #                                                  'callback': reverse('identities_ajax_user_lookup')})

    def save(self, *args, **kwargs):
        "Process form"

        if self.instance:
            if self.is_valid():
                if self.cleaned_data['status']:
                    self.instance.status = self.cleaned_data['status']
                if self.cleaned_data['assignedto']:
                    self.instance.assigned.add(self.cleaned_data['assignedto'])
                self.instance.save()


class ProductMassActionForm(forms.Form):

    """ Mass action form for Products """

    active = forms.ChoiceField(label=_("Action"), choices=(('', '-------'), ('active', 'Mark as Active'),
                                                           ('inactive', 'Mark as Inactive')), required=False)

    instance = None

    def __init__(self, user, *args, **kwargs):
        if 'instance' in kwargs:
            self.instance = kwargs['instance']
            del kwargs['instance']

        super(ProductMassActionForm, self).__init__(*args, **kwargs)

        # Translation
        self.fields['active'].label = _("Action")

    def save(self, *args, **kwargs):
        "Process form"
        if self.instance:
            if self.is_valid():
                if self.cleaned_data['active'] == 'active':
                    self.instance.active = True
                if self.cleaned_data['active'] == 'inactive':
                    self.instance.active = False
                self.instance.save()


class SaleStatusForm(forms.ModelForm):

    """ Status form """
    name = forms.CharField(widget=forms.TextInput(attrs={'size': '40'}))

    def __init__(self, user, *args, **kwargs):
        super(SaleStatusForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")
        self.fields['use_leads'].label = _("Enabled for Leads")
        self.fields['use_opportunities'].label = _("Enabled for Opportunities")
        self.fields['use_sales'].label = _("Enabled for Sales")

        self.fields['active'].label = _("Active")
        self.fields['hidden'].label = _("Hidden")
        self.fields['details'].label = _("Details")

        self.fields['active'].initial = True

    class Meta:

        "Sales Status Form"
        model = SaleStatus
        fields = ('name', 'use_leads', 'use_opportunities',
                  'use_sales', 'active', 'hidden', 'details')


class SaleSourceForm(forms.ModelForm):

    """ Status form """
    name = forms.CharField(widget=forms.TextInput(attrs={'size': '40'}))

    def __init__(self, user, *args, **kwargs):
        super(SaleSourceForm, self).__init__(*args, **kwargs)

        self.fields['active'].initial = True
        self.fields['name'].label = _("Name")
        self.fields['active'].label = _("Active")
        self.fields['details'].label = _("Details")

    class Meta:

        "Sale Source Form"
        model = SaleSource
        fields = ('name', 'active', 'details')


class ProductForm(forms.ModelForm):

    """ Product form """
    name = forms.CharField(widget=forms.TextInput(attrs={'size': '40'}))

    def __init__(self, user, parent=None, *args, **kwargs):
        super(ProductForm, self).__init__(*args, **kwargs)

        self.fields['supplier'].queryset = Object.filter_permitted(
            user, Contact.objects)
        self.fields['supplier'].widget.attrs.update({'class': 'autocomplete',
                                                     'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['supplier'].widget.attrs.update(
            {'popuplink': reverse('identities_contact_add')})
        self.fields['supplier'].label = _("Supplier")
        self.fields['active'].initial = True
        self.fields['active'].label = _("Active")

        manager = Product.objects.filter(active=True)
        if 'instance' in kwargs:
            instance = kwargs['instance']
            manager = manager.exclude(Q(parent=instance) & Q(pk=instance.id))
        self.fields['parent'].queryset = Object.filter_permitted(
            user, manager, mode='x')

        if parent:
            self.fields['parent'].initial = get_object_or_404(
                Product, pk=parent)
            self.fields['parent'].label = _("Parent")

        self.fields['product_type'].label = _("Product type")
        self.fields['code'].label = _("Code")
        self.fields['supplier_code'].label = _("Supplier code")
        self.fields['buy_price'].label = _("Buy price")
        self.fields['sell_price'].label = _("Sell price")
        self.fields['stock_quantity'].label = _("Stock quantity")
        self.fields['runout_action'].label = _("Runout action")
        self.fields['details'].label = _("Details")

    class Meta:

        "ProductForm"
        model = Product
        fields = ('name', 'parent', 'product_type', 'code', 'supplier', 'supplier_code', 'buy_price',
                  'sell_price', 'stock_quantity', 'active', 'runout_action', 'details')


class ProductFilterForm(forms.ModelForm):

    """ Ticket Filters definition """

    def __init__(self, user, skip=[], *args, **kwargs):
        super(ProductFilterForm, self).__init__(*args, **kwargs)

        self.fields['product_type'].queryset = Object.filter_permitted(user,
                                                                       Product.objects.filter(active=True))
        self.fields['product_type'].required = False
        self.fields['product_type'].label = _("Product type")

        self.fields['supplier'].queryset = Object.filter_permitted(
            user, Contact.objects)
        self.fields['supplier'].required = False
        self.fields['supplier'].widget.attrs.update({'class': 'autocomplete',
                                                     'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['supplier'].label = _("Supplier")

        self.fields['active'].required = False
        self.fields['active'].initial = True
        self.fields['active'].label = _("Active")

    class Meta:

        "Product Filter Form"
        model = Product
        fields = ('product_type', 'supplier', 'active')


class UpdateRecordForm(forms.ModelForm):

    "UpdateRecord form"

    def __init__(self, *args, **kwargs):
        super(UpdateRecordForm, self).__init__(*args, **kwargs)

        self.fields['body'].label = _("Details")
        self.fields['body'].required = True

    class Meta:

        "UpdateRecordForm"
        model = UpdateRecord
        fields = ['body']


class OrderedProductForm(forms.ModelForm):

    """ Add New Ordered Product """

    def __init__(self, user, order, *args, **kwargs):

        super(OrderedProductForm, self).__init__(*args, **kwargs)

        self.fields['subscription'].queryset = Object.filter_permitted(
            user, Subscription.objects)
        self.fields['subscription'].widget.attrs.update({'class': 'autocomplete',
                                                         'callback': reverse('sales_ajax_subscription_lookup')})
        self.fields['subscription'].widget.attrs.update(
            {'popuplink': reverse('sales_subscription_add')})
        self.fields['subscription'].label = _("Subscription")

        self.fields['product'].queryset = Object.filter_permitted(
            user, Product.objects.filter(active=True))
        if user.is_admin('treeio.sales'):
            self.fields['product'].widget.attrs.update(
                {'popuplink': reverse('sales_product_add')})
            self.fields['product'].label = _("Product")

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.sales', 'default_order_product')[0]
            # AJAX to set the initial rate as the currency converted value of
            # product sell price
            self.fields['product'].initial = long(conf.value)
        except:
            pass

        # Tax
        self.fields['tax'].widget.attrs.update(
            {'popuplink': reverse('finance_tax_add')})

        # TODO: rate
        #  self.fields['rate_display'].label = _("Rate")
        #  self.fields['rate_display'].help_text = order.currency.code

        self.fields['quantity'].label = _("Quantity")
        self.fields['quantity'].initial = 1
        self.fields['discount'].label = _("Discount")
        self.fields['discount'].help_text = "%"

    def save(self, *args, **kwargs):
        "Set Rate"
        instance = super(OrderedProductForm, self).save(commit=False)
        if 'product' in self.cleaned_data and self.cleaned_data['product']:
            instance.rate = self.cleaned_data['product'].sell_price
            instance.rate_display = instance.rate

        return instance

    class Meta:

        "OrderedProductForm"
        model = OrderedProduct
        fields = ('product', 'quantity', 'subscription',
                  'tax', 'discount', 'description')


class SubscriptionForm(forms.ModelForm):

    """ Add New Subscription """

    def __init__(self, user, *args, **kwargs):
        super(SubscriptionForm, self).__init__(*args, **kwargs)

        del self.fields['cycle_end']

        self.fields['product'].queryset = Object.filter_permitted(
            user, Product.objects)
        self.fields['product'].label = _("Product")

        self.fields['client'].queryset = Object.filter_permitted(
            user, Contact.objects)
        self.fields['client'].widget.attrs.update({'class': 'autocomplete',
                                                   'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['client'].widget.attrs.update(
            {'popuplink': reverse('identities_contact_add')})
        self.fields['client'].label = _("Client")

        self.fields['start'].widget.attrs.update({'class': 'datepicker'})
        self.fields['start'].label = _("Start")
        self.fields['expiry'].widget.attrs.update({'class': 'datepicker'})
        self.fields['expiry'].label = _("Expiry")

        if 'instance' in kwargs:
            self.instance = kwargs['instance']
            self.fields['start'].widget.attrs['readonly'] = True
            del kwargs['instance']

        self.fields['active'].initial = True
        self.fields['active'].label = _("Active")
        self.fields['cycle_period'].label = _("Cycle period")
        self.fields['details'].label = _("Details")

    class Meta:

        "Subscription Form"
        model = Subscription
        fields = ('client', 'product', 'start', 'expiry',
                  'cycle_period', 'cycle_end', 'active', 'details')


class OrderForm(forms.ModelForm):

    """ Order form """

    def __init__(self, user, lead=None, opportunity=None, *args, **kwargs):
        super(OrderForm, self).__init__(*args, **kwargs)

        self.fields['reference'].required = False
        self.fields['reference'].label = _("Reference")
        if hasattr(self, 'instance') and not self.instance.reference:
            next_ref = self.instance.get_next_reference()
            if next_ref:
                self.fields['reference'].initial = next_ref

        self.fields['client'].queryset = Object.filter_permitted(
            user, Contact.objects)
        self.fields['client'].widget.attrs.update({'class': 'autocomplete',
                                                   'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['client'].widget.attrs.update(
            {'popuplink': reverse('identities_contact_add')})
        self.fields['client'].label = _("Client")

        self.fields['source'].queryset = Object.filter_permitted(
            user, SaleSource.objects.filter(active=True))
        self.fields['source'].label = _("Source")

        # Currency
        self.fields['currency'].label = _('Currency')
        instance = getattr(self, 'instance', None)
        if instance and instance.id:
            del self.fields['currency']
        else:
            self.fields['currency'].widget.attrs.update(
                {'popuplink': reverse('finance_currency_add')})
            self.fields['currency'].initial = Currency.objects.get(
                is_default=True)

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.sales', 'default_order_source')[0]
            self.fields['source'].initial = long(conf.value)
        except:
            pass

        self.fields['status'].queryset = Object.filter_permitted(user,
                                                                 SaleStatus.objects.filter(use_sales=True))
        self.fields['status'].label = _("Status")

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.sales', 'default_order_status')[0]
            self.fields['status'].initial = long(conf.value)
        except:
            pass

        if opportunity:
            self.fields['opportunity'].queryset = Object.filter_permitted(
                user, Opportunity.objects)
            self.fields['opportunity'].label = _("Opportunity")
            self.fields['opportunity'].initial = opportunity.id
            self.fields['client'].initial = opportunity.contact_id
            self.fields['source'].initial = opportunity.source_id
            self.fields['assigned'].initial = [
                i.id for i in opportunity.assigned.only('id')]
        else:
            del self.fields['opportunity']

        if lead:
            self.fields['client'].initial = lead.contact_id
            self.fields['source'].initial = lead.source_id
            self.fields['assigned'].initial = [
                i.id for i in lead.assigned.only('id')]

        self.fields['assigned'].help_text = ""
        self.fields['assigned'].label = _("Assigned to")
        self.fields['assigned'].widget.attrs.update({'class': 'multicomplete',
                                                     'callback': reverse('identities_ajax_user_lookup')})

        self.fields['datetime'].label = _("Date")
        self.fields['datetime'].widget.attrs.update(
            {'class': 'datetimepicker'})
        self.fields['details'].label = _("Details")

    class Meta:

        "Sale Order Form"
        model = SaleOrder
        fields = ('reference', 'client', 'opportunity', 'currency', 'source',
                  'assigned', 'status', 'datetime', 'details')


class OrderFilterForm(forms.ModelForm):

    """ Order Filters definition """

    paid = forms.ChoiceField(choices=(
        (None, '-----'), ('paid', _("Paid in full")), ('unpaid', _("Pending Payments"))), required=False)

    def __init__(self, user, skip=[], *args, **kwargs):
        super(OrderFilterForm, self).__init__(*args, **kwargs)

        if 'status' in skip:
            del self.fields['status']
        else:
            self.fields['status'].queryset = Object.filter_permitted(user,
                                                                     SaleStatus.objects.filter(use_sales=True))
            self.fields['status'].required = False
            self.fields['status'].label = _("Status")

        self.fields['paid'].label = _("Payment Status")

        self.fields['client'].queryset = Object.filter_permitted(
            user, Contact.objects)
        self.fields['client'].widget.attrs.update({'class': 'autocomplete',
                                                   'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['client'].required = False
        self.fields['client'].label = _("Client")

        self.fields['source'].queryset = Object.filter_permitted(
            user, SaleSource.objects.filter(active=True))
        self.fields['source'].required = False
        self.fields['source'].label = _("Source")

        self.fields['assigned'].label = _("Assigned")
        self.fields['assigned'].widget.attrs.update({'class': 'multicomplete',
                                                     'callback': reverse('identities_ajax_user_lookup')})
        if 'assigned' in skip:
            del self.fields['assigned']
        else:
            self.fields['assigned'].help_text = ""

    class Meta:

        "Order Filter Form"
        model = SaleOrder
        fields = ('client', 'source', 'assigned', 'status')


class LeadForm(forms.ModelForm):

    """ Lead form """

    def __init__(self, user, *args, **kwargs):
        super(LeadForm, self).__init__(*args, **kwargs)

        self.fields['contact'].queryset = Object.filter_permitted(
            user, Contact.objects)
        self.fields['contact'].widget.attrs.update({'class': 'autocomplete',
                                                    'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['contact'].widget.attrs.update(
            {'popuplink': reverse('identities_contact_add')})
        self.fields['contact'].label = _("Contact")

        self.fields['source'].queryset = Object.filter_permitted(
            user, SaleSource.objects.filter(active=True))
        self.fields['source'].label = _("Source")
        self.fields['products_interested'].queryset = Object.filter_permitted(
            user, Product.objects)
        self.fields['products_interested'].help_text = ""
        self.fields['products_interested'].widget.attrs.update(
            {'popuplink': reverse('sales_product_add')})
        self.fields['products_interested'].label = _("Products interested")

        self.fields['assigned'].help_text = ""
        self.fields['assigned'].label = _("Assigned to")
        self.fields['assigned'].widget.attrs.update({'class': 'multicomplete',
                                                     'callback': reverse('identities_ajax_user_lookup')})

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.sales', 'default_order_product')[0]
            self.fields['products_interested'].initial = [long(conf.value)]
        except:
            pass

        self.fields['status'].queryset = Object.filter_permitted(
            user, SaleStatus.objects.filter(use_leads=True))
        self.fields['status'].label = _("Status")

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.sales', 'default_lead_status')[0]
            self.fields['status'].initial = long(conf.value)
        except:
            pass

        self.fields['contact_method'].label = _("Contact method")
        self.fields['details'].label = _("Details")

    class Meta:

        "Lead Form"
        model = Lead
        fields = ('contact', 'source', 'products_interested', 'contact_method',
                  'assigned', 'status', 'details')


class LeadFilterForm(forms.ModelForm):

    """ Ticket Filters definition """

    def __init__(self, user, skip=[], *args, **kwargs):
        super(LeadFilterForm, self).__init__(*args, **kwargs)

        self.fields['contact'].queryset = Object.filter_permitted(
            user, Contact.objects)
        self.fields['contact'].widget.attrs.update({'class': 'autocomplete',
                                                    'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['contact'].required = False
        self.fields['contact'].label = _("Contact")

        self.fields['products_interested'].queryset = Object.filter_permitted(
            user, Product.objects)
        self.fields['products_interested'].required = False
        self.fields['products_interested'].help_text = ""
        self.fields['products_interested'].label = _("Products interested")

        self.fields['source'].queryset = Object.filter_permitted(user,
                                                                 SaleSource.objects.filter(active=True))
        self.fields['source'].required = False
        self.fields['source'].label = _("Source")

        self.fields['status'].queryset = Object.filter_permitted(user,
                                                                 SaleStatus.objects.filter(use_leads=True))
        self.fields['status'].required = False
        self.fields['status'].label = _("Status")

        self.fields['contact_method'].required = False
        self.fields['contact_method'].label = _("Contact method")

    class Meta:

        "Lead Filter Form"
        model = Lead
        fields = (
            'contact', 'source', 'products_interested', 'contact_method', 'status')


class OpportunityForm(forms.ModelForm):

    """ Opportunity form """

    def __init__(self, user, lead, *args, **kwargs):
        super(OpportunityForm, self).__init__(*args, **kwargs)

        self.fields['lead'].queryset = Object.filter_permitted(
            user, Lead.objects)
        self.fields['contact'].queryset = Object.filter_permitted(
            user, Contact.objects)
        self.fields['contact'].widget.attrs.update(
            {'popuplink': reverse('identities_contact_add')})
        self.fields['contact'].widget.attrs.update({'class': 'autocomplete',
                                                    'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['products_interested'].queryset = Object.filter_permitted(
            user, Product.objects)
        self.fields['products_interested'].widget.attrs.update(
            {'popuplink': reverse('sales_product_add')})
        try:
            conf = ModuleSetting.get_for_module(
                'treeio.sales', 'default_order_product')[0]
            self.fields['products_interested'].initial = [long(conf.value)]
        except:
            pass
        self.fields['source'].queryset = Object.filter_permitted(user,
                                                                 SaleSource.objects.filter(active=True))
        self.fields['status'].queryset = Object.filter_permitted(user,
                                                                 SaleStatus.objects.filter(use_opportunities=True))
        self.fields['assigned'].widget.attrs.update({'class': 'multicomplete',
                                                     'callback': reverse('identities_ajax_user_lookup')})

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.sales', 'default_opportunity_status')[0]
            self.fields['status'].initial = long(conf.value)
        except:
            pass

        if lead:
            self.fields['lead'].initial = lead.id
            self.fields['contact'].initial = lead.contact_id
            self.fields['products_interested'].initial = [
                i.id for i in lead.products_interested.only('id')]
            self.fields['source'].initial = lead.source_id
            self.fields['assigned'].initial = [
                i.id for i in lead.assigned.only('id')]
        else:
            del self.fields['lead']

        self.fields['products_interested'].help_text = ""
        self.fields['assigned'].help_text = ""

        self.fields['expected_date'].widget.attrs.update(
            {'class': 'datepicker'})
        self.fields['closed_date'].widget.attrs.update({'class': 'datepicker'})

        self.fields['contact'].label = _("Contact")
        self.fields['products_interested'].label = _("Products interested")
        self.fields['source'].label = _("Source")
        self.fields['expected_date'].label = _("Expected date")
        self.fields['closed_date'].label = _("Closed date")
        self.fields['assigned'].label = _("Assigned to")
        self.fields['amount_display'].label = _("Amount")
        self.fields['amount_currency'].label = _("Currency")
        self.fields['amount_currency'].widget.attrs.update(
            {'popuplink': reverse('finance_currency_add')})
        self.fields['amount_currency'].initial = Currency.objects.get(
            is_default=True)

        self.fields['probability'].label = _("Probability")
        self.fields['status'].label = _("Status")
        self.fields['details'].label = _("Details")

    class Meta:

        "Opportunity Form"
        model = Opportunity
        fields = ('lead', 'contact', 'products_interested', 'source',
                  'expected_date', 'closed_date', 'assigned', 'amount_currency', 'amount_display', 'probability', 'status', 'details')


class OpportunityFilterForm(forms.ModelForm):

    """ Opportunity Filters """

    def __init__(self, user, skip=[], *args, **kwargs):
        super(OpportunityFilterForm, self).__init__(*args, **kwargs)

        self.fields['contact'].queryset = Object.filter_permitted(
            user, Contact.objects)
        self.fields['contact'].widget.attrs.update({'class': 'autocomplete',
                                                    'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['contact'].required = False
        self.fields['contact'].label = _("Contact")

        self.fields['source'].queryset = Object.filter_permitted(user,
                                                                 SaleSource.objects.filter(active=True))
        self.fields['source'].required = False
        self.fields['source'].label = _("Source")

        self.fields['products_interested'].queryset = Object.filter_permitted(user,
                                                                              Product.objects.filter(active=True))
        self.fields['products_interested'].required = False
        self.fields['products_interested'].help_text = ""
        self.fields['products_interested'].label = _("Products interested")

        self.fields['status'].queryset = Object.filter_permitted(user,
                                                                 SaleStatus.objects.filter(use_opportunities=True))
        self.fields['status'].required = False
        self.fields['status'].label = _("Status")

    class Meta:

        "Opportunity Filter Form"
        model = Opportunity
        fields = ('contact', 'products_interested', 'source', 'status')

########NEW FILE########
__FILENAME__ = hmodule
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Sales: Hardtree module definition
"""

PROPERTIES = {
    'title': 'Sales & Stock',
    'details': 'Sales and Client Relationship Management',
    'url': '/sales/',
    'system': False,
    'type': 'major'
}

URL_PATTERNS = [
    '^/sales/',
]

# Temporarily disabled cron due to failing .currency setting
#from treeio.sales.cron import subscription_check
#CRON = [subscription_check]

########NEW FILE########
__FILENAME__ = identities
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Handle objects from this module relevant to a Contact or a User
"""
from treeio.core.models import Object
from treeio.sales.templatetags.sales import sales_order_list, sales_lead_list, sales_opportunity_list

CONTACT_OBJECTS = {}
CONTACT_OBJECTS['saleorder_set'] = {
    'label': 'Sale Orders',
    'objects': [],
    'templatetag': sales_order_list
}

CONTACT_OBJECTS['lead_set'] = {
    'label': 'Leads',
    'objects': [],
    'templatetag': sales_lead_list
}

CONTACT_OBJECTS['opportunity_set'] = {
    'label': 'Opportunities',
    'objects': [],
    'templatetag': sales_opportunity_list
}

USER_OBJECTS = {}
USER_OBJECTS['sales_saleorder_assigned'] = {'label': 'Assigned Orders',
                                            'objects': [],
                                            'templatetag': sales_order_list}


def get_contact_objects(current_user, contact):
    """
    Returns a dictionary with keys specified as contact attributes
    and values as dictionaries with labels and set of relevant objects.
    """

    objects = dict(CONTACT_OBJECTS)

    for key in objects:
        if hasattr(contact, key):
            objects[key]['objects'] = Object.filter_permitted(
                current_user, getattr(contact, key))

    return objects


def get_user_objects(current_user, user):
    """
    Returns a dictionary with keys specified as contact attributes
    and values as dictionaries with labels and set of relevant objects.
    """

    objects = dict(USER_OBJECTS)

    for key in objects:
        if hasattr(user, key):
            objects[key]['objects'] = Object.filter_permitted(
                current_user, getattr(user, key))

    return objects

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding model 'SaleStatus'
        db.create_table('sales_salestatus', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=512)),
            ('use_leads', self.gf(
                'django.db.models.fields.BooleanField')(default=False)),
            ('use_opportunities', self.gf(
                'django.db.models.fields.BooleanField')(default=False)),
            ('use_sales', self.gf(
                'django.db.models.fields.BooleanField')(default=False)),
            ('active', self.gf('django.db.models.fields.BooleanField')
             (default=False)),
            ('hidden', self.gf('django.db.models.fields.BooleanField')
             (default=False)),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('sales', ['SaleStatus'])

        # Adding model 'Product'
        db.create_table('sales_product', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=512)),
            ('product_type', self.gf(
                'django.db.models.fields.CharField')(max_length=32)),
            ('parent', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='child_set', null=True, to=orm['sales.Product'])),
            ('code', self.gf('django.db.models.fields.CharField')
             (max_length=512, null=True, blank=True)),
            ('supplier', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['identities.Contact'], null=True, blank=True)),
            ('supplier_code', self.gf('django.db.models.fields.IntegerField')
             (null=True, blank=True)),
            ('buy_price', self.gf('django.db.models.fields.FloatField')
             (null=True, blank=True)),
            ('sell_price', self.gf('django.db.models.fields.FloatField')
             (null=True, blank=True)),
            ('stock_quantity', self.gf('django.db.models.fields.IntegerField')
             (null=True, blank=True)),
            ('active', self.gf('django.db.models.fields.BooleanField')
             (default=False)),
            ('runout_action', self.gf('django.db.models.fields.CharField')
             (max_length=32, null=True, blank=True)),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('sales', ['Product'])

        # Adding model 'SaleSource'
        db.create_table('sales_salesource', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=512)),
            ('active', self.gf('django.db.models.fields.BooleanField')
             (default=False)),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('sales', ['SaleSource'])

        # Adding model 'Lead'
        db.create_table('sales_lead', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('contact', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['identities.Contact'])),
            ('source', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['sales.SaleSource'], null=True, blank=True)),
            ('contact_method', self.gf(
                'django.db.models.fields.CharField')(max_length=32)),
            ('status', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['sales.SaleStatus'])),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('sales', ['Lead'])

        # Adding M2M table for field products_interested on 'Lead'
        db.create_table('sales_lead_products_interested', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('lead', models.ForeignKey(orm['sales.lead'], null=False)),
            ('product', models.ForeignKey(orm['sales.product'], null=False))
        ))
        db.create_unique(
            'sales_lead_products_interested', ['lead_id', 'product_id'])

        # Adding M2M table for field assigned on 'Lead'
        db.create_table('sales_lead_assigned', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('lead', models.ForeignKey(orm['sales.lead'], null=False)),
            ('user', models.ForeignKey(orm['core.user'], null=False))
        ))
        db.create_unique('sales_lead_assigned', ['lead_id', 'user_id'])

        # Adding model 'Opportunity'
        db.create_table('sales_opportunity', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('lead', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['sales.Lead'], null=True, blank=True)),
            ('contact', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['identities.Contact'])),
            ('source', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['sales.SaleSource'], null=True, blank=True)),
            ('expected_date', self.gf('django.db.models.fields.DateField')
             (null=True, blank=True)),
            ('closed_date', self.gf('django.db.models.fields.DateField')
             (null=True, blank=True)),
            ('status', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['sales.SaleStatus'])),
            ('probability', self.gf('django.db.models.fields.FloatField')
             (null=True, blank=True)),
            ('amount', self.gf(
                'django.db.models.fields.FloatField')(default=0)),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('sales', ['Opportunity'])

        # Adding M2M table for field products_interested on 'Opportunity'
        db.create_table('sales_opportunity_products_interested', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('opportunity', models.ForeignKey(
                orm['sales.opportunity'], null=False)),
            ('product', models.ForeignKey(orm['sales.product'], null=False))
        ))
        db.create_unique(
            'sales_opportunity_products_interested', ['opportunity_id', 'product_id'])

        # Adding M2M table for field assigned on 'Opportunity'
        db.create_table('sales_opportunity_assigned', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('opportunity', models.ForeignKey(
                orm['sales.opportunity'], null=False)),
            ('user', models.ForeignKey(orm['core.user'], null=False))
        ))
        db.create_unique(
            'sales_opportunity_assigned', ['opportunity_id', 'user_id'])

        # Adding model 'SaleOrder'
        db.create_table('sales_saleorder', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('reference', self.gf('django.db.models.fields.CharField')
             (max_length=512, null=True, blank=True)),
            ('datetime', self.gf('django.db.models.fields.DateTimeField')
             (default=datetime.datetime.now)),
            ('client', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['identities.Contact'], null=True, blank=True)),
            ('opportunity', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['sales.Opportunity'], null=True, blank=True)),
            ('payment', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['finance.Transaction'], null=True, blank=True)),
            ('source', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['sales.SaleSource'])),
            ('status', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['sales.SaleStatus'])),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('sales', ['SaleOrder'])

        # Adding M2M table for field assigned on 'SaleOrder'
        db.create_table('sales_saleorder_assigned', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('saleorder', models.ForeignKey(
                orm['sales.saleorder'], null=False)),
            ('user', models.ForeignKey(orm['core.user'], null=False))
        ))
        db.create_unique(
            'sales_saleorder_assigned', ['saleorder_id', 'user_id'])

        # Adding model 'Subscription'
        db.create_table('sales_subscription', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('client', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['identities.Contact'], null=True, blank=True)),
            ('product', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['sales.Product'], null=True, blank=True)),
            ('start', self.gf('django.db.models.fields.DateField')
             (default=datetime.datetime.now)),
            ('expiry', self.gf('django.db.models.fields.DateField')
             (null=True, blank=True)),
            ('cycle_period', self.gf('django.db.models.fields.CharField')
             (default='month', max_length=32)),
            ('cycle_end', self.gf('django.db.models.fields.DateField')
             (null=True, blank=True)),
            ('active', self.gf('django.db.models.fields.BooleanField')
             (default=False)),
            ('details', self.gf('django.db.models.fields.CharField')
             (max_length=512, null=True, blank=True)),
        ))
        db.send_create_signal('sales', ['Subscription'])

        # Adding model 'OrderedProduct'
        db.create_table('sales_orderedproduct', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('subscription', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['sales.Subscription'], null=True, blank=True)),
            ('product', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['sales.Product'])),
            ('quantity', self.gf(
                'django.db.models.fields.PositiveIntegerField')(default=1)),
            ('discount', self.gf('django.db.models.fields.FloatField')
             (null=True, blank=True)),
            ('order', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['sales.SaleOrder'])),
            ('fulfilled', self.gf(
                'django.db.models.fields.BooleanField')(default=False)),
        ))
        db.send_create_signal('sales', ['OrderedProduct'])

        # Adding model 'UpdateRecord'
        db.create_table('sales_updaterecord', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('order', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['sales.SaleOrder'], null=True, blank=True)),
            ('opportunity', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['sales.Opportunity'], null=True, blank=True)),
            ('lead', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['sales.Lead'], null=True, blank=True)),
            ('record_type', self.gf(
                'django.db.models.fields.CharField')(max_length=32)),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('sales', ['UpdateRecord'])

    def backwards(self, orm):

        # Deleting model 'SaleStatus'
        db.delete_table('sales_salestatus')

        # Deleting model 'Product'
        db.delete_table('sales_product')

        # Deleting model 'SaleSource'
        db.delete_table('sales_salesource')

        # Deleting model 'Lead'
        db.delete_table('sales_lead')

        # Removing M2M table for field products_interested on 'Lead'
        db.delete_table('sales_lead_products_interested')

        # Removing M2M table for field assigned on 'Lead'
        db.delete_table('sales_lead_assigned')

        # Deleting model 'Opportunity'
        db.delete_table('sales_opportunity')

        # Removing M2M table for field products_interested on 'Opportunity'
        db.delete_table('sales_opportunity_products_interested')

        # Removing M2M table for field assigned on 'Opportunity'
        db.delete_table('sales_opportunity_assigned')

        # Deleting model 'SaleOrder'
        db.delete_table('sales_saleorder')

        # Removing M2M table for field assigned on 'SaleOrder'
        db.delete_table('sales_saleorder_assigned')

        # Deleting model 'Subscription'
        db.delete_table('sales_subscription')

        # Deleting model 'OrderedProduct'
        db.delete_table('sales_orderedproduct')

        # Deleting model 'UpdateRecord'
        db.delete_table('sales_updaterecord')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'everybody_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']"}),
            'group_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"}),
            'user_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'finance.account': {
            'Meta': {'ordering': "['name']", 'object_name': 'Account', '_ormbases': ['core.Object']},
            'balance': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"})
        },
        'finance.category': {
            'Meta': {'object_name': 'Category', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'finance.liability': {
            'Meta': {'ordering': "['-due_date']", 'object_name': 'Liability', '_ormbases': ['core.Object']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Account']"}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Category']", 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'due_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_liability_source'", 'to': "orm['identities.Contact']"}),
            'target': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_liability_target'", 'to': "orm['identities.Contact']"}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'finance.transaction': {
            'Meta': {'ordering': "['-datetime']", 'object_name': 'Transaction', '_ormbases': ['core.Object']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Account']"}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Category']", 'null': 'True', 'blank': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'liability': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Liability']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_transaction_source'", 'to': "orm['identities.Contact']"}),
            'target': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_transaction_target'", 'to': "orm['identities.Contact']"}),
            'value': ('django.db.models.fields.FloatField', [], {})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'sales.lead': {
            'Meta': {'ordering': "['contact']", 'object_name': 'Lead', '_ormbases': ['core.Object']},
            'assigned': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'sales_lead_assigned'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'contact_method': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'products_interested': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['sales.Product']", 'null': 'True', 'blank': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleSource']", 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleStatus']"})
        },
        'sales.opportunity': {
            'Meta': {'ordering': "['-expected_date']", 'object_name': 'Opportunity', '_ormbases': ['core.Object']},
            'amount': ('django.db.models.fields.FloatField', [], {'default': '0'}),
            'assigned': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'sales_opportunity_assigned'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'closed_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'expected_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'lead': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.Lead']", 'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'probability': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'products_interested': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sales.Product']", 'symmetrical': 'False'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleSource']", 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleStatus']"})
        },
        'sales.orderedproduct': {
            'Meta': {'ordering': "['product']", 'object_name': 'OrderedProduct', '_ormbases': ['core.Object']},
            'discount': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'fulfilled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'order': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleOrder']"}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.Product']"}),
            'quantity': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
            'subscription': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.Subscription']", 'null': 'True', 'blank': 'True'})
        },
        'sales.product': {
            'Meta': {'ordering': "['code']", 'object_name': 'Product', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'buy_price': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'code': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['sales.Product']"}),
            'product_type': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'runout_action': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'blank': 'True'}),
            'sell_price': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'}),
            'stock_quantity': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'supplier': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']", 'null': 'True', 'blank': 'True'}),
            'supplier_code': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'})
        },
        'sales.saleorder': {
            'Meta': {'ordering': "['-datetime']", 'object_name': 'SaleOrder', '_ormbases': ['core.Object']},
            'assigned': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'sales_saleorder_assigned'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'client': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']", 'null': 'True', 'blank': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'opportunity': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.Opportunity']", 'null': 'True', 'blank': 'True'}),
            'payment': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Transaction']", 'null': 'True', 'blank': 'True'}),
            'reference': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleSource']"}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleStatus']"})
        },
        'sales.salesource': {
            'Meta': {'ordering': "('-active', 'name')", 'object_name': 'SaleSource', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'sales.salestatus': {
            'Meta': {'ordering': "('hidden', '-active', 'name')", 'object_name': 'SaleStatus', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'use_leads': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'use_opportunities': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'use_sales': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'sales.subscription': {
            'Meta': {'ordering': "['expiry']", 'object_name': 'Subscription', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'client': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']", 'null': 'True', 'blank': 'True'}),
            'cycle_end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'cycle_period': ('django.db.models.fields.CharField', [], {'default': "'month'", 'max_length': '32'}),
            'details': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'expiry': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.Product']", 'null': 'True', 'blank': 'True'}),
            'start': ('django.db.models.fields.DateField', [], {'default': 'datetime.datetime.now'})
        },
        'sales.updaterecord': {
            'Meta': {'ordering': "['order']", 'object_name': 'UpdateRecord', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'lead': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.Lead']", 'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'opportunity': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.Opportunity']", 'null': 'True', 'blank': 'True'}),
            'order': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleOrder']", 'null': 'True', 'blank': 'True'}),
            'record_type': ('django.db.models.fields.CharField', [], {'max_length': '32'})
        }
    }

    complete_apps = ['sales']

########NEW FILE########
__FILENAME__ = 0002_auto__del_updaterecord__add_field_orderedproduct_tax__add_field_ordere
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models
from decimal import Decimal
from treeio.sales.models import OrderedProduct, Product


class Migration(SchemaMigration):

    def forwards(self, orm):

        if not db.dry_run:
            ops = OrderedProduct.objects.all()
            ps = Product.objects.all()

        # Deleting model 'UpdateRecord'
        db.delete_table('sales_updaterecord')

        # Adding field 'OrderedProduct.tax'
        db.add_column('sales_orderedproduct', 'tax', self.gf('django.db.models.fields.related.ForeignKey')(
            to=orm['finance.Tax'], null=True, blank=True), keep_default=False)

        # Adding field 'OrderedProduct.rate'
        db.add_column('sales_orderedproduct', 'rate', self.gf('django.db.models.fields.DecimalField')(
            default=1, max_digits=20, decimal_places=2), keep_default=False)

        # Adding field 'OrderedProduct.rate_display'
        db.add_column('sales_orderedproduct', 'rate_display', self.gf('django.db.models.fields.DecimalField')(
            default=0, max_digits=20, decimal_places=2), keep_default=False)

        # Adding field 'OrderedProduct.description'
        db.add_column('sales_orderedproduct', 'description', self.gf(
            'django.db.models.fields.TextField')(null=True, blank=True), keep_default=False)

        if not db.dry_run:
            # convert old Float fields to temporary fields
            for op in ops:
                op.discount_f = op.discount
                op.discount = 0
                op.quantity_f = op.quantity
                op.quantity = 0
                op.save()

        # Changing field 'OrderedProduct.discount'
        db.alter_column('sales_orderedproduct', 'discount', self.gf(
            'django.db.models.fields.DecimalField')(max_digits=4, decimal_places=2))

        # Changing field 'OrderedProduct.quantity'
        db.alter_column('sales_orderedproduct', 'quantity', self.gf(
            'django.db.models.fields.DecimalField')(max_digits=30, decimal_places=2))

        if not db.dry_run:
            for p in ps:
                p.buy_price_f = p.buy_price
                p.buy_price = 0
                p.sell_price_f = p.sell_price
                p.sell_price = 0
                p.save()

        # Changing field 'Product.buy_price'
        db.alter_column('sales_product', 'buy_price', self.gf(
            'django.db.models.fields.DecimalField')(max_digits=20, decimal_places=2))

        # Changing field 'Product.sell_price'
        db.alter_column('sales_product', 'sell_price', self.gf(
            'django.db.models.fields.DecimalField')(max_digits=20, decimal_places=2))

        # Adding field 'Opportunity.amount_currency'
        db.add_column('sales_opportunity', 'amount_currency', self.gf(
            'django.db.models.fields.related.ForeignKey')(default=1, to=orm['finance.Currency']), keep_default=False)

        # Adding field 'Opportunity.amount_display'
        db.add_column('sales_opportunity', 'amount_display', self.gf('django.db.models.fields.DecimalField')(
            default=1, max_digits=20, decimal_places=2), keep_default=False)

        # Changing field 'Opportunity.probability'
        db.alter_column('sales_opportunity', 'probability', self.gf(
            'django.db.models.fields.DecimalField')(null=True, max_digits=3, decimal_places=0))

        # Changing field 'Opportunity.amount'
        db.alter_column('sales_opportunity', 'amount', self.gf(
            'django.db.models.fields.DecimalField')(max_digits=20, decimal_places=2))

        # Deleting field 'SaleOrder.payment'
        db.delete_column('sales_saleorder', 'payment_id')

        # Adding field 'SaleOrder.currency'
        db.add_column('sales_saleorder', 'currency', self.gf('django.db.models.fields.related.ForeignKey')(
            default=1, to=orm['finance.Currency']), keep_default=False)

        # Adding field 'SaleOrder.total'
        db.add_column('sales_saleorder', 'total', self.gf('django.db.models.fields.DecimalField')(
            default=0, max_digits=20, decimal_places=2), keep_default=False)

        # Adding field 'SaleOrder.total_display'
        db.add_column('sales_saleorder', 'total_display', self.gf('django.db.models.fields.DecimalField')(
            default=0, max_digits=20, decimal_places=2), keep_default=False)

        # Adding M2M table for field payment on 'SaleOrder'
        db.create_table('sales_saleorder_payment', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('saleorder', models.ForeignKey(
                orm['sales.saleorder'], null=False)),
            ('transaction', models.ForeignKey(
                orm['finance.transaction'], null=False))
        ))
        db.create_unique(
            'sales_saleorder_payment', ['saleorder_id', 'transaction_id'])

        if not db.dry_run:
            # convert temporary fields back into decimal
            for op in ops:
                if op.discount_f:
                    op.discount = Decimal(unicode(op.discount_f)).quantize(
                        Decimal('.01'), 'ROUND_DOWN')
                if op.quantity_f:
                    op.quantity = int(op.quantity_f)
                op.save()

            for p in ps:
                if p.buy_price_f:
                    p.buy_price = Decimal(unicode(p.buy_price_f))
                if p.sell_price_f:
                    p.sell_price = Decimal(unicode(p.sell_price_f))
                p.save()

    def backwards(self, orm):

        # Adding model 'UpdateRecord'
        db.create_table('sales_updaterecord', (
            ('lead', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['sales.Lead'], null=True, blank=True)),
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('record_type', self.gf(
                'django.db.models.fields.CharField')(max_length=32)),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('opportunity', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['sales.Opportunity'], null=True, blank=True)),
            ('order', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['sales.SaleOrder'], null=True, blank=True)),
        ))
        db.send_create_signal('sales', ['UpdateRecord'])

        # Deleting field 'OrderedProduct.tax'
        db.delete_column('sales_orderedproduct', 'tax_id')

        # Deleting field 'OrderedProduct.rate'
        db.delete_column('sales_orderedproduct', 'rate')

        # Deleting field 'OrderedProduct.rate_display'
        db.delete_column('sales_orderedproduct', 'rate_display')

        # Deleting field 'OrderedProduct.description'
        db.delete_column('sales_orderedproduct', 'description')

        # Changing field 'OrderedProduct.discount'
        db.alter_column('sales_orderedproduct', 'discount', self.gf(
            'django.db.models.fields.FloatField')(null=True))

        # Changing field 'OrderedProduct.quantity'
        db.alter_column('sales_orderedproduct', 'quantity', self.gf(
            'django.db.models.fields.PositiveIntegerField')())

        # Changing field 'Product.buy_price'
        db.alter_column('sales_product', 'buy_price', self.gf(
            'django.db.models.fields.FloatField')(null=True))

        # Changing field 'Product.sell_price'
        db.alter_column('sales_product', 'sell_price', self.gf(
            'django.db.models.fields.FloatField')(null=True))

        # Deleting field 'Opportunity.amount_currency'
        db.delete_column('sales_opportunity', 'amount_currency_id')

        # Deleting field 'Opportunity.amount_display'
        db.delete_column('sales_opportunity', 'amount_display')

        # Changing field 'Opportunity.probability'
        db.alter_column('sales_opportunity', 'probability', self.gf(
            'django.db.models.fields.FloatField')(null=True))

        # Changing field 'Opportunity.amount'
        db.alter_column('sales_opportunity', 'amount', self.gf(
            'django.db.models.fields.FloatField')())

        # Adding field 'SaleOrder.payment'
        db.add_column('sales_saleorder', 'payment', self.gf('django.db.models.fields.related.ForeignKey')(
            to=orm['finance.Transaction'], null=True, blank=True), keep_default=False)

        # Deleting field 'SaleOrder.currency'
        db.delete_column('sales_saleorder', 'currency_id')

        # Deleting field 'SaleOrder.total'
        db.delete_column('sales_saleorder', 'total')

        # Deleting field 'SaleOrder.total_display'
        db.delete_column('sales_saleorder', 'total_display')

        # Removing M2M table for field payment on 'SaleOrder'
        db.delete_table('sales_saleorder_payment')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.AccessEntity']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'finance.account': {
            'Meta': {'ordering': "['name']", 'object_name': 'Account', '_ormbases': ['core.Object']},
            'balance': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'balance_currency': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Currency']"}),
            'balance_display': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"})
        },
        'finance.category': {
            'Meta': {'object_name': 'Category', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'finance.currency': {
            'Meta': {'object_name': 'Currency', '_ormbases': ['core.Object']},
            'code': ('django.db.models.fields.CharField', [], {'max_length': '3'}),
            'factor': ('django.db.models.fields.DecimalField', [], {'default': '1', 'max_digits': '10', 'decimal_places': '4'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_default': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'symbol': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True', 'blank': 'True'})
        },
        'finance.liability': {
            'Meta': {'ordering': "['-due_date']", 'object_name': 'Liability', '_ormbases': ['core.Object']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Account']"}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Category']", 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'due_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_liability_source'", 'to': "orm['identities.Contact']"}),
            'target': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_liability_target'", 'to': "orm['identities.Contact']"}),
            'value': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'value_currency': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Currency']"}),
            'value_display': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'})
        },
        'finance.tax': {
            'Meta': {'object_name': 'Tax', '_ormbases': ['core.Object']},
            'compound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'rate': ('django.db.models.fields.DecimalField', [], {'max_digits': '4', 'decimal_places': '2'})
        },
        'finance.transaction': {
            'Meta': {'ordering': "['-datetime']", 'object_name': 'Transaction', '_ormbases': ['core.Object']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Account']"}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Category']", 'null': 'True', 'blank': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'liability': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Liability']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_transaction_source'", 'to': "orm['identities.Contact']"}),
            'target': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_transaction_target'", 'to': "orm['identities.Contact']"}),
            'value': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'value_currency': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Currency']"}),
            'value_display': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.AccessEntity']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'sales.lead': {
            'Meta': {'ordering': "['contact']", 'object_name': 'Lead', '_ormbases': ['core.Object']},
            'assigned': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'sales_lead_assigned'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'contact_method': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'products_interested': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['sales.Product']", 'null': 'True', 'blank': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleSource']", 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleStatus']"})
        },
        'sales.opportunity': {
            'Meta': {'ordering': "['-expected_date']", 'object_name': 'Opportunity', '_ormbases': ['core.Object']},
            'amount': ('django.db.models.fields.DecimalField', [], {'max_digits': '20', 'decimal_places': '2'}),
            'amount_currency': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Currency']"}),
            'amount_display': ('django.db.models.fields.DecimalField', [], {'max_digits': '20', 'decimal_places': '2'}),
            'assigned': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'sales_opportunity_assigned'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'closed_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'expected_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'lead': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.Lead']", 'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'probability': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '3', 'decimal_places': '0', 'blank': 'True'}),
            'products_interested': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sales.Product']", 'symmetrical': 'False'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleSource']", 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleStatus']"})
        },
        'sales.orderedproduct': {
            'Meta': {'ordering': "['product']", 'object_name': 'OrderedProduct', '_ormbases': ['core.Object']},
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'discount': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '4', 'decimal_places': '2'}),
            'fulfilled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'order': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleOrder']"}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.Product']"}),
            'quantity': ('django.db.models.fields.DecimalField', [], {'default': '1', 'max_digits': '4', 'decimal_places': '2'}),
            'rate': ('django.db.models.fields.DecimalField', [], {'max_digits': '20', 'decimal_places': '2'}),
            'rate_display': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'subscription': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.Subscription']", 'null': 'True', 'blank': 'True'}),
            'tax': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Tax']", 'null': 'True', 'blank': 'True'})
        },
        'sales.product': {
            'Meta': {'ordering': "['code']", 'object_name': 'Product', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'buy_price': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'code': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['sales.Product']"}),
            'product_type': ('django.db.models.fields.CharField', [], {'default': "'good'", 'max_length': '32'}),
            'runout_action': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'blank': 'True'}),
            'sell_price': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'stock_quantity': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'supplier': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']", 'null': 'True', 'blank': 'True'}),
            'supplier_code': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'})
        },
        'sales.saleorder': {
            'Meta': {'ordering': "['-datetime']", 'object_name': 'SaleOrder', '_ormbases': ['core.Object']},
            'assigned': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'sales_saleorder_assigned'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'client': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']", 'null': 'True', 'blank': 'True'}),
            'currency': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Currency']"}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'opportunity': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.Opportunity']", 'null': 'True', 'blank': 'True'}),
            'payment': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['finance.Transaction']", 'null': 'True', 'blank': 'True'}),
            'reference': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleSource']"}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleStatus']"}),
            'total': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'total_display': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'})
        },
        'sales.salesource': {
            'Meta': {'ordering': "('-active', 'name')", 'object_name': 'SaleSource', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'sales.salestatus': {
            'Meta': {'ordering': "('hidden', '-active', 'name')", 'object_name': 'SaleStatus', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'use_leads': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'use_opportunities': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'use_sales': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'sales.subscription': {
            'Meta': {'ordering': "['expiry']", 'object_name': 'Subscription', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'client': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']", 'null': 'True', 'blank': 'True'}),
            'cycle_end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'cycle_period': ('django.db.models.fields.CharField', [], {'default': "'month'", 'max_length': '32'}),
            'details': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'expiry': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.Product']", 'null': 'True', 'blank': 'True'}),
            'start': ('django.db.models.fields.DateField', [], {'default': 'datetime.datetime.now'})
        }
    }

    complete_apps = ['sales']

########NEW FILE########
__FILENAME__ = 0003_treeiocurrency
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models
from treeio.finance.models import Currency
from treeio.sales.models import SaleOrder, Opportunity, OrderedProduct


class Migration(DataMigration):

    def forwards(self, orm):
        "Add currencies to financial items"
        try:
            currency = Currency.objects.get(is_default=True)
        except:
            currency = Currency.objects.create()
            currency.code = "USD"
            currency.name = "USD  United States of America, Dollars"
            currency.symbol = u"$"
            currency.is_default = True
            currency.save()

        for obj in SaleOrder.objects.all():
            obj.currency = currency
            obj.save()

        for obj in Opportunity.objects.all():
            obj.amount_currency = currency
            obj.amount_display = obj.amount
            obj.save()

        for obj in OrderedProduct.objects.all():
            obj.rate = obj.product.sell_price
            obj.rate_display = obj.rate
            obj.save()

        for obj in SaleOrder.objects.all():
            obj.update_total()

    def backwards(self, orm):
        raise RuntimeError("Cannot reverse this migration.")

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.AccessEntity']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'finance.account': {
            'Meta': {'ordering': "['name']", 'object_name': 'Account', '_ormbases': ['core.Object']},
            'balance': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'balance_currency': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Currency']"}),
            'balance_display': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"})
        },
        'finance.category': {
            'Meta': {'object_name': 'Category', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'finance.currency': {
            'Meta': {'object_name': 'Currency', '_ormbases': ['core.Object']},
            'code': ('django.db.models.fields.CharField', [], {'max_length': '3'}),
            'factor': ('django.db.models.fields.DecimalField', [], {'default': '1', 'max_digits': '10', 'decimal_places': '4'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_default': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'symbol': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True', 'blank': 'True'})
        },
        'finance.liability': {
            'Meta': {'ordering': "['-due_date']", 'object_name': 'Liability', '_ormbases': ['core.Object']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Account']"}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Category']", 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'due_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_liability_source'", 'to': "orm['identities.Contact']"}),
            'target': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_liability_target'", 'to': "orm['identities.Contact']"}),
            'value': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'value_currency': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Currency']"}),
            'value_display': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'})
        },
        'finance.tax': {
            'Meta': {'object_name': 'Tax', '_ormbases': ['core.Object']},
            'compound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'rate': ('django.db.models.fields.DecimalField', [], {'max_digits': '4', 'decimal_places': '2'})
        },
        'finance.transaction': {
            'Meta': {'ordering': "['-datetime']", 'object_name': 'Transaction', '_ormbases': ['core.Object']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Account']"}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Category']", 'null': 'True', 'blank': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'liability': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Liability']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_transaction_source'", 'to': "orm['identities.Contact']"}),
            'target': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_transaction_target'", 'to': "orm['identities.Contact']"}),
            'value': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'value_currency': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Currency']"}),
            'value_display': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.AccessEntity']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'sales.lead': {
            'Meta': {'ordering': "['contact']", 'object_name': 'Lead', '_ormbases': ['core.Object']},
            'assigned': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'sales_lead_assigned'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'contact_method': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'products_interested': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['sales.Product']", 'null': 'True', 'blank': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleSource']", 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleStatus']"})
        },
        'sales.opportunity': {
            'Meta': {'ordering': "['-expected_date']", 'object_name': 'Opportunity', '_ormbases': ['core.Object']},
            'amount': ('django.db.models.fields.DecimalField', [], {'max_digits': '20', 'decimal_places': '2'}),
            'amount_currency': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Currency']"}),
            'amount_display': ('django.db.models.fields.DecimalField', [], {'max_digits': '20', 'decimal_places': '2'}),
            'assigned': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'sales_opportunity_assigned'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'closed_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'expected_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'lead': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.Lead']", 'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'probability': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '3', 'decimal_places': '0', 'blank': 'True'}),
            'products_interested': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sales.Product']", 'symmetrical': 'False'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleSource']", 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleStatus']"})
        },
        'sales.orderedproduct': {
            'Meta': {'ordering': "['product']", 'object_name': 'OrderedProduct', '_ormbases': ['core.Object']},
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'discount': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '4', 'decimal_places': '2'}),
            'fulfilled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'order': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleOrder']"}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.Product']"}),
            'quantity': ('django.db.models.fields.DecimalField', [], {'default': '1', 'max_digits': '4', 'decimal_places': '2'}),
            'rate': ('django.db.models.fields.DecimalField', [], {'max_digits': '20', 'decimal_places': '2'}),
            'rate_display': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'subscription': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.Subscription']", 'null': 'True', 'blank': 'True'}),
            'tax': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Tax']", 'null': 'True', 'blank': 'True'})
        },
        'sales.product': {
            'Meta': {'ordering': "['code']", 'object_name': 'Product', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'buy_price': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'code': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['sales.Product']"}),
            'product_type': ('django.db.models.fields.CharField', [], {'default': "'good'", 'max_length': '32'}),
            'runout_action': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'blank': 'True'}),
            'sell_price': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'stock_quantity': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'supplier': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']", 'null': 'True', 'blank': 'True'}),
            'supplier_code': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'})
        },
        'sales.saleorder': {
            'Meta': {'ordering': "['-datetime']", 'object_name': 'SaleOrder', '_ormbases': ['core.Object']},
            'assigned': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'sales_saleorder_assigned'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'client': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']", 'null': 'True', 'blank': 'True'}),
            'currency': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Currency']"}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'opportunity': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.Opportunity']", 'null': 'True', 'blank': 'True'}),
            'payment': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['finance.Transaction']", 'null': 'True', 'blank': 'True'}),
            'reference': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleSource']"}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleStatus']"}),
            'total': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'total_display': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'})
        },
        'sales.salesource': {
            'Meta': {'ordering': "('-active', 'name')", 'object_name': 'SaleSource', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'sales.salestatus': {
            'Meta': {'ordering': "('hidden', '-active', 'name')", 'object_name': 'SaleStatus', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'use_leads': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'use_opportunities': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'use_sales': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'sales.subscription': {
            'Meta': {'ordering': "['expiry']", 'object_name': 'Subscription', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'client': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']", 'null': 'True', 'blank': 'True'}),
            'cycle_end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'cycle_period': ('django.db.models.fields.CharField', [], {'default': "'month'", 'max_length': '32'}),
            'details': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'expiry': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.Product']", 'null': 'True', 'blank': 'True'}),
            'start': ('django.db.models.fields.DateField', [], {'default': 'datetime.datetime.now'})
        }
    }

    complete_apps = ['sales']

########NEW FILE########
__FILENAME__ = 0004_auto__chg_field_orderedproduct_quantity
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Changing field 'OrderedProduct.quantity'
        db.alter_column('sales_orderedproduct', 'quantity', self.gf(
            'django.db.models.fields.DecimalField')(max_digits=30, decimal_places=2))

    def backwards(self, orm):

        # Changing field 'OrderedProduct.quantity'
        db.alter_column('sales_orderedproduct', 'quantity', self.gf(
            'django.db.models.fields.DecimalField')(max_digits=4, decimal_places=2))

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'finance.account': {
            'Meta': {'ordering': "['name']", 'object_name': 'Account', '_ormbases': ['core.Object']},
            'balance': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'balance_currency': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Currency']"}),
            'balance_display': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"})
        },
        'finance.category': {
            'Meta': {'object_name': 'Category', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'finance.currency': {
            'Meta': {'object_name': 'Currency', '_ormbases': ['core.Object']},
            'code': ('django.db.models.fields.CharField', [], {'max_length': '3'}),
            'factor': ('django.db.models.fields.DecimalField', [], {'default': '1', 'max_digits': '10', 'decimal_places': '4'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_default': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'symbol': ('django.db.models.fields.CharField', [], {'max_length': '1', 'null': 'True', 'blank': 'True'})
        },
        'finance.liability': {
            'Meta': {'ordering': "['-due_date']", 'object_name': 'Liability', '_ormbases': ['core.Object']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Account']"}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Category']", 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'due_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_liability_source'", 'to': "orm['identities.Contact']"}),
            'target': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_liability_target'", 'to': "orm['identities.Contact']"}),
            'value': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'value_currency': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Currency']"}),
            'value_display': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'})
        },
        'finance.tax': {
            'Meta': {'object_name': 'Tax', '_ormbases': ['core.Object']},
            'compound': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'rate': ('django.db.models.fields.DecimalField', [], {'max_digits': '4', 'decimal_places': '2'})
        },
        'finance.transaction': {
            'Meta': {'ordering': "['-datetime']", 'object_name': 'Transaction', '_ormbases': ['core.Object']},
            'account': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Account']"}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Category']", 'null': 'True', 'blank': 'True'}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'details': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'liability': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Liability']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_transaction_source'", 'to': "orm['identities.Contact']"}),
            'target': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'finance_transaction_target'", 'to': "orm['identities.Contact']"}),
            'value': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'value_currency': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Currency']"}),
            'value_display': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.AccessEntity']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'sales.lead': {
            'Meta': {'ordering': "['contact']", 'object_name': 'Lead', '_ormbases': ['core.Object']},
            'assigned': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'sales_lead_assigned'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'contact_method': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'products_interested': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['sales.Product']", 'null': 'True', 'blank': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleSource']", 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleStatus']"})
        },
        'sales.opportunity': {
            'Meta': {'ordering': "['-expected_date']", 'object_name': 'Opportunity', '_ormbases': ['core.Object']},
            'amount': ('django.db.models.fields.DecimalField', [], {'max_digits': '20', 'decimal_places': '2'}),
            'amount_currency': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Currency']"}),
            'amount_display': ('django.db.models.fields.DecimalField', [], {'max_digits': '20', 'decimal_places': '2'}),
            'assigned': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'sales_opportunity_assigned'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'closed_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'contact': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'expected_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'lead': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.Lead']", 'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'probability': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '3', 'decimal_places': '0', 'blank': 'True'}),
            'products_interested': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sales.Product']", 'symmetrical': 'False'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleSource']", 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleStatus']"})
        },
        'sales.orderedproduct': {
            'Meta': {'ordering': "['product']", 'object_name': 'OrderedProduct', '_ormbases': ['core.Object']},
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'discount': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '4', 'decimal_places': '2'}),
            'fulfilled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'order': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleOrder']"}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.Product']"}),
            'quantity': ('django.db.models.fields.DecimalField', [], {'default': '1', 'max_digits': '30', 'decimal_places': '2'}),
            'rate': ('django.db.models.fields.DecimalField', [], {'max_digits': '20', 'decimal_places': '2'}),
            'rate_display': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'subscription': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.Subscription']", 'null': 'True', 'blank': 'True'}),
            'tax': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Tax']", 'null': 'True', 'blank': 'True'})
        },
        'sales.product': {
            'Meta': {'ordering': "['code']", 'object_name': 'Product', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'buy_price': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'code': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['sales.Product']"}),
            'product_type': ('django.db.models.fields.CharField', [], {'default': "'good'", 'max_length': '32'}),
            'runout_action': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'blank': 'True'}),
            'sell_price': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'stock_quantity': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'supplier': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']", 'null': 'True', 'blank': 'True'}),
            'supplier_code': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'})
        },
        'sales.saleorder': {
            'Meta': {'ordering': "['-datetime']", 'object_name': 'SaleOrder', '_ormbases': ['core.Object']},
            'assigned': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'sales_saleorder_assigned'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'client': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']", 'null': 'True', 'blank': 'True'}),
            'currency': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['finance.Currency']"}),
            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'opportunity': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.Opportunity']", 'null': 'True', 'blank': 'True'}),
            'payment': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['finance.Transaction']", 'null': 'True', 'blank': 'True'}),
            'reference': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'source': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleSource']"}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.SaleStatus']"}),
            'total': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'}),
            'total_display': ('django.db.models.fields.DecimalField', [], {'default': '0', 'max_digits': '20', 'decimal_places': '2'})
        },
        'sales.salesource': {
            'Meta': {'ordering': "('-active', 'name')", 'object_name': 'SaleSource', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'sales.salestatus': {
            'Meta': {'ordering': "('hidden', '-active', 'name')", 'object_name': 'SaleStatus', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'use_leads': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'use_opportunities': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'use_sales': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'sales.subscription': {
            'Meta': {'ordering': "['expiry']", 'object_name': 'Subscription', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'client': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']", 'null': 'True', 'blank': 'True'}),
            'cycle_end': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'cycle_period': ('django.db.models.fields.CharField', [], {'default': "'month'", 'max_length': '32'}),
            'details': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'expiry': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'product': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sales.Product']", 'null': 'True', 'blank': 'True'}),
            'start': ('django.db.models.fields.DateField', [], {'default': 'datetime.datetime.now'})
        }
    }

    complete_apps = ['sales']

########NEW FILE########
__FILENAME__ = models
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Sales module objects.

"""
from django.core.urlresolvers import reverse
from django.db import models

from treeio.core.models import Object, User, ModuleSetting
from treeio.identities.models import Contact
from treeio.finance.models import Transaction, Currency, Tax

from datetime import datetime, timedelta, time
from dateutil.relativedelta import relativedelta
from decimal import Decimal, ROUND_UP
from time import time as ttime


class SaleStatus(Object):
    "Status of the Sale"
    name = models.CharField(max_length=512)
    use_leads = models.BooleanField()
    use_opportunities = models.BooleanField()
    use_sales = models.BooleanField()
    active = models.BooleanField()
    hidden = models.BooleanField()
    details = models.TextField(blank=True, null=True)

    searchable = False

    def __unicode__(self):
        return unicode(self.name)

    def get_absolute_url(self):
        "Returns absolute URL"
        try:
            return reverse('sales_status_view', args=[self.id])
        except Exception:
            return ""

    class Meta:

        "SalesStatus"
        ordering = ('hidden', '-active', 'name')


class Product(Object):
    "Single Product"
    PRODUCT_TYPES = (
        ('service', 'Service'),
        ('good', 'Good'),
        ('subscription', 'Subscription'),
        ('compound', 'Compound'),
    )

    ACTION_CHOICES = (
        ('inactive', 'Mark Inactive'),
        ('notify', 'Notify'),
        ('ignore', 'Ignore'),
    )

    name = models.CharField(max_length=512)
    product_type = models.CharField(max_length=32, default='good',
        choices=PRODUCT_TYPES)
    parent = models.ForeignKey('self', blank=True, null=True,
        related_name='child_set')
    code = models.CharField(max_length=512, blank=True, null=True)
    supplier = models.ForeignKey(Contact, blank=True, null=True,
        on_delete=models.SET_NULL)
    supplier_code = models.IntegerField(blank=True, null=True)
    buy_price = models.DecimalField(max_digits=20, decimal_places=2, default=0)
    sell_price = models.DecimalField(
        max_digits=20, decimal_places=2, default=0)
    stock_quantity = models.IntegerField(blank=True, null=True)
    active = models.BooleanField()
    runout_action = models.CharField(max_length=32, blank=True, null=True,
        choices=ACTION_CHOICES)
    details = models.TextField(blank=True, null=True)

    access_inherit = ('parent', '*module', '*user')

    def __unicode__(self):
        return unicode(self.name)

    def get_absolute_url(self):
        "Returns absolute URL"
        try:
            return reverse('sales_product_view', args=[self.id])
        except:
            return ""

    class Meta:

        "Product"
        ordering = ['code']


class SaleSource(Object):
    "Source of Sale e.g. Search Engine"
    name = models.CharField(max_length=512)
    active = models.BooleanField(default=False)
    details = models.TextField(blank=True, null=True)

    searchable = False

    def __unicode__(self):
        return unicode(self.name)

    def get_absolute_url(self):
        "Returns absolute URL"
        try:
            return reverse('sales_source_view', args=[self.id])
        except Exception:
            return ""

    class Meta:

        "SaleSource"
        ordering = ('-active', 'name')


class Lead(Object):
    "Lead"
    CONTACT_METHODS = (
        ('email', 'E-Mail'),
        ('phone', 'Phone'),
        ('post', 'Post'),
        ('face', 'Face to Face')
    )

    contact = models.ForeignKey(Contact)
    source = models.ForeignKey(
        SaleSource, blank=True, null=True, on_delete=models.SET_NULL)
    products_interested = models.ManyToManyField(
        Product, blank=True, null=True)
    contact_method = models.CharField(max_length=32, choices=CONTACT_METHODS)
    assigned = models.ManyToManyField(User, related_name='sales_lead_assigned',
        blank=True, null=True)
    status = models.ForeignKey(SaleStatus)
    details = models.TextField(blank=True, null=True)

    access_inherit = ('contact', '*module', '*user')

    def __unicode__(self):
        return unicode(self.contact.name)

    def get_absolute_url(self):
        "Returns absolute URL"
        try:
            return reverse('sales_lead_view', args=[self.id])
        except Exception:
            return ""

    class Meta:

        "Lead"
        ordering = ['contact']


class Opportunity(Object):
    "Opportunity"
    lead = models.ForeignKey(
        Lead, blank=True, null=True, on_delete=models.SET_NULL)
    contact = models.ForeignKey(Contact)
    products_interested = models.ManyToManyField(Product)
    source = models.ForeignKey(
        SaleSource, blank=True, null=True, on_delete=models.SET_NULL)
    expected_date = models.DateField(blank=True, null=True)
    closed_date = models.DateField(blank=True, null=True)
    assigned = models.ManyToManyField(
        User, related_name='sales_opportunity_assigned', blank=True, null=True)
    status = models.ForeignKey(SaleStatus)
    probability = models.DecimalField(
        max_digits=3, decimal_places=0, blank=True, null=True)
    amount = models.DecimalField(max_digits=20, decimal_places=2, default=0)
    amount_currency = models.ForeignKey(Currency)
    amount_display = models.DecimalField(
        max_digits=20, decimal_places=2, default=0)
    details = models.TextField(blank=True, null=True)

    access_inherit = ('lead', 'contact', '*module', '*user')

    def __unicode__(self):
        return unicode(self.contact)

    def get_absolute_url(self):
        "Returns absolute URL"
        try:
            return reverse('sales_opportunity_view', args=[self.id])
        except Exception:
            return ""

    class Meta:

        "Opportunity"
        ordering = ['-expected_date']


class SaleOrder(Object):
    "Sale Order"
    reference = models.CharField(max_length=512, blank=True, null=True)
    datetime = models.DateTimeField(default=datetime.now)
    client = models.ForeignKey(
        Contact, blank=True, null=True, on_delete=models.SET_NULL)
    opportunity = models.ForeignKey(
        Opportunity, blank=True, null=True, on_delete=models.SET_NULL)
    payment = models.ManyToManyField(Transaction, blank=True, null=True)
    source = models.ForeignKey(SaleSource)
    assigned = models.ManyToManyField(
        User, related_name='sales_saleorder_assigned', blank=True, null=True)
    status = models.ForeignKey(SaleStatus)
    currency = models.ForeignKey(Currency)
    total = models.DecimalField(max_digits=20, decimal_places=2, default=0)
    total_display = models.DecimalField(
        max_digits=20, decimal_places=2, default=0)
    details = models.TextField(blank=True, null=True)

    access_inherit = ('opportunity', 'client', '*module', '*user')

    def fulfil(self):
        "Fulfil"
        for p in self.orderedproduct_set.all():
            if not p.fulfilled:
                product = p.product
                product.stock_quantity -= p.quantity
                product.save()
                p.fulfilled = True
                p.save()
            if p.subscription:
                p.subscription.renew()

    def get_next_reference(self):
        try:
            # Very dirty hack, but kinda works for reference (i.e. it doesn't
            # have to be unique)
            next_ref = SaleOrder.objects.all().aggregate(
                models.Max('id'))['id__max'] + 1
        except:
            next_ref = 1
        full_ref = '%.5d/%s' % (next_ref, str(str(ttime() * 10)[8:-2]))
        return full_ref

    def save(self, *args, **kwargs):
        "Automatically set order reference"
        super(SaleOrder, self).save(*args, **kwargs)
        try:
            conf = ModuleSetting.get_for_module(
                'treeio.sales', 'order_fulfil_status')[0]
            fulfil_status = long(conf.value)
            if self.status.id == fulfil_status:
                self.fulfil()
        except Exception:
            pass

    def __unicode__(self):
        return unicode(self.reference)

    def get_absolute_url(self):
        "Returns absolute URL"
        try:
            return reverse('sales_order_view', args=[self.id])
        except Exception:
            return ""

    def get_taxes(self, base=False):
        # TODO: Compound taxes
        taxes = {}
        ops = self.orderedproduct_set.filter(
            trash=False).filter(tax__isnull=False)
        for p in ops:
            if base:
                item_total = p.get_total()
            else:
                item_total = p.get_total_display()
            if p.tax.id in taxes:
                taxes[p.tax.id]['amount'] += (item_total * (p.tax.rate / 100)).quantize(Decimal('.01'), rounding=ROUND_UP)
            else:
                taxes[p.tax.id] = {'name': p.tax.name, 'rate': p.tax.rate,
                                   'amount': (item_total * (p.tax.rate / 100))
                                   .quantize(Decimal('.01'), rounding=ROUND_UP)}
        return taxes

    def get_taxes_total(self):
        taxes = self.get_taxes()
        total = 0
        for tax in taxes.values():
            total += tax['amount']
        return total

    def get_subtotal(self):
        sum = 0
        for p in self.orderedproduct_set.filter(trash=False):
            sum += p.get_total()
        self.total = sum
        return sum

    def get_subtotal_display(self):
        sum = 0
        for p in self.orderedproduct_set.filter(trash=False):
            sum += p.get_total_display()
        self.total_display = sum
        return sum

    def get_total(self):
        sum = 0
        for p in self.orderedproduct_set.filter(trash=False):
            sum += p.get_total()
        sum += self.get_taxes_total()
        self.total = sum
        return sum

    def get_total_display(self):
        sum = 0
        for p in self.orderedproduct_set.filter(trash=False):
            sum += p.get_total_display()
        sum += self.get_taxes_total()
        self.total_display = sum
        return sum

    def update_total(self):
        self.get_total()
        self.get_total_display()
        self.save()

    def get_total_paid(self):
        return Decimal(self.payment.filter(trash=False).aggregate(models.Sum('value_display'))['value_display__sum'] or '0')

    def balance_due(self):
        return self.get_total() - self.get_total_paid()

    class Meta:

        "SaleOrder"
        ordering = ['-datetime']


class Subscription(Object):
    "Subscription"
    CYCLE_PERIODS = (
        ('daily', 'Daily'),
        ('weekly', 'Weekly'),
        ('monthly', 'Monthly'),
        ('quarterly', 'Quarterly'),
        ('yearly', 'Yearly')
    )

    client = models.ForeignKey(
        Contact, blank=True, null=True, on_delete=models.SET_NULL)
    product = models.ForeignKey(Product, blank=True, null=True)
    start = models.DateField(default=datetime.now)
    expiry = models.DateField(blank=True, null=True)
    cycle_period = models.CharField(max_length=32, choices=CYCLE_PERIODS,
        default='month')
    cycle_end = models.DateField(blank=True, null=True)
    active = models.BooleanField(default=False)
    details = models.CharField(max_length=512, blank=True, null=True)

    access_inherit = ('client', 'product', '*module', '*user')

    def get_cycle_start(self):
        "Get the cycle start date"
        if not self.cycle_end:
            return None

        cycle_end = self.cycle_end
        # check if we're in the 5 day window before the cycle ends for this
        # subscription
        if self.cycle_period == 'monthly':
            p = relativedelta(months=+1)
        elif self.cycle_period == 'weekly':
            p = timedelta(weeks=1)
        elif self.cycle_period == 'daily':
            p = timedelta(days=1)
        elif self.cycle_period == 'quarterly':
            p = relativedelta(months=+4)
        elif self.cycle_period == 'yearly':
            p = relativedelta(years=1)
        else:
            p = relativedelta(months=+1)

        cycle_start = cycle_end - p
        return cycle_start

    def renew(self):
        "Renew"
        if self.cycle_period == 'monthly':
            p = relativedelta(months=+1)
        elif self.cycle_period == 'daily':
            p = timedelta(days=1)
        elif self.cycle_period == 'weekly':
            p = timedelta(weeks=1)
        elif self.cycle_period == 'quarterly':
            p = relativedelta(months=+4)
        elif self.cycle_period == 'yearly':
            p = relativedelta(years=1)
        else:
            p = relativedelta(months=+1)

        self.cycle_end = datetime.now().date() + p
        self.save()

    def activate(self):
        "Activate"
        if self.active:
            return
        self.renew()
        self.active = True
        self.save()

    def deactivate(self):
        "Deactivate"
        if not self.active:
            return
        self.active = False
        self.save()

    def invoice(self):
        "Create a new sale order for self"
        new_invoice = SaleOrder()
        try:
            conf = ModuleSetting.get_for_module(
                'treeio.sales', 'default_order_status')[0]
            new_invoice.status = long(conf.value)
        except Exception:
            ss = SaleStatus.objects.all()[0]
            new_invoice.status = ss
        so = SaleSource.objects.all()[0]
        new_invoice.source = so
        new_invoice.client = self.client
        new_invoice.reference = "Subscription Invoice " + \
            str(datetime.today().strftime('%Y-%m-%d'))
        new_invoice.save()
        try:
            op = self.orderedproduct_set.filter(
                trash=False).order_by('-date_created')[0]
            opn = OrderedProduct()
            opn.order = new_invoice
            opn.product = self.product
            opn.quantity = op.quantity
            opn.discount = op.discount
            opn.subscription = self
            opn.save()
        except IndexError:
            opn = OrderedProduct()
            opn.order = new_invoice
            opn.product = self.product
            opn.quantity = 1
            opn.subscription = self
            opn.save()
        return new_invoice.reference

    def check_status(self):
        """
        Checks and sets the state of the subscription
        """
        if not self.active:
            return 'Inactive'
        if self.expiry:
            if datetime.now() > datetime.combine(self.expiry, time.min):
                self.deactivate()
                return 'Expired'

        if not self.cycle_end:
            self.renew()

        cycle_end = self.cycle_end
        # check if we're in the 5 day window before the cycle ends for this
        # subscription
        if datetime.now().date() >= cycle_end:
            cycle_start = self.get_cycle_start()
            # if we haven't already invoiced them, invoice them
            grace = 3
            if (datetime.now().date() - cycle_end > timedelta(days=grace)):
                # Subscription has overrun and must be shut down
                return self.deactivate()

            try:
                conf = ModuleSetting.get_for_module(
                    'treeio.sales', 'order_fulfil_status')[0]
                order_fulfil_status = SaleStatus.objects.get(
                    pk=long(conf.value))
            except Exception:
                order_fulfil_status = None

            if self.orderedproduct_set.filter(order__datetime__gte=cycle_start).filter(order__status=order_fulfil_status):
                return 'Paid'
            elif self.orderedproduct_set.filter(order__datetime__gte=cycle_start):
                return 'Invoiced'
            else:
                self.invoice()
                return 'Invoiced'
        else:
            return 'Active'

    def __unicode__(self):
        return unicode(self.product)

    def get_absolute_url(self):
        "Returns absolute URL"
        try:
            return reverse('sales_subscription_view', args=[self.id])
        except Exception:
            return ""

    class Meta:
        "Subscription"
        ordering = ['expiry']


class OrderedProduct(Object):
    "Ordered Product"
    subscription = models.ForeignKey(Subscription, blank=True, null=True)
    product = models.ForeignKey(Product)
    quantity = models.DecimalField(max_digits=30, decimal_places=2, default=1)
    discount = models.DecimalField(max_digits=5, decimal_places=2, default=0)
    tax = models.ForeignKey(
        Tax, blank=True, null=True, on_delete=models.SET_NULL)
    rate = models.DecimalField(max_digits=20, decimal_places=2)
    rate_display = models.DecimalField(
        max_digits=20, decimal_places=2, default=0)
    order = models.ForeignKey(SaleOrder)
    description = models.TextField(blank=True, null=True)
    fulfilled = models.BooleanField(default=False)

    access_inherit = ('order', '*module', '*user')

    def __unicode__(self):
        return unicode(self.product)

    def get_absolute_url(self):
        "Returns absolute URL"
        try:
            return reverse('sales_ordered_view', args=[self.id])
        except Exception:
            return ""

    def get_total(self):
        "Returns total sum for this item"
        total = self.rate * self.quantity
        if self.discount:
            total = total - (total * self.discount / 100)
        if total < 0:
            total = Decimal(0)
        return total.quantize(Decimal('.01'), rounding=ROUND_UP)

    def get_total_display(self):
        "Returns total sum for this item in the display currency"
        total = self.rate_display * self.quantity
        if self.discount:
            total = total - (total * self.discount / 100)
        if total < 0:
            total = Decimal(0)
        return total.quantize(Decimal('.01'), rounding=ROUND_UP)

    class Meta:
        ordering = ['product']

########NEW FILE########
__FILENAME__ = sales
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Sales templatetags
"""
from coffin import template
from treeio.core.rendering import render_to_string
from jinja2 import contextfunction, Markup
from django.template import RequestContext

register = template.Library()


@contextfunction
def sales_order_list(context, orders, skip_group=False):
    "Print a list of orders"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('sales/tags/order_list',
                                   {'orders': orders,
                                       'skip_group': skip_group},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(sales_order_list)


@contextfunction
def sales_lead_list(context, leads, skip_group=False):
    "Print a list of leads"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('sales/tags/lead_list',
                                   {'leads': leads, 'skip_group': skip_group},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(sales_lead_list)


@contextfunction
def sales_opportunity_list(context, opportunities, skip_group=False):
    "Print a list of opportunitys"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('sales/tags/opportunity_list',
                                   {'opportunities': opportunities,
                                       'skip_group': skip_group},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(sales_opportunity_list)


@contextfunction
def sales_product_list(context, products, skip_group=False):
    "Print a list of products"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('sales/tags/product_list',
                                   {'products': products,
                                       'skip_group': skip_group},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(sales_product_list)

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Sales: test suites
"""

from django.test import TestCase
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser
from treeio.core.models import User, Group, Perspective, ModuleSetting
from treeio.identities.models import Contact, ContactType
from treeio.sales.models import SaleOrder, Product, OrderedProduct, Subscription, \
    SaleStatus, SaleSource, Lead, Opportunity
from treeio.finance.models import Currency


class SalesViewsTest(TestCase):

    "Sales functional tests for views"

    username = "test"
    password = "password"
    prepared = False

    def setUp(self):
        "Initial Setup"

        if not self.prepared:
            self.group, created = Group.objects.get_or_create(name='test')
            duser, created = DjangoUser.objects.get_or_create(
                username=self.username)
            duser.set_password(self.password)
            duser.save()
            self.user, created = User.objects.get_or_create(user=duser)
            self.user.save()
            perspective, created = Perspective.objects.get_or_create(
                name='default')
            perspective.set_default_user()
            perspective.save()
            ModuleSetting.set('default_perspective', perspective.id)

            self.contact_type = ContactType()
            self.contact_type.slug = 'machine'
            self.contact_type.name = 'machine'
            self.contact_type.save()

            self.contact = Contact()
            self.contact.contact_type = self.contact_type
            self.contact.set_default_user()
            self.contact.save()
            self.assertNotEquals(self.contact.id, None)

            self.status = SaleStatus()
            self.status.set_default_user()
            self.status.save()
            self.assertNotEquals(self.status.id, None)

            self.currency = Currency(code="GBP",
                                     name="Pounds",
                                     symbol="L",
                                     is_default=True)
            self.currency.save()

            self.source = SaleSource()
            self.source.set_default_user()
            self.source.save()
            self.assertNotEquals(self.source.id, None)

            self.product = Product(name="Test")
            self.product.product_type = 'service'
            self.product.active = True
            self.product.sell_price = 10
            self.product.buy_price = 100
            self.product.set_default_user()
            self.product.save()
            self.assertNotEquals(self.product.id, None)

            self.subscription = Subscription()
            self.subscription.client = self.contact
            self.subscription.set_default_user()
            self.subscription.save()
            self.assertNotEquals(self.subscription.id, None)

            self.lead = Lead()
            self.lead.contact_method = 'email'
            self.lead.status = self.status
            self.lead.contact = self.contact
            self.lead.set_default_user()
            self.lead.save()
            self.assertNotEquals(self.lead.id, None)

            self.opportunity = Opportunity()
            self.opportunity.lead = self.lead
            self.opportunity.contact = self.contact
            self.opportunity.status = self.status
            self.opportunity.amount = 100
            self.opportunity.amount_currency = self.currency
            self.opportunity.amount_display = 120
            self.opportunity.set_default_user()
            self.opportunity.save()
            self.assertNotEquals(self.opportunity.id, None)

            self.order = SaleOrder(reference="Test")
            self.order.opportunity = self.opportunity
            self.order.status = self.status
            self.order.source = self.source
            self.order.currency = self.currency
            self.order.total = 0
            self.order.total_display = 0
            self.order.set_default_user()
            self.order.save()
            self.assertNotEquals(self.order.id, None)

            self.ordered_product = OrderedProduct()
            self.ordered_product.product = self.product
            self.ordered_product.order = self.order
            self.ordered_product.rate = 0
            self.ordered_product.subscription = self.subscription
            self.ordered_product.set_default_user()
            self.ordered_product.save()

            self.assertNotEquals(self.ordered_product.id, None)

            self.client = Client()

            self.prepared = True

    ######################################
    # Testing views when user is logged in
    ######################################
    def test_index(self):
        "Test page with login at /sales/index"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('sales_index'))
        self.assertEquals(response.status_code, 200)

    def test_index_open(self):
        "Test page with login at /sales/open"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('sales_index_open'))
        self.assertEquals(response.status_code, 200)

    def test_index_assigned(self):
        "Test page with login at /sales/index/assigned"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('sales_index_assigned'))
        self.assertEquals(response.status_code, 200)

    # Orders
    def test_order_add(self):
        "Test page with login at /sales/order/add"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('sales_order_add'))
        self.assertEquals(response.status_code, 200)

    def test_order_add_lead(self):
        "Test page with login at /sales/order/add/lead/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_order_add_with_lead', args=[self.lead.id]))
        self.assertEquals(response.status_code, 200)

    def test_order_add_opportunity(self):
        "Test page with login at /sales/order/add/opportunity/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_order_add_with_opportunity', args=[self.opportunity.id]))
        self.assertEquals(response.status_code, 200)

    def test_order_edit(self):
        "Test page with login at /sales/order/edit/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_order_edit', args=[self.order.id]))
        self.assertEquals(response.status_code, 200)

    def test_order_view(self):
        "Test page with login at /sales/order/view/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_order_view', args=[self.order.id]))
        self.assertEquals(response.status_code, 200)

    def test_order_delete(self):
        "Test page with login at /sales/order/delete/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_order_delete', args=[self.order.id]))
        self.assertEquals(response.status_code, 200)

    def test_order_invoice_view(self):
        "Test page with login at /sales/order/invoice/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_order_invoice_view', args=[self.order.id]))
        self.assertEquals(response.status_code, 200)

    # Products
    def test_product_index(self):
        "Test page with login at /sales/product/index"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('sales_product_index'))
        self.assertEquals(response.status_code, 200)

    def test_product_add(self):
        "Test page with login at /sales/product/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('sales_product_add'))
        self.assertEquals(response.status_code, 200)

    def test_product_add_parent(self):
        "Test page with login at /sales/product/add"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_product_add', args=[self.product.id]))
        self.assertEquals(response.status_code, 200)

    def test_product_edit(self):
        "Test page with login at /sales/product/edit/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_product_edit', args=[self.product.id]))
        self.assertEquals(response.status_code, 200)

    def test_product_view(self):
        "Test page with login at /sales/product/view/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_product_view', args=[self.product.id]))
        self.assertEquals(response.status_code, 200)

    def test_product_delete(self):
        "Test page with login at /sales/product/delete/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_product_delete', args=[self.product.id]))
        self.assertEquals(response.status_code, 200)

    # Settings
    def test_settings_view(self):
        "Test page with login at /sales/settings/view"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('sales_settings_view'))
        self.assertEquals(response.status_code, 200)

    def test_settings_edit(self):
        "Test page with login at /sales/settings/edit"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('sales_settings_edit'))
        self.assertEquals(response.status_code, 200)

    # Statuses
    def test_status_add(self):
        "Test page with login at /sales/status/add"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('sales_status_add'))
        self.assertEquals(response.status_code, 200)

    def test_status_edit(self):
        "Test page with login at /sales/status/edit/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_status_edit', args=[self.status.id]))
        self.assertEquals(response.status_code, 200)

    def test_status_view(self):
        "Test page with login at /sales/status/view/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_status_view', args=[self.status.id]))
        self.assertEquals(response.status_code, 200)

    def test_status_delete(self):
        "Test page with login at /sales/status/delete/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_status_delete', args=[self.status.id]))
        self.assertEquals(response.status_code, 200)

    # Subscriptions
    def test_subscription_add(self):
        "Test page with login at /sales/subscription/add"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('sales_subscription_add'))
        self.assertEquals(response.status_code, 200)

    def test_subscription_add_product(self):
        "Test page with login at /sales/subscription/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_subscription_add_with_product', args=[self.product.id]))
        self.assertEquals(response.status_code, 200)

    def test_subscription_edit(self):
        "Test page with login at /sales/subscription/edit/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_subscription_edit', args=[self.subscription.id]))
        self.assertEquals(response.status_code, 200)

    def test_subscription_view(self):
        "Test page with login at /sales/subscription/view/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_subscription_view', args=[self.subscription.id]))
        self.assertEquals(response.status_code, 200)

    def test_subscription_delete(self):
        "Test page with login at /sales/subscription/delete/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_subscription_delete', args=[self.subscription.id]))
        self.assertEquals(response.status_code, 200)

    # Ordered Products
    def test_ordered_product_add(self):
        "Test page with login at /sales/ordered_product/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_ordered_product_add', args=[self.order.id]))
        self.assertEquals(response.status_code, 200)

    def test_ordered_product_edit(self):
        "Test page with login at /sales/ordered_product/edit/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_ordered_product_edit', args=[self.ordered_product.id]))
        self.assertEquals(response.status_code, 200)

    def test_ordered_product_view(self):
        "Test page with login at /sales/ordered_product/view/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_ordered_product_view', args=[self.ordered_product.id]))
        self.assertEquals(response.status_code, 200)

    def test_ordered_product_delete(self):
        "Test page with login at /sales/ordered_product/delete/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_ordered_product_delete', args=[self.ordered_product.id]))
        self.assertEquals(response.status_code, 200)

    # Sources
    def test_source_add(self):
        "Test page with login at /sales/source/add"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('sales_source_add'))
        self.assertEquals(response.status_code, 200)

    def test_source_edit(self):
        "Test page with login at /sales/source/edit/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_source_edit', args=[self.source.id]))
        self.assertEquals(response.status_code, 200)

    def test_source_view(self):
        "Test page with login at /sales/source/view/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_source_view', args=[self.source.id]))
        self.assertEquals(response.status_code, 200)

    def test_source_delete(self):
        "Test page with login at /sales/source/delete/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_source_delete', args=[self.source.id]))
        self.assertEquals(response.status_code, 200)

    # Leads
    def test_lead_index(self):
        "Test page with login at /sales/lead/index"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('sales_lead_index'))
        self.assertEquals(response.status_code, 200)

    def test_lead_index_assigned(self):
        "Test page with login at /sales/lead/index/assigned"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('sales_lead_index_assigned'))
        self.assertEquals(response.status_code, 200)

    def test_lead_add(self):
        "Test page with login at /sales/lead/add"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('sales_lead_add'))
        self.assertEquals(response.status_code, 200)

    def test_lead_edit(self):
        "Test page with login at /sales/lead/edit/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_lead_edit', args=[self.lead.id]))
        self.assertEquals(response.status_code, 200)

    def test_lead_view(self):
        "Test page with login at /sales/lead/view/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_lead_view', args=[self.lead.id]))
        self.assertEquals(response.status_code, 200)

    def test_lead_delete(self):
        "Test page with login at /sales/lead/delete/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_lead_delete', args=[self.lead.id]))
        self.assertEquals(response.status_code, 200)

    # Opportunities
    def test_opportunity_index(self):
        "Test page with login at /sales/opportunity/index"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('sales_opportunity_index'))
        self.assertEquals(response.status_code, 200)

    def test_opportunity_index_assigned(self):
        "Test page with login at /sales/opportunity/index/assigned"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('sales_opportunity_index_assigned'))
        self.assertEquals(response.status_code, 200)

    def test_opportunity_add(self):
        "Test page with login at /sales/opportunity/add"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('sales_opportunity_add'))
        self.assertEquals(response.status_code, 200)

    def test_opportunity_add_lead(self):
        "Test page with login at /sales/opportunity/add/lead/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_opportunity_add_with_lead', args=[self.lead.id]))
        self.assertEquals(response.status_code, 200)

    def test_opportunity_edit(self):
        "Test page with login at /sales/opportunity/edit/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_opportunity_edit', args=[self.opportunity.id]))
        self.assertEquals(response.status_code, 200)

    def test_opportunity_view(self):
        "Test page with login at /sales/opportunity/view/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_opportunity_view', args=[self.opportunity.id]))
        self.assertEquals(response.status_code, 200)

    def test_opportunity_delete(self):
        "Test page with login at /sales/opportunity/delete/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('sales_opportunity_delete', args=[self.opportunity.id]))
        self.assertEquals(response.status_code, 200)

    ######################################
    # Testing views when user is not logged in
    ######################################
    def test_index_anonymous(self):
        "Test index page at /sales/"
        response = self.client.get('/sales/')
        # Redirects as unauthenticated
        self.assertRedirects(response, reverse('user_login'))

    def test_index_open_out(self):
        "Testing /sales/open"
        response = self.client.get(reverse('sales_index_open'))
        self.assertRedirects(response, reverse('user_login'))

    def test_index_assigned_out(self):
        "Testing /sales/index/assigned"
        response = self.client.get(reverse('sales_index_assigned'))
        self.assertRedirects(response, reverse('user_login'))

    # Orders
    def test_order_add_out(self):
        "Testing /sales/order/add"
        response = self.client.get(reverse('sales_order_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_order_add_lead_out(self):
        "Testing /sales/order/add/lead/"
        response = self.client.get(
            reverse('sales_order_add_with_lead', args=[self.lead.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_order_add_opportunity_out(self):
        "Testing /sales/order/add/opportunity/"
        response = self.client.get(
            reverse('sales_order_add_with_opportunity', args=[self.opportunity.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_order_edit_out(self):
        "Testing /sales/order/edit/"
        response = self.client.get(
            reverse('sales_order_edit', args=[self.order.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_order_view_out(self):
        "Testing /sales/order/view/"
        response = self.client.get(
            reverse('sales_order_view', args=[self.order.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_order_delete_out(self):
        "Testing /sales/order/delete/"
        response = self.client.get(
            reverse('sales_order_delete', args=[self.order.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_order_invoice_view_out(self):
        "Testing /sales/order/invoice/"
        response = self.client.get(
            reverse('sales_order_invoice_view', args=[self.order.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Products
    def test_product_index_out(self):
        "Testing /sales/product/index"
        response = self.client.get(reverse('sales_product_index'))
        self.assertRedirects(response, reverse('user_login'))

    def test_product_add_out(self):
        "Testing /sales/product/add/"
        response = self.client.get(reverse('sales_product_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_product_add_parent_out(self):
        "Testing /sales/product/add"
        response = self.client.get(
            reverse('sales_product_add', args=[self.product.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_product_edit_out(self):
        "Testing /sales/product/edit/"
        response = self.client.get(
            reverse('sales_product_edit', args=[self.product.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_product_view_out(self):
        "Testing /sales/product/view/"
        response = self.client.get(
            reverse('sales_product_view', args=[self.product.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_product_delete_out(self):
        "Testing /sales/product/delete/"
        response = self.client.get(
            reverse('sales_product_delete', args=[self.product.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Settings
    def test_settings_view_out(self):
        "Testing /sales/settings/view"
        response = self.client.get(reverse('sales_settings_view'))
        self.assertRedirects(response, reverse('user_login'))

    def test_settings_edit_out(self):
        "Testing /sales/settings/edit"
        response = self.client.get(reverse('sales_settings_edit'))
        self.assertRedirects(response, reverse('user_login'))

    # Statuses
    def test_status_add_out(self):
        "Testing /sales/status/add"
        response = self.client.get(reverse('sales_status_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_status_edit_out(self):
        "Testing /sales/status/edit/"
        response = self.client.get(
            reverse('sales_status_edit', args=[self.status.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_status_view_out(self):
        "Testing /sales/status/view/"
        response = self.client.get(
            reverse('sales_status_view', args=[self.status.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_status_delete_out(self):
        "Testing /sales/status/delete/"
        response = self.client.get(
            reverse('sales_status_delete', args=[self.status.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Subscriptions
    def test_subscription_add_out(self):
        "Testing /sales/subscription/add"
        response = self.client.get(reverse('sales_subscription_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_subscription_add_product_out(self):
        "Testing /sales/subscription/add/"
        response = self.client.get(
            reverse('sales_subscription_add_with_product', args=[self.product.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_subscription_edit_out(self):
        "Testing /sales/subscription/edit/"
        response = self.client.get(
            reverse('sales_subscription_edit', args=[self.subscription.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_subscription_view_out(self):
        "Testing /sales/subscription/view/"
        response = self.client.get(
            reverse('sales_subscription_view', args=[self.subscription.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_subscription_delete_out(self):
        "Testing /sales/subscription/delete/"
        response = self.client.get(
            reverse('sales_subscription_delete', args=[self.subscription.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Ordered Products
    def test_ordered_product_add_out(self):
        "Testing /sales/ordered_product/add/"
        response = self.client.get(
            reverse('sales_ordered_product_add', args=[self.order.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_ordered_product_edit_out(self):
        "Testing /sales/ordered_product/edit/"
        response = self.client.get(
            reverse('sales_ordered_product_edit', args=[self.ordered_product.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_ordered_product_view_out(self):
        "Testing /sales/ordered_product/view/"
        response = self.client.get(
            reverse('sales_ordered_product_view', args=[self.ordered_product.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_ordered_product_delete_out(self):
        "Testing /sales/ordered_product/delete/"
        response = self.client.get(
            reverse('sales_ordered_product_delete', args=[self.ordered_product.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Sources
    def test_source_add_out(self):
        "Testing /sales/source/add"
        response = self.client.get(reverse('sales_source_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_source_edit_out(self):
        "Testing /sales/source/edit/"
        response = self.client.get(
            reverse('sales_source_edit', args=[self.source.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_source_view_out(self):
        "Testing /sales/source/view/"
        response = self.client.get(
            reverse('sales_source_view', args=[self.source.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_source_delete_out(self):
        "Testing /sales/source/delete/"
        response = self.client.get(
            reverse('sales_source_delete', args=[self.source.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Leads
    def test_lead_index_out(self):
        "Testing /sales/lead/index"
        response = self.client.get(reverse('sales_lead_index'))
        self.assertRedirects(response, reverse('user_login'))

    def test_lead_index_assigned_out(self):
        "Testing /sales/lead/index/assigned"
        response = self.client.get(reverse('sales_lead_index_assigned'))
        self.assertRedirects(response, reverse('user_login'))

    def test_lead_add_out(self):
        "Testing /sales/lead/add"
        response = self.client.get(reverse('sales_lead_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_lead_edit_out(self):
        "Testing /sales/lead/edit/"
        response = self.client.get(
            reverse('sales_lead_edit', args=[self.lead.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_lead_view_out(self):
        "Testing /sales/lead/view/"
        response = self.client.get(
            reverse('sales_lead_view', args=[self.lead.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_lead_delete_out(self):
        "Testing /sales/lead/delete/"
        response = self.client.get(
            reverse('sales_lead_delete', args=[self.lead.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Opportunities
    def test_opportunity_index_out(self):
        "Testing /sales/opportunity/index/"
        response = self.client.get(reverse('sales_opportunity_index'))
        self.assertRedirects(response, reverse('user_login'))

    def test_opportunity_index_assigned_out(self):
        "Testing /sales/opportunity/index/assigned/"
        response = self.client.get(reverse('sales_opportunity_index_assigned'))
        self.assertRedirects(response, reverse('user_login'))

    def test_opportunity_add_out(self):
        "Testing /sales/opportunity/add/"
        response = self.client.get(reverse('sales_opportunity_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_opportunity_add_lead_out(self):
        "Testing /sales/opportunity/add/lead/"
        response = self.client.get(
            reverse('sales_opportunity_add_with_lead', args=[self.lead.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_opportunity_edit_out(self):
        "Testing /sales/opportunity/edit/"
        response = self.client.get(
            reverse('sales_opportunity_edit', args=[self.opportunity.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_opportunity_view_out(self):
        "Testing /sales/opportunity/view/"
        response = self.client.get(
            reverse('sales_opportunity_view', args=[self.opportunity.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_opportunity_delete_out(self):
        "Testing /sales/opportunity/delete/"
        response = self.client.get(
            reverse('sales_opportunity_delete', args=[self.opportunity.id]))
        self.assertRedirects(response, reverse('user_login'))

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Sales module URLs
"""
from django.conf.urls import patterns, url

urlpatterns = patterns('treeio.sales.views',
    url(r'^(\.(?P<response_format>\w+))?$', 'index', name='sales'),
    url(r'^index(\.(?P<response_format>\w+))?/?$', 'index',
        name='sales_index'),
    url(r'^index/open(\.(?P<response_format>\w+))?/?$', 'index_open',
        name='sales_index_open'),
    url(r'^index/assigned(\.(?P<response_format>\w+))?/?$', 'index_assigned',
        name='sales_index_assigned'),

    # Orders
    url(r'^order/add(\.(?P<response_format>\w+))?/?$', 'order_add',
        name='sales_order_add'),
    url(r'^order/add/lead/(?P<lead_id>\w+)(\.(?P<response_format>\w+))?/?$',
        'order_add', name='sales_order_add_with_lead'),
    url(r'^order/add/opportunity/(?P<opportunity_id>\w+)(\.(?P<response_format>\w+))?/?$',
        'order_add', name='sales_order_add_with_opportunity'),
    url(r'^order/edit/(?P<order_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'order_edit', name='sales_order_edit'),
    url(r'^order/view/(?P<order_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'order_view', name='sales_order_view'),
    url(r'^order/invoice/(?P<order_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'order_invoice_view', name='sales_order_invoice_view'),
    url(r'^order/delete/(?P<order_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'order_delete', name='sales_order_delete'),

    # Products
    url(r'^product/index(\.(?P<response_format>\w+))?/?$',
        'product_index', name='sales_product_index'),
    url(r'^product/add/(?P<parent_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'product_add', name='sales_product_add'),
    url(r'^product/add(\.(?P<response_format>\w+))?/?$',
        'product_add', name='sales_product_add'),
    url(r'^product/edit/(?P<product_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'product_edit', name='sales_product_edit'),
    url(r'^product/view/(?P<product_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'product_view', name='sales_product_view'),
    url(r'^product/delete/(?P<product_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'product_delete', name='sales_product_delete'),

    # Settings
    url(r'^settings/view(\.(?P<response_format>\w+))?/?$',
        'settings_view', name='sales_settings_view'),
    url(r'^settings/edit(\.(?P<response_format>\w+))?/?$',
        'settings_edit', name='sales_settings_edit'),

    # Statuses
    url(r'^status/add(\.(?P<response_format>\w+))?/?$',
        'status_add', name='sales_status_add'),
    url(r'^status/edit/(?P<status_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'status_edit', name='sales_status_edit'),
    url(r'^status/view/(?P<status_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'status_view', name='sales_status_view'),
    url(r'^status/delete/(?P<status_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'status_delete', name='sales_status_delete'),

    # Subscriptions
    url(r'^subscription/add(\.(?P<response_format>\w+))?/?$',
        'subscription_add', name='sales_subscription_add'),
    url(r'^subscription/add/order/(?P<order_id>\w+)/product/(?P<product_id>\w+)(\.(?P<response_format>\w+))?/?$',
        'subscription_add', name='sales_subscription_add_with_order_and_product'),
    url(r'^subscription/add/(?P<productset_id>\w+)(\.(?P<response_format>\w+))?/?$',
        'subscription_add', name='sales_subscription_add_with_product'),
    url(r'^subscription/edit/(?P<subscription_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'subscription_edit', name='sales_subscription_edit'),
    url(r'^subscription/view/(?P<subscription_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'subscription_view', name='sales_subscription_view'),
    url(r'^subscription/delete/(?P<subscription_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'subscription_delete', name='sales_subscription_delete'),

    # Ordered Products
    url(r'^ordered_product/add/(?P<order_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'ordered_product_add', name='sales_ordered_product_add'),
    url(r'^ordered_product/edit/(?P<ordered_product_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'ordered_product_edit', name='sales_ordered_product_edit'),
    url(r'^ordered_product/view/(?P<ordered_product_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'ordered_product_view', name='sales_ordered_product_view'),
    url(r'^ordered_product/delete/(?P<ordered_product_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'ordered_product_delete', name='sales_ordered_product_delete'),

    # Sources
    url(r'^source/add(\.(?P<response_format>\w+))?/?$',
        'source_add', name='sales_source_add'),
    url(r'^source/edit/(?P<source_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'source_edit', name='sales_source_edit'),
    url(r'^source/view/(?P<source_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'source_view', name='sales_source_view'),
    url(r'^source/delete/(?P<source_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'source_delete', name='sales_source_delete'),

    # Leads
    url(r'^lead/index(\.(?P<response_format>\w+))?/?$',
        'lead_index', name='sales_lead_index'),
    url(r'^lead/index/assigned(\.(?P<response_format>\w+))?/?$',
        'lead_index_assigned', name='sales_lead_index_assigned'),
    url(r'^lead/add(\.(?P<response_format>\w+))?/?$',
        'lead_add', name='sales_lead_add'),
    url(r'^lead/edit/(?P<lead_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'lead_edit', name='sales_lead_edit'),
    url(r'^lead/view/(?P<lead_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'lead_view', name='sales_lead_view'),
    url(r'^lead/delete/(?P<lead_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'lead_delete', name='sales_lead_delete'),

    # Opportunities
    url(r'^opportunity/index(\.(?P<response_format>\w+))?/?$',
        'opportunity_index', name='sales_opportunity_index'),
    url(r'^opportunity/index/assigned(\.(?P<response_format>\w+))?/?$',
        'opportunity_index_assigned', name='sales_opportunity_index_assigned'),
    url(r'^opportunity/add(\.(?P<response_format>\w+))?/?$',
        'opportunity_add', name='sales_opportunity_add'),
    url(r'^opportunity/add/lead/(?P<lead_id>\w+)(\.(?P<response_format>\w+))?/?$',
        'opportunity_add', name='sales_opportunity_add_with_lead'),
    url(r'^opportunity/edit/(?P<opportunity_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'opportunity_edit', name='sales_opportunity_edit'),
    url(r'^opportunity/view/(?P<opportunity_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'opportunity_view', name='sales_opportunity_view'),
    url(r'^opportunity/delete/(?P<opportunity_id>\d+)(\.(?P<response_format>\w+))?/?$',
        'opportunity_delete', name='sales_opportunity_delete'),

    # AJAX lookups
    url(r'^ajax/subscription(\.(?P<response_format>\w+))?/?$',
        'ajax_subscription_lookup', name='sales_ajax_subscription_lookup'),
)

########NEW FILE########
__FILENAME__ = views
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Sales module views
"""
from django.shortcuts import get_object_or_404
from django.template import RequestContext
from django.db.models import Q
from django.http import HttpResponseRedirect
from django.core.urlresolvers import reverse
from treeio.sales.models import Product, SaleOrder, SaleSource, Lead, Opportunity, \
    SaleStatus, Subscription, OrderedProduct
from treeio.sales.forms import SettingsForm, OrderForm, ProductForm, SaleStatusForm, UpdateRecordForm, \
    LeadForm, OpportunityForm, OrderedProductForm, SubscriptionForm, \
    OrderFilterForm, LeadFilterForm, OpportunityFilterForm, ProductFilterForm, \
    MassActionForm, ProductMassActionForm, LeadMassActionForm, \
    OpportunityMassActionForm, SaleSourceForm
from treeio.core.rendering import render_to_response
from treeio.core.models import Object, ModuleSetting, UpdateRecord
from treeio.core.views import user_denied
from treeio.core.decorators import treeio_login_required, handle_response_format, module_admin_required
from treeio.identities.models import Contact
from treeio.finance.models import Currency
from treeio.finance.helpers import convert


def _get_filter_query(args, model=SaleOrder):
    "Compose a filter query based on filter form submission"
    query = Q()

    for arg in args:
        if args[arg]:
            if hasattr(model, arg) or arg == 'products_interested':
                kwargs = {str(arg + '__id'): long(args[arg])}
                query = query & Q(**kwargs)

    return query


def _process_mass_form(f):
    "Pre-process request to handle mass action form for Orders"

    def wrap(request, *args, **kwargs):
        "Wrap"
        if 'massform' in request.POST:
            for key in request.POST:
                if 'mass-order' in key:
                    try:
                        order = SaleOrder.objects.get(pk=request.POST[key])
                        form = MassActionForm(
                            request.user.get_profile(), request.POST, instance=order)
                        if form.is_valid() and request.user.get_profile().has_permission(order, mode='w'):
                            form.save()
                    except:
                        pass

        return f(request, *args, **kwargs)

    wrap.__doc__ = f.__doc__
    wrap.__name__ = f.__name__

    return wrap


def _process_mass_lead_form(f):
    "Pre-process request to handle mass action form for Orders"

    def wrap(request, *args, **kwargs):
        "Wrap"
        if 'massform' in request.POST:
            for key in request.POST:
                if 'mass-lead' in key:
                    try:
                        lead = Lead.objects.get(pk=request.POST[key])
                        form = LeadMassActionForm(
                            request.user.get_profile(), request.POST, instance=lead)
                        if form.is_valid() and request.user.get_profile().has_permission(lead, mode='w'):
                            form.save()
                    except:
                        pass

        return f(request, *args, **kwargs)

    wrap.__doc__ = f.__doc__
    wrap.__name__ = f.__name__

    return wrap


def _process_mass_opportunity_form(f):
    "Pre-process request to handle mass action form for Orders"

    def wrap(request, *args, **kwargs):
        "Wrap"
        if 'massform' in request.POST:
            for key in request.POST:
                if 'mass-opportunity' in key:
                    try:
                        opportunity = Opportunity.objects.get(
                            pk=request.POST[key])
                        form = OpportunityMassActionForm(request.user.get_profile(),
                                                         request.POST, instance=opportunity)
                        if form.is_valid() and request.user.get_profile().has_permission(opportunity,
                                                                                         mode='w'):
                            form.save()
                    except:
                        pass

        return f(request, *args, **kwargs)

    wrap.__doc__ = f.__doc__
    wrap.__name__ = f.__name__

    return wrap


def _do_update_record(profile, request, object):
    "Get the Update Record Form"
    if profile.has_permission(object, mode='x'):
        if request.POST:
            record = UpdateRecord()
            record.object = object
            record.record_type = 'manual'
            form = UpdateRecordForm(request.POST, instance=record)
            if form.is_valid():
                record = form.save()
                record.set_user_from_request(request)
                record.save()
                record.about.add(object)
                object.set_last_updated()
        else:
            form = UpdateRecordForm()
    else:
        form = None
    return form


@treeio_login_required
@handle_response_format
@_process_mass_form
def index(request, response_format='html'):
    "Sales index page"

    query = Q(status__hidden=False)
    if request.GET:
        if 'status' in request.GET and request.GET['status']:
            query = _get_filter_query(request.GET)
        else:
            query = query & _get_filter_query(request.GET)
    orders = Object.filter_by_request(
        request, SaleOrder.objects.filter(query), mode="r")
    filters = OrderFilterForm(request.user.get_profile(), '', request.GET)
    statuses = Object.filter_by_request(request, SaleStatus.objects, mode="r")

    massform = MassActionForm(request.user.get_profile())

    return render_to_response('sales/index',
                              {'orders': orders,
                               'filters': filters,
                               'statuses': statuses,
                               'massform': massform
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
@_process_mass_form
def index_assigned(request, response_format='html'):
    "Orders assigned to current user"

    query = Q(status__hidden=False, assigned=request.user.get_profile())
    if request.GET:
        if 'status' in request.GET and request.GET['status']:
            query = _get_filter_query(request.GET)
        else:
            query = query & _get_filter_query(request.GET)

    orders = Object.filter_by_request(
        request, SaleOrder.objects.filter(query), mode="r")
    filters = OrderFilterForm(
        request.user.get_profile(), 'assigned', request.GET)
    statuses = Object.filter_by_request(request, SaleStatus.objects, mode="r")

    massform = MassActionForm(request.user.get_profile())

    return render_to_response('sales/index_assigned',
                              {'orders': orders,
                               'statuses': statuses,
                               'massform': massform,
                               'filters': filters},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def index_status(request, response_format='html'):
    "Index Status"
    query = Q(status__hidden=False)
    if request.GET:
        if 'status' in request.GET and request.GET['status']:
            query = _get_filter_query(request.GET)
        else:
            query = query & _get_filter_query(request.GET)

    orders = Object.filter_by_request(
        request, SaleOrder.objects.filter(query), mode="r")
    statuses = Object.filter_by_request(request, SaleStatus.objects, mode="r")
    filters = OrderFilterForm(request.user.get_profile(), '', request.GET)

    total = 0

    for status in statuses:
        status.count = 0
        for order in orders:
            if order.status == status:
                if order.status.hidden is False:
                    total += 1
                    status.count += order.quantity

    return render_to_response('sales/index_status',
                              {'orders': orders,
                               'statuses': statuses,
                               'total': total,
                               'filters': filters
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_form
def index_open(request, response_format='html'):
    "SaleOrders owned by current user"
    try:
        conf = ModuleSetting.get_for_module(
            'treeio.sales', 'order_fulfil_status')[0]
        fulfil_status = long(conf.value)
        query = Q(status__hidden=False) & ~Q(status=fulfil_status)
    except Exception:
        query = Q(status__hidden=False)
    if request.GET:
        if 'status' in request.GET and request.GET['status']:
            query = _get_filter_query(request.GET) & Q(user=request.user)
        else:
            query = query & _get_filter_query(request.GET)

    orders = Object.filter_by_request(
        request, SaleOrder.objects.filter(query), mode="r")
    statuses = Object.filter_by_request(request, SaleStatus.objects)
    filters = OrderFilterForm(request.user.get_profile(), '', request.GET)

    massform = MassActionForm(request.user.get_profile())

    return render_to_response('sales/index_open',
                              {'orders': orders,
                               'statuses': statuses,
                               'massform': massform,
                               'filters': filters},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def ordered_product_add(request, order_id=None, response_format='html'):
    "Add new Ordered Product"

    order = get_object_or_404(SaleOrder, pk=order_id)
    if not request.user.get_profile().has_permission(order, mode='x'):
        return user_denied("Sorry, you don't have access to this Sale Order")

    if request.POST:
        if not 'cancel' in request.POST:
            ordered_product = OrderedProduct()
            ordered_product.order = order
            form = OrderedProductForm(
                request.user.get_profile(), order, request.POST, instance=ordered_product)
            if form.is_valid():
                ordered_product = form.save(commit=False)
                convert(
                    ordered_product, 'rate', currency=ordered_product.order.currency)
                ordered_product.set_user_from_request(request)
                ordered_product.order.update_total()
                if 'add_another' in request.POST:
                    return HttpResponseRedirect(reverse('sales_ordered_product_add', args=[order.id]))
                return HttpResponseRedirect(reverse('sales_order_view', args=[order.id]))
        else:
            return HttpResponseRedirect(reverse('sales_order_view', args=[order.id]))
    else:
        form = OrderedProductForm(request.user.get_profile(), order)

    return render_to_response('sales/ordered_product_add',
                              {'form': form,
                               'order': order},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def ordered_product_view(request, ordered_product_id, response_format='html'):
    "Ordered product view"
    ordered_product = get_object_or_404(OrderedProduct, pk=ordered_product_id)
    if not request.user.get_profile().has_permission(ordered_product) \
            and not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, message="You don't have access to this Ordered Product")

    return render_to_response('sales/ordered_product_view',
                              {'ordered_product': ordered_product},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def ordered_product_edit(request, ordered_product_id, response_format='html'):
    "OrderedProduct edit"

    ordered_product = get_object_or_404(OrderedProduct, pk=ordered_product_id)
    if not request.user.get_profile().has_permission(ordered_product, mode='w') \
            and not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, "You don't have access to this OrderedProduct", response_format)

    order = ordered_product.order
    if request.POST:
        if not 'cancel' in request.POST:
            form = OrderedProductForm(
                request.user.get_profile(), order, request.POST, instance=ordered_product)
            if form.is_valid():
                ordered_product = form.save(commit=False)
                convert(
                    ordered_product, 'rate', currency=ordered_product.order.currency)
                ordered_product.order.update_total()
                return HttpResponseRedirect(reverse('sales_ordered_product_view', args=[ordered_product.id]))
        else:
            return HttpResponseRedirect(reverse('sales_ordered_product_view', args=[ordered_product.id]))
    else:
        form = OrderedProductForm(
            request.user.get_profile(), order, instance=ordered_product)

    return render_to_response('sales/ordered_product_edit',
                              {'form': form,
                               'ordered_product': ordered_product,
                               'order': order
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def ordered_product_delete(request, ordered_product_id, response_format='html'):
    "OrderedProduct delete"

    ordered_product = get_object_or_404(OrderedProduct, pk=ordered_product_id)
    if not request.user.get_profile().has_permission(ordered_product, mode='w') \
            and not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, "You don't have access to this Sale Status", response_format)

    if request.POST:
        if 'delete' in request.POST:
            order_id = ordered_product.order_id
            if 'trash' in request.POST:
                ordered_product.trash = True
                ordered_product.save()
            else:
                ordered_product.delete()
            ordered_product.order.update_total()
            return HttpResponseRedirect(reverse('sales_order_view', args=[order_id]))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('sales_ordered_product_view', args=[ordered_product.id]))

    order = ordered_product.order

    return render_to_response('sales/ordered_product_delete',
                              {'ordered_product': ordered_product,
                               'order': order},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def subscription_index(request, response_format='html'):
    "Subscription index page"

    query = Q(status__hidden=False)
    if request.GET:
        if 'status' in request.GET and request.GET['status']:
            query = _get_filter_query(request.GET)
        else:
            query = query & _get_filter_query(request.GET)

    subscriptions = Object.filter_by_request(
        request, Subscription.objects.filter(query), mode="r")
    filters = OrderFilterForm(request.user.get_profile(), '', request.GET)
    ordered_products = subscriptions.orderedproduct_set.all()
    orders = ordered_products.order_set.all()
    #orders = Object.filter_by_request(request, SaleOrder.objects, mode = "r")
    statuses = Object.filter_by_request(request, SaleStatus.objects, mode="r")

    return render_to_response('sales/index',
                              {'orders': orders,
                               'products': ordered_products,
                               'filters': filters,
                               'statuses': statuses
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def subscription_add(request, order_id=None, product_id=None, productset_id=None, response_format='html'):
    "Product add"
    if order_id:
        order = get_object_or_404(SaleOrder, pk=order_id)
    if product_id:
        product = get_object_or_404(OrderedProduct, pk=product_id)
    if productset_id:
        productset = get_object_or_404(Product, pk=productset_id)

    subscription = Subscription()
    if order_id:
        subscription.client = order.client
    if product_id:
        subscription.product = product.product
    if productset_id:
        subscription.product = productset

    if request.POST:
        if not 'cancel' in request.POST:
            form = SubscriptionForm(
                request.user.get_profile(), request.POST, instance=subscription)
            if form.is_valid():
                subscription = form.save(commit=False)
                subscription.renew()
                subscription.save()
                subscription.set_user_from_request(request)
                if product_id:
                    product.subscription = subscription
                    product.save()
                if order_id:
                    return HttpResponseRedirect(reverse('sales_order_view', args=[order_id]))
                else:
                    return HttpResponseRedirect(reverse('sales_subscription_view', args=[subscription.id]))
        else:
            return HttpResponseRedirect(reverse('sales_product_index'))
    else:
        form = SubscriptionForm(
            request.user.get_profile(), instance=subscription)

    return render_to_response('sales/subscription_add',
                              {'form': form},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def subscription_view(request, subscription_id, response_format='html'):
    "Subscription view"

    subscription = get_object_or_404(Subscription, pk=subscription_id)
    if not request.user.get_profile().has_permission(subscription):
        return user_denied(request, message="You don't have access to this Subscription")

    query = Q(subscription=subscription)
    if request.GET:
        if 'status' in request.GET and request.GET['status']:
            query = query & _get_filter_query(request.GET)
        else:
            query = query & Q(
                status__hidden=False) & _get_filter_query(request.GET)
    else:
        query = query & Q(status__hidden=False)
    ops = subscription.orderedproduct_set.all()
    orders = []
    for op in ops:
        orders.append(op.order)

    return render_to_response('sales/subscription_view',
                              {'subscription': subscription,

                               'orders': orders},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def subscription_edit(request, subscription_id, response_format='html'):
    "Subscription edit"

    subscription = get_object_or_404(Subscription, pk=subscription_id)
    if not request.user.get_profile().has_permission(subscription, mode='w') \
            and not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, "You don't have access to this Subscription", response_format)

    if request.POST:
        form = SubscriptionForm(
            request.user.get_profile(), request.POST, instance=subscription)
    else:
        form = SubscriptionForm(
            request.user.get_profile(), instance=subscription)
    if form.is_valid():
        subscription = form.save()
        return HttpResponseRedirect(reverse('sales_subscription_view', args=[subscription.id]))

    return render_to_response('sales/subscription_edit',
                              {'form': form,
                               'subscription': subscription,
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def subscription_delete(request, subscription_id, response_format='html'):
    "Subscription delete"

    subscription = get_object_or_404(Subscription, pk=subscription_id)
    if not request.user.get_profile().has_permission(subscription, mode='w') \
            and not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, "You don't have access to this Sale Status", response_format)

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                subscription.trash = True
                subscription.save()
            else:
                subscription.delete()
            return HttpResponseRedirect(reverse('sales_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('sales_subscription_view', args=[subscription.id]))

    return render_to_response('sales/subscription_delete',
                              {'subscription': subscription,
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def product_index(request, response_format='html'):
    "Product index page"

    query = Q(status__hidden=False)
    if request.GET:
        if 'status' in request.GET and request.GET['status']:
            query = _get_filter_query(request.GET)
        else:
            query = query & _get_filter_query(request.GET)

    if 'massform' in request.POST:
        for key in request.POST:
            if 'mass-product' in key:
                try:
                    product = Product.objects.get(pk=request.POST[key])
                    form = ProductMassActionForm(
                        request.user.get_profile(), request.POST, instance=product)
                    if form.is_valid() and request.user.get_profile().has_permission(product, mode='w'):
                        form.save()
                except:
                    pass

    massform = ProductMassActionForm(request.user.get_profile())

    query = Q(parent__isnull=True)
    if request.GET:
        query = query & _get_filter_query(request.GET, model=Product)

    statuses = Object.filter_by_request(request, SaleStatus.objects, mode="r")
    products = Object.filter_by_request(
        request, Product.objects.filter(query), mode="r")
    filters = ProductFilterForm(request.user.get_profile(), '', request.GET)

    return render_to_response('sales/product_index',
                              {'products': products,
                               'filters': filters,
                               'massform': massform,
                               'statuses': statuses
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
@module_admin_required('treeio.sales')
def product_add(request, parent_id=None, response_format='html'):
    "Product add"

    all_products = Object.filter_by_request(
        request, Product.objects.filter(parent__isnull=True))

    if request.POST:
        if not 'cancel' in request.POST:
            product = Product()
            form = ProductForm(
                request.user.get_profile(), None, request.POST, instance=product)
            if form.is_valid():
                product = form.save()
                product.set_user_from_request(request)
                return HttpResponseRedirect(reverse('sales_product_view', args=[product.id]))
        else:
            return HttpResponseRedirect(reverse('sales_product_index'))
    else:
        form = ProductForm(request.user.get_profile(), parent_id)

    return render_to_response('sales/product_add',
                              {'form': form,
                               'products': all_products},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def product_edit(request, product_id, response_format='html'):
    "Product edit"

    product = get_object_or_404(Product, pk=product_id)
    if not request.user.get_profile().has_permission(product, mode='w') \
            and not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, "You don't have access to this Product", response_format)

    if request.POST:
        if not 'cancel' in request.POST:
            form = ProductForm(
                request.user.get_profile(), None, request.POST, instance=product)
            if form.is_valid():
                product = form.save()
                return HttpResponseRedirect(reverse('sales_product_view', args=[product.id]))
        else:
            return HttpResponseRedirect(reverse('sales_product_view', args=[product.id]))
    else:
        form = ProductForm(request.user.get_profile(), None, instance=product)

    all_products = Object.filter_by_request(
        request, Product.objects.filter(parent__isnull=True))

    return render_to_response('sales/product_edit',
                              {'form': form,
                               'product': product,
                               'products': all_products},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def product_view(request, product_id, response_format='html'):
    "Product view"

    product = get_object_or_404(Product, pk=product_id)
    if not request.user.get_profile().has_permission(product) \
            and not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, message="You don't have access to this Product")

    query = Q(product=product)
    if request.GET:
        if 'status' in request.GET and request.GET['status']:
            query = query & _get_filter_query(request.GET)
        else:
            query = query & Q(
                status__hidden=False) & _get_filter_query(request.GET)
    else:
        query = query & Q(status__hidden=False)

    subproducts = Object.filter_by_request(
        request, Product.objects.filter(parent=product))
    subscriptions = product.subscription_set.all()

    return render_to_response('sales/product_view',
                              {'product': product,
                               'subproducts': subproducts,
                               'subscriptions': subscriptions,
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def product_delete(request, product_id, response_format='html'):
    "Product delete"

    product = get_object_or_404(Product, pk=product_id)
    if not request.user.get_profile().has_permission(product, mode='w') \
            and not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, "You don't have access to this Sale Status", response_format)

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                product.trash = True
                product.save()
            else:
                product.delete()
            return HttpResponseRedirect(reverse('sales_product_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('sales_product_view', args=[product.id]))

    all_products = Object.filter_by_request(
        request, Product.objects.filter(parent__isnull=True))
    statuses = Object.filter_by_request(request, SaleStatus.objects, mode="r")
    subproducts = Object.filter_by_request(
        request, Product.objects.filter(parent=product))

    return render_to_response('sales/product_delete',
                              {'product': product,
                               'subproducts': subproducts,
                               'products': all_products,
                               'statuses': statuses},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
@_process_mass_lead_form
def lead_index(request, response_format='html'):
    "Lead index page"

    query = Q(status__hidden=False)
    if request.GET:
        if 'status' in request.GET and request.GET['status']:
            query = _get_filter_query(request.GET)
        else:
            query = query & _get_filter_query(request.GET)

    filters = LeadFilterForm(request.user.get_profile(), '', request.GET)

    statuses = Object.filter_by_request(request, SaleStatus.objects, mode="r")
    leads = Object.filter_by_request(
        request, Lead.objects.filter(query), mode="r")

    massform = LeadMassActionForm(request.user.get_profile())

    return render_to_response('sales/lead_index',
                              {'leads': leads,
                               'filters': filters,
                               'massform': massform,
                               'statuses': statuses
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_lead_form
def lead_index_assigned(request, response_format='html'):
    "Leads owned by current user"

    query = Q(status__hidden=False, assigned=request.user.get_profile())
    if request.GET:
        if 'status' in request.GET and request.GET['status']:
            query = _get_filter_query(request.GET)
        else:
            query = query & _get_filter_query(request.GET)

    statuses = Object.filter_by_request(request, SaleStatus.objects, mode="r")
    leads = Object.filter_by_request(
        request, Lead.objects.filter(query), mode="r")
    filters = LeadFilterForm(request.user.get_profile(), '', request.GET)

    massform = LeadMassActionForm(request.user.get_profile())

    return render_to_response('sales/lead_index_assigned',
                              {'leads': leads,
                               'filters': filters,
                               'massform': massform,
                               'statuses': statuses
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def lead_add(request, lead_id=None, response_format='html'):
    "Lead add"

    all_leads = Object.filter_by_request(request, Lead.objects)

    if request.POST:
        if not 'cancel' in request.POST:
            lead = Lead()
            form = LeadForm(
                request.user.get_profile(), request.POST, instance=lead)
            if form.is_valid():
                lead = form.save()
                lead.set_user_from_request(request)
                return HttpResponseRedirect(reverse('sales_lead_view', args=[lead.id]))
        else:
            return HttpResponseRedirect(reverse('sales_lead_index'))
    else:
        form = LeadForm(request.user.get_profile())

    return render_to_response('sales/lead_add',
                              {'form': form,
                               'leads': all_leads},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def lead_edit(request, lead_id, response_format='html'):
    "Lead edit"

    lead = get_object_or_404(Lead, pk=lead_id)
    if not request.user.get_profile().has_permission(lead, mode='w') \
            and not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, "You don't have access to this Lead", response_format)

    if request.POST:
        form = LeadForm(
            request.user.get_profile(), request.POST, instance=lead)
    else:
        form = LeadForm(request.user.get_profile(), instance=lead)
    if form.is_valid():
        lead = form.save()
        return HttpResponseRedirect(reverse('sales_lead_view', args=[lead.id]))

    return render_to_response('sales/lead_edit',
                              {'form': form,
                               'lead': lead,
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def lead_view(request, lead_id, response_format='html'):
    "Queue view"
    profile = request.user.get_profile()
    lead = get_object_or_404(Lead, pk=lead_id)

    if not profile.has_permission(lead) \
            and not profile.is_admin('treeio.sales'):
        return user_denied(request, message="You don't have access to this Lead")

    form = _do_update_record(profile, request, lead)
    if form.is_valid():
        record = form.save()
        record.set_user_from_request(request)
        lead = record.object

    return render_to_response('sales/lead_view',
                              {'lead': lead,
                               'form': form},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def lead_delete(request, lead_id, response_format='html'):
    "Lead delete"

    lead = get_object_or_404(Lead, pk=lead_id)
    if not request.user.get_profile().has_permission(lead, mode='w') \
            and not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, "You don't have access to this Sale Status", response_format)

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                lead.trash = True
                lead.save()
            else:
                lead.delete()
            return HttpResponseRedirect(reverse('sales_lead_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('sales_lead_view', args=[lead.id]))

    all_products = Object.filter_by_request(
        request, Product.objects.filter(parent__isnull=True))
    all_leads = Object.filter_by_request(request, Lead.objects)

    return render_to_response('sales/lead_delete',
                              {'lead': lead,
                               'leads': all_leads,
                               'products': all_products},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
@_process_mass_opportunity_form
def opportunity_index(request, response_format='html'):
    "Sales index page"

    query = Q(status__hidden=False)
    if request.GET:
        if 'status' in request.GET and request.GET['status']:
            query = _get_filter_query(request.GET)
        else:
            query = query & _get_filter_query(request.GET)

    filters = OpportunityFilterForm(
        request.user.get_profile(), '', request.GET)

    statuses = Object.filter_by_request(request, SaleStatus.objects, mode="r")
    opportunities = Object.filter_by_request(
        request, Opportunity.objects.filter(query), mode="r")

    massform = OpportunityMassActionForm(request.user.get_profile())

    return render_to_response('sales/opportunity_index',
                              {'opportunities': opportunities,
                               'filters': filters,
                               'massform': massform,
                               'statuses': statuses
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_opportunity_form
def opportunity_index_assigned(request, response_format='html'):
    "Opportunities owned by current user"

    query = Q(status__hidden=False, assigned=request.user.get_profile())
    if request.GET:
        if 'status' in request.GET and request.GET['status']:
            query = _get_filter_query(request.GET)
        else:
            query = query & _get_filter_query(request.GET)

    statuses = Object.filter_by_request(request, SaleStatus.objects, mode="r")
    opportunities = Object.filter_by_request(
        request, Opportunity.objects.filter(query), mode="r")
    filters = OpportunityFilterForm(
        request.user.get_profile(), '', request.GET)

    massform = OpportunityMassActionForm(request.user.get_profile())

    return render_to_response('sales/opportunity_index_assigned',
                              {'opportunities': opportunities,
                               'filters': filters,
                               'massform': massform,
                               'statuses': statuses
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def opportunity_add(request, lead_id=None, response_format='html'):
    "Opportunity add"
    lead = None
    if lead_id:
        lead = get_object_or_404(Lead, pk=lead_id)

    if request.POST:
        if not 'cancel' in request.POST:
            form = OpportunityForm(
                request.user.get_profile(), lead, request.POST)
            if form.is_valid():
                opportunity = form.save(commit=False)
                convert(opportunity, 'amount')
                opportunity.set_user_from_request(request)
                return HttpResponseRedirect(reverse('sales_opportunity_view', args=[opportunity.id]))
        else:
            return HttpResponseRedirect(reverse('sales_opportunity_index'))
    else:
        form = OpportunityForm(request.user.get_profile(), lead)

    return render_to_response('sales/opportunity_add',
                              {'form': form},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def opportunity_edit(request, opportunity_id, response_format='html'):
    "Opportunity edit"

    opportunity = get_object_or_404(Opportunity, pk=opportunity_id)
    if not request.user.get_profile().has_permission(opportunity, mode='w') \
            and not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, "You don't have access to this Opportunity", response_format)

    if request.POST:
        if not 'cancel' in request.POST:
            form = OpportunityForm(
                request.user.get_profile(), None, request.POST, instance=opportunity)
            if form.is_valid():
                opportunity = form.save()
                convert(opportunity, 'amount')
                return HttpResponseRedirect(reverse('sales_opportunity_view', args=[opportunity.id]))
        else:
            return HttpResponseRedirect(reverse('sales_opportunity_view', args=[opportunity.id]))
    else:
        form = OpportunityForm(
            request.user.get_profile(), None, instance=opportunity)

    all_opportunities = Object.filter_by_request(request, Opportunity.objects)

    return render_to_response('sales/opportunity_edit',
                              {'form': form,
                               'opportunity': opportunity,
                               'opportunities': all_opportunities,
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def opportunity_view(request, opportunity_id, response_format='html'):
    "Opportunity view"

    profile = request.user.get_profile()
    opportunity = get_object_or_404(Opportunity, pk=opportunity_id)
    if not profile.has_permission(opportunity) \
            and not profile.is_admin('treeio.sales'):
        return user_denied(request, message="You don't have access to this Opportunity")

    form = _do_update_record(profile, request, opportunity)

    return render_to_response('sales/opportunity_view',
                              {'opportunity': opportunity,
                               'record_form': form},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def opportunity_delete(request, opportunity_id, response_format='html'):
    "Opportunity delete"

    opportunity = get_object_or_404(Opportunity, pk=opportunity_id)
    if not request.user.get_profile().has_permission(opportunity, mode='w') \
            and not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, "You don't have access to this Sale Status", response_format)

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                opportunity.trash = True
                opportunity.save()
            else:
                opportunity.delete()
            return HttpResponseRedirect(reverse('sales_opportunity_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('sales_opportunity_view', args=[opportunity.id]))

    all_opportunities = Object.filter_by_request(request, Opportunity.objects)

    return render_to_response('sales/opportunity_delete',
                              {'opportunity': opportunity,
                               'opportunities': all_opportunities,
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def order_add(request, lead_id=None, opportunity_id=None, response_format='html'):
    "Order add"

    lead = None
    opportunity = None
    if lead_id:
        lead = get_object_or_404(Lead, pk=lead_id)
    if opportunity_id:
        opportunity = get_object_or_404(Opportunity, pk=opportunity_id)

    if request.POST:
        if not 'cancel' in request.POST:
            order = SaleOrder()
            form = OrderForm(
                request.user.get_profile(), lead, opportunity, request.POST, instance=order)
            if form.is_valid():
                order = form.save()
                order.set_user_from_request(request)
                return HttpResponseRedirect(reverse('sales_order_view', args=[order.id]))
        else:
            return HttpResponseRedirect(reverse('sales'))
    else:
        form = OrderForm(request.user.get_profile(), lead, opportunity)

    all_products = Object.filter_by_request(
        request, Product.objects.filter(parent__isnull=True))

    return render_to_response('sales/order_add',
                              {'form': form,
                               'products': all_products},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def order_edit(request, order_id, response_format='html'):
    "SaleOrder edit"

    order = get_object_or_404(SaleOrder, pk=order_id)
    if not request.user.get_profile().has_permission(order, mode='w') \
            and not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, "You don't have access to this SaleOrder", response_format)

    if request.POST:
        if not 'cancel' in request.POST:
            form = OrderForm(
                request.user.get_profile(), None, None, request.POST, instance=order)
            if form.is_valid():
                order = form.save()
                return HttpResponseRedirect(reverse('sales_order_view', args=[order.id]))
        else:
            return HttpResponseRedirect(reverse('sales_order_view', args=[order.id]))
    else:
        form = OrderForm(
            request.user.get_profile(), None, None, instance=order)

    all_orders = Object.filter_by_request(request, SaleOrder.objects)

    return render_to_response('sales/order_edit',
                              {'form': form,
                               'order': order,
                               'orders': all_orders,
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def order_view(request, order_id, response_format='html'):
    "SaleOrder view"
    profile = request.user.get_profile()
    order = get_object_or_404(SaleOrder, pk=order_id)

    form = _do_update_record(profile, request, order)
    if form.is_valid():
        record = form.save()
        record.set_user_from_request(request)
        order = record.object

    if not profile.has_permission(order) \
            and not profile.is_admin('treeio.sales'):
        return user_denied(request, message="You don't have access to this Sale")

    ordered_products = order.orderedproduct_set.filter(trash=False)

    return render_to_response('sales/order_view',
                              {'order': order,
                               'ordered_products': ordered_products,
                               'record_form': form},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def order_invoice_view(request, order_id, response_format='html'):
    "Order view as Invoice"
    order = get_object_or_404(SaleOrder, pk=order_id)
    if not request.user.get_profile().has_permission(order) \
            and not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, message="You don't have access to this Sale")

    ordered_products = order.orderedproduct_set.filter(trash=False)

    # default company
    try:
        conf = ModuleSetting.get_for_module('treeio.finance', 'my_company')[0]
        my_company = Contact.objects.get(pk=long(conf.value))

    except:
        my_company = None

    return render_to_response('sales/order_invoice_view',
                              {'order': order,
                               'ordered_products': ordered_products,
                               'my_company': my_company},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def order_delete(request, order_id, response_format='html'):
    "SaleOrder delete"

    order = get_object_or_404(SaleOrder, pk=order_id)
    if not request.user.get_profile().has_permission(order, mode='w') \
            and not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, "You don't have access to this Sale Status", response_format)

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                order.trash = True
                order.save()
            else:
                order.delete()
            return HttpResponseRedirect(reverse('sales_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('sales_order_view', args=[order.id]))

    all_orders = Object.filter_by_request(request, SaleOrder.objects)

    return render_to_response('sales/order_delete',
                              {'order': order,
                               'orders': all_orders,
                               },
                              context_instance=RequestContext(request), response_format=response_format)

#
# Settings
#


@treeio_login_required
@handle_response_format
def settings_view(request, response_format='html'):
    "Settings"

    if not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, message="You don't have administrator access to the Sales module")

    all_products = Object.filter_by_request(
        request, Product.objects.filter(parent__isnull=True))
    all_statuses = Object.filter_by_request(request, SaleStatus.objects)
    all_sources = Object.filter_by_request(request, SaleSource.objects)

    # default currency
    try:
        default_currency = Currency.objects.get(is_default=True)
    except:
        default_currency = None

    # all currencies
    currencies = Object.filter_by_request(
        request, Currency.objects.filter(trash=False))

    # default lead status
    try:
        conf = ModuleSetting.get_for_module(
            'treeio.sales', 'default_lead_status')[0]
        default_lead_status = SaleStatus.objects.get(pk=long(conf.value))
    except:
        default_lead_status = None

    # default opportunity status
    try:
        conf = ModuleSetting.get_for_module(
            'treeio.sales', 'default_opportunity_status')[0]
        default_opportunity_status = SaleStatus.objects.get(
            pk=long(conf.value))
    except:
        default_opportunity_status = None

    # default order status
    try:
        conf = ModuleSetting.get_for_module(
            'treeio.sales', 'default_order_status')[0]
        default_order_status = SaleStatus.objects.get(pk=long(conf.value))
    except:
        default_order_status = None

    # default order source
    try:
        conf = ModuleSetting.get_for_module(
            'treeio.sales', 'default_order_source')[0]
        default_order_source = SaleSource.objects.get(pk=long(conf.value))
    except:
        default_order_source = None

    # order fulfilment status
    try:
        conf = ModuleSetting.get_for_module(
            'treeio.sales', 'order_fulfil_status')[0]
        order_fulfil_status = SaleStatus.objects.get(pk=long(conf.value))
    except:
        order_fulfil_status = None

    # default product
    try:
        conf = ModuleSetting.get_for_module(
            'treeio.sales', 'default_order_product')[0]
        default_order_product = Product.objects.get(pk=long(conf.value))
    except:
        default_order_product = None

    # check not trashed

    if default_opportunity_status:
        if default_opportunity_status.trash:
            default_opportunity_status = None
    if default_lead_status:
        if default_lead_status.trash:
            default_lead_status = None
    if default_order_status:
        if default_order_status.trash:
            default_order_status = None
    if default_order_source:
        if default_order_source.trash:
            default_order_source = None
    if order_fulfil_status:
        if order_fulfil_status.trash:
            order_fulfil_status = None
    if default_order_product:
        if default_order_product.trash:
            default_order_product = None

    return render_to_response('sales/settings_view',
                              {
                                  'products': all_products,
                                  'statuses': all_statuses,
                                  'sources': all_sources,
                                  'currencies': currencies,
                                  'default_opportunity_status': default_opportunity_status,
                                  'default_lead_status': default_lead_status,
                                  'default_order_status': default_order_status,
                                  'default_order_source': default_order_source,
                                  'order_fulfil_status': order_fulfil_status,
                                  'default_order_product': default_order_product,
                                  'default_currency': default_currency,
                              },
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def settings_edit(request, response_format='html'):
    "Settings"

    if not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, message="You don't have administrator access to the Sales module")

    all_products = Object.filter_by_request(
        request, Product.objects.filter(parent__isnull=True))

    if request.POST:
        if not 'cancel' in request.POST:
            form = SettingsForm(request.user.get_profile(), request.POST)
            if form.is_valid():
                form.save()
                return HttpResponseRedirect(reverse('sales_settings_view'))
        else:
            return HttpResponseRedirect(reverse('sales_settings_view'))
    else:
        form = SettingsForm(request.user.get_profile())

    return render_to_response('sales/settings_edit',
                              {
                                  'products': all_products,

                                  'form': form,
                              },
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def status_add(request, response_format='html'):
    "TicketStatus add"

    if not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, message="You don't have administrator access to the Sales module")

    status = None
    if request.POST:
        if not 'cancel' in request.POST:
            status = SaleStatus()
            form = SaleStatusForm(
                request.user.get_profile(), request.POST, instance=status)
            if form.is_valid():
                status = form.save()
                status.set_user_from_request(request)
                return HttpResponseRedirect(reverse('sales_status_view', args=[status.id]))
        else:
            return HttpResponseRedirect(reverse('sales_settings_view'))
    else:
        form = SaleStatusForm(request.user.get_profile())

    all_products = Object.filter_by_request(
        request, Product.objects.filter(parent__isnull=True))

    return render_to_response('sales/status_add',
                              {'form': form,
                               'status': status,
                               'products': all_products,
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def status_view(request, status_id, response_format='html'):
    "Tickets filtered by status"

    status = get_object_or_404(SaleStatus, pk=status_id)
    if not request.user.get_profile().has_permission(status) \
            and not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, message="You don't have access to this Sale Status")

    query = Q(status=status)
    if request.GET:
        query = query & _get_filter_query(request.GET)
    orders = Object.filter_by_request(request, SaleOrder.objects.filter(query))

    return render_to_response('sales/status_view',
                              {'status': status,
                               'orders': orders},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def status_edit(request, status_id, response_format='html'):
    "SaleStatus edit"

    status = get_object_or_404(SaleStatus, pk=status_id)
    if not request.user.get_profile().has_permission(status, mode='w') \
            and not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, "You don't have access to this Sale Status", response_format)

    if request.POST:
        if not 'cancel' in request.POST:
            form = SaleStatusForm(
                request.user.get_profile(), request.POST, instance=status)
            if form.is_valid():
                status = form.save()
                return HttpResponseRedirect(reverse('sales_status_view', args=[status.id]))
        else:
            return HttpResponseRedirect(reverse('sales_status_view', args=[status.id]))
    else:
        form = SaleStatusForm(request.user.get_profile(), instance=status)

    return render_to_response('sales/status_edit',
                              {'form': form,
                               'status': status},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def status_delete(request, status_id, response_format='html'):
    "SaleStatus delete"

    status = get_object_or_404(SaleStatus, pk=status_id)
    if not request.user.get_profile().has_permission(status, mode='w') \
            and not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, "You don't have access to this Sale Status", response_format)

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                status.trash = True
                status.save()
            else:
                status.delete()
            return HttpResponseRedirect(reverse('sales_settings_view'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('sales_status_view', args=[status.id]))

    all_products = Object.filter_by_request(
        request, Product.objects.filter(parent__isnull=True))

    return render_to_response('sales/status_delete',
                              {'status': status,
                               'products': all_products},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def source_add(request, response_format='html'):
    "TicketStatus add"

    if not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, message="You don't have administrator access to the Sales module")

    if request.POST:
        if not 'cancel' in request.POST:
            source = SaleSource()
            form = SaleSourceForm(
                request.user.get_profile(), request.POST, instance=source)
            if form.is_valid():
                source = form.save()
                source.set_user_from_request(request)
                return HttpResponseRedirect(reverse('sales_source_view', args=[source.id]))
        else:
            return HttpResponseRedirect(reverse('sales_settings_view'))
    else:
        form = SaleSourceForm(request.user.get_profile())

    all_products = Object.filter_by_request(
        request, Product.objects.filter(parent__isnull=True))
    all_sources = Object.filter_by_request(request, SaleSource.objects)

    return render_to_response('sales/source_add',
                              {'form': form,
                               'sources': all_sources,
                               'products': all_products,
                               },
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def source_view(request, source_id, response_format='html'):
    "Orders filtered by source"

    source = get_object_or_404(SaleSource, pk=source_id)
    if not request.user.get_profile().has_permission(source) \
            and not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, message="You don't have access to this Sale Status")

    query = Q(source=source)
    if request.GET:
        query = query & _get_filter_query(request.GET)
    orders = Object.filter_by_request(request, SaleOrder.objects.filter(query))

    all_products = Object.filter_by_request(
        request, Product.objects.filter(parent__isnull=True))
    all_sources = Object.filter_by_request(request, SaleSource.objects)

    return render_to_response('sales/source_view',
                              {'source': source,
                               'sources': all_sources,
                               'products': all_products,
                               'orders': orders},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def source_edit(request, source_id, response_format='html'):
    "SaleSource edit"

    source = get_object_or_404(SaleSource, pk=source_id)
    if not request.user.get_profile().has_permission(source, mode='w') \
            and not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, "You don't have access to this Sale Status", response_format)

    if request.POST:
        if not 'cancel' in request.POST:
            form = SaleSourceForm(
                request.user.get_profile(), request.POST, instance=source)
            if form.is_valid():
                source = form.save()
                return HttpResponseRedirect(reverse('sales_source_view', args=[source.id]))
        else:
            return HttpResponseRedirect(reverse('sales_source_view', args=[source.id]))
    else:
        form = SaleSourceForm(request.user.get_profile(), instance=source)

    all_products = Object.filter_by_request(
        request, Product.objects.filter(parent__isnull=True))
    all_sources = Object.filter_by_request(request, SaleSource.objects)

    return render_to_response('sales/source_edit',
                              {'form': form,
                               'source': source,
                               'sources': all_sources,
                               'products': all_products},
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
@handle_response_format
def source_delete(request, source_id, response_format='html'):
    "SaleSource delete"

    source = get_object_or_404(SaleSource, pk=source_id)
    if not request.user.get_profile().has_permission(source, mode='w') \
            and not request.user.get_profile().is_admin('treeio.sales'):
        return user_denied(request, "You don't have access to this Sale Status", response_format)

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                source.trash = True
                source.save()
            else:
                source.delete()
            return HttpResponseRedirect(reverse('sales_settings_view'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('sales_source_view', args=[source.id]))

    all_products = Object.filter_by_request(
        request, Product.objects.filter(parent__isnull=True))
    all_sources = Object.filter_by_request(request, SaleSource.objects)

    return render_to_response('sales/source_delete',
                              {'source': source,
                               'sources': all_sources,
                               'products': all_products},
                              context_instance=RequestContext(request), response_format=response_format)


#
# AJAX handlers


@treeio_login_required
def ajax_subscription_lookup(request, response_format='html'):
    "Returns a list of matching tasks"

    subscriptions = []
    if request.GET and 'term' in request.GET:
        subscriptions = Subscription.objects.filter(
            Q(client__name__icontains=request.GET['term']) | Q(
                product__name__icontains=request.GET['term']) | Q(
                details__icontains=request.GET['term']))[:10]

    return render_to_response('sales/ajax_subscription_lookup',
                              {'subscriptions': subscriptions},
                              context_instance=RequestContext(request),
                              response_format=response_format)
#

########NEW FILE########
__FILENAME__ = testmodel
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#!/usr/bin/python

OBJECTS_NUM = 100

# setup environment
import sys
import os
sys.path.append('../')
os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'

from django.core.management import setup_environ
from treeio import settings
from treeio.core.models import Object, User
from treeio.projects.models import Project

setup_environ(settings)

user = User.objects.all()[0]

for i in range(0, OBJECTS_NUM):
    project = Project(name='test' + unicode(i))
    project.set_user(user)
    project.save()
    objects = Object.filter_permitted(user, Project.objects)
    allowed = 0
    for obj in objects:
        if user.has_permission(obj):
            allowed += 1
    print len(list(objects)), ':', allowed

########NEW FILE########
__FILENAME__ = admin
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Service Support: back-end administrator definitions
"""
from django.contrib import admin
from treeio.services.models import Ticket, TicketStatus, TicketQueue
from treeio.services.models import Service, ServiceAgent, ServiceLevelAgreement


class TicketAdmin(admin.ModelAdmin):

    "Ticket backend definition"
    list_display = ['name']
    search_fields = ['name']


class TicketStatusAdmin(admin.ModelAdmin):

    "TicketStatus backend definition"
    list_display = ['name', 'active', 'hidden']
    search_fields = ['name']


class TicketQueueAdmin(admin.ModelAdmin):

    "TicketQueue backend definition"
    list_display = ['name', 'parent', 'default_ticket_status']
    search_fields = ['name']

admin.site.register(Ticket, TicketAdmin)
admin.site.register(TicketStatus, TicketStatusAdmin)
admin.site.register(TicketQueue, TicketQueueAdmin)


class ServiceAdmin(admin.ModelAdmin):

    "Service backend definition"
    list_display = ['name']
    search_fields = ['name']


class ServiceAgentAdmin(admin.ModelAdmin):

    "ServiceAgent backend definition"
    list_display = ['related_user', 'available_from', 'available_to', 'active']
    list_filter = ['active']


class ServiceLevelAgreementAdmin(admin.ModelAdmin):

    "ServiceLevelAgreement backend definition"
    list_display = ['name', 'response_time', 'uptime_rate']
    search_fields = ['name']

admin.site.register(Service, ServiceAdmin)
admin.site.register(ServiceAgent, ServiceAgentAdmin)
admin.site.register(ServiceLevelAgreement, ServiceLevelAgreementAdmin)

########NEW FILE########
__FILENAME__ = handlers
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

from __future__ import absolute_import, with_statement

__all__ = ['TicketStatusHandler',
           'ServiceHandler',
           'ServiceLevelAgreementHandler',
           'ServiceAgentHandler',
           'TicketQueueHandler',
           'TicketRecordHandler',
           'TicketHandler',
           ]

from treeio.core.api.utils import rc
from piston.handler import BaseHandler
from treeio.core.models import ModuleSetting
from treeio.core.api.handlers import ObjectHandler
from treeio.services.models import TicketStatus, Service, ServiceLevelAgreement, ServiceAgent, TicketQueue, Ticket, TicketRecord
from treeio.services.forms import TicketForm, TicketStatusForm, TicketRecordForm, QueueForm, \
    ServiceForm, ServiceLevelAgreementForm, AgentForm
from treeio.services.views import _get_default_context


class TicketStatusHandler(ObjectHandler):

    "Entrypoint for TicketStatus model."

    model = TicketStatus
    form = TicketStatusForm

    @staticmethod
    def resource_uri():
        return ('api_services_status', ['id'])

    def check_create_permission(self, request, mode):
        return request.user.get_profile().is_admin('treeio.services')


class ServiceHandler(ObjectHandler):

    "Entrypoint for Service model."

    model = Service
    form = ServiceForm

    @staticmethod
    def resource_uri():
        return ('api_services', ['id'])

    def check_create_permission(self, request, mode):
        return request.user.get_profile().is_admin('treeio.services')

    def check_instance_permission(self, request, inst, mode):
        return request.user.get_profile().has_permission(inst, mode=mode) \
            or request.user.get_profile().is_admin('treeio_services')


class ServiceLevelAgreementHandler(ObjectHandler):

    "Entrypoint for ServiceLevelAgreement model."

    model = ServiceLevelAgreement
    form = ServiceLevelAgreementForm

    @staticmethod
    def resource_uri():
        return ('api_services_sla', ['id'])

    def check_create_permission(self, request, mode):
        return request.user.get_profile().is_admin('treeio.services')


class ServiceAgentHandler(ObjectHandler):

    "Entrypoint for ServiceAgent model."

    model = ServiceAgent
    form = AgentForm

    @staticmethod
    def resource_uri():
        return ('api_services_agents', ['id'])

    def check_create_permission(self, request, mode):
        return request.user.get_profile().is_admin('treeio.services')


class TicketQueueHandler(ObjectHandler):

    "Entrypoint for TicketQueue model."

    model = TicketQueue
    form = QueueForm

    @staticmethod
    def resource_uri():
        return ('api_services_queues', ['id'])

    def check_create_permission(self, request, mode):
        return request.user.get_profile().is_admin('treeio.services')


class TicketRecordHandler(BaseHandler):

    "Entrypoint for TicketRecord model."

    model = TicketRecord
    allowed_methods = ('GET', 'POST')
    fields = ('body', 'record_type', 'author', 'comments')

    @staticmethod
    def resource_uri():
        return ('api_services_ticket_records', ['id'])

    @staticmethod
    def get_ticket(request, kwargs):
        if 'ticket_id' not in kwargs:
            return rc.BAD_REQUEST
        try:
            ticket = Ticket.objects.get(pk=kwargs['ticket_id'])
        except Ticket.DoesNotExist:
            return rc.NOT_FOUND

        if not request.user.get_profile().has_permission(ticket):
            return rc.FORBIDDEN
        return ticket

    def read(self, request, *args, **kwargs):
        ticket = self.get_ticket(request, kwargs)

        if isinstance(ticket, Ticket):
            return ticket.updates.all().order_by('date_created')
        else:
            return ticket

    def create(self, request, *args, **kwargs):
        ticket = self.get_ticket(request, kwargs)
        if isinstance(ticket, Ticket):
            profile = request.user.get_profile()
            if profile.has_permission(ticket, mode='x'):
                context = _get_default_context(request)
                agent = context['agent']

                record = TicketRecord(sender=profile.get_contact())
                record.record_type = 'manual'
                if ticket.message:
                    record.message = ticket.message
                form = TicketRecordForm(
                    agent, ticket, request.data, instance=record)
                if form.is_valid():
                    record = form.save()
                    record.save()
                    record.set_user_from_request(request)
                    record.about.add(ticket)
                    ticket.set_last_updated()
                    return record
                else:
                    self.status = 400
                    return form.errors
            else:
                return rc.FORBIDDEN
        else:
            return ticket


class TicketHandler(ObjectHandler):

    "Entrypoint for Ticket model."

    model = Ticket
    form = TicketForm

    @staticmethod
    def resource_uri():
        return ('api_services_tickets', ['id'])

    def check_create_permission(self, request, mode):
        request.context = _get_default_context(request)
        request.agent = request.context['agent']
        request.profile = request.user.get_profile()

        request.queue = None
        if 'queue_id' in request.GET:
            try:
                request.queue = TicketQueue.objects.get(
                    pk=request.GET['queue_id'])
            except self.model.DoesNotExist:
                return False
            if not request.user.get_profile().has_permission(request.queue, mode='x'):
                request.queue = None
        return True

    def check_instance_permission(self, request, inst, mode):
        context = _get_default_context(request)
        request.agent = context['agent']
        request.queue = None
        return request.user.get_profile().has_permission(inst, mode=mode)

    def flatten_dict(self, request):
        dct = super(TicketHandler, self).flatten_dict(request)
        dct['agent'] = request.agent
        dct['queue'] = request.queue
        return dct

    def create_instance(self, request, *args, **kwargs):
        ticket = Ticket(creator=request.user.get_profile())
        if not request.agent:
            if request.queue:
                ticket.queue = request.queue
                if request.queue.default_ticket_status:
                    ticket.status = request.queue.default_ticket_status
                else:
                    try:
                        conf = ModuleSetting.get_for_module(
                            'treeio.services', 'default_ticket_status')[0]
                        ticket.status = TicketStatus.objects.get(
                            pk=long(conf.value))
                    except:
                        if 'statuses' in request.context:
                            try:
                                ticket.status = request.context['statuses'][0]
                            except:
                                pass
                ticket.priority = request.queue.default_ticket_priority
                ticket.service = request.queue.default_service
            else:
                try:
                    conf = ModuleSetting.get_for_module(
                        'treeio.services', 'default_ticket_status')[0]
                    ticket.status = TicketStatus.objects.get(
                        pk=long(conf.value))
                except:
                    if 'statuses' in request.context:
                        try:
                            ticket.status = request.context['statuses'][0]
                        except:
                            pass
                try:
                    conf = ModuleSetting.get_for_module(
                        'treeio.services', 'default_ticket_queue')[0]
                    ticket.queue = TicketQueue.objects.get(pk=long(conf.value))
                except:
                    if 'queues' in request.context:
                        try:
                            ticket.queue = request.context['queues'][0]
                        except:
                            pass
            try:
                ticket.caller = request.user.get_profile().get_contact()
            except:
                pass
        return ticket

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

import urllib
import json
from django.test import TestCase
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser
from treeio.core.models import User, Group, Perspective, ModuleSetting, Object
from treeio.services.models import Ticket, TicketQueue, TicketStatus, ServiceAgent, \
    Service, ServiceLevelAgreement
from treeio.identities.models import Contact, ContactType
import datetime


class ServicesViewsTest(TestCase):

    "Services functional tests for api"

    username = "api_test"
    password = "api_password"
    prepared = False
    authentication_headers = {"CONTENT_TYPE": "application/json",
                              "HTTP_AUTHORIZATION": "Basic YXBpX3Rlc3Q6YXBpX3Bhc3N3b3Jk"}
    content_type = 'application/json'
    prepared = False

    def setUp(self):
        "Initial Setup"

        if not self.prepared:
            # Clean up first
            Object.objects.all().delete()
            User.objects.all().delete()

            # Create objects
            try:
                self.group = Group.objects.get(name='test')
            except Group.DoesNotExist:
                Group.objects.all().delete()
                self.group = Group(name='test')
                self.group.save()

            try:
                self.user = DjangoUser.objects.get(username=self.username)
                self.user.set_password(self.password)
                try:
                    self.profile = self.user.get_profile()
                except Exception:
                    User.objects.all().delete()
                    self.user = DjangoUser(username=self.username, password='')
                    self.user.set_password(self.password)
                    self.user.save()
            except DjangoUser.DoesNotExist:
                User.objects.all().delete()
                self.user = DjangoUser(username=self.username, password='')
                self.user.set_password(self.password)
                self.user.save()

            try:
                perspective = Perspective.objects.get(name='default')
            except Perspective.DoesNotExist:
                Perspective.objects.all().delete()
                perspective = Perspective(name='default')
                perspective.set_user(self.user.get_profile())
                perspective.save()

            ModuleSetting.set('default_perspective', perspective.id)

            self.contact_type = ContactType(name='test')
            self.contact_type.set_default_user()
            self.contact_type.save()

            self.contact = Contact(name='test', contact_type=self.contact_type)
            self.contact.set_default_user()
            self.contact.save()

            self.status = TicketStatus(name='TestStatus')
            self.status.set_default_user()
            self.status.save()

            self.queue = TicketQueue(
                name='TestQueue', default_ticket_status=self.status)
            self.queue.set_default_user()
            self.queue.save()

            self.ticket = Ticket(
                name='TestTicket', status=self.status, queue=self.queue)
            self.ticket.set_default_user()
            self.ticket.save()

            self.agent = ServiceAgent(related_user=self.user.get_profile(), available_from=datetime.time(9),
                                      available_to=datetime.time(17))
            self.agent.set_default_user()
            self.agent.save()

            self.service = Service(name='test')
            self.service.set_default_user()
            self.service.save()

            self.sla = ServiceLevelAgreement(name='test', service=self.service,
                                             client=self.contact, provider=self.contact)
            self.sla.set_default_user()
            self.sla.save()

            self.client = Client()

            self.prepared = True

    def test_unauthenticated_access(self):
        "Test index page at /api/services/services"
        response = self.client.get('/api/services/services')
        # Redirects as unauthenticated
        self.assertEquals(response.status_code, 401)

    def test_get_ticket_statuses_list(self):
        """ Test index page api/services/status """
        response = self.client.get(
            path=reverse('api_services_status'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_status(self):
        response = self.client.get(path=reverse('api_services_status', kwargs={
                                   'object_ptr': self.status.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_status(self):
        updates = {'name': 'Api update', 'details': '<p>api details</p>'}
        response = self.client.put(path=reverse('api_services_status', kwargs={'object_ptr': self.status.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_services_list(self):
        """ Test index page api/services """
        response = self.client.get(
            path=reverse('api_services'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_service(self):
        response = self.client.get(path=reverse(
            'api_services', kwargs={'object_ptr': self.service.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_service(self):
        updates = {'name': 'Api update', 'details': '<p>api details</p>'}
        response = self.client.put(path=reverse('api_services', kwargs={'object_ptr': self.service.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_sla_list(self):
        """ Test index page api/services/sla """
        response = self.client.get(
            path=reverse('api_services_sla'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_sla(self):
        response = self.client.get(path=reverse(
            'api_services_sla', kwargs={'object_ptr': self.sla.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_sla(self):
        updates = {'name': 'Api update',
                   'service': self.service.id, 'provider': self.contact.id}
        response = self.client.put(path=reverse('api_services_sla', kwargs={'object_ptr': self.sla.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_agents_list(self):
        """ Test index page api/services/agents """
        response = self.client.get(
            path=reverse('api_services_agents'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_agent(self):
        response = self.client.get(path=reverse('api_services_agents', kwargs={
                                   'object_ptr': self.agent.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_agents(self):
        updates = {"activate": True, "related_user": User.objects.all()[0].id}
        response = self.client.put(path=reverse('api_services_agents', kwargs={'object_ptr': self.agent.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_queues_list(self):
        """ Test index page api/services/queues """
        response = self.client.get(
            path=reverse('api_services_queues'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_queue(self):
        response = self.client.get(path=reverse('api_services_queues', kwargs={
                                   'object_ptr': self.queue.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_queue(self):
        updates = {"name": "Api test", "default_ticket_priority": 5, "ticket_code": "api",
                   "waiting_time": 300, "default_ticket_status": self.status.id}
        response = self.client.put(path=reverse('api_services_queues', kwargs={'object_ptr': self.queue.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_records(self):
        """ Test index page api/services/ticket/records/{ticket number} """
        response = self.client.get(path=reverse('api_services_ticket_records', kwargs={
                                   'ticket_id': self.ticket.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_create_record(self):
        new_record = {"body": "api test message", "notify": False}
        response = self.client.post(path=reverse('api_services_ticket_records', kwargs={'ticket_id': self.ticket.id}),
                                    data=json.dumps(new_record), content_type=self.content_type, **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(new_record['body'], data['body'])

    def test_get_tasks_list(self):
        """ Test index page api/services/tasks """
        response = self.client.get(
            path=reverse('api_services_tickets'), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_get_ticket(self):
        response = self.client.get(path=reverse('api_services_tickets', kwargs={
                                   'object_ptr': self.ticket.id}), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_update_ticket(self):
        updates = {"name": "Api updates",
                   "status": self.status.id, "priority": 3, "urgency": 5}
        response = self.client.put(path=reverse('api_services_tickets', kwargs={'object_ptr': self.ticket.id}),
                                   content_type=self.content_type, data=json.dumps(updates), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

    def test_create_ticket(self):
        new_ticket = {"name": "Api creates",
                      "status": self.status.id, "priority": 3, "urgency": 5}
        response = self.client.post(path=reverse('api_services_tickets',) + '?' + urllib.urlencode({'queue_id': self.queue.id}),
                                    content_type=self.content_type, data=json.dumps(new_ticket), **self.authentication_headers)
        self.assertEquals(response.status_code, 200)

        data = json.loads(response.content)
        self.assertEquals(new_ticket["name"], data["name"])
        self.assertEquals(new_ticket["urgency"], data["urgency"])
        self.assertEquals(new_ticket["priority"], data["priority"])
        self.assertEquals(new_ticket["status"], data["status"]["id"])

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

#-*- coding: utf-8 -*-

import handlers
from django.conf.urls import patterns, url
from treeio.core.api.auth import auth_engine
from treeio.core.api.doc import documentation_view
from treeio.core.api.resource import CsrfExemptResource

ad = {'authentication': auth_engine}

# services resources
ticketStatusResource = CsrfExemptResource(
    handler=handlers.TicketStatusHandler, **ad)
serviceResource = CsrfExemptResource(handler=handlers.ServiceHandler, **ad)
slaResource = CsrfExemptResource(
    handler=handlers.ServiceLevelAgreementHandler, **ad)
agentResource = CsrfExemptResource(handler=handlers.ServiceAgentHandler, **ad)
queueResource = CsrfExemptResource(handler=handlers.TicketQueueHandler, **ad)
ticketResource = CsrfExemptResource(handler=handlers.TicketHandler, **ad)
ticketRecordResource = CsrfExemptResource(
    handler=handlers.TicketRecordHandler, **ad)

urlpatterns = patterns('',
    # Services
    url(r'^doc$', documentation_view, kwargs={
        'module': handlers}, name="api_services_doc"),
    url(r'^services$', serviceResource,
        name="api_services"),
    url(r'^service/(?P<object_ptr>\d+)',
        serviceResource, name="api_services"),
    url(r'^statuses$', ticketStatusResource,
        name="api_services_status"),
    url(r'^status/(?P<object_ptr>\d+)',
        ticketStatusResource, name="api_services_status"),
    url(r'^sla$', slaResource, name="api_services_sla"),
    url(r'^sla/(?P<object_ptr>\d+)',
        slaResource, name="api_services_sla"),
    url(r'^agents$', agentResource,
        name="api_services_agents"),
    url(r'^agent/(?P<object_ptr>\d+)',
        agentResource, name="api_services_agents"),
    url(r'^queues$', queueResource,
        name="api_services_queues"),
    url(r'^queue/(?P<object_ptr>\d+)',
        queueResource, name="api_services_queues"),
    url(r'^tickets$', ticketResource,
        name="api_services_tickets"),
    url(r'^ticket/(?P<object_ptr>\d+)',
        ticketResource, name="api_services_tickets"),
    url(r'^ticket/records/(?P<ticket_id>\d+)',
        ticketRecordResource, name="api_services_ticket_records"),
)

########NEW FILE########
__FILENAME__ = cron
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Services Cron jobs
"""
from treeio.services.models import TicketQueue, TicketRecord
from django.core.urlresolvers import reverse
import datetime


def tickets_escalate():
    "Automatically move tickets to upper queues when no action taken"

    # Collect queues which have waiting time and next queue specified
    queues = TicketQueue.objects.filter(
        waiting_time__isnull=False, next_queue__isnull=False)
    now = datetime.datetime.now()

    for queue in queues:
        if queue.waiting_time and queue.next_queue:
            # Calculate the timeframe outside of which idle tickets should be
            # escalated
            delta = datetime.timedelta(seconds=int(queue.waiting_time))
            timeframe = now - delta

            # Collect tickets ourside the timeframe
            tickets = queue.ticket_set.filter(
                date_created__lt=timeframe, status__active=True)
            for ticket in tickets:
                # Identify if any recent updates have been made on the ticket
                updates = ticket.updates.filter(
                    date_created__gte=timeframe).exists()
                if not updates:
                    ticket.queue = queue.next_queue
                    ticket.auto_notify = False
                    ticket.save()
                    record = TicketRecord(record_type='update')
                    record.format_message = 'Ticket automatically escalated from <a href="' + \
                        reverse('services_queue_view', args=[queue.id]) + \
                        '">' + unicode(queue) + '</a> to <a href="' + \
                        reverse('services_queue_view', args=[queue.next_queue.id]) + \
                        '">' + \
                        unicode(queue.next_queue) + '</a>.'
                    record.author = ticket.creator
                    record.save()
                    record.about.add(ticket)
                    ticket.set_last_updated()

########NEW FILE########
__FILENAME__ = emails
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Service Support Emails
"""
from threading import Thread
from treeio.identities.models import ContactValue
from treeio.core.mail import BaseEmail
from django.utils.translation import ugettext as _


class EmailMessage(Thread):

    "Email Message"

    active = False

    def __init__(self, message, ticket_record):
        Thread.__init__(self)
        self.active = True
        self.message = message
        self.ticket_record = ticket_record

    def run(self):
        "Run"
        self.process_email()

    def send_email(self):
        "Send email"
        self.start()

    def get_original_message_author_email(self):
        "Returns email of the original message author"
        message = self.message
        contact = message.author

        email = ContactValue.objects.filter(
            field__field_type='email', contact=contact)
        if email:
            email = email[0]

        return email

    def get_reply_message_author_email(self):
        "Returns email of the reply message author"
        message = self.message
        contact = message.reply_to.author

        email = ContactValue.objects.filter(
            field__field_type='email', contact=contact)
        if email:
            email = email[0]

        return email

    def process_email(self):
        "Process email"
        message = self.message

        if message.reply_to:
            user = message.reply_to.author.related_user

            original_author = self.get_original_message_author_email()
            reply_author = self.get_reply_message_author_email()

            # if there is no related user and email for message.author
            if not user and original_author:

                if message.stream.outgoing_server_username and reply_author:

                    # don't send email to yourself
                    if message.reply_to.author != message.author:

                        fromaddr = "%s" % original_author
                        toaddr = "%s" % reply_author

                        login = message.stream.outgoing_server_username
                        password = message.stream.outgoing_password

                        body = self.ticket_record.details + '\r\n\r\n'
                        body += _('Your message is received and a ticket is created, ticket reference is [%s]') % (
                            self.ticket_record.ticket.reference)

                        subject = "[%s] %s\r\n\r\n" % (
                            self.ticket_record.ticket.reference, self.ticket_record.ticket.message.title)

                        BaseEmail(message.stream.outgoing_server_name,
                                  login, password, fromaddr, toaddr, subject,
                                  body).process_email()

########NEW FILE########
__FILENAME__ = forms
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Services module forms
"""
from django import forms
from django.db.models import Q
from django.core.urlresolvers import reverse
from django.utils.translation import ugettext as _
from treeio.core.conf import settings
from treeio.identities.models import Contact
from treeio.core.decorators import preprocess_form
from treeio.core.models import Object, ModuleSetting
from treeio.core.rendering import get_template_source
from treeio.messaging.models import Message
from treeio.messaging.emails import EmailMessage
from treeio.services.models import Ticket, TicketRecord, ServiceAgent, TicketStatus, Service
from treeio.services.models import ServiceLevelAgreement, TicketQueue

preprocess_form()


class SettingsForm(forms.Form):

    """ Administration settings form """

    default_ticket_status = forms.ModelChoiceField(
        label='Default Ticket Status', queryset=[])
    default_ticket_queue = forms.ModelChoiceField(
        label='Default Queue', queryset=[])
    send_email_to_caller = forms.ChoiceField(label="Notify Caller By E-mail", choices=((True, _('Yes')),
                                                                                       (False, _('No'))), required=False)
    send_email_template = forms.CharField(
        label="E-mail Template", widget=forms.Textarea, required=False)

    def __init__(self, user, *args, **kwargs):
        "Sets choices and initial value"
        super(SettingsForm, self).__init__(*args, **kwargs)

        # Translate
        self.fields['default_ticket_status'].label = _('Default Ticket Status')
        self.fields['default_ticket_queue'].label = _('Default Queue')
        self.fields['send_email_to_caller'].label = _(
            "Notify Caller By E-mail")
        self.fields['send_email_template'].label = _("E-mail Template")

        self.fields['default_ticket_status'].queryset = Object.filter_permitted(
            user, TicketStatus.objects, mode='x')
        self.fields['default_ticket_queue'].queryset = Object.filter_permitted(
            user, TicketQueue.objects, mode='x')

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.services', 'default_ticket_status')[0]
            default_ticket_status = TicketStatus.objects.get(
                pk=long(conf.value))
            self.fields[
                'default_ticket_status'].initial = default_ticket_status.id
        except Exception:
            pass

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.services', 'default_ticket_queue')[0]
            default_ticket_queue = TicketQueue.objects.get(pk=long(conf.value))
            self.fields[
                'default_ticket_queue'].initial = default_ticket_queue.id
        except Exception:
            pass

        try:
            conf = ModuleSetting.get_for_module(
                'treeio.services', 'send_email_to_caller')[0]
            self.fields['send_email_to_caller'].initial = conf.value
        except:
            self.fields[
                'send_email_to_caller'].initial = settings.HARDTREE_SEND_EMAIL_TO_CALLER

        # notification template
        try:
            conf = ModuleSetting.get_for_module(
                'treeio.services', 'send_email_template')[0]
            self.fields['send_email_template'].initial = conf.value
        except Exception:
            self.fields['send_email_template'].initial = get_template_source(
                'services/emails/notify_caller.html')

    def save(self):
        "Form processor"
        try:
            ModuleSetting.set_for_module('default_ticket_status',
                                         self.cleaned_data[
                                             'default_ticket_status'].id,
                                         'treeio.services')
            ModuleSetting.set_for_module('default_ticket_queue',
                                         self.cleaned_data[
                                             'default_ticket_queue'].id,
                                         'treeio.services')
            ModuleSetting.set_for_module('send_email_to_caller',
                                         self.cleaned_data[
                                             'send_email_to_caller'],
                                         'treeio.services')
            ModuleSetting.set_for_module('send_email_template',
                                         self.cleaned_data[
                                             'send_email_template'],
                                         'treeio.services')
            return True

        except Exception:
            return False


class MassActionForm(forms.Form):

    """ Mass action form for Tickets """

    status = forms.ModelChoiceField(queryset=[], required=False)
    service = forms.ModelChoiceField(queryset=[], required=False)
    queue = forms.ModelChoiceField(queryset=[], required=False)
    delete = forms.ChoiceField(label=_("Delete"), choices=(('', '-----'), ('delete', _('Delete Completely')),
                                                           ('trash', _('Move to Trash'))), required=False)
    instance = None

    def __init__(self, user, *args, **kwargs):
        "Sets allowed values"
        if 'instance' in kwargs:
            self.instance = kwargs['instance']
            del kwargs['instance']

        super(MassActionForm, self).__init__(*args, **kwargs)

        self.fields['status'].queryset = Object.filter_permitted(
            user, TicketStatus.objects, mode='x')
        self.fields['status'].label = _("Status")
        self.fields['service'].queryset = Object.filter_permitted(
            user, Service.objects, mode='x')
        self.fields['service'].label = _("Service")
        self.fields['queue'].queryset = Object.filter_permitted(
            user, TicketQueue.objects, mode='x')
        self.fields['queue'].label = _("Queue")
        self.fields['delete'] = forms.ChoiceField(label=_("Delete"), choices=(('', '-----'),
                                                                              ('delete', _(
                                                                                  'Delete Completely')),
                                                                              ('trash', _('Move to Trash'))), required=False)

    def save(self, *args, **kwargs):
        "Process form"
        if self.instance:
            if self.is_valid():
                if self.cleaned_data['service']:
                    self.instance.service = self.cleaned_data['service']
                if self.cleaned_data['status']:
                    self.instance.status = self.cleaned_data['status']
                if self.cleaned_data['queue']:
                    self.instance.queue = self.cleaned_data['queue']
                self.instance.save()
                if self.cleaned_data['delete']:
                    if self.cleaned_data['delete'] == 'delete':
                        self.instance.delete()
                    if self.cleaned_data['delete'] == 'trash':
                        self.instance.trash = True
                        self.instance.save()


class TicketForm(forms.ModelForm):

    """ Ticket form """
    name = forms.CharField(
        label='Title', widget=forms.TextInput(attrs={'size': '50'}))

    def __init__(self, user, queue, agent, *args, **kwargs):
        "Sets allowed values"
        super(TicketForm, self).__init__(*args, **kwargs)

        # Filter allowed selections for TicketForm
        self.fields['reference'].required = False
        self.fields['reference'].label = _("Reference")
        self.fields['caller'].queryset = Object.filter_permitted(
            user, Contact.objects)
        self.fields['caller'].widget.attrs.update({'class': 'autocomplete',
                                                   'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['caller'].widget.attrs.update(
            {'popuplink': reverse('identities_contact_add')})
        self.fields['caller'].label = _("Caller")

        self.fields['assigned'].queryset = Object.filter_permitted(
            user, ServiceAgent.objects, mode='x')
        self.fields['assigned'].label = _("Assigned to")
        self.fields['assigned'].help_text = ""
        self.fields['assigned'].widget.attrs.update({'class': 'multicomplete',
                                                     'callback': reverse('services_ajax_agent_lookup')})
        self.fields['assigned'].widget.attrs.update(
            {'popuplink': reverse('services_agent_add')})

        self.fields['status'].queryset = Object.filter_permitted(
            user, TicketStatus.objects, mode='x')
        self.fields['status'].label = _("Status")
        self.fields['service'].queryset = Object.filter_permitted(
            user, Service.objects, mode='x')
        self.fields['service'].label = _("Service")
        self.fields['queue'].queryset = Object.filter_permitted(
            user, TicketQueue.objects, mode='x')
        self.fields['queue'].label = _("Queue")
        self.fields['sla'].queryset = Object.filter_permitted(
            user, ServiceLevelAgreement.objects, mode='x')
        self.fields['sla'].label = _("Service Level Agreement")

        self.fields['resolution'].label = _("Resolution")

        # Set default values if not editing
        if not 'instance' in kwargs:
            try:
                self.fields['caller'].initial = user.get_contact().id
            except Exception:
                pass

            if queue:
                self.fields['queue'].initial = queue.id
                if queue.default_ticket_status and queue.default_ticket_status in self.fields['status'].queryset:
                    self.fields[
                        'status'].initial = queue.default_ticket_status_id
                else:
                    try:
                        conf = ModuleSetting.get_for_module(
                            'treeio.services', 'default_ticket_status')[0]
                        self.fields['status'].initial = long(conf.value)
                    except:
                        pass

                if queue.default_ticket_priority:
                    self.fields[
                        'priority'].initial = queue.default_ticket_priority
                if queue.default_service:
                    self.fields['service'].initial = queue.default_service_id
                    try:
                        default_sla = ServiceLevelAgreement.objects.get(
                            service=queue.default_service, default=True)
                        if default_sla:
                            self.fields['sla'].initial = default_sla.id
                    except:
                        pass
            else:
                try:
                    conf = ModuleSetting.get_for_module(
                        'treeio.services', 'default_ticket_status')[0]
                    self.fields['status'].initial = long(conf.value)
                except:
                    pass
                try:
                    conf = ModuleSetting.get_for_module(
                        'treeio.services', 'default_ticket_queue')[0]
                    self.fields['queue'].initial = long(conf.value)
                except:
                    pass

        self.fields['name'].label = _("Name")
        self.fields['name'].widget.attrs.update({'class': 'duplicates',
                                                 'callback': reverse('services_ajax_ticket_lookup')})
        self.fields['priority'].label = _("Priority")
        self.fields['priority'].choices = ((5, _('Highest')), (
            4, _('High')), (3, _('Normal')), (2, _('Low')), (1, _('Lowest')))
        self.fields['urgency'].label = _("Urgency")
        self.fields['urgency'].choices = ((5, _('Highest')), (
            4, _('High')), (3, _('Normal')), (2, _('Low')), (1, _('Lowest')))
        self.fields['details'].label = _("Details")

        if not agent:
            del self.fields['caller']
            del self.fields['reference']
            del self.fields['priority']
            del self.fields['status']
            del self.fields['queue']
            del self.fields['sla']
            del self.fields['assigned']
            del self.fields['resolution']

    class Meta:

        "Ticket specified as model"
        model = Ticket
        fields = ('name', 'reference', 'caller', 'assigned', 'urgency', 'priority',
                  'status', 'service', 'sla', 'queue', 'details', 'resolution')


class TicketStatusForm(forms.ModelForm):

    """ TicketStatus form """
    name = forms.CharField(widget=forms.TextInput(attrs={'size': '30'}))

    def __init__(self, user, *args, **kwargs):
        "Sets allowed values"
        super(TicketStatusForm, self).__init__(*args, **kwargs)

    class Meta:

        "TicketStatus specified as model"
        model = TicketStatus
        fields = ('name', 'active', 'hidden', 'details')


class TicketRecordForm(forms.ModelForm):

    """ TicketRecord form """

    def __init__(self, agent, ticket, *args, **kwargs):
        super(TicketRecordForm, self).__init__(*args, **kwargs)

        self.ticket = ticket

        self.fields['body'].label = _("body")
        self.fields['body'].required = True
        self.fields['notify'].label = _("Notify caller")
        self.fields['resolution'] = forms.BooleanField(
            label=_("Set as Resolution"), required=False)

        if not agent:
            del self.fields['notify']
            del self.fields['resolution']

    def save(self, *args, **kwargs):
        "Set Resolution if selected"
        instance = super(TicketRecordForm, self).save(*args, **kwargs)
        ticket = self.ticket
        if 'resolution' in self.cleaned_data and self.cleaned_data['resolution']:
            ticket.resolution = self.cleaned_data['body']
            ticket.save()

        # Send update if notify clicked
        if 'notify' in self.cleaned_data and self.cleaned_data['notify'] and ticket.caller:
            toaddr = ticket.caller.get_email()
            if ticket.message or toaddr:
                reply = Message()
                reply.author = instance.sender
                reply.body = instance.body
                reply.auto_notify = False
                if ticket.message:
                    reply.stream = ticket.message.stream
                    reply.reply_to = ticket.message
                else:
                    reply.stream = ticket.queue.message_stream if ticket.queue else None
                    reply.title = "[#%s] %s" % (ticket.reference, ticket.name)
                reply.save()
                if not ticket.message:
                    ticket.message = reply
                reply.recipients.add(ticket.caller)
                email = EmailMessage(reply)
                email.send_email()

        return instance

    class Meta:

        "TicketRecord specified as model"
        model = TicketRecord
        fields = ['body', 'notify']


class QueueForm(forms.ModelForm):

    """ Queue form """
    name = forms.CharField(widget=forms.TextInput(attrs={'size': '50'}))

    def __init__(self, user, *args, **kwargs):
        "Sets allowed values"
        super(QueueForm, self).__init__(*args, **kwargs)

        manager = TicketQueue.objects
        if 'instance' in kwargs:
            instance = kwargs['instance']
            manager = manager.exclude(Q(parent=instance) & Q(pk=instance.id))
        self.fields['parent'].queryset = Object.filter_permitted(
            user, manager, mode='x')

        self.fields['default_service'].queryset = Object.filter_permitted(
            user, Service.objects, mode='x')

        self.fields['waiting_time'].help_text = "seconds"

        self.fields['name'].label = _("Name")
        self.fields['active'].label = _("Active")
        self.fields['parent'].label = _("Parent")
        self.fields['default_ticket_status'].label = _("Default ticket status")
        self.fields['default_ticket_priority'].label = _(
            "Default ticket priority")
        self.fields['default_service'].label = _("Default service")
        self.fields['waiting_time'].label = _("Waiting time")
        self.fields['next_queue'].queryset = Object.filter_permitted(
            user, TicketQueue.objects, mode='x')
        self.fields['next_queue'].label = _("Next queue")
        self.fields['ticket_code'].label = _("Ticket code")
        self.fields['message_stream'].label = _("Message stream")
        self.fields['message_stream'].widget.attrs.update(
            {'popuplink': reverse('messaging_stream_add')})
        self.fields['details'].label = _("Details")

    class Meta:

        "TicketQueue specified as model"
        model = TicketQueue
        fields = ('name', 'active', 'parent', 'default_ticket_status',
                  'default_ticket_priority', 'default_service', 'waiting_time',
                  'next_queue', 'ticket_code', 'message_stream', 'details')


class ServiceForm(forms.ModelForm):

    """ Service form """
    name = forms.CharField(widget=forms.TextInput(attrs={'size': '50'}))

    def __init__(self, user, *args, **kwargs):
        "Sets allowed values"
        super(ServiceForm, self).__init__(*args, **kwargs)

        manager = Service.objects
        if 'instance' in kwargs:
            instance = kwargs['instance']
            manager = manager.exclude(Q(parent=instance) & Q(pk=instance.id))
        self.fields['parent'].queryset = Object.filter_permitted(
            user, manager, mode='x')

        self.fields['name'].label = _("Name")
        self.fields['parent'].label = _("Parent")
        self.fields['details'].label = _("Details")

    class Meta:

        "Service specified as model"
        model = Service
        fields = ('name', 'parent', 'details')


class ServiceLevelAgreementForm(forms.ModelForm):

    """ ServiceLevelAgreement form """
    name = forms.CharField(widget=forms.TextInput(attrs={'size': '50'}))

    def __init__(self, user, *args, **kwargs):
        "Sets allowed values"
        super(ServiceLevelAgreementForm, self).__init__(*args, **kwargs)

        self.fields['name'].label = _("Name")

        self.fields['response_time'].help_text = 'minutes'
        self.fields['response_time'].widget.attrs.update({'size': 10})
        self.fields['response_time'].label = _("Response time")

        self.fields['uptime_rate'].help_text = 'percent'
        self.fields['uptime_rate'].widget.attrs.update({'size': 5})
        self.fields['uptime_rate'].label = _("Uptime rate")

        self.fields['service'].queryset = Object.filter_permitted(
            user, Service.objects, mode='x')
        self.fields['service'].label = _("Service")

        self.fields['client'].queryset = Object.filter_permitted(
            user, Contact.objects, mode='x')
        self.fields['client'].widget.attrs.update({'class': 'autocomplete',
                                                   'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['client'].widget.attrs.update(
            {'popuplink': reverse('identities_contact_add')})
        self.fields['client'].label = _("Client")

        self.fields['provider'].queryset = Object.filter_permitted(
            user, Contact.objects, mode='x')
        self.fields['provider'].widget.attrs.update({'class': 'autocomplete',
                                                     'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['provider'].widget.attrs.update(
            {'popuplink': reverse('identities_contact_add')})
        self.fields['provider'].label = _("Provider")

        self.fields['available_from'].initial = "09:00"
        self.fields['available_from'].widget.attrs.update({'size': 10})
        self.fields['available_from'].label = _("Available from")
        self.fields['available_to'].initial = "18:00"
        self.fields['available_to'].widget.attrs.update({'size': 10})
        self.fields['available_to'].label = _("Available to")

        contact = user.default_group.get_contact()
        if contact:
            self.fields['provider'].initial = contact.id

    class Meta:

        "ServiceLevelAgreement specified as model"
        model = ServiceLevelAgreement
        fields = ('name', 'service', 'client', 'provider', 'response_time', 'uptime_rate', 'available_from',
                  'available_to')


class AgentForm(forms.ModelForm):

    """ Agent form """

    def __init__(self, user, *args, **kwargs):
        "Sets allowed values"
        super(AgentForm, self).__init__(*args, **kwargs)

        self.fields['related_user'].label = _("Related user")
        self.fields['related_user'].widget.attrs.update({'class': 'autocomplete',
                                                         'callback': reverse('identities_ajax_user_lookup')})
        self.fields['active'].label = _("Active")
        self.fields['occupied'].label = _("Occupied")
        self.fields['available_from'].label = _("Available from")
        self.fields['available_to'].label = _("Available to")

    class Meta:

        "Agent specified as model"
        model = ServiceAgent
        fields = ('related_user', 'active', 'occupied',
                  'available_from', 'available_to')


class FilterForm(forms.ModelForm):

    """ Ticket Filters definition """

    def __init__(self, user, skip=[], *args, **kwargs):
        "Sets allowed values"
        super(FilterForm, self).__init__(*args, **kwargs)

        if 'caller' in skip:
            del self.fields['caller']
        else:
            self.fields['caller'].queryset = Object.filter_permitted(
                user, Contact.objects, mode='x')
            self.fields['caller'].widget.attrs.update({'class': 'autocomplete',
                                                       'callback': reverse('identities_ajax_contact_lookup')})
            self.fields['caller'].label = _("Caller")

        if 'status' in skip:
            del self.fields['status']
        else:
            self.fields['status'].queryset = Object.filter_permitted(
                user, TicketStatus.objects, mode='x')
            self.fields['status'].label = _("Status")

        self.fields['service'].queryset = Object.filter_permitted(
            user, Service.objects, mode='x')
        self.fields['service'].label = _("Service")

        self.fields['sla'].queryset = Object.filter_permitted(
            user, ServiceLevelAgreement.objects, mode='x')
        self.fields['sla'].label = _("SLA")

        if 'queue' in skip:
            del self.fields['queue']
        else:
            self.fields['queue'].queryset = Object.filter_permitted(
                user, TicketQueue.objects, mode='x')
            self.fields['queue'].label = _("Queue")

        if 'assigned' in skip:
            del self.fields['assigned']
        else:
            self.fields['assigned'].queryset = Object.filter_permitted(
                user, ServiceAgent.objects, mode='x')
            self.fields['assigned'].widget.attrs.update({'class': 'multicomplete',
                                                         'callback': reverse('services_ajax_agent_lookup')})
            self.fields['assigned'].label = _("Assigned to")
            self.fields['assigned'].help_text = ""

    class Meta:

        "Ticket specified as model"
        model = Ticket
        fields = ('caller', 'status', 'service', 'sla', 'queue', 'assigned')


class SLAFilterForm(forms.ModelForm):

    """ SLA Filters definition """

    def __init__(self, user, skip=[], *args, **kwargs):
        "Sets allowed values"
        super(SLAFilterForm, self).__init__(*args, **kwargs)

        self.fields['client'].queryset = Object.filter_permitted(
            user, Contact.objects, mode='x')
        self.fields['client'].required = False
        self.fields['client'].widget.attrs.update({'class': 'autocomplete',
                                                   'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['client'].label = _("Client")

        self.fields['provider'].queryset = Object.filter_permitted(
            user, Contact.objects, mode='x')
        self.fields['provider'].required = False
        self.fields['provider'].widget.attrs.update({'class': 'autocomplete',
                                                     'callback': reverse('identities_ajax_contact_lookup')})
        self.fields['provider'].label = _("Provider")

        self.fields['service'].queryset = Object.filter_permitted(
            user, Service.objects, mode='x')
        self.fields['service'].required = False
        self.fields['service'].label = _("Service")

    class Meta:

        "ServiceLevelAgreement specified as model"
        model = ServiceLevelAgreement
        fields = ('service', 'client', 'provider')


class AgentFilterForm(forms.ModelForm):

    """ Agent Filters definition """

    def __init__(self, user, skip=[], *args, **kwargs):
        "Sets allowed values"
        super(AgentFilterForm, self).__init__(*args, **kwargs)

        self.fields['related_user'].required = True
        self.fields['related_user'].label = _("Related user")

    class Meta:

        "ServiceAgent specified as model"
        model = ServiceAgent
        fields = ['related_user']

########NEW FILE########
__FILENAME__ = hmodule
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Service Support: Hardtree module definition
"""

PROPERTIES = {
    'title': 'Service Support',
    'details': 'Service delivery and support management',
    'url': '/services/',
    'system': False,
    'type': 'major'
}

URL_PATTERNS = [
    '^/services/',
]

#
# Cron
#

from treeio.services.cron import tickets_escalate

CRON = [tickets_escalate]

########NEW FILE########
__FILENAME__ = identities
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Handle objects from this module relevant to a Contact or a User
"""
from treeio.core.models import Object
from treeio.services.models import Ticket
from treeio.services.templatetags.services import services_ticket_list

CONTACT_OBJECTS = {}
CONTACT_OBJECTS['ticket_set'] = {'label': 'Tickets',
                                 'objects': [],
                                 'templatetag': services_ticket_list}

CONTACT_OBJECTS['client_sla'] = {'label': 'Service Level Agreements',
                                 'objects': [],
                                 'templatetag': None}

CONTACT_OBJECTS['provider_sla'] = {'label': 'Provided SLAs',
                                   'objects': [],
                                   'templatetag': None}

USER_OBJECTS = {}
USER_OBJECTS['serviceagent_set'] = {'label': 'Assigned Tickets',
                                    'objects': [],
                                    'templatetag': services_ticket_list}


def get_contact_objects(current_user, contact):
    """
    Returns a dictionary with keys specified as contact attributes
    and values as dictionaries with labels and set of relevant objects.
    """

    objects = dict(CONTACT_OBJECTS)

    for key in objects:
        if hasattr(contact, key):
            manager = getattr(contact, key)
            try:
                manager = manager.filter(status__hidden=False)
            except:
                pass
            objects[key]['objects'] = Object.filter_permitted(
                current_user, manager)

    return objects


def get_user_objects(current_user, user):
    """
    Returns a dictionary with keys specified as contact attributes
    and values as dictionaries with labels and set of relevant objects.
    """

    objects = dict(USER_OBJECTS)

    for key in objects:
        if hasattr(user, key):
            if key == 'serviceagent_set':
                manager = Ticket.objects.filter(assigned__related_user=user)
            else:
                manager = getattr(user, key)
            if hasattr(manager, 'status'):
                manager = manager.filter(status__hidden=False)
            objects[key]['objects'] = Object.filter_permitted(
                current_user, manager)

    return objects

########NEW FILE########
__FILENAME__ = 0001_initial
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding model 'TicketStatus'
        db.create_table('services_ticketstatus', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('active', self.gf('django.db.models.fields.BooleanField')
             (default=True)),
            ('hidden', self.gf('django.db.models.fields.BooleanField')
             (default=False)),
        ))
        db.send_create_signal('services', ['TicketStatus'])

        # Adding model 'Service'
        db.create_table('services_service', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('parent', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='child_set', null=True, to=orm['services.Service'])),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('services', ['Service'])

        # Adding model 'ServiceLevelAgreement'
        db.create_table('services_servicelevelagreement', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('service', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['services.Service'])),
            ('default', self.gf('django.db.models.fields.BooleanField')
             (default=False)),
            ('response_time', self.gf('django.db.models.fields.PositiveIntegerField')(
                null=True, blank=True)),
            ('uptime_rate', self.gf('django.db.models.fields.FloatField')
             (null=True, blank=True)),
            ('available_from', self.gf('django.db.models.fields.TimeField')
             (null=True, blank=True)),
            ('available_to', self.gf('django.db.models.fields.TimeField')
             (null=True, blank=True)),
            ('client', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='client_sla', null=True, to=orm['identities.Contact'])),
            ('provider', self.gf('django.db.models.fields.related.ForeignKey')
             (related_name='provider_sla', to=orm['identities.Contact'])),
        ))
        db.send_create_signal('services', ['ServiceLevelAgreement'])

        # Adding model 'ServiceAgent'
        db.create_table('services_serviceagent', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('related_user', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['core.User'])),
            ('active', self.gf('django.db.models.fields.BooleanField')
             (default=True)),
            ('occupied', self.gf(
                'django.db.models.fields.BooleanField')(default=False)),
            ('available_from', self.gf('django.db.models.fields.TimeField')
             (null=True, blank=True)),
            ('available_to', self.gf('django.db.models.fields.TimeField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('services', ['ServiceAgent'])

        # Adding model 'TicketQueue'
        db.create_table('services_ticketqueue', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('active', self.gf('django.db.models.fields.BooleanField')
             (default=True)),
            ('parent', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='child_set', null=True, to=orm['services.TicketQueue'])),
            ('default_ticket_status', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['services.TicketStatus'], null=True, blank=True)),
            ('default_ticket_priority', self.gf(
                'django.db.models.fields.IntegerField')(default=3)),
            ('default_service', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['services.Service'], null=True, blank=True)),
            ('waiting_time', self.gf('django.db.models.fields.PositiveIntegerField')(
                null=True, blank=True)),
            ('next_queue', self.gf('django.db.models.fields.related.ForeignKey')(
                blank=True, related_name='previous_set', null=True, to=orm['services.TicketQueue'])),
            ('ticket_code', self.gf('django.db.models.fields.CharField')
             (default='', max_length=8, null=True, blank=True)),
            ('message_stream', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['messaging.MessageStream'], null=True, blank=True)),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('services', ['TicketQueue'])

        # Adding model 'Ticket'
        db.create_table('services_ticket', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('reference', self.gf(
                'django.db.models.fields.CharField')(max_length=256)),
            ('name', self.gf('django.db.models.fields.CharField')
             (max_length=256)),
            ('caller', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['identities.Contact'], null=True, blank=True)),
            ('urgency', self.gf(
                'django.db.models.fields.IntegerField')(default=3)),
            ('priority', self.gf(
                'django.db.models.fields.IntegerField')(default=3)),
            ('status', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['services.TicketStatus'])),
            ('service', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['services.Service'], null=True, blank=True)),
            ('sla', self.gf('django.db.models.fields.related.ForeignKey')(
                to=orm['services.ServiceLevelAgreement'], null=True, blank=True)),
            ('queue', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['services.TicketQueue'], null=True, blank=True)),
            ('message', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['messaging.Message'], null=True, blank=True)),
            ('details', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
            ('resolution', self.gf('django.db.models.fields.TextField')
             (null=True, blank=True)),
        ))
        db.send_create_signal('services', ['Ticket'])

        # Adding M2M table for field assigned on 'Ticket'
        db.create_table('services_ticket_assigned', (
            ('id', models.AutoField(
                verbose_name='ID', primary_key=True, auto_created=True)),
            ('ticket', models.ForeignKey(orm['services.ticket'], null=False)),
            ('serviceagent', models.ForeignKey(
                orm['services.serviceagent'], null=False))
        ))
        db.create_unique(
            'services_ticket_assigned', ['ticket_id', 'serviceagent_id'])

        # Adding model 'TicketRecord'
        db.create_table('services_ticketrecord', (
            ('object_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
                to=orm['core.Object'], unique=True, primary_key=True)),
            ('ticket', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['services.Ticket'])),
            ('record_type', self.gf(
                'django.db.models.fields.CharField')(max_length=256)),
            ('message', self.gf('django.db.models.fields.related.ForeignKey')
             (to=orm['messaging.Message'], null=True, blank=True)),
            ('details', self.gf('django.db.models.fields.TextField')()),
            ('notify', self.gf('django.db.models.fields.BooleanField')
             (default=False)),
        ))
        db.send_create_signal('services', ['TicketRecord'])

    def backwards(self, orm):

        # Deleting model 'TicketStatus'
        db.delete_table('services_ticketstatus')

        # Deleting model 'Service'
        db.delete_table('services_service')

        # Deleting model 'ServiceLevelAgreement'
        db.delete_table('services_servicelevelagreement')

        # Deleting model 'ServiceAgent'
        db.delete_table('services_serviceagent')

        # Deleting model 'TicketQueue'
        db.delete_table('services_ticketqueue')

        # Deleting model 'Ticket'
        db.delete_table('services_ticket')

        # Removing M2M table for field assigned on 'Ticket'
        db.delete_table('services_ticket_assigned')

        # Deleting model 'TicketRecord'
        db.delete_table('services_ticketrecord')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'everybody_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'everybody_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']"}),
            'group_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'group_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"}),
            'user_execute': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_read': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user_write': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'messaging.emailbox': {
            'Meta': {'ordering': "['last_updated']", 'object_name': 'EmailBox', '_ormbases': ['core.Object']},
            'email_name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'email_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'last_checked': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'server_password': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'server_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'server_username': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'messaging.message': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'Message', '_ormbases': ['core.Object']},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'read_by': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'read_by_user'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'reply_to': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['messaging.Message']"}),
            'stream': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'stream'", 'to': "orm['messaging.MessageStream']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'messaging.messagestream': {
            'Meta': {'ordering': "['name']", 'object_name': 'MessageStream', '_ormbases': ['core.Object']},
            'email_incoming': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'incoming'", 'null': 'True', 'to': "orm['messaging.EmailBox']"}),
            'email_outgoing': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'outgoing'", 'null': 'True', 'to': "orm['messaging.EmailBox']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        },
        'services.service': {
            'Meta': {'ordering': "['name']", 'object_name': 'Service', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['services.Service']"})
        },
        'services.serviceagent': {
            'Meta': {'ordering': "('related_user', '-active', 'occupied')", 'object_name': 'ServiceAgent', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'available_from': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'available_to': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'occupied': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"})
        },
        'services.servicelevelagreement': {
            'Meta': {'ordering': "('name', 'client')", 'object_name': 'ServiceLevelAgreement', '_ormbases': ['core.Object']},
            'available_from': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'available_to': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'client': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'client_sla'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'default': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'provider': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'provider_sla'", 'to': "orm['identities.Contact']"}),
            'response_time': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'service': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.Service']"}),
            'uptime_rate': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'})
        },
        'services.ticket': {
            'Meta': {'ordering': "('-priority', 'reference')", 'object_name': 'Ticket', '_ormbases': ['core.Object']},
            'assigned': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['services.ServiceAgent']", 'null': 'True', 'blank': 'True'}),
            'caller': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']", 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['messaging.Message']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'priority': ('django.db.models.fields.IntegerField', [], {'default': '3'}),
            'queue': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.TicketQueue']", 'null': 'True', 'blank': 'True'}),
            'reference': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'resolution': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'service': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.Service']", 'null': 'True', 'blank': 'True'}),
            'sla': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.ServiceLevelAgreement']", 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.TicketStatus']"}),
            'urgency': ('django.db.models.fields.IntegerField', [], {'default': '3'})
        },
        'services.ticketqueue': {
            'Meta': {'ordering': "('name', '-active', 'ticket_code')", 'object_name': 'TicketQueue', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'default_service': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.Service']", 'null': 'True', 'blank': 'True'}),
            'default_ticket_priority': ('django.db.models.fields.IntegerField', [], {'default': '3'}),
            'default_ticket_status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.TicketStatus']", 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'message_stream': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['messaging.MessageStream']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'next_queue': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'previous_set'", 'null': 'True', 'to': "orm['services.TicketQueue']"}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['services.TicketQueue']"}),
            'ticket_code': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '8', 'null': 'True', 'blank': 'True'}),
            'waiting_time': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'})
        },
        'services.ticketrecord': {
            'Meta': {'ordering': "['ticket']", 'object_name': 'TicketRecord', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['messaging.Message']", 'null': 'True', 'blank': 'True'}),
            'notify': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'record_type': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'ticket': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.Ticket']"})
        },
        'services.ticketstatus': {
            'Meta': {'ordering': "('hidden', '-active', 'name')", 'object_name': 'TicketStatus', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        }
    }

    complete_apps = ['services']

########NEW FILE########
__FILENAME__ = 0002_auto__add_field_ticketrecord_updaterecord_ptr
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Adding field 'TicketRecord.updaterecord_ptr'
        db.add_column('services_ticketrecord', 'updaterecord_ptr', self.gf('django.db.models.fields.related.OneToOneField')(
            to=orm['core.UpdateRecord'], unique=True, null=True, blank=True), keep_default=False)

    def backwards(self, orm):

        # Deleting field 'TicketRecord.updaterecord_ptr'
        db.delete_column('services_ticketrecord', 'updaterecord_ptr_id')

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.updaterecord': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'UpdateRecord'},
            'about': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Object']"}),
            'author': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'sent_updates'", 'null': 'True', 'to': "orm['core.User']"}),
            'body': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_on_updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'format_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'format_strings': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'recipients': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'received_updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'record_type': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'sent_updates'", 'null': 'True', 'to': "orm['core.Object']"}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.AccessEntity']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.AccessEntity']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'messaging.emailbox': {
            'Meta': {'ordering': "['last_updated']", 'object_name': 'EmailBox', '_ormbases': ['core.Object']},
            'email_name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'email_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'last_checked': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'server_password': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'server_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'server_username': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'messaging.mailinglist': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'MailingList', '_ormbases': ['core.Object']},
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'from_contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'from_contact_set'", 'to': "orm['identities.Contact']"}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'members_set'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['identities.Contact']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'opt_in': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['messaging.Template']", 'null': 'True', 'blank': 'True'})
        },
        'messaging.message': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'Message', '_ormbases': ['core.Object']},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'mlist': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'mlist'", 'null': 'True', 'to': "orm['messaging.MailingList']"}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'read_by': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'read_by_user'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'recipients': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'message_recipients'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['identities.Contact']"}),
            'reply_to': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['messaging.Message']"}),
            'stream': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'stream'", 'null': 'True', 'to': "orm['messaging.MessageStream']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'messaging.messagestream': {
            'Meta': {'ordering': "['name', 'last_updated']", 'object_name': 'MessageStream', '_ormbases': ['core.Object']},
            'email_incoming': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'incoming'", 'null': 'True', 'to': "orm['messaging.EmailBox']"}),
            'email_outgoing': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'outgoing'", 'null': 'True', 'to': "orm['messaging.EmailBox']"}),
            'faulty': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'incoming_password': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'incoming_server_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'incoming_server_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'incoming_server_username': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'last_checked': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'outgoing_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_password': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_server_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_server_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_server_username': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'messaging.template': {
            'Meta': {'object_name': 'Template', '_ormbases': ['core.Object']},
            'body': ('django.db.models.fields.TextField', [], {}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'services.service': {
            'Meta': {'ordering': "['name']", 'object_name': 'Service', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['services.Service']"})
        },
        'services.serviceagent': {
            'Meta': {'ordering': "('related_user', '-active', 'occupied')", 'object_name': 'ServiceAgent', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'available_from': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'available_to': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'occupied': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"})
        },
        'services.servicelevelagreement': {
            'Meta': {'ordering': "('name', 'client')", 'object_name': 'ServiceLevelAgreement', '_ormbases': ['core.Object']},
            'available_from': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'available_to': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'client': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'client_sla'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'default': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'provider': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'provider_sla'", 'to': "orm['identities.Contact']"}),
            'response_time': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'service': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.Service']"}),
            'uptime_rate': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'})
        },
        'services.ticket': {
            'Meta': {'ordering': "('-priority', 'reference')", 'object_name': 'Ticket', '_ormbases': ['core.Object']},
            'assigned': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['services.ServiceAgent']", 'null': 'True', 'blank': 'True'}),
            'caller': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']", 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['messaging.Message']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'priority': ('django.db.models.fields.IntegerField', [], {'default': '3'}),
            'queue': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.TicketQueue']", 'null': 'True', 'blank': 'True'}),
            'reference': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'resolution': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'service': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.Service']", 'null': 'True', 'blank': 'True'}),
            'sla': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.ServiceLevelAgreement']", 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.TicketStatus']"}),
            'urgency': ('django.db.models.fields.IntegerField', [], {'default': '3'})
        },
        'services.ticketqueue': {
            'Meta': {'ordering': "('name', '-active', 'ticket_code')", 'object_name': 'TicketQueue', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'default_service': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.Service']", 'null': 'True', 'blank': 'True'}),
            'default_ticket_priority': ('django.db.models.fields.IntegerField', [], {'default': '3'}),
            'default_ticket_status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.TicketStatus']", 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'message_stream': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['messaging.MessageStream']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'next_queue': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'previous_set'", 'null': 'True', 'to': "orm['services.TicketQueue']"}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['services.TicketQueue']"}),
            'ticket_code': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '8', 'null': 'True', 'blank': 'True'}),
            'waiting_time': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'})
        },
        'services.ticketrecord': {
            'Meta': {'ordering': "['ticket']", 'object_name': 'TicketRecord', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['messaging.Message']", 'null': 'True', 'blank': 'True'}),
            'notify': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'record_type': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'ticket': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.Ticket']"}),
            'updaterecord_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.UpdateRecord']", 'unique': 'True', 'null': 'True', 'blank': 'True'})
        },
        'services.ticketstatus': {
            'Meta': {'ordering': "('hidden', '-active', 'name')", 'object_name': 'TicketStatus', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        }
    }

    complete_apps = ['services']

########NEW FILE########
__FILENAME__ = 0003_updaterecords
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models


class Migration(DataMigration):

    def forwards(self, orm):
        "Migrate the UpdateRecords"
        for record in orm['services.TicketRecord'].objects.all():
            update = orm['core.UpdateRecord'].objects.create()
            update.author = record.creator
            if record.record_type == 'manual':
                update.record_type = 'manual'
            else:
                update.record_type = 'update'
            update.body = record.details
            update.date_created = record.date_created
            update.save()
            update.about.add(record.ticket)

    def backwards(self, orm):
        raise RuntimeError("Cannot reverse this migration.")

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.updaterecord': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'UpdateRecord'},
            'about': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Object']"}),
            'author': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'sent_updates'", 'null': 'True', 'to': "orm['core.User']"}),
            'body': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_on_updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'format_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'format_strings': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'recipients': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'received_updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'record_type': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'sent_updates'", 'null': 'True', 'to': "orm['core.Object']"}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User'},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'null': 'True', 'blank': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.AccessEntity']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.AccessEntity']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'messaging.emailbox': {
            'Meta': {'ordering': "['last_updated']", 'object_name': 'EmailBox', '_ormbases': ['core.Object']},
            'email_name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'email_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'last_checked': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'server_password': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'server_type': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'server_username': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'messaging.mailinglist': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'MailingList', '_ormbases': ['core.Object']},
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'from_contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'from_contact_set'", 'to': "orm['identities.Contact']"}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'members_set'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['identities.Contact']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'opt_in': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['messaging.Template']", 'null': 'True', 'blank': 'True'})
        },
        'messaging.message': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'Message', '_ormbases': ['core.Object']},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'mlist': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'mlist'", 'null': 'True', 'to': "orm['messaging.MailingList']"}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'read_by': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'read_by_user'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'recipients': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'message_recipients'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['identities.Contact']"}),
            'reply_to': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['messaging.Message']"}),
            'stream': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'stream'", 'null': 'True', 'to': "orm['messaging.MessageStream']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'messaging.messagestream': {
            'Meta': {'ordering': "['name', 'last_updated']", 'object_name': 'MessageStream', '_ormbases': ['core.Object']},
            'email_incoming': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'incoming'", 'null': 'True', 'to': "orm['messaging.EmailBox']"}),
            'email_outgoing': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'outgoing'", 'null': 'True', 'to': "orm['messaging.EmailBox']"}),
            'faulty': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'incoming_password': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'incoming_server_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'incoming_server_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'incoming_server_username': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'last_checked': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'outgoing_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_password': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_server_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_server_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_server_username': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'messaging.template': {
            'Meta': {'object_name': 'Template', '_ormbases': ['core.Object']},
            'body': ('django.db.models.fields.TextField', [], {}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'services.service': {
            'Meta': {'ordering': "['name']", 'object_name': 'Service', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['services.Service']"})
        },
        'services.serviceagent': {
            'Meta': {'ordering': "('related_user', '-active', 'occupied')", 'object_name': 'ServiceAgent', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'available_from': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'available_to': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'occupied': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"})
        },
        'services.servicelevelagreement': {
            'Meta': {'ordering': "('name', 'client')", 'object_name': 'ServiceLevelAgreement', '_ormbases': ['core.Object']},
            'available_from': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'available_to': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'client': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'client_sla'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'default': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'provider': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'provider_sla'", 'to': "orm['identities.Contact']"}),
            'response_time': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'service': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.Service']"}),
            'uptime_rate': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'})
        },
        'services.ticket': {
            'Meta': {'ordering': "('-priority', 'reference')", 'object_name': 'Ticket', '_ormbases': ['core.Object']},
            'assigned': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['services.ServiceAgent']", 'null': 'True', 'blank': 'True'}),
            'caller': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']", 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['messaging.Message']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'priority': ('django.db.models.fields.IntegerField', [], {'default': '3'}),
            'queue': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.TicketQueue']", 'null': 'True', 'blank': 'True'}),
            'reference': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'resolution': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'service': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.Service']", 'null': 'True', 'blank': 'True'}),
            'sla': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.ServiceLevelAgreement']", 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.TicketStatus']"}),
            'urgency': ('django.db.models.fields.IntegerField', [], {'default': '3'})
        },
        'services.ticketqueue': {
            'Meta': {'ordering': "('name', '-active', 'ticket_code')", 'object_name': 'TicketQueue', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'default_service': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.Service']", 'null': 'True', 'blank': 'True'}),
            'default_ticket_priority': ('django.db.models.fields.IntegerField', [], {'default': '3'}),
            'default_ticket_status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.TicketStatus']", 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'message_stream': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['messaging.MessageStream']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'next_queue': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'previous_set'", 'null': 'True', 'to': "orm['services.TicketQueue']"}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['services.TicketQueue']"}),
            'ticket_code': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '8', 'null': 'True', 'blank': 'True'}),
            'waiting_time': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'})
        },
        'services.ticketrecord': {
            'Meta': {'ordering': "['ticket']", 'object_name': 'TicketRecord', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['messaging.Message']", 'null': 'True', 'blank': 'True'}),
            'notify': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'record_type': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'ticket': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.Ticket']"}),
            'updaterecord_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.UpdateRecord']", 'unique': 'True', 'null': 'True', 'blank': 'True'})
        },
        'services.ticketstatus': {
            'Meta': {'ordering': "('hidden', '-active', 'name')", 'object_name': 'TicketStatus', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        }
    }

    complete_apps = ['services']

########NEW FILE########
__FILENAME__ = 0004_auto__del_field_ticketrecord_record_type__del_field_ticketrecord_detai
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# encoding: utf-8
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Deleting field 'TicketRecord.record_type'
        db.delete_column('services_ticketrecord', 'record_type')

        # Deleting field 'TicketRecord.details'
        db.delete_column('services_ticketrecord', 'details')

        # Deleting field 'TicketRecord.object_ptr'
        db.delete_column('services_ticketrecord', 'object_ptr_id')

        # Deleting field 'TicketRecord.ticket'
        db.delete_column('services_ticketrecord', 'ticket_id')

        # Changing field 'TicketRecord.updaterecord_ptr'
        db.alter_column('services_ticketrecord', 'updaterecord_ptr_id', self.gf(
            'django.db.models.fields.related.OneToOneField')(default=1, to=orm['core.UpdateRecord'], unique=True, primary_key=True))

    def backwards(self, orm):

        # User chose to not deal with backwards NULL issues for
        # 'TicketRecord.record_type'
        raise RuntimeError(
            "Cannot reverse this migration. 'TicketRecord.record_type' and its values cannot be restored.")

        # User chose to not deal with backwards NULL issues for
        # 'TicketRecord.details'
        raise RuntimeError(
            "Cannot reverse this migration. 'TicketRecord.details' and its values cannot be restored.")

        # User chose to not deal with backwards NULL issues for
        # 'TicketRecord.object_ptr'
        raise RuntimeError(
            "Cannot reverse this migration. 'TicketRecord.object_ptr' and its values cannot be restored.")

        # User chose to not deal with backwards NULL issues for
        # 'TicketRecord.ticket'
        raise RuntimeError(
            "Cannot reverse this migration. 'TicketRecord.ticket' and its values cannot be restored.")

        # Changing field 'TicketRecord.updaterecord_ptr'
        db.alter_column('services_ticketrecord', 'updaterecord_ptr_id', self.gf(
            'django.db.models.fields.related.OneToOneField')(to=orm['core.UpdateRecord'], unique=True, null=True))

    models = {
        'auth.group': {
            'Meta': {'object_name': 'Group'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        'auth.permission': {
            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        },
        'core.accessentity': {
            'Meta': {'object_name': 'AccessEntity'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'})
        },
        'core.comment': {
            'Meta': {'object_name': 'Comment'},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']", 'null': 'True', 'blank': 'True'}),
            'body': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"})
        },
        'core.group': {
            'Meta': {'ordering': "['name']", 'object_name': 'Group', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['core.Group']"})
        },
        'core.object': {
            'Meta': {'object_name': 'Object'},
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'creator': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'objects_created'", 'null': 'True', 'to': "orm['core.User']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'full_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_full_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'last_updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'links': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'links_rel_+'", 'null': 'True', 'to': "orm['core.Object']"}),
            'nuvius_resource': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'object_name': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'object_type': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'}),
            'read_access': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'objects_read_access'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'subscribers': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'subscriptions'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Tag']", 'null': 'True', 'blank': 'True'}),
            'trash': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'core.tag': {
            'Meta': {'ordering': "['name']", 'object_name': 'Tag'},
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '512'})
        },
        'core.updaterecord': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'UpdateRecord'},
            'about': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Object']"}),
            'author': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'sent_updates'", 'null': 'True', 'to': "orm['core.User']"}),
            'body': ('django.db.models.fields.TextField', [], {'default': "''", 'null': 'True', 'blank': 'True'}),
            'comments': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'comments_on_updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.Comment']"}),
            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'dislikes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates_disliked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'format_message': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'format_strings': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'likes': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'updates_liked'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'recipients': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'received_updates'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.AccessEntity']"}),
            'record_type': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'sender': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'sent_updates'", 'null': 'True', 'to': "orm['core.Object']"}),
            'url': ('django.db.models.fields.CharField', [], {'max_length': '512', 'null': 'True', 'blank': 'True'})
        },
        'core.user': {
            'Meta': {'ordering': "['name']", 'object_name': 'User', '_ormbases': ['core.AccessEntity']},
            'accessentity_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.AccessEntity']", 'unique': 'True', 'primary_key': 'True'}),
            'default_group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'default_user_set'", 'null': 'True', 'to': "orm['core.Group']"}),
            'disabled': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_access': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'other_groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['core.Group']", 'null': 'True', 'blank': 'True'}),
            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"})
        },
        'identities.contact': {
            'Meta': {'ordering': "['name']", 'object_name': 'Contact', '_ormbases': ['core.Object']},
            'contact_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.ContactType']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.AccessEntity']", 'null': 'True', 'blank': 'True'})
        },
        'identities.contactfield': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactField', '_ormbases': ['core.Object']},
            'allowed_values': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'field_type': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
            'label': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'required': ('django.db.models.fields.BooleanField', [], {'default': 'False'})
        },
        'identities.contacttype': {
            'Meta': {'ordering': "['name']", 'object_name': 'ContactType', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'fields': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['identities.ContactField']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'slug': ('django.db.models.fields.CharField', [], {'max_length': '256'})
        },
        'messaging.mailinglist': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'MailingList', '_ormbases': ['core.Object']},
            'description': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'from_contact': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'from_contact_set'", 'to': "orm['identities.Contact']"}),
            'members': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'members_set'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['identities.Contact']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'opt_in': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['messaging.Template']", 'null': 'True', 'blank': 'True'})
        },
        'messaging.message': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'Message', '_ormbases': ['core.Object']},
            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']"}),
            'body': ('django.db.models.fields.TextField', [], {}),
            'mlist': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'mlist'", 'null': 'True', 'to': "orm['messaging.MailingList']"}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'read_by': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'read_by_user'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['core.User']"}),
            'recipients': ('django.db.models.fields.related.ManyToManyField', [], {'blank': 'True', 'related_name': "'message_recipients'", 'null': 'True', 'symmetrical': 'False', 'to': "orm['identities.Contact']"}),
            'reply_to': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['messaging.Message']"}),
            'stream': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'stream'", 'null': 'True', 'to': "orm['messaging.MessageStream']"}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'messaging.messagestream': {
            'Meta': {'ordering': "['name', 'last_updated']", 'object_name': 'MessageStream', '_ormbases': ['core.Object']},
            'faulty': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'incoming_password': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'incoming_server_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'incoming_server_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'incoming_server_username': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'last_checked': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'outgoing_email': ('django.db.models.fields.EmailField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_password': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_server_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_server_type': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'outgoing_server_username': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'})
        },
        'messaging.template': {
            'Meta': {'object_name': 'Template', '_ormbases': ['core.Object']},
            'body': ('django.db.models.fields.TextField', [], {}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'subject': ('django.db.models.fields.CharField', [], {'max_length': '255'})
        },
        'services.service': {
            'Meta': {'ordering': "['name']", 'object_name': 'Service', '_ormbases': ['core.Object']},
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['services.Service']"})
        },
        'services.serviceagent': {
            'Meta': {'ordering': "('related_user', '-active', 'occupied')", 'object_name': 'ServiceAgent', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'available_from': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'available_to': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'occupied': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'related_user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['core.User']"})
        },
        'services.servicelevelagreement': {
            'Meta': {'ordering': "('name', 'client')", 'object_name': 'ServiceLevelAgreement', '_ormbases': ['core.Object']},
            'available_from': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'available_to': ('django.db.models.fields.TimeField', [], {'null': 'True', 'blank': 'True'}),
            'client': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'client_sla'", 'null': 'True', 'to': "orm['identities.Contact']"}),
            'default': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'provider': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'provider_sla'", 'to': "orm['identities.Contact']"}),
            'response_time': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
            'service': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.Service']"}),
            'uptime_rate': ('django.db.models.fields.FloatField', [], {'null': 'True', 'blank': 'True'})
        },
        'services.ticket': {
            'Meta': {'ordering': "('-priority', 'reference')", 'object_name': 'Ticket', '_ormbases': ['core.Object']},
            'assigned': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': "orm['services.ServiceAgent']", 'null': 'True', 'blank': 'True'}),
            'caller': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['identities.Contact']", 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['messaging.Message']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'priority': ('django.db.models.fields.IntegerField', [], {'default': '3'}),
            'queue': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.TicketQueue']", 'null': 'True', 'blank': 'True'}),
            'reference': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'resolution': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'service': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.Service']", 'null': 'True', 'blank': 'True'}),
            'sla': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.ServiceLevelAgreement']", 'null': 'True', 'blank': 'True'}),
            'status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.TicketStatus']"}),
            'urgency': ('django.db.models.fields.IntegerField', [], {'default': '3'})
        },
        'services.ticketqueue': {
            'Meta': {'ordering': "('name', '-active', 'ticket_code')", 'object_name': 'TicketQueue', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'default_service': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.Service']", 'null': 'True', 'blank': 'True'}),
            'default_ticket_priority': ('django.db.models.fields.IntegerField', [], {'default': '3'}),
            'default_ticket_status': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['services.TicketStatus']", 'null': 'True', 'blank': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'message_stream': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['messaging.MessageStream']", 'null': 'True', 'blank': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'next_queue': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'previous_set'", 'null': 'True', 'to': "orm['services.TicketQueue']"}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'}),
            'parent': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'child_set'", 'null': 'True', 'to': "orm['services.TicketQueue']"}),
            'ticket_code': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '8', 'null': 'True', 'blank': 'True'}),
            'waiting_time': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True', 'blank': 'True'})
        },
        'services.ticketrecord': {
            'Meta': {'ordering': "['-date_created']", 'object_name': 'TicketRecord', '_ormbases': ['core.UpdateRecord']},
            'message': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['messaging.Message']", 'null': 'True', 'blank': 'True'}),
            'notify': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'updaterecord_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.UpdateRecord']", 'unique': 'True', 'primary_key': 'True'})
        },
        'services.ticketstatus': {
            'Meta': {'ordering': "('hidden', '-active', 'name')", 'object_name': 'TicketStatus', '_ormbases': ['core.Object']},
            'active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'details': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'hidden': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
            'object_ptr': ('django.db.models.fields.related.OneToOneField', [], {'to': "orm['core.Object']", 'unique': 'True', 'primary_key': 'True'})
        }
    }

    complete_apps = ['services']

########NEW FILE########
__FILENAME__ = models
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
ServiceSupport module objects.

Depends on: treeio.core, treeio.identities
"""

from django.core.urlresolvers import reverse
from django.db.models import signals
from django.db import models
from django.utils.translation import ugettext as _
from django.utils.html import strip_tags
from treeio.core.conf import settings
from treeio.identities.models import Contact
from treeio.core.models import User, Object, ModuleSetting, UpdateRecord
from treeio.core.mail import BaseEmail
from treeio.core.rendering import render_to_string, render_string_template
from treeio.messaging.models import Message, MessageStream


class TicketStatus(Object):

    "State information about a ticket"
    name = models.CharField(max_length=256)
    details = models.TextField(blank=True, null=True)
    active = models.BooleanField(default=True)
    hidden = models.BooleanField(default=False)

    searchable = False

    def __unicode__(self):
        return self.name

    def get_absolute_url(self):
        "Returns absolute URL of the object"
        return reverse('services_status_view', args=[self.id])

    class Meta:

        "TicketStatus"
        ordering = ('hidden', '-active', 'name')


class Service(Object):

    "Technical service supported by a company"
    name = models.CharField(max_length=256)
    parent = models.ForeignKey(
        'self', blank=True, null=True, related_name='child_set')
    details = models.TextField(blank=True, null=True)

    access_inherit = ('parent', '*module', '*user')

    def __unicode__(self):
        return self.name

    def get_absolute_url(self):
        "Returns absolute URL of the object"
        try:
            return reverse('services_service_view', args=[self.id])
        except Exception:
            return ""

    class Meta:

        "Service"
        ordering = ['name']


class ServiceLevelAgreement(Object):

    "Formal terms for service support"
    name = models.CharField(max_length=256)
    service = models.ForeignKey(Service)
    default = models.BooleanField(default=False)
    response_time = models.PositiveIntegerField(blank=True, null=True)
    uptime_rate = models.FloatField(blank=True, null=True)
    available_from = models.TimeField(blank=True, null=True)
    available_to = models.TimeField(blank=True, null=True)
    client = models.ForeignKey(
        Contact, related_name="client_sla", blank=True, null=True)
    provider = models.ForeignKey(Contact, related_name="provider_sla")

    access_inherit = ('service', '*module', '*user')

    class Meta:

        "SLA"
        ordering = ('name', 'client')

    def __unicode__(self):
        return self.name

    def get_absolute_url(self):
        "Returns absolute URL of the object"
        try:
            return reverse('services_sla_view', args=[self.id])
        except Exception:
            return ""


class ServiceAgent(Object):

    "User responsible for service support"
    related_user = models.ForeignKey(User)
    active = models.BooleanField(default=True)
    occupied = models.BooleanField(default=False)
    available_from = models.TimeField(blank=True, null=True)
    available_to = models.TimeField(blank=True, null=True)

    class Meta:

        "ServiceAgent"
        ordering = ('related_user', '-active', 'occupied')

    def __unicode__(self):
        return unicode(self.related_user)

    def get_absolute_url(self):
        "Returns absolute URL of the object"
        try:
            return reverse('services_agent_view', args=[self.id])
        except Exception:
            return ""


class TicketQueue(Object):

    "Queue for incoming tickets"
    name = models.CharField(max_length=256)
    active = models.BooleanField(default=True)
    parent = models.ForeignKey(
        'self', blank=True, null=True, related_name='child_set')
    default_ticket_status = models.ForeignKey(
        TicketStatus, blank=True, null=True, on_delete=models.SET_NULL)
    default_ticket_priority = models.IntegerField(default=3,
                                                  choices=((5, 'Highest'), (4, 'High'), (3, 'Normal'),
                                                           (2, 'Low'), (1, 'Lowest')))
    default_service = models.ForeignKey(
        Service, blank=True, null=True, on_delete=models.SET_NULL)
    waiting_time = models.PositiveIntegerField(blank=True, null=True)
    next_queue = models.ForeignKey(
        'self', blank=True, null=True, related_name='previous_set', on_delete=models.SET_NULL)
    ticket_code = models.CharField(
        max_length=8, blank=True, null=True, default='')
    message_stream = models.ForeignKey(
        MessageStream, blank=True, null=True, on_delete=models.SET_NULL)  # Messaging integration
    details = models.TextField(blank=True, null=True)

    class Meta:

        "TicketQueue"
        ordering = ('name', '-active', 'ticket_code')

    def __unicode__(self):
        return self.name

    def get_absolute_url(self):
        "Returns absolute URL of the object"
        try:
            return reverse('services_queue_view', args=[self.id])
        except Exception:
            return ""


class Ticket(Object):

    "Problem or support request ticket"
    reference = models.CharField(max_length=256)
    name = models.CharField(max_length=256)
    caller = models.ForeignKey(
        Contact, blank=True, null=True, on_delete=models.SET_NULL)
    urgency = models.IntegerField(default=3,
                                  choices=((5, _('Highest')), (4, _('High')), (3, _('Normal')), (2, _('Low')),
                                           (1, _('Lowest'))))
    priority = models.IntegerField(default=3,
                                   choices=((5, _('Highest')), (4, _('High')), (3, _('Normal')), (2, _('Low')),
                                            (1, _('Lowest'))))
    status = models.ForeignKey(TicketStatus)
    service = models.ForeignKey(
        Service, blank=True, null=True, on_delete=models.SET_NULL)
    sla = models.ForeignKey(
        ServiceLevelAgreement, blank=True, null=True, on_delete=models.SET_NULL)
    queue = models.ForeignKey(TicketQueue, blank=True, null=True)
    assigned = models.ManyToManyField(ServiceAgent, blank=True, null=True)
    message = models.ForeignKey(
        Message, blank=True, null=True, on_delete=models.SET_NULL)  # Messaging integration
    details = models.TextField(blank=True, null=True)
    resolution = models.TextField(blank=True, null=True)

    #access_inherit = ('queue', '*module', '*user')

    class Meta:

        "Ticket"
        ordering = ('-priority', 'reference')

    def __unicode__(self):
        return self.name

    def priority_human(self):
        "Returns a Human-friendly priority name"
        choices = ((5, _('Highest')), (4, _('High')), (
            3, _('Normal')), (2, _('Low')), (1, _('Lowest')))
        for choice in choices:
            if choice[0] == self.priority:
                return choice[1]

    def urgency_human(self):
        "Returns a Human-friendly urgency name"
        choices = ((5, _('Highest')), (4, _('High')), (
            3, _('Normal')), (2, _('Low')), (1, _('Lowest')))
        for choice in choices:
            if choice[0] == self.priority:
                return choice[1]

    def save(self, *args, **kwargs):
        "Automatically set ticket reference and send message to caller"
        super(Ticket, self).save(*args, **kwargs)

        if not self.reference:
            if self.queue:
                self.reference = self.queue.ticket_code + str(self.id)
            else:
                self.reference = str(self.id)
            self.save()

    def get_absolute_url(self):
        "Returns absolute URL of the object"
        try:
            return reverse('services_ticket_view', args=[self.id])
        except Exception:
            return ""


class TicketRecord(UpdateRecord):

    "Update for a Ticket"
    # Messaging integration
    message = models.ForeignKey(Message, blank=True, null=True)
    notify = models.BooleanField(default=False, blank=True)


"""
Service Support signals
"""


def email_caller_on_new_ticket(sender, instance, created, **kwargs):
    "When a new ticket is created send an email to the caller"
    if created:
        send_email_to_caller = False
        try:
            conf = ModuleSetting.get_for_module(
                'treeio.services', 'send_email_to_caller')[0]
            send_email_to_caller = conf.value
        except:
            send_email_to_caller = getattr(
                settings, 'HARDTREE_SEND_EMAIL_TO_CALLER', True)

        if send_email_to_caller:
            # don't send email to yourself
            creator_contact = None
            if instance.creator:
                creator_contact = instance.creator.get_contact()

            if instance.caller and instance.caller != creator_contact:
                if not instance.reference:
                    if instance.queue:
                        instance.reference = instance.queue.ticket_code + \
                            str(instance.id)
                    else:
                        instance.reference = str(instance.id)
                    instance.save()
                subject = "[#%s] %s" % (instance.reference, instance.name)

                # Construct context and render to html, body
                context = {'ticket': instance}
                try:
                    conf = ModuleSetting.get_for_module(
                        'treeio.services', 'send_email_template')[0]
                    send_email_template = conf.value
                    html = render_string_template(send_email_template, context)
                except:
                    html = render_to_string(
                        'services/emails/notify_caller', context, response_format='html')
                body = strip_tags(html)

                if instance.queue and instance.queue.message_stream:
                    stream = instance.queue.message_stream
                    if stream.outgoing_server_name:
                        try:
                            caller_email = instance.caller.get_email()
                            if caller_email:
                                toaddr = caller_email
                                ssl = False
                                if stream.outgoing_server_type == 'SMTP-SSL':
                                    ssl = True
                                email = BaseEmail(stream.outgoing_server_name,
                                                  stream.outgoing_server_username,
                                                  stream.outgoing_password,
                                                  stream.outgoing_email,
                                                  toaddr, subject, body, html=html,
                                                  ssl=ssl)
                                email.process_email()
                        except:
                            pass

signals.post_save.connect(email_caller_on_new_ticket, sender=Ticket)


def create_ticket_from_message(sender, instance, created, **kwargs):
    """
    Get a signal from messaging.models
    Check if (new) message's stream is also assigned to Ticket Queue
    Create a new ticket from that message
    Rename original message title
    """

    if created and getattr(instance, 'auto_notify', True):
        if instance.reply_to:
            tickets = instance.reply_to.ticket_set.all()
            for ticket in tickets:
                record = TicketRecord()
                record.sender = instance.author
                record.record_type = 'manual'
                record.body = instance.body
                record.save()
                record.about.add(ticket)
                ticket.set_last_updated()
        else:
            stream = instance.stream
            queues = TicketQueue.objects.filter(message_stream=stream)
            if stream and queues:
                queue = queues[0]
                ticket = Ticket()
                try:
                    conf = ModuleSetting.get_for_module(
                        'treeio.services', 'default_ticket_status')[0]
                    ticket.status = TicketStatus.objects.get(
                        pk=long(conf.value))
                except:
                    statuses = TicketStatus.objects.all()
                    ticket.status = statuses[0]
                ticket.queue = queue
                ticket.caller = instance.author
                ticket.details = instance.body
                ticket.message = instance
                ticket.name = instance.title
                ticket.auto_notify = False
                ticket.save()
                try:
                    if stream.creator:
                        ticket.set_user(stream.creator)
                    elif queue.creator:
                        ticket.set_user(queue.creator)
                    else:
                        ticket.copy_permissions(queue)
                except:
                    pass

                # Rename original message title
                instance.title = "[#" + ticket.reference + "] " + \
                    instance.title
                instance.save()

signals.post_save.connect(create_ticket_from_message, sender=Message)

########NEW FILE########
__FILENAME__ = services
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Services templatetags
"""
from coffin import template
from treeio.core.rendering import render_to_string
from jinja2 import contextfunction, Markup
from django.template import RequestContext

register = template.Library()


@contextfunction
def services_ticket_list(context, tickets, skip_group=False,
                         tick_group=None, nomass=False, group_by=None,
                         by_assigned=False, by_status=False, noheader=False):
    "Print a list of tickets"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('services/tags/ticket_list',
                                   {'tickets': tickets,
                                    'tick_group': tick_group,
                                    'skip_group': skip_group,
                                    'by_assigned': by_assigned,
                                    'by_status': by_status,
                                    'group_by': group_by,
                                    'noheader': noheader,
                                    'nomass': nomass},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(services_ticket_list)


@contextfunction
def services_service_list(context, services, skip_group=False):
    "Print a list of services"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('services/tags/service_list',
                                   {'services': services,
                                       'skip_group': skip_group},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(services_service_list)


@contextfunction
def services_queue_list(context, queues, skip_group=False):
    "Print a list of queues"
    request = context['request']

    response_format = 'html'
    if 'response_format' in context:
        response_format = context['response_format']

    return Markup(render_to_string('services/tags/queue_list',
                                   {'queues': queues,
                                       'skip_group': skip_group},
                                   context_instance=RequestContext(request),
                                   response_format=response_format))

register.object(services_queue_list)

########NEW FILE########
__FILENAME__ = tests
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Services: test suites
"""

from django.test import TestCase
from django.test.client import Client
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User as DjangoUser
from treeio.core.models import User, Group, Perspective, ModuleSetting, Object
from treeio.services.models import Ticket, TicketQueue, TicketStatus, ServiceAgent, \
    Service, ServiceLevelAgreement
from treeio.identities.models import Contact, ContactType
import datetime


class ServicesModelsTest(TestCase):

    "Services DB models tests"

    def test_model(self):
        "Test Services models"
        status = TicketStatus(name='TestStatus')
        status.save()
        self.assertNotEquals(status.id, None)

        queue = TicketQueue(name='TestQueue', default_ticket_status=status)
        queue.save()
        self.assertNotEquals(status.id, None)

        ticket = Ticket(name='TestTicket', status=status, queue=queue)
        ticket.save()
        self.assertNotEquals(ticket.id, None)

        ticket.delete()
        queue.delete()
        status.delete()


class ServicesViewsTest(TestCase):

    "Services functional tests for views"

    username = "test"
    password = "password"
    prepared = False

    def setUp(self):
        "Initial Setup"

        if not self.prepared:
            # Clean up first
            Object.objects.all().delete()
            User.objects.all().delete()

            # Create objects
            self.group, created = Group.objects.get_or_create(name='test')
            duser, created = DjangoUser.objects.get_or_create(
                username=self.username)
            duser.set_password(self.password)
            duser.save()
            self.user, created = User.objects.get_or_create(user=duser)
            self.user.save()
            perspective, created = Perspective.objects.get_or_create(
                name='default')
            perspective.set_default_user()
            perspective.save()

            ModuleSetting.set('default_perspective', perspective.id)

            self.contact_type = ContactType(name='test')
            self.contact_type.set_default_user()
            self.contact_type.save()

            self.contact = Contact(name='test', contact_type=self.contact_type)
            self.contact.set_default_user()
            self.contact.save()

            self.status = TicketStatus(name='TestStatus')
            self.status.set_default_user()
            self.status.save()

            self.queue = TicketQueue(
                name='TestQueue', default_ticket_status=self.status)
            self.queue.set_default_user()
            self.queue.save()

            self.ticket = Ticket(
                name='TestTicket', status=self.status, queue=self.queue)
            self.ticket.set_default_user()
            self.ticket.save()

            self.agent = ServiceAgent(related_user=self.user, available_from=datetime.time(9),
                                      available_to=datetime.time(17))
            self.agent.set_default_user()
            self.agent.save()

            self.service = Service(name='test')
            self.service.set_default_user()
            self.service.save()

            self.sla = ServiceLevelAgreement(name='test', service=self.service,
                                             client=self.contact, provider=self.contact)
            self.sla.set_default_user()
            self.sla.save()

            self.client = Client()

            self.prepared = True

    ######################################
    # Testing views when user is logged in
    ######################################
    def test_index_login(self):
        "Test index page with login at /services/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('services'))
        self.assertEquals(response.status_code, 200)

    def test_index_owned(self):
        "Test index page with login at /services/owned"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('services_index_owned'))
        self.assertEquals(response.status_code, 200)

    def test_index_assigned(self):
        "Test index page with login at /services/assigned"

        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('services_index_assigned'))
        self.assertEquals(response.status_code, 200)

    # Queues
    def test_queue_add(self):
        "Test page with login at /services/queue/add"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('services_queue_add'))
        self.assertEquals(response.status_code, 200)

    def test_queue_view(self):
        "Test page with login at /services/queue/view/<queue_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('services_queue_view', args=[self.queue.id]))
        self.assertEquals(response.status_code, 200)

    def test_queue_edit(self):
        "Test page with login at /services/queue/edit/<queue_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('services_queue_edit', args=[self.queue.id]))
        self.assertEquals(response.status_code, 200)

    def test_queue_delete(self):
        "Test page with login at /services/queue/delete/<queue_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('services_queue_delete', args=[self.queue.id]))
        self.assertEquals(response.status_code, 200)

    # Statuses
    def test_status_view(self):
        "Test index page with login at /services/status/view/<status_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('services_status_view', args=[self.status.id]))
        self.assertEquals(response.status_code, 200)

    def test_status_edit(self):
        "Test index page with login at /services/status/edit/<status_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('services_status_edit', args=[self.status.id]))
        self.assertEquals(response.status_code, 200)

    def test_status_delete(self):
        "Test index page with login at /services/status/delete/<status_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('services_status_delete', args=[self.status.id]))
        self.assertEquals(response.status_code, 200)

    def test_status_add(self):
        "Test index page with login at /services/status/add/"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('services_status_add'))
        self.assertEquals(response.status_code, 200)

    # Tickets
    def test_ticket_add(self):
        "Test page with login at /services/ticket/add"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('services_ticket_add'))
        self.assertEquals(response.status_code, 200)

    def test_ticket_add_by_queue(self):
        "Test page with login at /services/ticket/add/queue/(?P<queue_id>\d+)"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('services_ticket_add_by_queue', args=[self.queue.id]))
        self.assertEquals(response.status_code, 200)

    def test_ticket_view(self):
        "Test page with login at /services/ticket/view/<ticket_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('services_ticket_view', args=[self.ticket.id]))
        self.assertEquals(response.status_code, 200)

    def test_ticket_edit(self):
        "Test page with login at /services/ticket/edit/<ticket_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('services_ticket_edit', args=[self.ticket.id]))
        self.assertEquals(response.status_code, 200)

    def test_ticket_delete(self):
        "Test page with login at /services/ticket/delete/<ticket_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('services_ticket_delete', args=[self.ticket.id]))
        self.assertEquals(response.status_code, 200)

    def test_ticket_set_status(self):
        "Test page with login at /services/ticket/set/(?P<ticket_id>\d+)/status/(?P<status_id>\d+)"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('services_ticket_set_status', args=[self.ticket.id, self.status.id]))
        self.assertEquals(response.status_code, 200)

    # Settings
    def test_settings_view(self):
        "Test page with login at /services/settings/view"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('services_settings_view'))
        self.assertEquals(response.status_code, 200)

    def test_settings_edit(self):
        "Test page with login at /services/settings/edit"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('services_settings_view'))
        self.assertEquals(response.status_code, 200)

    # Catalogue
    def test_service_catalogue(self):
        "Test page with login at /services/catalogue"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('services_service_catalogue'))
        self.assertEquals(response.status_code, 200)

    # Services
    def test_service_view(self):
        "Test page with login at /services/service/view/<service_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('services_service_view', args=[self.service.id]))
        self.assertEquals(response.status_code, 200)

    def test_service_edit(self):
        "Test page with login at /services/service/edit/<service_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('services_service_edit', args=[self.service.id]))
        self.assertEquals(response.status_code, 200)

    def test_service_delete(self):
        "Test page with login at /services/service/delete/<service_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('services_service_delete', args=[self.service.id]))
        self.assertEquals(response.status_code, 200)

    def test_service_add(self):
        "Test page with login at /services/service/add"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('services_service_add'))
        self.assertEquals(response.status_code, 200)

    # SLAs
    def test_sla_index(self):
        "Test page with login at /services/sla"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('services_sla_index'))
        self.assertEquals(response.status_code, 200)

    def test_sla_view(self):
        "Test page with login at /services/sla/view/<sla_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('services_sla_view', args=[self.sla.id]))
        self.assertEquals(response.status_code, 200)

    def test_sla_edit(self):
        "Test page with login at /services/sla/edit/<sla_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('services_sla_edit', args=[self.sla.id]))
        self.assertEquals(response.status_code, 200)

    def test_sla_delete(self):
        "Test page with login at /services/sla/delete/<sla_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('services_sla_delete', args=[self.sla.id]))
        self.assertEquals(response.status_code, 200)

    def test_sla_add(self):
        "Test page with login at /services/sla/add"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('services_sla_index'))
        self.assertEquals(response.status_code, 200)

    # Agents
    def test_agent_index(self):
        "Test page with login at /services/agent"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('services_agent_index'))
        self.assertEquals(response.status_code, 200)

    def test_agent_view(self):
        "Test page with login at /services/agent/view/<agent_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('services_agent_view', args=[self.agent.id]))
        self.assertEquals(response.status_code, 200)

    def test_agent_edit(self):
        "Test page with login at /services/agent/edit/<agent_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('services_agent_edit', args=[self.agent.id]))
        self.assertEquals(response.status_code, 200)

    def test_agent_delete(self):
        "Test page with login at /services/agent/delete/<agent_id>"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(
            reverse('services_agent_delete', args=[self.agent.id]))
        self.assertEquals(response.status_code, 200)

    def test_agent_add(self):
        "Test page with login at /services/agent/add"
        response = self.client.post('/accounts/login',
                                    {'username': self.username, 'password': self.password})
        self.assertRedirects(response, '/')
        response = self.client.get(reverse('services_agent_add'))
        self.assertEquals(response.status_code, 200)

    ######################################
    # Testing views when user is not logged in
    ######################################
    def test_index(self):
        "Test index page at /services/"
        response = self.client.get(reverse('services'))
        # Redirects as unauthenticated
        self.assertRedirects(response, reverse('user_login'))

    def test_index_owned_out(self):
        "Testing /services/owned"
        response = self.client.get(reverse('services_index_owned'))
        self.assertRedirects(response, reverse('user_login'))

    def test_index_assigned_out(self):
        "Testing /services/assigned"
        response = self.client.get(reverse('services_index_assigned'))
        self.assertRedirects(response, reverse('user_login'))

    # Queues
    def test_queue_add_out(self):
        "Testing /services/queue/add"
        response = self.client.get(reverse('services_queue_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_queue_view_out(self):
        "Testing /services/queue/view/<queue_id>"
        response = self.client.get(
            reverse('services_queue_view', args=[self.queue.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_queue_edit_out(self):
        "Testing /services/queue/edit/<queue_id>"
        response = self.client.get(
            reverse('services_queue_edit', args=[self.queue.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_queue_delete_out(self):
        "Testing /services/queue/delete/<queue_id>"
        response = self.client.get(
            reverse('services_queue_delete', args=[self.queue.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Statuses
    def test_status_view_out(self):
        "Testing /services/status/view/<status_id>"
        response = self.client.get(
            reverse('services_status_view', args=[self.status.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_status_edit_out(self):
        "Testing /services/status/edit/<status_id>"
        response = self.client.get(
            reverse('services_status_edit', args=[self.status.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_status_delete_out(self):
        "Testing /services/status/delete/<status_id>"
        response = self.client.get(
            reverse('services_status_delete', args=[self.status.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_status_add_out(self):
        "Testing /services/status/add/"
        response = self.client.get(reverse('services_status_add'))
        self.assertRedirects(response, reverse('user_login'))

    # Tickets
    def test_ticket_add_out(self):
        "Testing /services/ticket/add"
        response = self.client.get(reverse('services_ticket_add'))
        self.assertRedirects(response, reverse('user_login'))

    def test_ticket_add_by_queue_out(self):
        "Testing /services/ticket/add/queue/(?P<queue_id>\d+)"
        response = self.client.get(
            reverse('services_ticket_add_by_queue', args=[self.queue.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_ticket_view_out(self):
        "Testing /services/ticket/view/<ticket_id>"
        response = self.client.get(
            reverse('services_ticket_view', args=[self.ticket.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_ticket_edit_out(self):
        "Testing /services/ticket/edit/<ticket_id>"
        response = self.client.get(
            reverse('services_ticket_edit', args=[self.ticket.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_ticket_delete_out(self):
        "Testing /services/ticket/delete/<ticket_id>"
        response = self.client.get(
            reverse('services_ticket_delete', args=[self.ticket.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_ticket_set_status_out(self):
        "Testing /services/ticket/set/(?P<ticket_id>\d+)/status/(?P<status_id>\d+)"
        response = self.client.get(
            reverse('services_ticket_set_status', args=[self.ticket.id, self.status.id]))
        self.assertRedirects(response, reverse('user_login'))

    # Settings
    def test_settings_view_out(self):
        "Testing /services/settings/view"
        response = self.client.get(reverse('services_settings_view'))
        self.assertRedirects(response, reverse('user_login'))

    def test_settings_edit_out(self):
        "Testing /services/settings/edit"
        response = self.client.get(reverse('services_settings_view'))
        self.assertRedirects(response, reverse('user_login'))

    # Catalogue
    def test_service_catalogue_out(self):
        "Testing /services/catalogue"
        response = self.client.get(reverse('services_service_catalogue'))
        self.assertRedirects(response, reverse('user_login'))

    # Services
    def test_service_view_out(self):
        "Testing /services/service/view/<service_id>"
        response = self.client.get(
            reverse('services_service_view', args=[self.service.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_service_edit_out(self):
        "Testing /services/service/edit/<service_id>"
        response = self.client.get(
            reverse('services_service_edit', args=[self.service.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_service_delete_out(self):
        "Testing /services/service/delete/<service_id>"
        response = self.client.get(
            reverse('services_service_delete', args=[self.service.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_service_add_out(self):
        "Testing /services/service/add"
        response = self.client.get(reverse('services_service_add'))
        self.assertRedirects(response, reverse('user_login'))

    # SLAs
    def test_sla_index_out(self):
        "Testing /services/sla"
        response = self.client.get(reverse('services_sla_index'))
        self.assertRedirects(response, reverse('user_login'))

    def test_sla_view_out(self):
        "Testing /services/sla/view/<sla_id>"
        response = self.client.get(
            reverse('services_sla_view', args=[self.sla.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_sla_edit_out(self):
        "Testing /services/sla/edit/<sla_id>"
        response = self.client.get(
            reverse('services_sla_edit', args=[self.sla.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_sla_delete_out(self):
        "Testing /services/sla/delete/<sla_id>"
        response = self.client.get(
            reverse('services_sla_delete', args=[self.sla.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_sla_add_out(self):
        "Testing /services/sla/add"
        response = self.client.get(reverse('services_sla_index'))
        self.assertRedirects(response, reverse('user_login'))

    # Agents
    def test_agent_index_out(self):
        "Testing /services/agent"
        response = self.client.get(reverse('services_agent_index'))
        self.assertRedirects(response, reverse('user_login'))

    def test_agent_view_out(self):
        "Testing /services/agent/view/<agent_id>"
        response = self.client.get(
            reverse('services_agent_view', args=[self.agent.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_agent_edit_out(self):
        "Testing /services/agent/edit/<agent_id>"
        response = self.client.get(
            reverse('services_agent_edit', args=[self.agent.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_agent_delete_out(self):
        "Test page with login at /services/agent/delete/<agent_id>"
        response = self.client.get(
            reverse('services_agent_delete', args=[self.agent.id]))
        self.assertRedirects(response, reverse('user_login'))

    def test_agent_add_out(self):
        "Test page with login at /services/agent/add"
        response = self.client.get(reverse('services_agent_add'))
        self.assertRedirects(response, reverse('user_login'))

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Services module URLs
"""
from django.conf.urls.defaults import patterns, url

urlpatterns = patterns('treeio.services.views',
                       url(r'^(\.(?P<response_format>\w+))?$',
                           'index', name='services'),
                       url(r'^index(\.(?P<response_format>\w+))?/?$',
                           'index', name='services_index'),
                       url(r'^owned(\.(?P<response_format>\w+))?/?$',
                           'index_owned', name='services_index_owned'),
                       url(r'^assigned(\.(?P<response_format>\w+))?/?$',
                           'index_assigned', name='services_index_assigned'),

                       # Statuses
                       url(r'^status/view/(?P<status_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'status_view', name='services_status_view'),
                       url(r'^status/edit/(?P<status_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'status_edit', name='services_status_edit'),
                       url(r'^status/delete/(?P<status_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'status_delete', name='services_status_delete'),
                       url(r'^status/add(\.(?P<response_format>\w+))?/?$',
                           'status_add', name='services_status_add'),

                       # Queues
                       url(r'^queue/view/(?P<queue_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'queue_view', name='services_queue_view'),
                       url(r'^queue/edit/(?P<queue_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'queue_edit', name='services_queue_edit'),
                       url(r'^queue/delete/(?P<queue_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'queue_delete', name='services_queue_delete'),
                       url(r'^queue/add(\.(?P<response_format>\w+))?/?$',
                           'queue_add', name='services_queue_add'),

                       # Tickets
                       url(r'^ticket/view/(?P<ticket_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'ticket_view', name='services_ticket_view'),
                       url(r'^ticket/edit/(?P<ticket_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'ticket_edit', name='services_ticket_edit'),
                       url(r'^ticket/delete/(?P<ticket_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'ticket_delete', name='services_ticket_delete'),
                       url(r'^ticket/set/(?P<ticket_id>\d+)/status/(?P<status_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'ticket_set_status', name='services_ticket_set_status'),
                       url(r'^ticket/add(\.(?P<response_format>\w+))?/?$',
                           'ticket_add', name='services_ticket_add'),
                       url(r'^ticket/add/queue/(?P<queue_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'ticket_add', name='services_ticket_add_by_queue'),

                       url(r'^catalogue(\.(?P<response_format>\w+))?/?$',
                           'service_catalogue', name='services_service_catalogue'),

                       # Services
                       url(r'^service/view/(?P<service_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'service_view', name='services_service_view'),
                       url(r'^service/edit/(?P<service_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'service_edit', name='services_service_edit'),
                       url(r'^service/delete/(?P<service_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'service_delete', name='services_service_delete'),
                       url(r'^service/add(\.(?P<response_format>\w+))?/?$',
                           'service_add', name='services_service_add'),

                       # SLAs
                       url(r'^sla/add(\.(?P<response_format>\w+))?/?$',
                           'sla_add', name='services_sla_add'),
                       url(r'^sla(\.(?P<response_format>\w+))?/?$',
                           'sla_index', name='services_sla_index'),
                       url(r'^sla/view/(?P<sla_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'sla_view', name='services_sla_view'),
                       url(r'^sla/edit/(?P<sla_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'sla_edit', name='services_sla_edit'),
                       url(r'^sla/delete/(?P<sla_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'sla_delete', name='services_sla_delete'),

                       # Settings
                       url(r'^settings/view(\.(?P<response_format>\w+))?/?$',
                           'settings_view', name='services_settings_view'),
                       url(r'^settings/edit(\.(?P<response_format>\w+))?/?$',
                           'settings_edit', name='services_settings_edit'),

                       # Agents
                       url(r'^agent(\.(?P<response_format>\w+))?/?$',
                           'agent_index', name='services_agent_index'),
                       url(r'^agent/view/(?P<agent_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'agent_view', name='services_agent_view'),
                       url(r'^agent/edit/(?P<agent_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'agent_edit', name='services_agent_edit'),
                       url(r'^agent/delete/(?P<agent_id>\d+)(\.(?P<response_format>\w+))?/?$',
                           'agent_delete', name='services_agent_delete'),
                       url(r'^agent/add(\.(?P<response_format>\w+))?/?$',
                           'agent_add', name='services_agent_add'),

                       # Widgets
                       url(r'^widget/index(\.(?P<response_format>\w+))?/?$',
                           'widget_index', name='services_widget_index'),

                       # AJAX lookups
                       url(r'^ajax/tickets(\.(?P<response_format>\w+))?/?$',
                           'ajax_ticket_lookup', name='services_ajax_ticket_lookup'),
                       url(r'^ajax/agents(\.(?P<response_format>\w+))?/?$',
                           'ajax_agent_lookup', name='services_ajax_agent_lookup'),
                       )

########NEW FILE########
__FILENAME__ = views
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Service Support module: views
"""
from django.shortcuts import get_object_or_404
from django.template import RequestContext
from django.http import HttpResponseRedirect
from django.core.urlresolvers import reverse
from django.db.models import Q
from treeio.core.conf import settings
from treeio.core.rendering import render_to_response, render_string_template, render_to_string
from treeio.core.decorators import treeio_login_required, handle_response_format
from treeio.core.views import user_denied
from treeio.core.models import Object, ModuleSetting
from treeio.services.models import Ticket, TicketRecord, TicketStatus, TicketQueue, Service, \
    ServiceLevelAgreement, ServiceAgent
from treeio.services.forms import SettingsForm, MassActionForm, TicketForm, TicketStatusForm, \
    TicketRecordForm, QueueForm, ServiceForm, ServiceLevelAgreementForm, \
    AgentForm, FilterForm, SLAFilterForm, AgentFilterForm
from treeio.identities.models import Contact


def _get_filter_query(args, model=Ticket):
    "Creates a query to filter Tickets based on FilterForm arguments"
    query = Q()

    for arg in args:
        if hasattr(model, arg) and args[arg]:
            kwargs = {str(arg + '__id'): long(args[arg])}
            query = query & Q(**kwargs)

    return query


def _get_default_context(request):
    "Returns default context for all views as dict()"

    queues = Object.filter_by_request(
        request, TicketQueue.objects.filter(active=True, parent__isnull=True))
    statuses = Object.filter_by_request(request, TicketStatus.objects)
    try:
        agent = request.user.get_profile().serviceagent_set.all()[0]
    except Exception:
        agent = None

    massform = MassActionForm(request.user.get_profile())

    context = {
        'statuses': statuses,
        'queues': queues,
        'agent': agent,
        'massform': massform
    }

    return context


def _process_mass_form(f):
    "Pre-process request to handle mass action form for Tasks and Milestones"

    def wrap(request, *args, **kwargs):
        "wrap"
        if 'massform' in request.POST:
            for key in request.POST:
                if 'mass-ticket' in key:
                    try:
                        ticket = Ticket.objects.get(pk=request.POST[key])
                        form = MassActionForm(
                            request.user.get_profile(), request.POST, instance=ticket)
                        if form.is_valid() and request.user.get_profile().has_permission(ticket, mode='w'):
                            form.save()
                    except Exception:
                        pass

        return f(request, *args, **kwargs)

    wrap.__doc__ = f.__doc__
    wrap.__name__ = f.__name__

    return wrap


@handle_response_format
@treeio_login_required
@_process_mass_form
def index(request, response_format='html'):
    "All available tickets"

    if request.GET:
        if 'status' in request.GET and request.GET['status']:
            query = _get_filter_query(request.GET)
        else:
            query = Q(status__hidden=False) & _get_filter_query(request.GET)
        tickets = Object.filter_by_request(
            request, Ticket.objects.filter(query))
    else:
        tickets = Object.filter_by_request(
            request, Ticket.objects.filter(status__hidden=False))

    filters = FilterForm(request.user.get_profile(), '', request.GET)

    context = _get_default_context(request)
    context.update({'tickets': tickets,
                    'filters': filters, })

    return render_to_response('services/index', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_form
def index_assigned(request, response_format='html'):
    "Tickets assigned to current user"

    context = _get_default_context(request)
    agent = context['agent']

    if agent:
        query = Q(assigned=agent)
        if request.GET:
            if 'status' in request.GET and request.GET['status']:
                query = query & _get_filter_query(request.GET)
            else:
                query = query & Q(
                    status__hidden=False) & _get_filter_query(request.GET)
        else:
            query = query & Q(status__hidden=False)
        tickets = Object.filter_by_request(
            request, Ticket.objects.filter(query))
    else:
        return user_denied(request, "You are not a Service Support Agent.", response_format=response_format)

    filters = FilterForm(request.user.get_profile(), 'assigned', request.GET)

    context.update({'tickets': tickets,
                    'filters': filters})

    return render_to_response('services/index_assigned', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
@_process_mass_form
def index_owned(request, response_format='html'):
    "Tickets owned by current user"

    context = _get_default_context(request)

    query = Q(caller__related_user=request.user.get_profile())
    if request.GET:
        if 'status' in request.GET and request.GET['status']:
            query = query & _get_filter_query(request.GET)
        else:
            query = query & Q(
                status__hidden=False) & _get_filter_query(request.GET)
    else:
        query = query & Q(status__hidden=False)

    tickets = Object.filter_by_request(request, Ticket.objects.filter(query))

    filters = FilterForm(request.user.get_profile(), 'caller', request.GET)

    context.update({'tickets': tickets,
                    'filters': filters})

    return render_to_response('services/index_owned', context,
                              context_instance=RequestContext(request), response_format=response_format)

#
# Ticket Statuses
#


@handle_response_format
@treeio_login_required
@_process_mass_form
def status_view(request, status_id, response_format='html'):
    "Tickets filtered by status"

    status = get_object_or_404(TicketStatus, pk=status_id)
    if not request.user.get_profile().has_permission(status):
        return user_denied(request, message="You don't have access to this Ticket Status")

    query = Q(status=status)
    if request.GET:
        query = query & _get_filter_query(request.GET)
    tickets = Object.filter_by_request(request, Ticket.objects.filter(query))

    filters = FilterForm(request.user.get_profile(), 'status', request.GET)

    context = _get_default_context(request)
    context.update({'status': status,
                    'filters': filters,
                    'tickets': tickets})

    return render_to_response('services/status_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def status_edit(request, status_id, response_format='html'):
    "TicketStatus edit"

    status = get_object_or_404(TicketStatus, pk=status_id)
    if not request.user.get_profile().has_permission(status, mode='w') \
            and not request.user.get_profile().is_admin('treeio_services'):
        return user_denied(request, "You don't have access to this Ticket Status", response_format)

    if request.POST:
        if not 'cancel' in request.POST:
            form = TicketStatusForm(
                request.user.get_profile(), request.POST, instance=status)
            if form.is_valid():
                status = form.save()
                return HttpResponseRedirect(reverse('services_status_view', args=[status.id]))
        else:
            return HttpResponseRedirect(reverse('services_status_view', args=[status.id]))
    else:
        form = TicketStatusForm(request.user.get_profile(), instance=status)

    context = _get_default_context(request)
    context.update({'form': form,
                    'status': status})

    return render_to_response('services/status_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def status_delete(request, status_id, response_format='html'):
    "TicketStatus delete"

    status = get_object_or_404(TicketStatus, pk=status_id)
    if not request.user.get_profile().has_permission(status, mode='w'):
        return user_denied(request, "You don't have access to this Ticket Status", response_format)

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                status.trash = True
                status.save()
            else:
                status.delete()
            return HttpResponseRedirect(reverse('services_settings_view'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('services_status_view', args=[status.id]))

    context = _get_default_context(request)
    context.update({'status': status})

    return render_to_response('services/status_delete', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def status_add(request, response_format='html'):
    "TicketStatus add"

    if not request.user.get_profile().is_admin('treeio.services'):
        return user_denied(request,
                           message="You don't have administrator access to the Service Support module")

    if request.POST:
        if not 'cancel' in request.POST:
            status = TicketStatus()
            form = TicketStatusForm(
                request.user.get_profile(), request.POST, instance=status)
            if form.is_valid():
                status = form.save()
                status.set_user_from_request(request)
                return HttpResponseRedirect(reverse('services_status_view', args=[status.id]))
        else:
            return HttpResponseRedirect(reverse('services_settings_view'))
    else:
        form = TicketStatusForm(request.user.get_profile())

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('services/status_add', context,
                              context_instance=RequestContext(request), response_format=response_format)

#
# Queues
#


@handle_response_format
@treeio_login_required
@_process_mass_form
def queue_view(request, queue_id, response_format='html'):
    "Queue view"

    queue = get_object_or_404(TicketQueue, pk=queue_id)
    if not request.user.get_profile().has_permission(queue):
        return user_denied(request, message="You don't have access to this Queue")

    query = Q(queue=queue)
    if request.GET:
        if 'status' in request.GET and request.GET['status']:
            query = query & _get_filter_query(request.GET)
        else:
            query = query & Q(
                status__hidden=False) & _get_filter_query(request.GET)
    else:
        query = query & Q(status__hidden=False)
    tickets = Object.filter_by_request(request, Ticket.objects.filter(query))

    filters = FilterForm(request.user.get_profile(), 'queue', request.GET)
    subqueues = Object.filter_by_request(
        request, TicketQueue.objects.filter(parent=queue))

    context = _get_default_context(request)
    context.update({'queue': queue,
                    'subqueues': subqueues,
                    'filters': filters,
                    'tickets': tickets})

    return render_to_response('services/queue_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def queue_edit(request, queue_id, response_format='html'):
    "Queue edit"

    queue = get_object_or_404(TicketQueue, pk=queue_id)
    if not request.user.get_profile().has_permission(queue, mode='w'):
        return user_denied(request, message="You don't have access to this Queue")

    if request.POST:
        if not 'cancel' in request.POST:
            form = QueueForm(
                request.user.get_profile(), request.POST, instance=queue)
            if form.is_valid():
                queue = form.save()
                return HttpResponseRedirect(reverse('services_queue_view', args=[queue.id]))
        else:
            return HttpResponseRedirect(reverse('services_queue_view', args=[queue.id]))
    else:
        form = QueueForm(request.user.get_profile(), instance=queue)

    context = _get_default_context(request)
    context.update({'queue': queue, 'form': form})

    return render_to_response('services/queue_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def queue_delete(request, queue_id, response_format='html'):
    "Queue delete"

    queue = get_object_or_404(TicketQueue, pk=queue_id)
    if not request.user.get_profile().has_permission(queue, mode='w'):
        return user_denied(request, message="You don't have access to this Queue")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                queue.trash = True
                queue.save()
            else:
                queue.delete()
            return HttpResponseRedirect(reverse('services_settings_view'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('services_queue_view', args=[queue.id]))

    query = Q(queue=queue) & Q(status__hidden=False)
    tickets = Object.filter_by_request(request, Ticket.objects.filter(query))
    subqueues = Object.filter_by_request(
        request, TicketQueue.objects.filter(parent=queue))

    context = _get_default_context(request)
    context.update({'queue': queue,
                    'subqueues': subqueues,
                    'tickets': tickets})

    return render_to_response('services/queue_delete', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def queue_add(request, response_format='html'):
    "Queue add"

    if not request.user.get_profile().is_admin('treeio.services'):
        return user_denied(request,
                           message="You don't have administrator access to the Service Support module")

    if request.POST:
        if not 'cancel' in request.POST:
            queue = TicketQueue()
            form = QueueForm(
                request.user.get_profile(), request.POST, instance=queue)
            if form.is_valid():
                queue = form.save()
                queue.set_user_from_request(request)
                return HttpResponseRedirect(reverse('services_queue_view', args=[queue.id]))
        else:
            return HttpResponseRedirect(reverse('services_settings_view'))
    else:
        form = QueueForm(request.user.get_profile())

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('services/queue_add', context,
                              context_instance=RequestContext(request), response_format=response_format)

#
# Tickets
#


@handle_response_format
@treeio_login_required
def ticket_view(request, ticket_id, response_format='html'):
    "Ticket view"

    context = _get_default_context(request)
    agent = context['agent']
    profile = request.user.get_profile()

    ticket = get_object_or_404(Ticket, pk=ticket_id)
    if not profile.has_permission(ticket):
        return user_denied(request, message="You don't have access to this Ticket")

    if ticket.message:
        ticket.message.read_by.add(profile)

    if profile.has_permission(ticket, mode='x'):
        if request.POST:
            record = TicketRecord(sender=profile.get_contact())
            record.record_type = 'manual'
            if ticket.message:
                record.message = ticket.message
            form = TicketRecordForm(
                agent, ticket, request.POST, instance=record)
            if form.is_valid():
                record = form.save()
                record.save()
                record.set_user_from_request(request)
                record.about.add(ticket)
                ticket.set_last_updated()
                return HttpResponseRedirect(reverse('services_ticket_view', args=[ticket.id]))

        else:
            form = TicketRecordForm(agent, ticket)
    else:
        form = None

    context.update({'ticket': ticket, 'record_form': form})

    return render_to_response('services/ticket_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def ticket_edit(request, ticket_id, response_format='html'):
    "Ticket edit"

    context = _get_default_context(request)
    agent = context['agent']

    ticket = get_object_or_404(Ticket, pk=ticket_id)
    if not request.user.get_profile().has_permission(ticket, mode='w'):
        return user_denied(request, message="You don't have access to this Ticket")

    if request.POST:
        if not 'cancel' in request.POST:
            form = TicketForm(
                request.user.get_profile(), None, agent, request.POST, instance=ticket)
            if form.is_valid():
                ticket = form.save()
                return HttpResponseRedirect(reverse('services_ticket_view', args=[ticket.id]))
        else:
            return HttpResponseRedirect(reverse('services_ticket_view', args=[ticket.id]))
    else:
        form = TicketForm(
            request.user.get_profile(), None, agent, instance=ticket)

    context.update({'form': form,
                    'ticket': ticket})

    return render_to_response('services/ticket_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def ticket_set_status(request, ticket_id, status_id, response_format='html'):
    "Ticket quick set: Status"
    ticket = get_object_or_404(Ticket, pk=ticket_id)
    if not request.user.get_profile().has_permission(ticket, mode='w'):
        return user_denied(request, message="You don't have access to this Ticket")

    status = get_object_or_404(TicketStatus, pk=status_id)
    if not request.user.get_profile().has_permission(status):
        return user_denied(request, message="You don't have access to this Ticket Status")

    if not ticket.status == status:
        ticket.status = status
        ticket.save()

    return ticket_view(request, ticket_id, response_format)


@handle_response_format
@treeio_login_required
def ticket_delete(request, ticket_id, response_format='html'):
    "Ticket delete"

    ticket = get_object_or_404(Ticket, pk=ticket_id)
    if not request.user.get_profile().has_permission(ticket, mode='w'):
        return user_denied(request, message="You don't have access to this Ticket")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                ticket.trash = True
                ticket.save()
            else:
                ticket.delete()
            return HttpResponseRedirect(reverse('services_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('services_ticket_view', args=[ticket.id]))

    context = _get_default_context(request)
    context.update({'ticket': ticket})

    return render_to_response('services/ticket_delete', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def ticket_add(request, queue_id=None, response_format='html'):
    "Ticket add"

    context = _get_default_context(request)
    agent = context['agent']
    profile = request.user.get_profile()

    queue = None
    if queue_id:
        queue = get_object_or_404(TicketQueue, pk=queue_id)
        if not profile.has_permission(queue, mode='x'):
            queue = None

    if request.POST:
        if not 'cancel' in request.POST:
            ticket = Ticket(creator=profile)
            if not agent:
                if queue:
                    ticket.queue = queue
                    if queue.default_ticket_status:
                        ticket.status = queue.default_ticket_status
                    else:
                        try:
                            conf = ModuleSetting.get_for_module(
                                'treeio.services', 'default_ticket_status')[0]
                            ticket.status = TicketStatus.objects.get(
                                pk=long(conf.value))
                        except:
                            if 'statuses' in context:
                                try:
                                    ticket.status = context['statuses'][0]
                                except:
                                    pass
                    ticket.priority = queue.default_ticket_priority
                    ticket.service = queue.default_service
                else:
                    try:
                        conf = ModuleSetting.get_for_module(
                            'treeio.services', 'default_ticket_status')[0]
                        ticket.status = TicketStatus.objects.get(
                            pk=long(conf.value))
                    except:
                        if 'statuses' in context:
                            try:
                                ticket.status = context['statuses'][0]
                            except:
                                pass
                    try:
                        conf = ModuleSetting.get_for_module(
                            'treeio.services', 'default_ticket_queue')[0]
                        ticket.queue = TicketQueue.objects.get(
                            pk=long(conf.value))
                    except:
                        if 'queues' in context:
                            try:
                                ticket.queue = context['queues'][0]
                            except:
                                pass
                try:
                    ticket.caller = profile.get_contact()
                except:
                    pass
            form = TicketForm(
                profile, queue, agent, request.POST, instance=ticket)
            if form.is_valid():
                ticket = form.save()
                ticket.set_user_from_request(request)
                return HttpResponseRedirect(reverse('services_ticket_view', args=[ticket.id]))
        else:
            return HttpResponseRedirect(reverse('services'))
    else:
        form = TicketForm(request.user.get_profile(), queue, agent)

    context.update({'form': form, 'queue': queue})

    return render_to_response('services/ticket_add', context,
                              context_instance=RequestContext(request), response_format=response_format)

#
# Services
#


@handle_response_format
@treeio_login_required
def service_catalogue(request, response_format='html'):
    "All available Services"

    services = Object.filter_by_request(
        request, Service.objects.filter(parent__isnull=True))

    filters = FilterForm(request.user.get_profile(), '', request.GET)

    context = _get_default_context(request)
    context.update({'services': services, 'filters': filters})

    return render_to_response('services/service_catalogue', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def service_view(request, service_id, response_format='html'):
    "Service view"

    service = get_object_or_404(Service, pk=service_id)
    if not request.user.get_profile().has_permission(service) \
            and not request.user.get_profile().is_admin('treeio_services'):
        return user_denied(request, message="You don't have access to this Service")

    context = _get_default_context(request)
    context.update({'service': service})

    return render_to_response('services/service_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def service_edit(request, service_id, response_format='html'):
    "Service edit"

    service = get_object_or_404(Service, pk=service_id)
    if not request.user.get_profile().has_permission(service, mode='w') \
            and not request.user.get_profile().is_admin('treeio_services'):
        return user_denied(request, message="You don't have access to this Service")

    if request.POST:
        if not 'cancel' in request.POST:
            form = ServiceForm(
                request.user.get_profile(), request.POST, instance=service)
            if form.is_valid():
                service = form.save()
                return HttpResponseRedirect(reverse('services_service_view', args=[service.id]))
        else:
            return HttpResponseRedirect(reverse('services_service_view', args=[service.id]))
    else:
        form = ServiceForm(request.user.get_profile(), instance=service)

    context = _get_default_context(request)
    context.update({'form': form, 'service': service})

    return render_to_response('services/service_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def service_delete(request, service_id, response_format='html'):
    "Service delete"

    service = get_object_or_404(Service, pk=service_id)
    if not request.user.get_profile().has_permission(service, mode='w') \
            and not request.user.get_profile().is_admin('treeio_services'):
        return user_denied(request, message="You don't have access to this Service")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                service.trash = True
                service.save()
            else:
                service.delete()
            return HttpResponseRedirect(reverse('services_service_catalogue'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('services_service_view', args=[service.id]))

    context = _get_default_context(request)
    context.update({'service': service})

    return render_to_response('services/service_delete', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def service_add(request, response_format='html'):
    "Service add"

    if not request.user.get_profile().is_admin('treeio.services'):
        return user_denied(request,
                           message="You don't have administrator access to the Service Support module")

    if request.POST:
        if not 'cancel' in request.POST:
            service = Service()
            form = ServiceForm(
                request.user.get_profile(), request.POST, instance=service)
            if form.is_valid():
                service = form.save()
                service.set_user_from_request(request)
                return HttpResponseRedirect(reverse('services_service_view', args=[service.id]))
        else:
            return HttpResponseRedirect(reverse('services'))
    else:
        form = ServiceForm(request.user.get_profile())

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('services/service_add', context,
                              context_instance=RequestContext(request), response_format=response_format)


#
# ServiceLevelAgreements
#

@handle_response_format
@treeio_login_required
def sla_index(request, response_format='html'):
    "All available Service Level Agreements"

    if request.GET:
        query = _get_filter_query(request.GET, ServiceLevelAgreement)
        slas = Object.filter_by_request(request,
                                        ServiceLevelAgreement.objects.filter(query))
    else:
        slas = Object.filter_by_request(request,
                                        ServiceLevelAgreement.objects)

    filters = SLAFilterForm(request.user.get_profile(), '', request.GET)

    context = _get_default_context(request)
    context.update({'slas': slas, 'filters': filters})

    return render_to_response('services/sla_index', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def sla_view(request, sla_id, response_format='html'):
    "ServiceLevelAgreement view"

    sla = get_object_or_404(ServiceLevelAgreement, pk=sla_id)
    if not request.user.get_profile().has_permission(sla):
        return user_denied(request, message="You don't have access to this Service Level Agreement")

    context = _get_default_context(request)
    context.update({'sla': sla})

    return render_to_response('services/sla_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def sla_edit(request, sla_id, response_format='html'):
    "ServiceLevelAgreement edit"

    sla = get_object_or_404(ServiceLevelAgreement, pk=sla_id)
    if not request.user.get_profile().has_permission(sla, mode='w'):
        return user_denied(request, message="You don't have access to this Service Level Agreement")

    if request.POST:
        if not 'cancel' in request.POST:
            form = ServiceLevelAgreementForm(
                request.user.get_profile(), request.POST, instance=sla)
            if form.is_valid():
                sla = form.save()
                return HttpResponseRedirect(reverse('services_sla_view', args=[sla.id]))
        else:
            return HttpResponseRedirect(reverse('services_sla_view', args=[sla.id]))
    else:
        form = ServiceLevelAgreementForm(
            request.user.get_profile(), instance=sla)

    context = _get_default_context(request)
    context.update({'sla': sla, 'form': form})

    return render_to_response('services/sla_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def sla_delete(request, sla_id, response_format='html'):
    "ServiceLevelAgreement delete"

    sla = get_object_or_404(ServiceLevelAgreement, pk=sla_id)
    if not request.user.get_profile().has_permission(sla, mode='w'):
        return user_denied(request, message="You don't have access to this Service Level Agreement")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                sla.trash = True
                sla.save()
            else:
                sla.delete()
            return HttpResponseRedirect(reverse('services_sla_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('services_sla_view', args=[sla.id]))

    context = _get_default_context(request)
    context.update({'sla': sla})

    return render_to_response('services/sla_delete', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def sla_add(request, response_format='html'):
    "ServiceLevelAgreement add"

    if not request.user.get_profile().is_admin('treeio.services'):
        return user_denied(request,
                           message="You don't have administrator access to the Service Support module")

    if request.POST:
        if not 'cancel' in request.POST:
            sla = ServiceLevelAgreement()
            form = ServiceLevelAgreementForm(
                request.user.get_profile(), request.POST, instance=sla)
            if form.is_valid():
                sla = form.save()
                sla.set_user_from_request(request)
                return HttpResponseRedirect(reverse('services_sla_view', args=[sla.id]))
        else:
            return HttpResponseRedirect(reverse('services'))
    else:
        form = ServiceLevelAgreementForm(request.user.get_profile())

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('services/sla_add', context,
                              context_instance=RequestContext(request), response_format=response_format)


#
# Settings
#
@handle_response_format
@treeio_login_required
def settings_view(request, response_format='html'):
    "Settings"

    if not request.user.get_profile().is_admin('treeio.services'):
        return user_denied(request,
                           message="You don't have administrator access to the Service Support module")

    # default ticket status
    try:
        conf = ModuleSetting.get_for_module(
            'treeio.services', 'default_ticket_status')[0]
        default_ticket_status = TicketStatus.objects.get(pk=long(conf.value))
    except Exception:
        default_ticket_status = None

    # default queue
    try:
        conf = ModuleSetting.get_for_module(
            'treeio.services', 'default_ticket_queue')[0]
        default_ticket_queue = TicketQueue.objects.get(pk=long(conf.value))
    except Exception:
        default_ticket_queue = None

    # notify ticket caller by email
    try:
        conf = ModuleSetting.get_for_module(
            'treeio.services', 'send_email_to_caller')[0]
        send_email_to_caller = conf.value
    except Exception:
        send_email_to_caller = settings.HARDTREE_SEND_EMAIL_TO_CALLER

    # notification template
    send_email_example = ''
    try:
        conf = ModuleSetting.get_for_module(
            'treeio.services', 'send_email_template')[0]
        send_email_template = conf.value
    except Exception:
        send_email_template = None

    queues = TicketQueue.objects.filter(trash=False, parent__isnull=True)
    statuses = TicketStatus.objects.filter(trash=False)

    if send_email_to_caller:
        # Render example e-mail
        try:
            ticket = Object.filter_by_request(
                request, Ticket.objects.filter(status__hidden=False, caller__isnull=False))[0]
        except IndexError:
            ticket = Ticket(reference='REF123', name='New request')
        if not ticket.caller:
            try:
                caller = Object.filter_by_request(request, Contact.objects)[0]
            except IndexError:
                caller = Contact(name='John Smith')
            ticket.caller = caller
        try:
            ticket.status
        except:
            try:
                ticket.status = statuses[0]
            except IndexError:
                ticket.status = TicketStatus(name='Open')
        if send_email_template:
            try:
                send_email_example = render_string_template(
                    send_email_template, {'ticket': ticket})
            except:
                send_email_example = render_to_string(
                    'services/emails/notify_caller', {'ticket': ticket}, response_format='html')
        else:
            send_email_example = render_to_string(
                'services/emails/notify_caller', {'ticket': ticket}, response_format='html')

    context = _get_default_context(request)
    context.update({'settings_queues': queues,
                    'settings_statuses': statuses,
                    'default_ticket_status': default_ticket_status,
                    'default_ticket_queue': default_ticket_queue,
                    'send_email_to_caller': send_email_to_caller,
                    'send_email_example': send_email_example})

    return render_to_response('services/settings_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def settings_edit(request, response_format='html'):
    "Settings"

    if not request.user.get_profile().is_admin('treeio.services'):
        return user_denied(request,
                           message="You don't have administrator access to the Service Support module")

    if request.POST:
        if not 'cancel' in request.POST:
            form = SettingsForm(request.user.get_profile(), request.POST)
            if form.is_valid():
                form.save()
                return HttpResponseRedirect(reverse('services_settings_view'))
        else:
            return HttpResponseRedirect(reverse('services_settings_view'))
    else:
        form = SettingsForm(request.user.get_profile())

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('services/settings_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)

#
# Agents
#


@handle_response_format
@treeio_login_required
def agent_index(request, response_format='html'):
    "All available Agents"

    if not request.user.get_profile().is_admin('treeio.services'):
        return user_denied(request,
                           message="You don't have administrator access to the Service Support module")

    if request.GET:
        query = _get_filter_query(request.GET, ServiceAgent)
        agents = Object.filter_by_request(request,
                                          ServiceAgent.objects.filter(query))
    else:
        agents = Object.filter_by_request(request,
                                          ServiceAgent.objects)

    filters = AgentFilterForm(request.user.get_profile(), '', request.GET)

    context = _get_default_context(request)
    context.update({'agents': agents, 'filters': filters})

    return render_to_response('services/agent_index', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def agent_view(request, agent_id, response_format='html'):
    "Agent view"

    view_agent = get_object_or_404(ServiceAgent, pk=agent_id)
    if not request.user.get_profile().has_permission(view_agent):
        return user_denied(request, message="You don't have access to this Service Agent")

    context = _get_default_context(request)
    context.update({'view_agent': view_agent})

    return render_to_response('services/agent_view', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def agent_edit(request, agent_id, response_format='html'):
    "Agent edit"

    view_agent = get_object_or_404(ServiceAgent, pk=agent_id)
    if not request.user.get_profile().has_permission(view_agent):
        return user_denied(request, message="You don't have access to this Service Agent")

    if request.POST:
        if not 'cancel' in request.POST:
            form = AgentForm(
                request.user.get_profile(), request.POST, instance=view_agent)
            if form.is_valid():
                view_agent = form.save()
                return HttpResponseRedirect(reverse('services_agent_view', args=[view_agent.id]))
        else:
            return HttpResponseRedirect(reverse('services_agent_view', args=[view_agent.id]))
    else:
        form = AgentForm(request.user.get_profile(), instance=view_agent)

    context = _get_default_context(request)
    context.update({'form': form, 'view_agent': view_agent})

    return render_to_response('services/agent_edit', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def agent_delete(request, agent_id, response_format='html'):
    "Agent delete"

    view_agent = get_object_or_404(ServiceAgent, pk=agent_id)
    if not request.user.get_profile().has_permission(view_agent, mode='w'):
        return user_denied(request, message="You don't have access to this Service Agent")

    if request.POST:
        if 'delete' in request.POST:
            if 'trash' in request.POST:
                view_agent.trash = True
                view_agent.save()
            else:
                view_agent.delete()
            return HttpResponseRedirect(reverse('services_agent_index'))
        elif 'cancel' in request.POST:
            return HttpResponseRedirect(reverse('services_agent_view', args=[view_agent.id]))

    context = _get_default_context(request)
    context.update({'view_agent': view_agent})

    return render_to_response('services/agent_delete', context,
                              context_instance=RequestContext(request), response_format=response_format)


@handle_response_format
@treeio_login_required
def agent_add(request, response_format='html'):
    "Agent add"

    if not request.user.get_profile().is_admin('treeio.services'):
        return user_denied(request,
                           message="You don't have administrator access to the Service Support module")

    if request.POST:
        if not 'cancel' in request.POST:
            new_agent = ServiceAgent()
            form = AgentForm(
                request.user.get_profile(), request.POST, instance=new_agent)
            if form.is_valid():
                new_agent = form.save()
                new_agent.set_user_from_request(request)
                return HttpResponseRedirect(reverse('services_agent_view', args=[new_agent.id]))
        else:
            return HttpResponseRedirect(reverse('services_agent_index'))
    else:
        form = AgentForm(request.user.get_profile())

    context = _get_default_context(request)
    context.update({'form': form})

    return render_to_response('services/agent_add', context,
                              context_instance=RequestContext(request), response_format=response_format)


@treeio_login_required
def widget_index(request, response_format='html'):
    "All Active Tickets"

    tickets = Object.filter_by_request(
        request, Ticket.objects.filter(status__hidden=False))

    context = _get_default_context(request)
    context.update({'tickets': tickets})

    return render_to_response('services/widgets/index', context,
                              context_instance=RequestContext(request),
                              response_format=response_format)


@treeio_login_required
def widget_index_assigned(request, response_format='html'):
    "Tickets assigned to current user"

    context = _get_default_context(request)
    agent = context['agent']

    if agent:
        tickets = Object.filter_by_request(request, Ticket.objects.filter(assigned=agent,
                                                                          status__hidden=False))
    else:
        return user_denied(request, "You are not a Service Support Agent.")

    context.update({'tickets': tickets})

    return render_to_response('services/widgets/index_assigned', context,
                              context_instance=RequestContext(request), response_format=response_format)


#
# AJAX lookups
#
@treeio_login_required
def ajax_ticket_lookup(request, response_format='html'):
    "Returns a list of matching tickets"

    tickets = []
    if request.GET and 'term' in request.GET:
        tickets = Ticket.objects.filter(
            name__icontains=request.GET['term'])[:10]

    return render_to_response('services/ajax_ticket_lookup',
                              {'tickets': tickets},
                              context_instance=RequestContext(request),
                              response_format=response_format)


@treeio_login_required
def ajax_agent_lookup(request, response_format='html'):
    "Returns a list of matching agents"

    agents = []
    if request.GET and 'term' in request.GET:
        agents = ServiceAgent.objects.filter(Q(related_user__name__icontains=request.GET['term']) |
                                             Q(related_user__contact__name__icontains=request.GET['term']))

    return render_to_response('services/ajax_agent_lookup',
                              {'agents': agents},
                              context_instance=RequestContext(request),
                              response_format=response_format)

########NEW FILE########
__FILENAME__ = widgets
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Services module widgets
"""

WIDGETS = {'widget_index': {'title': 'Active Service Tickets',
                            'size': "95%"},
           'widget_index_assigned': {'title': 'Service Tickets Assigned to me',
                                     'size': "95%"}}


def get_widgets(request):
    "Returns a set of all available widgets"

    widgets = {}
    widgets.update(WIDGETS)

    try:
        agent = request.user.get_profile().serviceagent_set.all()[0]
    except Exception:
        agent = None

    if not agent:
        del widgets['widget_index_assigned']

    return widgets

########NEW FILE########
__FILENAME__ = settings
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

# coding=utf-8

"""
Django settings for treeio project.
"""

from os import path
# assuming settings are in the same dir as source
PROJECT_ROOT = path.abspath(path.dirname(__file__))

DEBUG = True
TEMPLATE_DEBUG = DEBUG

QUERY_DEBUG = False
QUERY_DEBUG_FULL = False

ADMINS = (
    # ('Your Name', 'your_email@domain.com'),
)

MANAGERS = ADMINS

from core.db import DatabaseDict
DATABASES = DatabaseDict()

import sys
# Covers regular testing and django-coverage
TESTING = 'test' in sys.argv or 'test_coverage' in sys.argv
if TESTING:
    DATABASES = {'default': {}}
    DATABASES['default']['ENGINE'] = 'django.db.backends.sqlite3'

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'UTC'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-GB'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True
FORMAT_MODULE_PATH = 'treeio.formats'

HARDTREE_API_CONSUMER_DB = 'default'
# OAUTH_DATA_STORE is needed for correct database setting up
OAUTH_DATA_STORE = 'treeio.core.api.auth.store.store'


# Static files location for Tree.io
STATIC_ROOT = path.join(PROJECT_ROOT, 'static')
STATIC_URL = path.join(PROJECT_ROOT, 'static/')
STATIC_DOC_ROOT = path.join(PROJECT_ROOT, 'static')
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'dajaxice.finders.DajaxiceFinder',
)

# Absolute path to the directory that holds media.
# Example: "/home/media/media.lawrence.com/"
MEDIA_ROOT = path.join(STATIC_DOC_ROOT, 'media/')

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash if there is a path component (optional in other cases).
# Examples: "http://media.lawrence.com", "http://example.com/media/"
MEDIA_URL = '/static/media/'

# Captcha Settings
CAPTCHA_FONT_SIZE = 30
CAPTCHA_LENGTH = 6
CAPTCHA_DISABLE = True
CAPTCHA_FOREGROUND_COLOR = '#333333'
CAPTCHA_NOISE_FUNCTIONS = []

# URL prefix for admin media -- CSS, JavaScript and images. Make sure to use a
# trailing slash.
# Examples: "http://foo.com/media/", "/media/".
ADMIN_MEDIA_PREFIX = '/static-admin/'

# Make this unique, and don't share it with anybody.
SECRET_KEY = 'z_#oc^n&z0c2lix=s$4+z#lsb9qd32qtb!#78nk7=5$_k3lq16'

# List of callables that know how to import templates from various sources.
# TEMPLATE_LOADERS = (
#     'django.template.loaders.filesystem.load_template_source',
#     'django.template.loaders.app_directories.load_template_source',
#     'django.template.loaders.eggs.load_template_source',
# )
if DEBUG or TESTING:
    TEMPLATE_LOADERS = [
        'django.template.loaders.filesystem.Loader',
        'django.template.loaders.app_directories.Loader',
        'django.template.loaders.eggs.Loader',
    ]
else:
    TEMPLATE_LOADERS = [
        ('django.template.loaders.cached.Loader', (
            'django.template.loaders.filesystem.Loader',
            'django.template.loaders.app_directories.Loader',
            'django.template.loaders.eggs.Loader',
        )),
    ]

TEMPLATE_CONTEXT_PROCESSORS = (
    "django.contrib.auth.context_processors.auth",
    "django.core.context_processors.i18n",
    "django.core.context_processors.debug",
    "django.core.context_processors.media",
    "django.core.context_processors.request",
    'django.contrib.messages.context_processors.messages',
)


MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'treeio.core.middleware.user.AuthMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    "treeio.core.middleware.user.LanguageMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    'django.middleware.common.CommonMiddleware',
    'johnny.middleware.LocalStoreClearMiddleware',
    'johnny.middleware.QueryCacheMiddleware',
    'django.middleware.gzip.GZipMiddleware',
    #    'treeio.core.middleware.domain.DomainMiddleware',
    'treeio.core.middleware.user.SSLMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'treeio.core.middleware.chat.ChatAjaxMiddleware',
    "django.contrib.messages.middleware.MessageMiddleware",
    "treeio.core.middleware.modules.ModuleDetect",
    "minidetector.Middleware",
    "treeio.core.middleware.user.CommonMiddleware",
    "treeio.core.middleware.user.PopupMiddleware",
)


ROOT_URLCONF = 'treeio.urls'

TEMPLATE_DIRS = (
    path.join(PROJECT_ROOT, 'templates'),
)


INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.admin',
    'django.contrib.markup',
    'django_websocket',
    'django.contrib.messages',
    'treeio.account',
    'treeio.core',
    'treeio.core.api',
    'treeio.core.search',
    'treeio.documents',
    'treeio.events',
    'treeio.finance',
    'treeio.identities',
    'treeio.infrastructure',
    'treeio.knowledge',
    'treeio.messaging',
    'treeio.news',
    'treeio.projects',
    'treeio.reports',
    'treeio.sales',
    'treeio.services',
    'dajaxice',
    'dajax',
    'coffin',
    'captcha',
    'south',
)


TEST_RUNNER = 'treeio.core.test_runner.CustomTestRunner'

AUTH_PROFILE_MODULE = 'core.User'

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'treeio.core.auth.HashBackend',
    'treeio.core.auth.EmailBackend',
)

# LDAP Configuration
#AUTH_LDAP_SERVER_URI = 'ldap://'
#AUTH_LDAP_BIND_DN = ""
#AUTH_LDAP_BIND_PASSWORD = ""
# AUTH_LDAP_USER_SEARCH = LDAPSearch("ou=users,dc=example,dc=com",
#        ldap.SCOPE_SUBTREE, "(uid=%(user)s)")
#AUTH_LDAP_START_TLS = True

#
# Hardtree configuration
#
HARDTREE_MODULE_IDENTIFIER = 'hmodule'

HARDTREE_DEFAULT_USER_ID = 1

HARDTREE_DEFAULT_PERMISSIONS = 'everyone'

HARDTREE_SEND_EMAIL_TO_CALLER = True

HARDTREE_ALLOW_EMAIL_NOTIFICATIONS = True
HARDTREE_ALLOW_GRITTER_NOTIFICATIONS = True

HARDTREE_PASSWORD_LENGTH_MIN = 4

HARDTREE_RESPONSE_FORMATS = {
    'html': 'text/html',
    'mobile': 'text/html',
    'json': 'text/plain',
    #'json': 'application/json',
    'ajax': 'text/plain',
    #'ajax': 'application/json',
    'csv': 'text/csv',
    'xls': 'text/xls',
    'pdf': 'application/pdf',
    'rss': 'application/rss+xml',
}

HARDTREE_IMAGE_MAX_SIZE = (300, 400)
HARDTREE_IMAGE_RESIZE_FILTER = 'ANTIALIAS'

HARDTREE_MINIFY_JSON = False

HARDTREE_PAGINATOR_LENGTH = 20
HARDTREE_PAGINATOR_PAGES = 15

#
# CRON Fine-tuning
#

# How often should we loop through jobs, add/remove from pool, recycle jobs:
HARDTREE_CRON_PERIOD = 10  # seconds, default 60

# Number of cycles to keep HIGH priority jobs before forcefully terminating
# HARDTREE_CRON_HIGH_PRIORITY = 10 # defualt 10 cycles

# Number of cycles to keep LOW priority jobs before forcefully terminating
# HARDTREE_CRON_LOW_PRIORITY = 3 # default 3 cycles

# Number of seconds since last access to domain to give the job HIGH priority
# HARDTREE_CRON_QUALIFY_HIGH = 10 # default 10 cycles

# Number of seconds since last access to domain to run cron jobs for the domain
# HARDTREE_CRON_QUALIFY_RUN = 86400 # seconds, default 86400, i.e. 1 day

# Number of jobs to keep in the pool at the same time
# HARDTREE_CRON_POOL_SIZE = 10 # default 10

# Priority value at which we should try to gracefully end a job
# HARDTREE_CRON_SOFT_KILL = 0 # defualt 0

# Priority value at which we must kill a job using any possible means (kill -9 job)
# HARDTREE_CRON_HARD_KILL = -1 # defualt -1

# Seconds to wait between SIGKILL signals to a dead job
# HARDTREE_CRON_GRACE_WAIT = 5 # default 5

# CHAT CRON!
HARDTREE_CRON_DISABLED = True  # Run chat?

# CRON config ends here

HARDTREE_MULTIPLE_LOGINS_DISABLED = False

HARDTREE_SERVER_DEFAULT_TIMEZONE = 49  # (GMT+00:00) UTC
HARDTREE_SERVER_TIMEZONE = (('0', u'(GMT-11:00) International Date Line West'),
                            ('1', u'(GMT-11:00) Midway Island'), ('2',
                                                                  u'(GMT-11:00) Samoa'),
                            ('3', u'(GMT-10:00) Hawaii'), ('4',
                                                           u'(GMT-09:00) Alaska'),
                            ('5', u'(GMT-08:00) Tijuana'), ('6',
                                                            u'(GMT-08:00) Pacific Time (US & Canada)'),
                            ('7', u'(GMT-07:00) Arizona'), ('8',
                                                            u'(GMT-07:00) Arizona'),
                            ('9', u'(GMT-08:00) Pacific Time (US & Canada)'), ('10',
                                                                               u'(GMT-07:00) Arizona'),
                            ('11', u'(GMT-07:00) Mountain Time (US & Canada)'), ('12',
                                                                                 u'(GMT-07:00) Chihuahua'),
                            ('13', u'(GMT-07:00) Mazatlan'), ('14',
                                                              u'(GMT-06:00) Central Time (US & Canada)'),
                            ('15', u'(GMT-06:00) Guadalajara'), ('16',
                                                                 u'(GMT-06:00) Mexico City'),
                            ('17', u'(GMT-06:00) Monterrey'), ('18',
                                                               u'(GMT-06:00) Saskatchewan'),
                            ('19', u'(GMT-05:00) Eastern Time (US & Canada)'), ('20',
                                                                                u'(GMT-05:00) Indiana (East)'),
                            ('21', u'(GMT-05:00) Bogota'), ('22',
                                                            u'(GMT-05:00) Lima'),
                            ('23', u'(GMT-05:00) Quito'), ('24',
                                                           u'(GMT-04:30) Caracas'),
                            ('25', u'(GMT-04:00) Atlantic Time (Canada)'), ('26',
                                                                            u'(GMT-04:00) La Paz'),
                            ('27', u'(GMT-04:00) Santiago'), ('28',
                                                              u'(GMT-03:30) Newfoundland'),
                            ('29', u'(GMT-08:00) Pacific Time (US & Canada)'), ('30',
                                                                                u'(GMT-03:00) Brasilia'),
                            ('31', u'(GMT-03:00) Buenos Aires'), ('32',
                                                                  u'(GMT-03:00) Georgetown'),
                            ('33', u'(GMT-03:00) Greenland'), ('34',
                                                               u'(GMT-02:00) Mid-Atlantic'),
                            ('35', u'(GMT-01:00) Azores'), ('36',
                                                            u'(GMT-01:00) Cape Verde Is.'),
                            ('37', u'(GMT+00:00) Casablanca'), ('38',
                                                                u'(GMT+00:00) Dublin'),
                            ('39', u'(GMT+00:00) Edinburgh'), ('40',
                                                               u'(GMT+00:00) Lisbon'),
                            ('41', u'(GMT+00:00) London'), ('42',
                                                            u'(GMT+00:00) Monrovia'),
                            ('43', u'(GMT+00:00) UTC'), ('44',
                                                         u'(GMT+01:00) Amsterdam'),
                            ('45', u'(GMT+01:00) Belgrade'), ('46',
                                                              u'(GMT+01:00) Berlin'),
                            ('47', u'(GMT+01:00) Bern'), ('48',
                                                          u'(GMT+01:00) Bratislava'),
                            ('49', u'(GMT+01:00) Brussels'), ('50',
                                                              u'(GMT+01:00) Budapest'),
                            ('51', u'(GMT+01:00) Copenhagen'), ('52',
                                                                u'(GMT+01:00) Ljubljana'),
                            ('53', u'(GMT+01:00) Madrid'), ('54',
                                                            u'(GMT+01:00) Paris'),
                            ('55', u'(GMT+01:00) Prague'), ('56',
                                                            u'(GMT+01:00) Rome'),
                            ('57', u'(GMT+01:00) Sarajevo'), ('58',
                                                              u'(GMT+01:00) Skopje'),
                            ('59', u'(GMT+01:00) Stockholm'), ('60',
                                                               u'(GMT+01:00) Vienna'),
                            ('61', u'(GMT+01:00) Warsaw'), ('62',
                                                            u'(GMT+01:00) West Central Africa'),
                            ('63', u'(GMT+01:00) Zagreb'), ('64',
                                                            u'(GMT+02:00) Athens'),
                            ('65', u'(GMT+02:00) Bucharest'), ('66',
                                                               u'(GMT+02:00) Cairo'),
                            ('67', u'(GMT+02:00) Harare'), ('68',
                                                            u'(GMT+02:00) Helsinki'),
                            ('69', u'(GMT+02:00) Istanbul'), ('70',
                                                              u'(GMT+02:00) Jerusalem'),
                            ('71', u'(GMT+02:00) Kyev'), ('72',
                                                          u'(GMT+02:00) Minsk'),
                            ('73', u'(GMT+02:00) Pretoria'), ('74',
                                                              u'(GMT+02:00) Riga'),
                            ('75', u'(GMT+02:00) Sofia'), ('76',
                                                           u'(GMT+02:00) Tallinn'),
                            ('77', u'(GMT+02:00) Vilnius'), ('78',
                                                             u'(GMT+03:00) Baghdad'),
                            ('79', u'(GMT+03:00) Kuwait'), ('80',
                                                            u'(GMT+03:00) Moscow'),
                            ('81', u'(GMT+03:00) Nairobi'), ('82',
                                                             u'(GMT+03:00) Riyadh'),
                            ('83', u'(GMT+03:00) St. Petersburg'), ('84',
                                                                    u'(GMT+03:00) Volgograd'),
                            ('85', u'(GMT+03:30) Tehran'), ('86',
                                                            u'(GMT+04:00) Abu Dhabi'),
                            ('87', u'(GMT+04:00) Baku'), ('88',
                                                          u'(GMT+04:00) Muscat'),
                            ('89', u'(GMT+04:00) Tbilisi'), ('90',
                                                             u'(GMT+04:00) Yerevan'),
                            ('91', u'(GMT+04:30) Kabul'), ('92',
                                                           u'(GMT+05:00) Ekaterinburg'),
                            ('93', u'(GMT+05:00) Islamabad'), ('94',
                                                               u'(GMT+05:00) Karachi'),
                            ('95', u'(GMT+05:00) Tashkent'), ('96',
                                                              u'(GMT+05:30) Chennai'),
                            ('97', u'(GMT+05:30) Kolkata'), ('98',
                                                             u'(GMT+05:30) Mumbai'),
                            ('99', u'(GMT+05:30) New Delhi'), ('100',
                                                               u'(GMT+05:30) Sri Jayawardenepura'),
                            ('101', u'(GMT+05:45) Kathmandu'), ('102',
                                                                u'(GMT+06:00) Almaty'),
                            ('103', u'(GMT+06:00) Astana'), ('104',
                                                             u'(GMT+06:00) Dhaka'),
                            ('105', u'(GMT+06:00) Novosibirsk'), ('106',
                                                                  u'(GMT+06:30) Rangoon'),
                            ('107', u'(GMT+07:00) Bangkok'), ('108',
                                                              u'(GMT+07:00) Hanoi'),
                            ('109', u'(GMT+07:00) Jakarta'), ('110',
                                                              u'(GMT+07:00) Krasnoyarsk'),
                            ('111', u'(GMT+08:00) Beijing'), ('112',
                                                              u'(GMT+08:00) Chongqing'),
                            ('113', u'(GMT+08:00) Hong Kong'), ('114',
                                                                u'(GMT+08:00) Irkutsk'),
                            ('115', u'(GMT+08:00) Kuala Lumpur'), ('116',
                                                                   u'(GMT+08:00) Perth'),
                            ('117', u'(GMT+08:00) Singapore'), ('118',
                                                                u'(GMT+08:00) Taipei'),
                            ('119', u'(GMT+08:00) Ulaan Bataar'), ('120',
                                                                   u'(GMT+08:00) Urumqi'),
                            ('121', u'(GMT+09:00) Osaka'), ('122',
                                                            u'(GMT+09:00) Sapporo'),
                            ('123', u'(GMT+09:00) Seoul'), ('124',
                                                            u'(GMT+09:00) Tokyo'),
                            ('125', u'(GMT+09:00) Yakutsk'), ('126',
                                                              u'(GMT+09:30) Adelaide'),
                            ('127', u'(GMT+09:30) Darwin'), ('128',
                                                             u'(GMT+10:00) Brisbane'),
                            ('129', u'(GMT+10:00) Canberra'), ('130',
                                                               u'(GMT+10:00) Guam'),
                            ('131', u'(GMT+10:00) Hobart'), ('132',
                                                             u'(GMT+10:00) Melbourne'),
                            ('133', u'(GMT+10:00) Port Moresby'), ('134',
                                                                   u'(GMT+10:00) Sydney'),
                            ('135', u'(GMT+10:00) Vladivostok'), ('136',
                                                                  u'(GMT+11:00) Magadan'),
                            ('137', u'(GMT+11:00) New Caledonia'), ('138',
                                                                    u'(GMT+11:00) Solomon Is.'),
                            ('139', u'(GMT+12:00) Auckland'), ('140',
                                                               u'(GMT+12:00) Fiji'),
                            ('141', u'(GMT+12:00) Kamchatka'), ('142',
                                                                u'(GMT+12:00) Marshall Is.'),
                            ('143', u'(GMT+12:00) Wellington'), ('144',
                                                                 u'(GMT+13:00) Nukualofa'),
                            )

#
# Messaging
#
HARDTREE_MESSAGING_POP3_LIMIT = 100  # number of emails
HARDTREE_MESSAGING_IMAP_LIMIT = 200  # number of emails

HARDTREE_MESSAGING_UNSAFE_BLOCKS = ('head', 'object', 'embed', 'applet', 'noframes',
                                    'noscript', 'noembed', 'iframe', 'frame', 'frameset')

HARDTREE_MESSAGING_IMAP_DEFAULT_FOLDER_NAME = 'UNSEEN'

HARDTREE_SIGNALS_AUTOCREATE_USER = False

HARDTREE_HELP_LINK_PREFIX = '/help/'
HARDTREE_HELP_SOURCE = 'http://www.tree.io/help'

HARDTREE_LANGUAGES = (('en', u'English'), ('ru', u'Русский'), ('es', u'Español'), ('de', u'Deutsche'), (
    'zh_CN', u'简体中文'), ('fr', u'Français'), ('el', u'ελληνικά'), ('pt_BR', u'português'))
HARDTREE_LANGUAGES_DEFAULT = 'en'

LOCALE_PATHS = (PROJECT_ROOT + "/locale",)

HARDTREE_AJAX_RELOAD_ON_REDIRECT = ('home',
                                    'user_login',
                                    'account_settings_view',
                                    'core_admin_index_perspectives',
                                    'core_admin_perspective_view',
                                    'core_settings_view')

HARDTREE_FORCE_AJAX_RENDERING = True

#
# htsafe settings
#

# Replace unsafe tags
HARDTREE_SAFE_TAGS = ('div', 'ul', 'li', 'label', 'span', 'strong', 'em', 'p', 'input',
                      'select', 'textarea', 'br')
HARDTREE_UNSAFE_TAGS = ('script', 'object', 'embed',
                        'applet', 'noframes', 'noscript', 'noembed', 'iframe',
                        'frame', 'frameset')


#
# Hardtree Subcription settings
#

EVERGREEN_FREE_USERS = 3

USER_PRICE = 15

HARDTREE_SUBSCRIPTION_CUSTOMIZATION = True

HARDTREE_SUBSCRIPTION_USER_LIMIT = 0

HARDTREE_SUBSCRIPTION_BLOCKED = False

HARDTREE_SUBSCRIPTION_SSL_ENABLED = False
HARDTREE_SUBSCRIPTION_SSL_ENFORCE = False

HARDTREE_DEMO_MODE = False


#
# Nuvius settings (for integration)
#
NUVIUS_URL = "http://nuvius.com"
NUVIUS_KEY = '28563.ff6ed93307fc398a52d312966c122660'
NUVIUS_SOURCE_ID = "28563"
NUVIUS_NEXT = "iframe"
NUVIUS_CHECK_USER_KEYS = True

NUVIUS_DATA_CACHE_LIFE = 600
CACHE_KEY_PREFIX = 'treeio_'

#
# Email settings
#

EMAIL_SERVER = 'localhost'
IMAP_SERVER = ''
EMAIL_USERNAME = None
EMAIL_PASSWORD = None
EMAIL_FROM = 'noreply@tree.io'
DEFAULT_SIGNATURE = """
Thanks!
The Tree.io Team
http://www.tree.io
            """


#
# Search index (Whoosh)
#
SEARCH_DISABLED = False
SEARCH_ENGINE = 'db'

from whoosh import fields
WHOOSH_SCHEMA = fields.Schema(id=fields.ID(stored=True, unique=True),
                              name=fields.TEXT(stored=True),
                              type=fields.TEXT(stored=True),
                              content=fields.TEXT,
                              url=fields.ID(stored=True))

WHOOSH_INDEX = path.join(PROJECT_ROOT, 'storage/search')

#
# CACHING
#
#CACHE_BACKEND = 'dummy://'
CACHE_BACKEND = 'locmem://?timeout=30'
#CACHE_BACKEND = 'memcached://127.0.0.1:11211/?timeout=30'

# CACHE_BACKEND="johnny.backends.locmem://"

JOHNNY_MIDDLEWARE_KEY_PREFIX = 'jc_treeio'

DISABLE_QUERYSET_CACHE = False

HARDTREE_OBJECT_BLACKLIST = ['id', 'creator', 'object_name', 'object_type',
                             'trash', 'full_access', 'read_access', 'nuvius_resource',
                             'object_ptr', 'comments', 'likes', 'dislikes', 'tags',
                             'links', 'subscribers', 'read_by']

HARDTREE_UPDATE_BLACKLIST = ['likes', 'dislikes', 'tags', 'reference', 'total',
                             'links', 'subscribers', 'read_by', 'date_created', 'last_updated']

HARDTREE_TIMEZONE_BLACKLIST = [
    'date_created', 'last_updated', 'time_from', 'time_to']

WKPATH = path.join(PROJECT_ROOT, 'bin/wkhtmltopdf')
WKCWD = PROJECT_ROOT

CHAT_LONG_POLLING = False
CHAT_TIMEOUT = 25  # response time if not new data
CHAT_TIME_SLEEP_THREAD = 25  # interval for "Delete inactive users"
CHAT_TIME_SLEEP_NEWDATA = 1  # time sleep in expectation of new data

MESSAGE_STORAGE = 'treeio.core.contrib.messages.storage.cache.CacheStorage'

# Dajaxice settings
DAJAXICE_MEDIA_PREFIX = "dajaxice"

########NEW FILE########
__FILENAME__ = urls
# encoding: utf-8
# Copyright 2011 Tree.io Limited
# This file is part of Treeio.
# License www.tree.io/license

"""
Hardtree URLs
"""
from django.conf.urls import patterns, url, include
from django.conf import settings
from django.contrib.staticfiles.urls import staticfiles_urlpatterns
from django.contrib import admin

from dajaxice.core import dajaxice_autodiscover, dajaxice_config
dajaxice_autodiscover()


def if_installed(appname, *args, **kwargs):
    ret = url(*args, **kwargs)
    if appname not in settings.INSTALLED_APPS:
        ret = url(r'^(\.(?P<response_format>\w+))?$',
                  'treeio.core.dashboard.views.index', name='home')
        #ret.resolve = lambda *args: None
    return ret

# Uncomment the next two lines to enable the admin:
# from django.contrib import admin
admin.autodiscover()

urlpatterns = patterns('',
    url(r'^(\.(?P<response_format>\w+))?$',
        'treeio.core.dashboard.views.index', name='home'),
    (r'^user/', include('treeio.core.urls')),
    (r'^accounts/', include('treeio.core.urls')),
    (r'^account/', include('treeio.account.urls')),
    (r'^search/', include('treeio.core.search.urls')),
    (r'^dashboard/', include('treeio.core.dashboard.urls')),
    (r'^admin/', include('treeio.core.administration.urls')),
    (r'^trash/', include('treeio.core.trash.urls')),
    (r'^documents/', include('treeio.documents.urls')),
    (r'^calendar/', include('treeio.events.urls')),
    (r'^finance/', include('treeio.finance.urls')),
    (r'^contacts/', include('treeio.identities.urls')),
    (r'^infrastructure/', include('treeio.infrastructure.urls')),
    (r'^knowledge/', include('treeio.knowledge.urls')),
    (r'^messaging/', include('treeio.messaging.urls')),
    (r'^news/', include('treeio.news.urls')),
    (r'^projects/', include('treeio.projects.urls')),
    (r'^sales/', include('treeio.sales.urls')),
    (r'^services/', include('treeio.services.urls')),
    (r'^reports/', include('treeio.reports.urls')),

    # API handlers
    (r'^api/', include('treeio.core.api.urls')),

    # Forest
    # if_installed('treeio.forest', r'^forest/', include('treeio.forest.urls')),

    # Mobile handler
    url(r'^m(?P<url>.+)?$', 'treeio.core.views.mobile_view',
        name='core_mobile_view'),

    # Help handler
    url(r'^help(?P<url>[a-zA-Z0-9-_/]+)?(\.(?P<response_format>\w+))?$',
        'treeio.core.views.help_page', name='core_help_page_view'),

    # Close iframe
    url(r'^iframe/?$', 'treeio.core.views.iframe_close',
        name='core_iframe_close'),

    # Captcha Config
    url(r'^captcha/', include('captcha.urls')),

    url(dajaxice_config.dajaxice_url, include('dajaxice.urls')),

    # Changed to backend (because it's backend!)
    (r'^backend/', include(admin.site.urls)),
    (r'^static/(?P<path>.*)$', 'django.views.static.serve',
     {'document_root': settings.STATIC_DOC_ROOT}),
)


if 'rosetta' in settings.INSTALLED_APPS:
    urlpatterns += patterns('',
                            url(r'^rosetta/', include('rosetta.urls')),
                            )
urlpatterns += staticfiles_urlpatterns()

########NEW FILE########
