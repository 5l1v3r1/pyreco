#############################
Trigger XMLRPC Server Example
#############################

Files
=====

:trigger-xmlrpc.sh:
    Simple startup script that also tails the logfile.

:trigger-xmlrpc.init:
    /etc/init.d script - INCOMPLETE AND PROBABLY BROKEN

:server.key:
    Self-signed server cert private key. For SSL.

:cacert.pem:
    Self-signed CA certificate. For SSL.

:users.txt:
    Passwd (5) user/password file used for auth to the SSH manhole (port 8001)

Dynamically adding new methods
===============================

Consider this example code to bind ``pow()`` to the server::

    import xmlrpclib
    import cPickle as pickle

    s = xmlrpclib.Server('https://localhost:8000/', verbose=True)

    # You have to pickle it because you can't send complex objects over the wire,
    # but since the XMLRPC server is also a Python application, you can have it
    # load and re-create the object.
    s.add_handler(pickle.dumps(pow))

    # Now call the newly added handler... Profit!
    # Should return 243
    print s.pow(3, 5)

What is Trigger?
================

Trigger is a robust network automation toolkit written in Python that was
designed for interfacing with network devices and managing network
configuration and security policy. It increases the speed and efficiency of
managing large-scale networks while reducing the risk of human error.

Started by the AOL Network Security team in 2006, Trigger was originally
designed for security policy management on firewalls, routers, and switches. It
has since been expanded to be a full-featured network automation toolkit.

With the high number of network devices on the AOL network this application is
invaluable to performance and reliability. We hope you'll find it useful on
your network and consider participating!

Key Features
============

Trigger is designed to work at scale and can support hundreds or thousands of
network devices with ease. Here are some of things that make Trigger tick:

+ Support for SSH, Telnet, and Juniper's Junoscript XML API.
+ Easily get an interactive shell or execute commands asynchronously.
+ Leverage advanced event-driven functionality to manage any number of
  jobs in parallel and handle output or errors as they return.
+ Powerful metadata interface for performing complex queries to group and
  associate network devices by name, manufacturer, type, location, and more.
+ Encrypted storage of login credentials so you can interact without constantly
  being prompted to enter your password.
+ Flexible access-list & firewall policy parser that can test access if access
  is permitted, or easily convert ACLs from one format to another.
+ Detailed support for timezones and maintenance windows.
+ A suite of tools for simplifying many common tasks.

New in version 1.2:

+ Import your metadata from an existing `RANCID
  <http://shrubbery.net/rancid/>`_ installation to get up-and-running quickly!

New in version 1.3:

+ Import your metadata from a CSV file and get up-and-running even quicker!

Getting Started
===============

The best way to get started is to read the documentation hosted by `Read the
Docs <http://readthedocs.org>`_ at `http://trigger.readthedocs.org
<http://trigger.readthedocs.org>`_. There you will find everything you need to
get going including usage examples, installation and configuration
instructions, and more!

Before you begin
----------------

+ The `develop <https://github.com/trigger/trigger/tree/develop>`_ branch is
  the default branch that will be active when you clone this repository. While
  it is generally stable this branch is not considered production-ready. Use at
  your own risk!
+ The `master <https://github.com/trigger/trigger/tree/master>`_ branch is
  the stable branch, and will reflect the latest production-ready changes. It
  is recommended that this is the branch you use if you are installing Trigger
  for the first time.
+ Each point release of Trigger is maintained as a `tag branch
  <https://github.com/trigger/trigger/tags>`_. If you require a
  specific Trigger version, please refer to these.

Get in touch!
-------------

If you run into any snags, have questions, feedback, or just want to talk shop:
`contact us <http://trigger.readthedocs.org/en/latest/#getting-help>`_!

**Pro tip**: Find us on IRC at ``#trigger`` on Freenode
(`irc://irc.freenode.net/trigger <irc://irc.freenode.net/trigger>`_).

acl
===

Network access control list parsing library.

This is being forked from the ACL lib that is bundled with `Trigger
<https://github.com/trigger/trigger>`_. The goal is to pull this out of Trigger and
have it be a stand-alone project. Once it becomes stable, it will be pulled out
of Trigger core and converted into an optional feature.

Parsing Access-lists
~~~~~~~~~~~~~~~~~~~~

Let's start with a simple Cisco ACL::

    >>> from trigger.acl import parse
    >>> aclobj = parse("access-list 123 permit tcp any host 10.20.30.40 eq 80")
    >>> aclobj.terms
    [<Term: None>]
    >>> t = aclobj.terms[0]
    >>> t.match
    <Matches: destination-port [80], destination-address [IP('10.20.30.40')],
              protocol [<Protocol: tcp>]>

And convert it to Juniper format::

    >>> aclobj.name_terms() # Juniper policy terms must have names
    >>> aclobj.terms
    [<Term: T1>]
    >>> print '\n'.join(aclobj.output(format='junos'))
    filter 123 {
        term T1 {
            from {
                destination-address {
                    10.20.30.40/32;
                }
                protocol tcp;
                destination-port 80;
            }
            then {
                accept;
            }
        }
    }


Checking Access
~~~~~~~~~~~~~~~

Coming Soon(TM).

Noteworthy
~~~~~~~~~~

DSCP:
Juniper does not allow the inclusion of 'dscp' and 'dscp-except' in the same term.  The latter will override any others.

Observe::

    me@router# load merge terminal
    [Type ^D at a new line to end input]
    firewall filter asdf {
        term DSCP_term {
            /* Project:"non-zero TOS value DCSP" */
            from {
                dscp-except [ af11 cs0 ];
                dscp [ af11 be cs0 cs7 ];
            }
            then {
                count match_non_zero_DCSP;
                port-mirror;
                next term;
            }
        }
    }
    load complete

    [edit]
    me@router# show firewall filter asdf
    term DSCP_term {
        /* Project:"non-zero TOS value DCSP" */
        from {
            dscp [ af11 be cs0 cs7 ];
        }
        then {
            count match_non_zero_DCSP;
            port-mirror;
            next term;
        }
    }

    [edit]
    me@router#


