Splicer documentation and website
=================================

Documentation
-------------
This is your definite place to contribute to the splicer documentation. 
The documentation is generated from the .rst files under sources. 

Basic document structure, build files and a tad bit of content (such
as these instructinos for contributing to the documentation) have 
been lifted from the excellent docker project (http://docker.io). 
If you notice any similarities, it's more than coincidental. Splicer
owes Dotcloude and Docker contributers a big thanks for developing 
such a great structure for documenting.



Installation
------------

* Work in your own fork of the code, we accept pull requests.
* Install sphinx: `pip install sphinx`
    * Mac OS X: `[sudo] pip-2.7 install sphinx`)
* Install sphinx httpdomain contrib package: `pip install sphinxcontrib-httpdomain`
    * Mac OS X: `[sudo] pip-2.7 install sphinxcontrib-httpdomain`
* If pip is not available you can probably install it using your favorite package manager as **python-pip**

Usage
-----
* Change the `.rst` files with your favorite editor to your liking.
* Run `make docs` to clean up old files and generate new ones.
* Your static website can now be found in the `_build` directory.
* To preview what you have generated run `make server` and open <http://localhost:8000/> in your favorite browser.

Working using GitHub's file editor
----------------------------------
Alternatively, for small changes and typo's you might want to use GitHub's
built in file editor. It allows you to preview your changes right online. 
Just be carefull not to create many commits.

Images
------
When you need to add images, try to make them as small as possible (e.g. as gif).


Notes
-----
* The index.html and gettingstarted.html files are copied from the source dir to the output dir without modification.
So changes to those pages should be made directly in html
* For the template the css is compiled from less. When changes are needed they can be compiled using
lessc ``lessc main.less`` or watched using watch-lessc ``watch-lessc -i main.less -o main.css``


Guides on using sphinx
----------------------
* To make links to certain pages create a link target like so:

  ```
    .. _hello_world:

    Hello world
    ===========

    This is.. (etc.)
  ```

  The ``_hello_world:`` will make it possible to link to this position (page and marker) from all other pages.

* Notes, warnings and alarms

  ```
    # a note (use when something is important)
    .. note::

    # a warning (orange)
    .. warning::

    # danger (red, use sparsely)
    .. danger::

* Code examples

  Start without $, so it's easy to copy and paste.

Static files dir
================

Files you put in /sources/static_files/ will be copied to the web visible /_static/

Be careful not to override pre-existing static files from the template.

Generally, layout related files should go in the /theme directory.

If you want to add images to your particular documentation page. Just put them next to
your .rst source file and reference them relatively.
Splicer [![Build Status](https://travis-ci.org/trivio/splicer.png)](https://travis-ci.org/trivio/splicer)
======================

``splicer`` makes the entire world look like a SQL database. 
It is a python module for working with data from disparate sources 
using commands to those familiar with SQL. It aims to make quick 
one off queries and ETL scripts more declarative rather than procedural.


Inspired by projects like BigQuery, Postgres Foreign Data Wrappers
and Multicorn, except no database is required.

``splicer`` enables:

* Analysts to create Datasets linking various
  foreign tables together along with User Defined Functions written in python. 
  Once defined, the datasets can be queried via SQL Select statements to create 
  new Views of the Data.

* Extension Developers to create extensions that make various data sources
  REST endpoints, log files, NoSQL Servers, traditional Databases,
  CSV Files to behave like tables.

  ``splicer`` will take advantage of these various sources' capabilities where 
  appropriate and will compensate for sources that lack basic
  features. 

  For example if a database supports joins and you want to query
  two tables within that database, ``splicer`` will have that system
  perform the join for you. If however you're working with a less
  sophisticated source, like plain files, ``splicer`` will perform the
  operations for you locally.


Enough reading! [Try it out][1] 

[1]: https://splicer.readthedocs.org/en/latest/install.html#installation "Installing Splicer"

