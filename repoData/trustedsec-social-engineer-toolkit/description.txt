This is a new section to add your own modules, you can use function calls like:

Read the readme/User_Manual.pdf on how to create your own SET modules.


#
# These are required fields
#
from src.core.setcore import *
import sys

MAIN="This is a test module"
AUTHOR="Dave - TrustedSec"

# def main(): header is required
def main():
	java_applet_attack("https://gmail.com","443","reports/")
	pause=raw_input("This module has finished completing. Press <enter> to continue")

RATTE (Remote Administration Tool Tommy Edition) is a payload and third party module added/created to SET by 
Thomas Werth.

A couple of things to note about RATTE is that it's main purpose and design is to completely evade egress and firewall based restrictions by leveraging purely HTTP communications for the commands back and forth. 
RATTE has been extend to be very customizeable.
For now you can set:
- Connect Back IP
- Connect Back Port
- Wheater RATTE is persistent or not (example: For network Firewall testing, there is no need for beeing persistent. In a penetration test things may look different)
- a custom filename which RATTE uses for running so local firewalls and user may be fooled using names like iexplore.exe or 		firefox.exe and on ...

If RATTE is persistent, it tries on NTFS Systems to inject itself into Default Browser file binary and replaces
the executables with a portion of its own code in it as well. If this fails RATTE will save itself as autorun app using custom filename specified. If this one is missing it will go as iexplore.exe.

RATTE relies on communications to microsoft.com to identify the path out of the network.

#The Social-Engineer Toolkit (SET)
Copyright 2014 The Social-Engineer Toolkit (SET)

Written by: David Kennedy (ReL1K)

Company: [TrustedSec](https://www.trustedsec.com)

Development Team: Thomas Werth, Joey Furr (j0fer), JR DePre (pr1me)

DISCLAIMER: This is only for testing purposes and can only be used where strict consent has been given. Do not use this for illegal purposes period.

Please read the LICENSE under readme/LICENSE for the licensing of SET. 

#Features

The Social-Engineer Toolkit is an open-source penetration testing framework designed for Social-Engineering. SET has a number of custom attack vectors that allow you to make a believable attack in a fraction of the time. SET is a product of TrustedSec, LLC - An Information Security consulting firm located in Cleveland, Ohio.

### Bugs and enhancements

For bug reports or enhancements, please open an issue here https://github.com/trustedsec/social-engineer-toolkit/issues

### Supported platforms

- Linux
- Windows (experimental)



download.c is the inital stager payload that downloads the shell.exe payload.

listener.py is the SET listener.

shell.py is the shell, it uses pyinstaller for byte compilation then upx for packing of size.

persistence.py is the python based service

Edit each file if you want to see how to byte compile, what modules are required and what each one is doing.

Hello.. I added two types of attacks XSS FullScreen ( using js ) and just Regular FullScreen Attacks.
The second can be expanded by adding different types or a custom option as the first option. If you desire this id be willing
to add more or if you wish to take this and build off it i would better appreciate that also.I had to sort of 
cut this project short because of my own work and other projects. I wanted to contribute something
because i enjoyed learning from SET and wanted to give something back. Hopefully you guys will eventually
expand on this and end up adding it to set ur free to do whatever you want with the code its open source
100% and i am giving it to you enjoy  do what you want with the code. i wrote the javascript for xss (header.js) myself
along with the PHP code for the regular fullscreen attacks obviously along with all of fsattack.py module.  :D - darko

