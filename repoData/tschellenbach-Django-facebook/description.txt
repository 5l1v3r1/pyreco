# Apt module for Puppet

## Description
Provides helpful definitions for dealing with Apt.

## Usage

### apt:builddep
Install the build depends of a specified package.
<pre>
apt::builddep { "glusterfs-server": }
</pre>

### apt::force
Force a package to be installed from a specific release.  Useful when using repositories like Debian unstable in Ubuntu.
<pre>
apt::force { "glusterfs-server":
	release => "unstable",
	version => '3.0.3',
	require => Apt::Source["debian_unstable"],
}
</pre>

### apt::pin
Add an apt pin for a certain release.
<pre>
apt::pin { "karmic": priority => 700 }
apt::pin { "karmic-updates": priority => 700 }
apt::pin { "karmic-security": priority => 700 }
</pre>

### apt::ppa
Add a ppa repository using `add-apt-repository`.  Somewhat experimental.
<pre>
apt::ppa { "ppa:drizzle-developers/ppa": }
</pre>

### apt::release
Set the default apt release.  Useful when using repositories like Debian unstable in Ubuntu.
<pre>
apt::release { "karmic": }
</pre>

### apt::source
Add an apt source to `/etc/apt/sources.list.d/`.
<pre>
apt::source { "debian_unstable":
  location          => "http://debian.mirror.iweb.ca/debian/",
  release           => "unstable",
  repos             => "main contrib non-free",
  required_packages => "debian-keyring debian-archive-keyring",
  key               => "55BE302B",
  key_server        => "subkeys.pgp.net",
  pin               => "-10",
  include_src       => true
}
</pre>
### apt::key
Add a key to the list of keys used by apt to authenticate packages.
<pre>
apt::key { "puppetlabs":
  key        => "4BD6EC30",
  key_server => "pgp.mit.edu",
}
</pre>

<pre>
apt::key { "jenkins":
  key        => "D50582E6",
  key_source => "http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key",
}
</pre>

Note that use of the "key_source" parameter requires wget to be installed and working.


## Contributors
A lot of great people have contributed to this module. A somewhat current list follows.  
Ben Godfrey <ben.godfrey@wonga.com>  
Christian G. Warden <cwarden@xerus.org>  
Dan Bode <bodepd@gmail.com> <dan@puppetlabs.com>  
Garrett Honeycutt <github@garretthoneycutt.com>  
Jeff Wallace <jeff@evolvingweb.ca> <jeff@tjwallace.ca>  
Ken Barber <ken@bob.sh>  
Matthaus Litteken <matthaus@puppetlabs.com> <mlitteken@gmail.com>  
Matthias Pigulla <mp@webfactory.de>  
Monty Taylor <mordred@inaugust.com>  
Peter Drake <pdrake@allplayers.com>  
Reid Vandewiele <marut@cat.pdx.edu>  
Robert Navarro <rnavarro@phiivo.com>  
Ryan Coleman <ryan@puppetlabs.com>  
Scott McLeod <scott.mcleod@theice.com>  
Spencer Krum <spencer@puppetlabs.com>  
William Van Hevelingen <blkperl@cat.pdx.edu> <wvan13@gmail.com>  
Zach Leslie <zach@puppetlabs.com>  

# Puppet Labs Standard Library #

This module provides a "standard library" of resources for developing Puppet
Modules.  This modules will include the following additions to Puppet

 * Stages
 * Facts
 * Functions
 * Defined resource types
 * Types
 * Providers

This module is officially curated and provided by Puppet Labs.  The modules
Puppet Labs writes and distributes will make heavy use of this standard
library.

To report or research a bug with any part of this module, please go to
[http://projects.puppetlabs.com/projects/stdlib](http://projects.puppetlabs.com/projects/stdlib)

# Versions #

This module follows semver.org (v1.0.0) versioning guidelines.  The standard
library module is released as part of [Puppet
Enterprise](http://puppetlabs.com/puppet/puppet-enterprise/) and as a result
older versions of Puppet Enterprise that Puppet Labs still supports will have
bugfix maintenance branches periodically "merged up" into master.  The current
list of integration branches are:

 * v2.1.x (v2.1.1 released in PE 1.2, 1.2.1, 1.2.3, 1.2.4)
 * v2.2.x (Never released as part of PE, only to the Forge)
 * v2.3.x (Released in PE 2.5.x)
 * master (mainline development branch)

The first Puppet Enterprise version including the stdlib module is Puppet
Enterprise 1.2.

# Compatibility #

The stdlib module does not work with Puppet versions released prior to Puppet
2.6.0.

## stdlib 2.x ##

All stdlib releases in the 2.0 major version support Puppet 2.6 and Puppet 2.7.

## stdlib 3.x ##

The 3.0 major release of stdlib drops support for Puppet 2.6.  Stdlib 3.x
supports Puppet 2.7.

# Functions #

abs
---
Returns the absolute value of a number, for example -34.56 becomes 34.56. Takes
a single integer and float value as an argument.


- *Type*: rvalue

bool2num
--------
Converts a boolean to a number. Converts the values:
false, f, 0, n, and no to 0
true, t, 1, y, and yes to 1
    Requires a single boolean or string as an input.


- *Type*: rvalue

capitalize
----------
Capitalizes the first letter of a string or array of strings.
Requires either a single string or an array as an input.


- *Type*: rvalue

chomp
-----
Removes the record separator from the end of a string or an array of strings,
for example `hello\n` becomes `hello`.  Requires a single string or array as an
input.


- *Type*: rvalue

chop
----
Returns a new string with the last character removed. If the string ends
with `\r\n`, both characters are removed. Applying chop to an empty
string returns an empty string. If you wish to merely remove record
separators then you should use the `chomp` function.
Requires a string or array of strings as input.


- *Type*: rvalue

defined_with_params
-------------------
Takes a resource reference and an optional hash of attributes.

Returns true if a resource with the specified attributes has already been added
to the catalog, and false otherwise.

    user { 'dan':
      ensure => present,
    }

    if ! defined_with_params(User[dan], {'ensure' => 'present' }) {
      user { 'dan': ensure => present, }
    }


- *Type*: rvalue

delete
------
Deletes a selected element from an array.

*Examples:*

    delete(['a','b','c'], 'b')

Would return: ['a','c']


- *Type*: rvalue

delete_at
---------
Deletes a determined indexed value from an array.

*Examples:*

    delete_at(['a','b','c'], 1)

Would return: ['a','c']


- *Type*: rvalue

downcase
--------
Converts the case of a string or all strings in an array to lower case.


- *Type*: rvalue

empty
-----
Returns true if the variable is empty.


- *Type*: rvalue

ensure_resource
---------------
Takes a resource type, title, and a list of attributes that describe a
resource.

    user { 'dan':
      ensure => present,
    }

This example only creates the resource if it does not already exist:

    ensure_resource('user, 'dan', {'ensure' => 'present' })

If the resource already exists but does not match the specified parameters,
this function will attempt to recreate the resource leading to a duplicate
resource definition error.



- *Type*: statement

flatten
-------
This function flattens any deeply nested arrays and returns a single flat array
as a result.

*Examples:*

    flatten(['a', ['b', ['c']]])

Would return: ['a','b','c']


- *Type*: rvalue

fqdn_rotate
-----------
Rotates an array a random number of times based on a nodes fqdn.


- *Type*: rvalue

get_module_path
---------------
Returns the absolute path of the specified module for the current
environment.

Example:
  $module_path = get_module_path('stdlib')


- *Type*: rvalue

getvar
------
Lookup a variable in a remote namespace.

For example:

    $foo = getvar('site::data::foo')
    # Equivalent to $foo = $site::data::foo

This is useful if the namespace itself is stored in a string:

    $datalocation = 'site::data'
    $bar = getvar("${datalocation}::bar")
    # Equivalent to $bar = $site::data::bar


- *Type*: rvalue

grep
----
This function searches through an array and returns any elements that match
the provided regular expression.

*Examples:*

    grep(['aaa','bbb','ccc','aaaddd'], 'aaa')

Would return:

    ['aaa','aaaddd']


- *Type*: rvalue

has_key
-------
Determine if a hash has a certain key value.

Example:

    $my_hash = {'key_one' => 'value_one'}
    if has_key($my_hash, 'key_two') {
      notice('we will not reach here')
    }
    if has_key($my_hash, 'key_one') {
      notice('this will be printed')
    }



- *Type*: rvalue

hash
----
This function converts and array into a hash.

*Examples:*

    hash(['a',1,'b',2,'c',3])

Would return: {'a'=>1,'b'=>2,'c'=>3}


- *Type*: rvalue

is_array
--------
Returns true if the variable passed to this function is an array.


- *Type*: rvalue

is_domain_name
--------------
Returns true if the string passed to this function is a syntactically correct domain name.


- *Type*: rvalue

is_float
--------
Returns true if the variable passed to this function is a float.


- *Type*: rvalue

is_hash
-------
Returns true if the variable passed to this function is a hash.


- *Type*: rvalue

is_integer
----------
Returns true if the variable returned to this string is an integer.


- *Type*: rvalue

is_ip_address
-------------
Returns true if the string passed to this function is a valid IP address.


- *Type*: rvalue

is_mac_address
--------------
Returns true if the string passed to this function is a valid mac address.


- *Type*: rvalue

is_numeric
----------
Returns true if the variable passed to this function is a number.


- *Type*: rvalue

is_string
---------
Returns true if the variable passed to this function is a string.


- *Type*: rvalue

join
----
This function joins an array into a string using a seperator.

*Examples:*

    join(['a','b','c'], ",")

Would result in: "a,b,c"


- *Type*: rvalue

keys
----
Returns the keys of a hash as an array.


- *Type*: rvalue

loadyaml
--------
Load a YAML file containing an array, string, or hash, and return the data
in the corresponding native data type.

For example:

    $myhash = loadyaml('/etc/puppet/data/myhash.yaml')


- *Type*: rvalue

lstrip
------
Strips leading spaces to the left of a string.


- *Type*: rvalue

member
------
This function determines if a variable is a member of an array.

*Examples:*

    member(['a','b'], 'b')

Would return: true

    member(['a','b'], 'c')

Would return: false


- *Type*: rvalue

merge
-----
Merges two or more hashes together and returns the resulting hash.

For example:

    $hash1 = {'one' => 1, 'two', => 2}
    $hash2 = {'two' => 'dos', 'three', => 'tres'}
    $merged_hash = merge($hash1, $hash2)
    # The resulting hash is equivalent to:
    # $merged_hash =  {'one' => 1, 'two' => 'dos', 'three' => 'tres'}

When there is a duplicate key, the key in the rightmost hash will "win."



- *Type*: rvalue

num2bool
--------
This function converts a number into a true boolean. Zero becomes false. Numbers
higher then 0 become true.


- *Type*: rvalue

parsejson
---------
This function accepts JSON as a string and converts into the correct Puppet
structure.


- *Type*: rvalue

parseyaml
---------
This function accepts YAML as a string and converts it into the correct
Puppet structure.


- *Type*: rvalue

prefix
------
This function applies a prefix to all elements in an array.

*Examles:*

    prefix(['a','b','c'], 'p')

Will return: ['pa','pb','pc']


- *Type*: rvalue

range
-----
When given range in the form of (start, stop) it will extrapolate a range as
an array.

*Examples:*

    range("0", "9")

Will return: [0,1,2,3,4,5,6,7,8,9]

    range("00", "09")

Will return: [0,1,2,3,4,5,6,7,8,9] (Zero padded strings are converted to
integers automatically)

    range("a", "c")

Will return: ["a","b","c"]

    range("host01", "host10")

Will return: ["host01", "host02", ..., "host09", "host10"]


- *Type*: rvalue

reverse
-------
Reverses the order of a string or array.


- *Type*: rvalue

rstrip
------
Strips leading spaces to the right of the string.


- *Type*: rvalue

shuffle
-------
Randomizes the order of a string or array elements.


- *Type*: rvalue

size
----
Returns the number of elements in a string or array.


- *Type*: rvalue

sort
----
Sorts strings and arrays lexically.


- *Type*: rvalue

squeeze
-------
Returns a new string where runs of the same character that occur in this set
are replaced by a single character.


- *Type*: rvalue

str2bool
--------
This converts a string to a boolean. This attempt to convert strings that
contain things like: y, 1, t, true to 'true' and strings that contain things
like: 0, f, n, false, no to 'false'.


- *Type*: rvalue

str2saltedsha512
----------------
This converts a string to a salted-SHA512 password hash (which is used for OS X
versions >= 10.7). Given any simple string, you will get a hex version of a
salted-SHA512 password hash that can be inserted into your Puppet manifests as
a valid password attribute.


- *Type*: rvalue

strftime
--------
This function returns formatted time.

*Examples:*

To return the time since epoch:

    strftime("%s")

To return the date:

    strftime("%Y-%m-%d")

*Format meaning:*

    %a - The abbreviated weekday name (``Sun'')
    %A - The  full  weekday  name (``Sunday'')
    %b - The abbreviated month name (``Jan'')
    %B - The  full  month  name (``January'')
    %c - The preferred local date and time representation
    %C - Century (20 in 2009)
    %d - Day of the month (01..31)
    %D - Date (%m/%d/%y)
    %e - Day of the month, blank-padded ( 1..31)
    %F - Equivalent to %Y-%m-%d (the ISO 8601 date format)
    %h - Equivalent to %b
    %H - Hour of the day, 24-hour clock (00..23)
    %I - Hour of the day, 12-hour clock (01..12)
    %j - Day of the year (001..366)
    %k - hour, 24-hour clock, blank-padded ( 0..23)
    %l - hour, 12-hour clock, blank-padded ( 0..12)
    %L - Millisecond of the second (000..999)
    %m - Month of the year (01..12)
    %M - Minute of the hour (00..59)
    %n - Newline (
)
    %N - Fractional seconds digits, default is 9 digits (nanosecond)
            %3N  millisecond (3 digits)
            %6N  microsecond (6 digits)
            %9N  nanosecond (9 digits)
    %p - Meridian indicator (``AM''  or  ``PM'')
    %P - Meridian indicator (``am''  or  ``pm'')
    %r - time, 12-hour (same as %I:%M:%S %p)
    %R - time, 24-hour (%H:%M)
    %s - Number of seconds since 1970-01-01 00:00:00 UTC.
    %S - Second of the minute (00..60)
    %t - Tab character (	)
    %T - time, 24-hour (%H:%M:%S)
    %u - Day of the week as a decimal, Monday being 1. (1..7)
    %U - Week  number  of the current year,
            starting with the first Sunday as the first
            day of the first week (00..53)
    %v - VMS date (%e-%b-%Y)
    %V - Week number of year according to ISO 8601 (01..53)
    %W - Week  number  of the current year,
            starting with the first Monday as the first
            day of the first week (00..53)
    %w - Day of the week (Sunday is 0, 0..6)
    %x - Preferred representation for the date alone, no time
    %X - Preferred representation for the time alone, no date
    %y - Year without a century (00..99)
    %Y - Year with century
    %z - Time zone as  hour offset from UTC (e.g. +0900)
    %Z - Time zone name
    %% - Literal ``%'' character


- *Type*: rvalue

strip
-----
This function removes leading and trailing whitespace from a string or from
every string inside an array.

*Examples:*

    strip("    aaa   ")

Would result in: "aaa"


- *Type*: rvalue

swapcase
--------
This function will swap the existing case of a string.

*Examples:*

    swapcase("aBcD")

Would result in: "AbCd"


- *Type*: rvalue

time
----
This function will return the current time since epoch as an integer.

*Examples:*

    time()

Will return something like: 1311972653


- *Type*: rvalue

to_bytes
--------
Converts the argument into bytes, for example 4 kB becomes 4096.
Takes a single string value as an argument.


- *Type*: rvalue

type
----
Returns the type when passed a variable. Type can be one of:

* string
* array
* hash
* float
* integer
* boolean


- *Type*: rvalue

unique
------
This function will remove duplicates from strings and arrays.

*Examples:*

    unique("aabbcc")

Will return:

    abc

You can also use this with arrays:

    unique(["a","a","b","b","c","c"])

This returns:

    ["a","b","c"]


- *Type*: rvalue

upcase
------
Converts a string or an array of strings to uppercase.

*Examples:*

    upcase("abcd")

Will return:

    ABCD


- *Type*: rvalue

validate_absolute_path
----------------------
Validate the string represents an absolute path in the filesystem.  This function works
for windows and unix style paths.

The following values will pass:

    $my_path = "C:/Program Files (x86)/Puppet Labs/Puppet"
    validate_absolute_path($my_path)
    $my_path2 = "/var/lib/puppet"
    validate_absolute_path($my_path2)


The following values will fail, causing compilation to abort:

    validate_absolute_path(true)
    validate_absolute_path([ 'var/lib/puppet', '/var/foo' ])
    validate_absolute_path([ '/var/lib/puppet', 'var/foo' ])
    $undefined = undef
    validate_absolute_path($undefined)



- *Type*: statement

validate_array
--------------
Validate that all passed values are array data structures. Abort catalog
compilation if any value fails this check.

The following values will pass:

    $my_array = [ 'one', 'two' ]
    validate_array($my_array)

The following values will fail, causing compilation to abort:

    validate_array(true)
    validate_array('some_string')
    $undefined = undef
    validate_array($undefined)



- *Type*: statement

validate_bool
-------------
Validate that all passed values are either true or false. Abort catalog
compilation if any value fails this check.

The following values will pass:

    $iamtrue = true
    validate_bool(true)
    validate_bool(true, true, false, $iamtrue)

The following values will fail, causing compilation to abort:

    $some_array = [ true ]
    validate_bool("false")
    validate_bool("true")
    validate_bool($some_array)



- *Type*: statement

validate_hash
-------------
Validate that all passed values are hash data structures. Abort catalog
compilation if any value fails this check.

The following values will pass:

    $my_hash = { 'one' => 'two' }
    validate_hash($my_hash)

The following values will fail, causing compilation to abort:

    validate_hash(true)
    validate_hash('some_string')
    $undefined = undef
    validate_hash($undefined)



- *Type*: statement

validate_re
-----------
Perform simple validation of a string against one or more regular
expressions. The first argument of this function should be a string to
test, and the second argument should be a stringified regular expression
(without the // delimiters) or an array of regular expressions.  If none
of the regular expressions match the string passed in, compilation will
abort with a parse error.

If a third argument is specified, this will be the error message raised and
seen by the user.

The following strings will validate against the regular expressions:

    validate_re('one', '^one$')
    validate_re('one', [ '^one', '^two' ])

The following strings will fail to validate, causing compilation to abort:

    validate_re('one', [ '^two', '^three' ])

A helpful error message can be returned like this:

    validate_re($::puppetversion, '^2.7', 'The $puppetversion fact value does not match 2.7')



- *Type*: statement

validate_slength
----------------
Validate that the first argument is a string (or an array of strings), and
less/equal to than the length of the second argument.  It fails if the first
argument is not a string or array of strings, and if arg 2 is not convertable
to a number.

The following values will pass:

  validate_slength("discombobulate",17)
  validate_slength(["discombobulate","moo"],17)

The following valueis will not:

  validate_slength("discombobulate",1)
  validate_slength(["discombobulate","thermometer"],5)



- *Type*: statement

validate_string
---------------
Validate that all passed values are string data structures. Abort catalog
compilation if any value fails this check.

The following values will pass:

    $my_string = "one two"
    validate_string($my_string, 'three')

The following values will fail, causing compilation to abort:

    validate_string(true)
    validate_string([ 'some', 'array' ])
    $undefined = undef
    validate_string($undefined)



- *Type*: statement

values
------
When given a hash this function will return the values of that hash.

*Examples:*

    $hash = {
      'a' => 1,
      'b' => 2,
      'c' => 3,
    }
    values($hash)

This example would return:

    [1,2,3]


- *Type*: rvalue

values_at
---------
Finds value inside an array based on location.

The first argument is the array you want to analyze, and the second element can
be a combination of:

* A single numeric index
* A range in the form of 'start-stop' (eg. 4-9)
* An array combining the above

*Examples*:

    values_at(['a','b','c'], 2)

Would return ['c'].

    values_at(['a','b','c'], ["0-1"])

Would return ['a','b'].

    values_at(['a','b','c','d','e'], [0, "2-3"])

Would return ['a','c','d'].


- *Type*: rvalue

zip
---
Takes one element from first array and merges corresponding elements from second array. This generates a sequence of n-element arrays, where n is one more than the count of arguments.

*Example:*

    zip(['1','2','3'],['4','5','6'])

Would result in:

    ["1", "4"], ["2", "5"], ["3", "6"]


- *Type*: rvalue

Puppet Specific Facts
=====================

Facter is meant to stand alone and apart from Puppet.  However, Facter often
runs inside Puppet and all custom facts included in the stdlib module will
almost always be evaluated in the context of Puppet and Facter working
together.

Still, we don't want to write custom facts that blow up in the users face if
Puppet is not loaded in memory.  This is often the case if the user run
`facter` without also supplying the `--puppet` flag.

Ah! But Jeff, the custom fact won't be in the `$LOAD_PATH` unless the user
supplies `--facter`! You might say...

Not (always) true I say!  If the user happens to have a CWD of
`<modulepath>/stdlib/lib` then the facts will automatically be evaluated and
blow up.

In any event, it's pretty easy to write a fact that has no value if Puppet is
not loaded.  Simply do it like this:

    Facter.add(:node_vardir) do
      setcode do
        # This will be nil if Puppet is not available.
        Facter::Util::PuppetSettings.with_puppet do
          Puppet[:vardir]
        end
      end
    end

The `Facter::Util::PuppetSettings.with_puppet` method accepts a block and
yields to it only if the Puppet library is loaded.  If the Puppet library is
not loaded, then the method silently returns `nil` which Facter interprets as
an undefined fact value.  The net effect is that the fact won't be set.

##############################################################################################
Django Facebook by Thierry Schellenbach (`mellowmorning.com <http://www.mellowmorning.com/>`_)
##############################################################################################

.. image:: https://secure.travis-ci.org/tschellenbach/Django-facebook.png?branch=master

.. image:: https://pypip.in/d/django-facebook/badge.png
        :target: https://pypi.python.org/pypi/django-facebook

Contributions are strongly appreciated. Seriously, give github a try, fork and get started :)

News
----
* 5.3.0 will be released early December, getting started with Django Facebook will be a lot easier now.


Demo & About
------------

Django Facebook enables your users to easily register using the Facebook API.
It converts the Facebook user data and creates regular User and Profile objects.
This makes it easy to integrate with your existing Django application.

I've built it for my startup Fashiolista.com and it's currently used in production with thousands of signups per day.
For a demo of the signup flow have a look at Fashiolista's landing page (`fashiolista.com <http://www.fashiolista.com/intro_wide_minimal/>`_)

After registration Django Facebook gives you access to user's graph. Allowing for applications such as:

* Open graph/ Timeline functionality
* Seamless personalization
* Inviting friends
* Finding friends
* Posting to a users profile

Updates and tutorials can be found on my blog `mellowmorning <http://www.mellowmorning.com/>`_


Features
--------

* Access the Facebook API, from:
   * Your website (Using javascript OAuth)
   * Facebook canvas pages (For building facebook applications)
   * Mobile (Or any other flow giving you a valid access token)
* Django User Registration (Convert Facebook user data into a user model)
* Store likes, friends and user data locally.
* Facebook FQL access
* OAuth 2.0 compliant
* Automated reauthentication (For expired tokens)
* Includes Open Facebook (stable and tested Python client to the graph API)


Documentation
-------------

**Basics**

* `Installation <http://django-facebook.readthedocs.org/en/latest/installation.html>`_
* `Customizing <http://django-facebook.readthedocs.org/en/latest/customizing.html>`_
* `Settings <http://django-facebook.readthedocs.org/en/latest/settings.html>`_
* `Registration backends & Redirects <http://django-facebook.readthedocs.org/en/latest/registration_backend.html>`_

**Open Facebook API**

* `Getting an OpenFacebook object <http://django-facebook.readthedocs.org/en/latest/graph.html>`_
* `Making calls <http://django-facebook.readthedocs.org/en/latest/open_facebook/api.html>`_

**Advanced**

* `Mobile <http://django-facebook.readthedocs.org/en/latest/mobile.html>`_
* `Celery <http://django-facebook.readthedocs.org/en/latest/celery.html>`_
* `Signals <http://django-facebook.readthedocs.org/en/latest/signals.html>`_
* `Canvas <http://django-facebook.readthedocs.org/en/latest/canvas.html>`_


Contributing and Running tests
------------------------------
Tests are run from within the example project. You
can run them yourself as follows:

install from git

facebook_example/manage.py test django_facebook


**Vagrant**

A vagrant development setup is included in the GIT repo.
Assuming you have vagrant installed, simply type the following in your shell:

::

    # First get a fresh Django-Facebook checkout
    git clone git@github.com:tschellenbach/Django-facebook.git django-facebook

    # Go to the directory:
    cd django-facebook

    # Time to start Vagrant (grab a cup of coffee after this command, it'll take a while) :)
    vagrant up; vagrant provision

    # Finally done?
    vagrant ssh
    python manage.py runserver 0:8000

To have a working Django Facebook example up and running at 192.168.50.42:8000/facebook/example/.
For the facebook login to work simply map that ip to vagrant.mellowmorning.com
(Since Facebook checks the domain)

You can run the test suite by typing:

::

  python manage.py test django_facebook



Django Jobs
-----------
Do you also see the beauty in clean code? Are you experienced with high scalability web apps?
Currently we're looking for additional talent over at our Amsterdam office.
Feel free to drop me a line at my personal email for more information: thierryschellenbach[at]gmail.com





