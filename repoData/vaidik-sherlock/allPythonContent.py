__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# Sherlock documentation build configuration file, created by
# sphinx-quickstart on Wed Jan 22 11:28:21 2014.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.viewcode',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Sherlock'
copyright = u'2014, Vaidik Kapoor'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.3.0'
# The full version, including alpha/beta/rc tags.
release = '0.3.0'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = []

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'Sherlockdoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  ('index', 'Sherlock.tex', u'Sherlock Documentation',
   u'Vaidik Kapoor', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'sherlock', u'Sherlock Documentation',
     [u'Vaidik Kapoor'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'Sherlock', u'Sherlock Documentation',
   u'Vaidik Kapoor', 'Sherlock', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False


# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'http://docs.python.org/': None}

# -- Custom Configuration ------------------------------------------------

# Document __init__ methods as well
autoclass_content = 'both'

# Use the old sphinx default theme on RTFD
RTD_OLD_THEME = True

# Mock libraries that cannot be installed on RTFD
class Mock(object):
    def __init__(self, *args, **kwargs):
        pass

    def __call__(self, *args, **kwargs):
        return Mock()

    @classmethod
    def __getattr__(cls, name):
        if name in ('__file__', '__path__'):
            return '/dev/null'
        elif name[0] == name[0].upper():
            mockType = type(name, (), {})
            mockType.__module__ = __name__
            return mockType
        else:
            return Mock()

MOCK_MODULES = ['etcd', 'pylibmc', 'redis']
for mod_name in MOCK_MODULES:
    sys.modules[mod_name] = Mock()

########NEW FILE########
__FILENAME__ = lock
'''
    lock
    ~~~~

    A generic lock.
'''

__all__ = [
    'LockException',
    'LockTimeoutException',
    'Lock',
    'RedisLock',
    'EtcdLock',
    'MCLock'
]

import etcd
import pylibmc
import redis
import time
import uuid

from . import backends
from . import _configuration


class LockException(Exception):
    '''
    Generic exception for Locks.
    '''

    pass


class LockTimeoutException(Exception):
    '''
    Raised whenever timeout occurs while trying to acquire lock.
    '''

    pass


class BaseLock(object):
    '''
    Interface for implementing custom Lock implementations. This class must be
    sub-classed in order to implement a custom Lock with custom logic or
    different backend or both.

    Basic Usage (an example of our imaginary datastore)

    >>> class MyLock(BaseLock):
    ...     def __init__(self, lock_name, **kwargs):
    ...         super(MyLock, self).__init__(lock_name, **kwargs)
    ...         if self.client is None:
    ...             self.client = mybackend.Client(host='localhost', port=1234)
    ...         self._owner = None
    ...
    ...     def _acquire(self):
    ...         if self.client.get(self.lock_name) is not None:
    ...             owner = uuid.uuid4() # or anythin you want
    ...             self.client.set(self.lock_name, owner)
    ...             self._owner = owner
    ...             if self.expire is not None:
    ...                 self.client.expire(self.lock_name, self.expire)
    ...             return True
    ...         return False
    ...
    ...     def _release(self):
    ...         if self._owner is not None:
    ...             lock_val = self.client.get(self.lock_name)
    ...             if lock_val == self._owner:
    ...                 self.client.delete(self.lock_name)
    ...
    ...     def _locked(self):
    ...         if self.client.get(self.lock_name) is not None:
    ...             return True
    ...         return False
    '''

    def __init__(self,
                 lock_name,
                 **kwargs):
        '''
        :param str lock_name: name of the lock to uniquely identify the lock
                              between processes.
        :param str namespace: Optional namespace to namespace lock keys for
                              your application in order to avoid conflicts.
        :param float expire: set lock expiry time. If explicitly set to `None`,
                             lock will not expire.
        :param float timeout: set timeout to acquire lock
        :param float retry_interval: set interval for trying acquiring lock
                                     after the timeout interval has elapsed.
        :param client: supported client object for the backend of your choice.
        '''

        self.lock_name = lock_name

        if kwargs.get('namespace'):
            self.namespace = kwargs['namespace']
        else:
            self.namespace = _configuration.namespace

        if 'expire' not in kwargs:
            self.expire = _configuration.expire
        else:
            self.expire = kwargs['expire']

        if kwargs.get('timeout'):
            self.timeout = kwargs['timeout']
        else:
            self.timeout = _configuration.timeout

        if kwargs.get('retry_interval'):
            self.retry_interval = kwargs['retry_interval']
        else:
            self.retry_interval = _configuration.retry_interval

        if kwargs.get('client'):
            self.client = kwargs['client']
        else:
            self.client = None

    @property
    def _locked(self):
        '''
        Implementation of method to check if lock has been acquired. Must be
        implemented in the sub-class.

        :returns: if the lock is acquired or not
        :rtype: bool
        '''

        raise NotImplementedError('Must be implemented in the sub-class.')

    def locked(self):
        '''
        Return if the lock has been acquired or not.

        :returns: True indicating that a lock has been acquired ot a
                  shared resource is locked.
        :rtype: bool
        '''

        return self._locked

    def _acquire(self):
        '''
        Implementation of acquiring a lock in a non-blocking fashion. Must be
        implemented in the sub-class. :meth:`acquire` makes use of this
        implementation to provide blocking and non-blocking implementations.

        :returns: if the lock was successfully acquired or not
        :rtype: bool
        '''

        raise NotImplementedError('Must be implemented in the sub-class.')

    def acquire(self, blocking=True):
        '''
        Acquire a lock, blocking or non-blocking.

        :param bool blocking: acquire a lock in a blocking or non-blocking
                              fashion. Defaults to True.
        :returns: if the lock was successfully acquired or not
        :rtype: bool
        '''

        if blocking is True:
            timeout = self.timeout
            while timeout >= 0:
                if self._acquire() is not True:
                    timeout -= self.retry_interval
                    if timeout > 0:
                        time.sleep(self.retry_interval)
                else:
                    return True
            raise LockTimeoutException('Timeout elapsed after %s seconds '
                                       'while trying to acquiring '
                                       'lock.' % self.timeout)
        else:
            return self._acquire()

    def _release(self):
        '''
        Implementation of releasing an acquired lock. Must be implemented in
        the sub-class.
        '''

        raise NotImplementedError('Must be implemented in the sub-class.')

    def release(self):
        '''
        Release a lock.
        '''

        return self._release()

    def __enter__(self):
        self.acquire()

    def __exit__(self, exc_type, exc_value, traceback):
        self.release()

    def __del__(self):
        try:
            self.release()
        except LockException, err:
            pass


class Lock(BaseLock):
    '''
    A general lock that inherits global coniguration and provides locks with
    the configured backend.

    .. note:: to use :class:`Lock` class, you must configure the global backend
              to use a particular backend. If the global backend is not set,
              calling any method on instances of :class:`Lock` will throw
              exceptions.

    Basic Usage:

    >>> import sherlock
    >>> from sherlock import Lock
    >>>
    >>> sherlock.configure(sherlock.backends.REDIS)
    >>>
    >>> # Create a lock instance
    >>> lock = Lock('my_lock')
    >>>
    >>> # Acquire a lock in Redis running on localhost
    >>> lock.acquire()
    True
    >>>
    >>> # Check if the lock has been acquired
    >>> lock.locked()
    True
    >>>
    >>> # Release the acquired lock
    >>> lock.release()
    >>>
    >>> # Check if the lock has been acquired
    >>> lock.locked()
    False
    >>>
    >>> import redis
    >>> redis_client = redis.StrictRedis(host='X.X.X.X', port=6379, db=2)
    >>> sherlock.configure(client=redis_client)
    >>>
    >>> # Acquire a lock in Redis running on X.X.X.X:6379
    >>> lock.acquire()
    >>>
    >>> lock.locked()
    True
    >>>
    >>> # Acquire a lock using the with_statement
    >>> with Lock('my_lock') as lock:
    ...     # do some stuff with your acquired resource
    ...     pass
    '''

    def __init__(self, lock_name, **kwargs):
        '''
        :param str lock_name: name of the lock to uniquely identify the lock
                              between processes.
        :param str namespace: Optional namespace to namespace lock keys for
                              your application in order to avoid conflicts.
        :param float expire: set lock expiry time. If explicitly set to `None`,
                             lock will not expire.
        :param float timeout: set timeout to acquire lock
        :param float retry_interval: set interval for trying acquiring lock
                                     after the timeout interval has elapsed.

        .. Note:: this Lock object does not accept a custom lock backend store
                  client object. It instead uses the global custom client
                  object.
        '''

        # Raise exception if client keyword argument is found
        if 'client' in kwargs:
            raise TypeError('Lock object does not accept a custom client '
                            'object')
        super(Lock, self).__init__(lock_name, **kwargs)

        try:
            self.client = _configuration.client
        except ValueError:
            pass

        if self.client is None:
            self._lock_proxy = None
        else:
            kwargs.update(client=_configuration.client)
            try:
                self._lock_proxy = globals()[_configuration.backend['lock_class']](
                    lock_name, **kwargs)
            except KeyError:
                self._lock_proxy = _configuration.backend['lock_class'](
                    lock_name, **kwargs)

    def _acquire(self):
        if self._lock_proxy is None:
            raise LockException('Lock backend has not been configured and '
                                'lock cannot be acquired or released. '
                                'Configure lock backend first.')
        return self._lock_proxy.acquire(False)

    def _release(self):
        if self._lock_proxy is None:
            raise LockException('Lock backend has not been configured and '
                                'lock cannot be acquired or released. '
                                'Configure lock backend first.')
        return self._lock_proxy.release()

    @property
    def _locked(self):
        if self._lock_proxy is None:
            raise LockException('Lock backend has not been configured and '
                                'lock cannot be acquired or released. '
                                'Configure lock backend first.')
        return self._lock_proxy.locked()


class RedisLock(BaseLock):
    '''
    Implementation of lock with Redis as the backend for synchronization.

    Basic Usage:

    >>> import redis
    >>> import sherlock
    >>> from sherlock import RedisLock
    >>>
    >>> # Global configuration of defaults
    >>> sherlock.configure(expire=120, timeout=20)
    >>>
    >>> # Create a lock instance
    >>> lock = RedisLock('my_lock')
    >>>
    >>> # Acquire a lock in Redis, global backend and client configuration need
    >>> # not be configured since we are using a backend specific lock.
    >>> lock.acquire()
    True
    >>>
    >>> # Check if the lock has been acquired
    >>> lock.locked()
    True
    >>>
    >>> # Release the acquired lock
    >>> lock.release()
    >>>
    >>> # Check if the lock has been acquired
    >>> lock.locked()
    False
    >>>
    >>> # Use this client object
    >>> client = redis.StrictRedis()
    >>>
    >>> # Create a lock instance with custom client object
    >>> lock = RedisLock('my_lock', client=client)
    >>>
    >>> # To override the defaults, just past the configurations as parameters
    >>> lock = RedisLock('my_lock', client=client, expire=1, timeout=5)
    >>>
    >>> # Acquire a lock using the with_statement
    >>> with RedisLock('my_lock') as lock:
    ...     # do some stuff with your acquired resource
    ...     pass
    '''

    _acquire_script = '''
    local result = redis.call('SETNX', KEYS[1], KEYS[2])
    if result == 1 then
        redis.call('EXPIRE', KEYS[1], KEYS[3])
    end
    return result
    '''

    _release_script = '''
    local result = 0
    if redis.call('GET', KEYS[1]) == KEYS[2] then
        redis.call('DEL', KEYS[1])
        result = 1
    end
    return result
    '''

    def __init__(self, lock_name, **kwargs):
        '''
        :param str lock_name: name of the lock to uniquely identify the lock
                              between processes.
        :param str namespace: Optional namespace to namespace lock keys for
                              your application in order to avoid conflicts.
        :param float expire: set lock expiry time. If explicitly set to `None`,
                             lock will not expire.
        :param float timeout: set timeout to acquire lock
        :param float retry_interval: set interval for trying acquiring lock
                                     after the timeout interval has elapsed.
        :param client: supported client object for the backend of your choice.
        '''

        super(RedisLock, self).__init__(lock_name, **kwargs)

        if self.client is None:
            self.client = redis.StrictRedis(host='localhost', port=6379, db=0)

        self._owner = None

        # Register Lua script
        self._acquire_func = self.client.register_script(self._acquire_script)
        self._release_func = self.client.register_script(self._release_script)

    @property
    def _key_name(self):
        if self.namespace is not None:
            key = '%s_%s' % (self.namespace, self.lock_name)
        else:
            key = self.lock_name
        return key

    def _acquire(self):
        owner = uuid.uuid4()
        if self.expire is None:
            expire = -1
        else:
            expire = self.expire
        if self._acquire_func(keys=[self._key_name,
                                    owner,
                                    expire]) != 1:
            return False
        self._owner = owner
        return True

    def _release(self):
        if self._owner is None:
            raise LockException('Lock was not set by this process.')

        if self._release_func(keys=[self._key_name, self._owner]) != 1:
            raise LockException('Lock could not be released because it was '
                                'not acquired by this instance.')

        self._owner = None

    @property
    def _locked(self):
        if self.client.get(self._key_name) is None:
            return False
        return True


class EtcdLock(BaseLock):
    '''
    Implementation of lock with Etcd as the backend for synchronization.

    Basic Usage:

    >>> import etcd
    >>> import sherlock
    >>> from sherlock import EtcdLock
    >>>
    >>> # Global configuration of defaults
    >>> sherlock.configure(expire=120, timeout=20)
    >>>
    >>> # Create a lock instance
    >>> lock = EtcdLock('my_lock')
    >>>
    >>> # Acquire a lock in Etcd, global backend and client configuration need
    >>> # not be configured since we are using a backend specific lock.
    >>> lock.acquire()
    True
    >>>
    >>> # Check if the lock has been acquired
    >>> lock.locked()
    True
    >>>
    >>> # Release the acquired lock
    >>> lock.release()
    >>>
    >>> # Check if the lock has been acquired
    >>> lock.locked()
    False
    >>>
    >>> # Use this client object
    >>> client = etcd.Client()
    >>>
    >>> # Create a lock instance with custom client object
    >>> lock = EtcdLock('my_lock', client=client)
    >>>
    >>> # To override the defaults, just past the configurations as parameters
    >>> lock = EtcdLock('my_lock', client=client, expire=1, timeout=5)
    >>>
    >>> # Acquire a lock using the with_statement
    >>> with EtcdLock('my_lock') as lock:
    ...     # do some stuff with your acquired resource
    ...     pass
    '''

    def __init__(self, lock_name, **kwargs):
        '''
        :param str lock_name: name of the lock to uniquely identify the lock
                              between processes.
        :param str namespace: Optional namespace to namespace lock keys for
                              your application in order to avoid conflicts.
        :param float expire: set lock expiry time. If explicitly set to `None`,
                             lock will not expire.
        :param float timeout: set timeout to acquire lock
        :param float retry_interval: set interval for trying acquiring lock
                                     after the timeout interval has elapsed.
        :param client: supported client object for the backend of your choice.
        '''

        super(EtcdLock, self).__init__(lock_name, **kwargs)

        if self.client is None:
            self.client = etcd.Client()

        self._owner = None

    @property
    def _key_name(self):
        if self.namespace is not None:
            return '/%s/%s' % (self.namespace, self.lock_name)
        else:
            return '/%s' % self.lock_name

    def _acquire(self):
        owner = uuid.uuid4()

        try:
            self.client.get(self._key_name)
        except KeyError:
            _args = [self._key_name, owner]
            if self.expire is not None:
                _args.append(self.expire)
            self.client.set(*tuple(_args))
            self._owner = owner
            return True
        else:
            return False

    def _release(self):
        if self._owner is None:
            raise LockException('Lock was not set by this process.')

        try:
            resp = self.client.get(self._key_name)
            if resp.value == str(self._owner):
                self.client.delete(self._key_name)
                self._owner = None
            else:
                raise LockException('Lock could not be released because it '
                                    'was been acquired by this instance.')
        except KeyError:
            raise LockException('Lock could not be released as it has not '
                                'been acquired')

    @property
    def _locked(self):
        try:
            self.client.get(self._key_name)
            return True
        except KeyError:
            return False


class MCLock(BaseLock):
    '''
    Implementation of lock with Memcached as the backend for synchronization.

    Basic Usage:

    >>> import pylibmc
    >>> import sherlock
    >>> from sherlock import MCLock
    >>>
    >>> # Global configuration of defaults
    >>> sherlock.configure(expire=120, timeout=20)
    >>>
    >>> # Create a lock instance
    >>> lock = MCLock('my_lock')
    >>>
    >>> # Acquire a lock in Memcached, global backend and client configuration
    >>> # need not be configured since we are using a backend specific lock.
    >>> lock.acquire()
    True
    >>>
    >>> # Check if the lock has been acquired
    >>> lock.locked()
    True
    >>>
    >>> # Release the acquired lock
    >>> lock.release()
    >>>
    >>> # Check if the lock has been acquired
    >>> lock.locked()
    False
    >>>
    >>> # Use this client object
    >>> client = pylibmc.Client(['X.X.X.X'], binary=True)
    >>>
    >>> # Create a lock instance with custom client object
    >>> lock = MCLock('my_lock', client=client)
    >>>
    >>> # To override the defaults, just past the configurations as parameters
    >>> lock = MCLock('my_lock', client=client, expire=1, timeout=5)
    >>>
    >>> # Acquire a lock using the with_statement
    >>> with MCLock('my_lock') as lock:
    ...     # do some stuff with your acquired resource
    ...     pass
    '''

    def __init__(self, lock_name, **kwargs):
        '''
        :param str lock_name: name of the lock to uniquely identify the lock
                              between processes.
        :param str namespace: Optional namespace to namespace lock keys for
                              your application in order to avoid conflicts.
        :param float expire: set lock expiry time. If explicitly set to `None`,
                             lock will not expire.
        :param float timeout: set timeout to acquire lock
        :param float retry_interval: set interval for trying acquiring lock
                                     after the timeout interval has elapsed.
        :param client: supported client object for the backend of your choice.
        '''

        super(MCLock, self).__init__(lock_name, **kwargs)

        if self.client is None:
            self.client = pylibmc.Client(['localhost'],
                                         binary=True)

        self._owner = None

    @property
    def _key_name(self):
        if self.namespace is not None:
            key = '%s_%s' % (self.namespace, self.lock_name)
        else:
            key = self.lock_name
        return key

    def _acquire(self):
        owner = uuid.uuid4()

        _args = [self._key_name, str(owner)]
        if self.expire is not None:
            _args.append(self.expire)
        # Set key only if it does not exist
        if self.client.add(*tuple(_args)) is True:
            self._owner = owner
            return True
        else:
            return False

    def _release(self):
        if self._owner is None:
            raise LockException('Lock was not set by this process.')

        resp = self.client.get(self._key_name)
        if resp is not None:
            if resp == str(self._owner):
                self.client.delete(self._key_name)
                self._owner = None
            else:
                raise LockException('Lock could not be released because it '
                                    'was been acquired by this instance.')
        else:
            raise LockException('Lock could not be released as it has not '
                                'been acquired')

    @property
    def _locked(self):
        return True if self.client.get(self._key_name) is not None else False

########NEW FILE########
__FILENAME__ = test_lock
'''
    Integration tests for backend locks.
'''

import etcd
import pylibmc
import redis
import sherlock
import time
import unittest


class TestRedisLock(unittest.TestCase):

    def setUp(self):
        try:
            self.client = redis.StrictRedis()
        except Exception, err:
            print str(err)
            raise Exception('You must have Redis server running on localhost '
                            'to be able to run integration tests.')
        self.lock_name = 'test_lock'

    def test_acquire(self):
        lock = sherlock.RedisLock(self.lock_name)
        self.assertTrue(lock._acquire())
        self.assertEqual(self.client.get(self.lock_name), str(lock._owner))

    def test_acquire_with_namespace(self):
        lock = sherlock.RedisLock(self.lock_name, namespace='ns')
        self.assertTrue(lock._acquire())
        self.assertEqual(self.client.get('ns_%s' % self.lock_name),
                         str(lock._owner))

    def test_acquire_once_only(self):
        lock1 = sherlock.RedisLock(self.lock_name)
        lock2 = sherlock.RedisLock(self.lock_name)
        self.assertTrue(lock1._acquire())
        self.assertFalse(lock2._acquire())

    def test_acquire_check_expiry(self):
        lock = sherlock.RedisLock(self.lock_name, expire=1)
        lock.acquire()
        time.sleep(2)
        self.assertFalse(lock.locked())

    def test_acquire_check_expire_is_not_set(self):
        lock = sherlock.RedisLock(self.lock_name, expire=None)
        lock.acquire()
        time.sleep(2)
        self.assertTrue(self.client.ttl(self.lock_name) < 0)

    def test_release(self):
        lock = sherlock.RedisLock(self.lock_name)
        lock._acquire()
        lock._release()
        self.assertEqual(self.client.get(self.lock_name), None)

    def test_release_with_namespace(self):
        lock = sherlock.RedisLock(self.lock_name, namespace='ns')
        lock._acquire()
        lock._release()
        self.assertEqual(self.client.get('ns_%s' % self.lock_name), None)

    def test_release_own_only(self):
        lock1 = sherlock.RedisLock(self.lock_name)
        lock2 = sherlock.RedisLock(self.lock_name)
        lock1._acquire()
        self.assertRaises(sherlock.LockException, lock2._release)
        lock1._release()

    def test_locked(self):
        lock = sherlock.RedisLock(self.lock_name)
        lock._acquire()
        self.assertTrue(lock._locked)
        lock._release()
        self.assertFalse(lock._locked)

    def test_deleting_lock_object_releases_the_lock(self):
        lock = sherlock.lock.RedisLock(self.lock_name)
        lock.acquire()
        self.assertEqual(self.client.get(self.lock_name), str(lock._owner))

        del lock
        self.assertEqual(self.client.get(self.lock_name), None)

    def tearDown(self):
        self.client.delete(self.lock_name)
        self.client.delete('ns_%s' % self.lock_name)


class TestEtcdLock(unittest.TestCase):

    def setUp(self):
        self.client = etcd.Client()
        self.lock_name = 'test_lock'

    def test_acquire(self):
        lock = sherlock.EtcdLock(self.lock_name)
        self.assertTrue(lock._acquire())
        self.assertEqual(self.client.get(self.lock_name).value,
                         str(lock._owner))

    def test_acquire_with_namespace(self):
        lock = sherlock.EtcdLock(self.lock_name, namespace='ns')
        self.assertTrue(lock._acquire())
        self.assertEqual(self.client.get('/ns/%s' % self.lock_name).value,
                         str(lock._owner))

    def test_acquire_once_only(self):
        lock1 = sherlock.EtcdLock(self.lock_name)
        lock2 = sherlock.EtcdLock(self.lock_name)
        self.assertTrue(lock1._acquire())
        self.assertFalse(lock2._acquire())

    def test_acquire_check_expiry(self):
        lock = sherlock.EtcdLock(self.lock_name, expire=1)
        lock.acquire()
        time.sleep(2)
        self.assertFalse(lock.locked())

    def test_acquire_check_expire_is_not_set(self):
        lock = sherlock.EtcdLock(self.lock_name, expire=None)
        lock.acquire()
        time.sleep(2)
        self.assertEquals(self.client.get(self.lock_name).ttl, None)

    def test_release(self):
        lock = sherlock.EtcdLock(self.lock_name)
        lock._acquire()
        lock._release()
        self.assertRaises(KeyError, self.client.get, self.lock_name)

    def test_release_with_namespace(self):
        lock = sherlock.EtcdLock(self.lock_name, namespace='ns')
        lock._acquire()
        lock._release()
        self.assertRaises(KeyError, self.client.get, '/ns/%s' % self.lock_name)

    def test_release_own_only(self):
        lock1 = sherlock.EtcdLock(self.lock_name)
        lock2 = sherlock.EtcdLock(self.lock_name)
        lock1._acquire()
        self.assertRaises(sherlock.LockException, lock2._release)
        lock1._release()

    def test_locked(self):
        lock = sherlock.EtcdLock(self.lock_name)
        lock._acquire()
        self.assertTrue(lock._locked)
        lock._release()
        self.assertFalse(lock._locked)

    def test_deleting_lock_object_releases_the_lock(self):
        lock = sherlock.lock.EtcdLock(self.lock_name)
        lock.acquire()
        self.assertEqual(self.client.get(self.lock_name).value, str(lock._owner))

        del lock
        self.assertRaises(KeyError, self.client.get, self.lock_name)

    def tearDown(self):
        try:
            self.client.delete(self.lock_name)
        except KeyError:
            pass
        try:
            self.client.delete('/ns/%s' % self.lock_name)
        except KeyError:
            pass

class TestMCLock(unittest.TestCase):

    def setUp(self):
        self.client = pylibmc.Client(['localhost'], binary=True)
        self.lock_name = 'test_lock'

    def test_acquire(self):
        lock = sherlock.MCLock(self.lock_name)
        self.assertTrue(lock._acquire())
        self.assertEqual(self.client.get(self.lock_name), str(lock._owner))

    def test_acquire_with_namespace(self):
        lock = sherlock.MCLock(self.lock_name, namespace='ns')
        self.assertTrue(lock._acquire())
        self.assertEqual(self.client.get('ns_%s' % self.lock_name),
                         str(lock._owner))

    def test_acquire_once_only(self):
        lock1 = sherlock.MCLock(self.lock_name)
        lock2 = sherlock.MCLock(self.lock_name)
        self.assertTrue(lock1._acquire())
        self.assertFalse(lock2._acquire())

    def test_acquire_check_expiry(self):
        lock = sherlock.MCLock(self.lock_name, expire=1)
        lock.acquire()
        time.sleep(2)
        self.assertFalse(lock.locked())

    def test_release(self):
        lock = sherlock.MCLock(self.lock_name)
        lock._acquire()
        lock._release()
        self.assertEqual(self.client.get(self.lock_name), None)

    def test_release_with_namespace(self):
        lock = sherlock.MCLock(self.lock_name, namespace='ns')
        lock._acquire()
        lock._release()
        self.assertEqual(self.client.get('ns_%s' % self.lock_name), None)

    def test_release_own_only(self):
        lock1 = sherlock.MCLock(self.lock_name)
        lock2 = sherlock.MCLock(self.lock_name)
        lock1._acquire()
        self.assertRaises(sherlock.LockException, lock2._release)
        lock1._release()

    def test_locked(self):
        lock = sherlock.MCLock(self.lock_name)
        lock._acquire()
        self.assertTrue(lock._locked)
        lock._release()
        self.assertFalse(lock._locked)

    def test_deleting_lock_object_releases_the_lock(self):
        lock = sherlock.lock.MCLock(self.lock_name)
        lock.acquire()
        self.assertEqual(self.client.get(self.lock_name), str(lock._owner))

        del lock
        self.assertEqual(self.client.get(self.lock_name), None)

    def tearDown(self):
        self.client.delete(self.lock_name)
        self.client.delete('ns_%s' % self.lock_name)

########NEW FILE########
__FILENAME__ = test_lock
'''
    Tests for all sorts of locks.
'''

import etcd
import redis
import sherlock
import unittest

from mock import Mock


class TestBaseLock(unittest.TestCase):

    def test_init_uses_global_defaults(self):
        sherlock.configure(namespace='new_namespace')
        lock = sherlock.lock.BaseLock('lockname')
        self.assertEqual(lock.namespace, 'new_namespace')

    def test_init_does_not_use_global_default_for_client_obj(self):
        client_obj = etcd.Client()
        sherlock.configure(client=client_obj)
        lock = sherlock.lock.BaseLock('lockname')
        self.assertNotEqual(lock.client, client_obj)

    def test__locked_raises_not_implemented_error(self):
        def _test(): sherlock.lock.BaseLock('')._locked
        self.assertRaises(NotImplementedError, _test)

    def test_locked_raises_not_implemented_error(self):
        self.assertRaises(NotImplementedError,
                          sherlock.lock.BaseLock('').locked)

    def test__acquire_raises_not_implemented_error(self):
        self.assertRaises(NotImplementedError,
                          sherlock.lock.BaseLock('')._acquire)

    def test_acquire_raises_not_implemented_error(self):
        self.assertRaises(NotImplementedError,
                          sherlock.lock.BaseLock('').acquire)

    def test__release_raises_not_implemented_error(self):
        self.assertRaises(NotImplementedError,
                          sherlock.lock.BaseLock('')._release)

    def test_release_raises_not_implemented_error(self):
        self.assertRaises(NotImplementedError,
                          sherlock.lock.BaseLock('').release)

    def test_acquire_acquires_blocking_lock(self):
        lock = sherlock.lock.BaseLock('')
        lock._acquire = Mock(return_value=True)
        self.assertTrue(lock.acquire())

    def test_acquire_acquires_non_blocking_lock(self):
        lock = sherlock.lock.BaseLock('123')
        lock._acquire = Mock(return_value=True)
        self.assertTrue(lock.acquire())

    def test_acquire_obeys_timeout(self):
        lock = sherlock.lock.BaseLock('123', timeout=1)
        lock._acquire = Mock(return_value=False)
        self.assertRaises(sherlock.LockTimeoutException, lock.acquire)

    def test_acquire_obeys_retry_interval(self):
        lock = sherlock.lock.BaseLock('123', timeout=0.5,
                                             retry_interval=0.1)
        lock._acquire = Mock(return_value=False)
        try:
            lock.acquire()
        except sherlock.LockTimeoutException:
            pass
        self.assertEqual(lock._acquire.call_count, 6)

    def test_deleting_lock_object_releases_the_lock(self):
        lock = sherlock.lock.BaseLock('123')
        release_func = Mock()
        lock.release = release_func
        del lock
        self.assertTrue(release_func.called)


class TestLock(unittest.TestCase):

    def setUp(self):
        reload(sherlock)
        reload(sherlock.lock)

    def test_lock_does_not_accept_custom_client_object(self):
        self.assertRaises(TypeError, sherlock.lock.Lock, client=None)

    def test_lock_does_not_create_proxy_when_backend_is_not_set(self):
        sherlock._configuration._backend = None
        sherlock._configuration._client = None
        lock = sherlock.lock.Lock('')
        self.assertEquals(lock._lock_proxy, None)

        self.assertRaises(sherlock.lock.LockException, lock.acquire)
        self.assertRaises(sherlock.lock.LockException, lock.release)
        self.assertRaises(sherlock.lock.LockException, lock.locked)

    def test_lock_creates_proxy_when_backend_is_set(self):
        sherlock._configuration.backend = sherlock.backends.ETCD
        lock = sherlock.lock.Lock('')
        self.assertTrue(isinstance(lock._lock_proxy,
                                   sherlock.lock.EtcdLock))

    def test_lock_uses_proxys_methods(self):
        sherlock.lock.RedisLock._acquire = Mock(return_value=True)
        sherlock.lock.RedisLock._release = Mock()
        sherlock.lock.RedisLock.locked = Mock(return_value=False)

        sherlock._configuration.backend = sherlock.backends.REDIS
        lock = sherlock.lock.Lock('')

        lock.acquire()
        self.assertTrue(sherlock.lock.RedisLock._acquire.called)

        lock.release()
        self.assertTrue(sherlock.lock.RedisLock._release.called)

        lock.locked()
        self.assertTrue(sherlock.lock.RedisLock.locked.called)

    def test_lock_sets_client_object_on_lock_proxy_when_globally_configured(self):
        client = etcd.Client(host='8.8.8.8')
        sherlock.configure(client=client)
        lock = sherlock.lock.Lock('lock')
        self.assertEquals(lock._lock_proxy.client, client)


class TestRedisLock(unittest.TestCase):

    def setUp(self):
        reload(sherlock)
        reload(sherlock.lock)

    def test_valid_key_names_are_generated_when_namespace_not_set(self):
        name = 'lock'
        lock = sherlock.lock.RedisLock(name)
        self.assertEquals(lock._key_name, name)

    def test_valid_key_names_are_generated_when_namespace_is_set(self):
        name = 'lock'
        lock = sherlock.lock.RedisLock(name, namespace='local_namespace')
        self.assertEquals(lock._key_name, 'local_namespace_%s' % name)

        sherlock.configure(namespace='global_namespace')
        lock = sherlock.lock.RedisLock(name)
        self.assertEquals(lock._key_name, 'global_namespace_%s' % name)


class TestEtcdLock(unittest.TestCase):

    def setUp(self):
        reload(sherlock)
        reload(sherlock.lock)

    def test_valid_key_names_are_generated_when_namespace_not_set(self):
        name = 'lock'
        lock = sherlock.lock.EtcdLock(name)
        self.assertEquals(lock._key_name, '/' + name)

    def test_valid_key_names_are_generated_when_namespace_is_set(self):
        name = 'lock'
        lock = sherlock.lock.EtcdLock(name, namespace='local_namespace')
        self.assertEquals(lock._key_name, '/local_namespace/%s' % name)

        sherlock.configure(namespace='global_namespace')
        lock = sherlock.lock.EtcdLock(name)
        self.assertEquals(lock._key_name, '/global_namespace/%s' % name)


class TestMCLock(unittest.TestCase):

    def setUp(self):
        reload(sherlock)
        reload(sherlock.lock)

    def test_valid_key_names_are_generated_when_namespace_not_set(self):
        name = 'lock'
        lock = sherlock.lock.MCLock(name)
        self.assertEquals(lock._key_name, name)

    def test_valid_key_names_are_generated_when_namespace_is_set(self):
        name = 'lock'
        lock = sherlock.lock.MCLock(name, namespace='local_namespace')
        self.assertEquals(lock._key_name, 'local_namespace_%s' % name)

        sherlock.configure(namespace='global_namespace')
        lock = sherlock.lock.MCLock(name)
        self.assertEquals(lock._key_name, 'global_namespace_%s' % name)

########NEW FILE########
__FILENAME__ = test_sherlock
'''
    Tests for some basic package's root level functionality.
'''

import etcd
import sherlock
import unittest

from sherlock import _Configuration
from mock import Mock


class TestConfiguration(unittest.TestCase):

    def setUp(self):
        reload(sherlock)
        self.configure = _Configuration()

    def test_update_settings_raises_error_when_updating_invalid_config(self):
        # Raises error when trying to update invalid setting
        self.assertRaises(AttributeError, self.configure.update,
                          invalid_arg='val')

    def test_updates_valid_settings(self):
        # Updates valid setting
        self.configure.update(namespace='something')
        self.assertEqual(self.configure.namespace, 'something')

    def test_backend_gets_backend_when_backend_is_not_set(self):
        # When backend is not set
        self.assertEqual(self.configure._backend, None)
        self.assertEqual(self.configure._backend, self.configure.backend)
        self.assertEqual(self.configure._backend, None)

    def test_backend_gets_backend_when_backend_is_set(self):
        # When backend is set
        self.configure.backend = sherlock.backends.ETCD
        self.assertEqual(self.configure._backend, self.configure.backend)
        self.assertEqual(self.configure._backend,
                         sherlock.backends.ETCD)

    def test_backend_raises_error_on_setting_invalid_backend(self):
        def _test():
            # Set some unexpected value
            self.configure.backend = 0
        self.assertRaises(ValueError, _test)

    def test_backend_sets_backend_value(self):
        self.configure.backend = sherlock.backends.ETCD
        self.assertEqual(self.configure._backend,
                         sherlock.backends.ETCD)

    def test_client_returns_the_set_client_object(self):
        client = Mock()
        self.configure._client = client
        self.assertEqual(self.configure.client, self.configure._client)
        self.assertEqual(self.configure._client, client)

    def test_client_raises_error_when_backend_is_not_set(self):
        # Make sure backend is set to None
        self.assertEqual(self.configure.backend, None)

        def _test():
            self.configure.client
        self.assertRaises(ValueError, _test)

    def test_client_returns_client_when_not_set_but_backend_is_set(self):
        self.configure.backend = sherlock.backends.ETCD
        self.assertTrue(isinstance(self.configure.client, etcd.Client))

    def test_client_sets_valid_client_obj_only_when_backend_set(self):
        # When backend is set and client object is invalid
        self.configure.backend = sherlock.backends.ETCD

        def _test():
            self.configure.client = None
        self.assertRaises(ValueError, _test)

        # When backend is set and client object is valid
        self.configure.client = etcd.Client()

    def test_client_sets_valid_client_obj_only_when_backend_not_set(self):
        # When backend is not set and client library is available and client is
        # valid
        self.configure._backend = None
        self.assertEquals(self.configure.backend, None)
        client_obj = etcd.Client()
        self.configure.client = client_obj
        self.assertEquals(self.configure.client, client_obj)
        self.assertTrue(isinstance(self.configure.client, etcd.Client))

        # When backend is not set and client library is available and client is
        # invalid
        self.configure._backend = None
        self.configure._client = None
        self.assertEquals(self.configure.backend, None)
        client_obj = 'Random'

        def _test():
            self.configure.client = client_obj
        self.assertRaises(ValueError, _test)

        # When backend is not set and client library is available and client is
        # valid
        self.configure._backend = None
        self.configure._client = None
        self.assertEquals(self.configure.backend, None)
        client_obj = etcd.Client()
        self.configure.client = client_obj


def testConfigure():
    '''
    Test the library configure function.
    '''

    sherlock.configure(namespace='namespace')
    assert sherlock._configuration.namespace == 'namespace'


class TestBackends(unittest.TestCase):

    def setUp(self):
        reload(sherlock)

    def test_valid_backends(self):
        self.assertEqual(sherlock.backends.valid_backends,
                         sherlock.backends._valid_backends)

    def test_register_raises_exception_when_lock_class_invalid(self):
        self.assertRaises(ValueError,
                          sherlock.backends.register,
                          'MyLock',
                          object,
                          'some_lib',
                          object)

    def test_register_registers_custom_backend(self):
        class MyLock(sherlock.lock.BaseLock):
            pass
        name = 'MyLock'
        lock_class = MyLock
        library = 'some_lib'
        client_class = object
        args = (1, 2, 3)
        kwargs = dict(somekey='someval')
        sherlock.backends.register(name=name,
                                   lock_class=lock_class,
                                   library=library,
                                   client_class=client_class,
                                   default_args=args,
                                   default_kwargs=kwargs)

        self.assertTrue(isinstance(sherlock.backends.MyLock, dict))
        self.assertEquals(sherlock.backends.MyLock['name'], name)
        self.assertEquals(sherlock.backends.MyLock['lock_class'], lock_class)
        self.assertEquals(sherlock.backends.MyLock['library'], library)
        self.assertEquals(sherlock.backends.MyLock['client_class'],
                          client_class)
        self.assertEquals(sherlock.backends.MyLock['default_args'], args)
        self.assertEquals(sherlock.backends.MyLock['default_kwargs'], kwargs)

        self.assertTrue(
            sherlock.backends.MyLock in sherlock.backends.valid_backends)

########NEW FILE########
