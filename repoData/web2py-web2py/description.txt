# How to contribute

- [Getting help](#getting-help-)
- [Submitting bug reports](#submitting-bug-reports-)
- [Contributing code](#contributing-code-)

## Getting help

Community discussion, questions, and informal bug reporting is done on the
[CodeMirror Google group](http://groups.google.com/group/codemirror).

## Submitting bug reports

The preferred way to report bugs is to use the
[GitHub issue tracker](http://github.com/marijnh/CodeMirror/issues). Before
reporting a bug, read these pointers.

**Note:** The issue tracker is for *bugs*, not requests for help. Questions
should be asked on the
[CodeMirror Google group](http://groups.google.com/group/codemirror) instead.

### Reporting bugs effectively

- CodeMirror is maintained by volunteers. They don't owe you anything, so be
  polite. Reports with an indignant or belligerent tone tend to be moved to the
  bottom of the pile.

- Include information about **the browser in which the problem occurred**. Even
  if you tested several browsers, and the problem occurred in all of them,
  mention this fact in the bug report. Also include browser version numbers and
  the operating system that you're on.

- Mention which release of CodeMirror you're using. Preferably, try also with
  the current development snapshot, to ensure the problem has not already been
  fixed.

- Mention very precisely what went wrong. "X is broken" is not a good bug
  report. What did you expect to happen? What happened instead? Describe the
  exact steps a maintainer has to take to make the problem occur. We can not
  fix something that we can not observe.

- If the problem can not be reproduced in any of the demos included in the
  CodeMirror distribution, please provide an HTML document that demonstrates
  the problem. The best way to do this is to go to
  [jsbin.com](http://jsbin.com/ihunin/edit), enter it there, press save, and
  include the resulting link in your bug report.

## Contributing code

- Make sure you have a [GitHub Account](https://github.com/signup/free)
- Fork [CodeMirror](https://github.com/marijnh/CodeMirror/)
  ([how to fork a repo](https://help.github.com/articles/fork-a-repo))
- Make your changes
- If your changes are easy to test or likely to regress, add tests.
  Tests for the core go into `test/test.js`, some modes have their own
  test suite under `mode/XXX/test.js`. Feel free to add new test
  suites to modes that don't have one yet (be sure to link the new
  tests into `test/index.html`).
- Follow the general code style of the rest of the project (see
  below). Run `bin/lint` to verify that the linter is happy.
- Make sure all tests pass. Visit `test/index.html` in your browser to
  run them.
- Submit a pull request
([how to create a pull request](https://help.github.com/articles/fork-a-repo))

### Coding standards

- 2 spaces per indentation level, no tabs.
- Include semicolons after statements.
- Note that the linter (`bin/lint`) which is run after each commit
  complains about unused variables and functions. Prefix their names
  with an underscore to muffle it.

# CodeMirror
[![Build Status](https://secure.travis-ci.org/marijnh/CodeMirror.png?branch=master)](http://travis-ci.org/marijnh/CodeMirror)
[![NPM version](https://badge.fury.io/js/codemirror.png)](http://badge.fury.io/js/codemirror)

CodeMirror is a JavaScript component that provides a code editor in
the browser. When a mode is available for the language you are coding
in, it will color your code, and optionally help with indentation.

The project page is http://codemirror.net  
The manual is at http://codemirror.net/doc/manual.html  
The contributing guidelines are in [CONTRIBUTING.md](https://github.com/marijnh/CodeMirror/blob/master/CONTRIBUTING.md)



Here are various example files for configuration of routes and gae.
To use them, move them to main web2py folder and customize them.
The files in this folder must be run from the main web2py folder.
They are for building windows and osx binary distribution and not meant for the end user.
This software is a 100% Python interface to the memcached memory cache
daemon.  It is the client side software which allows storing values in one
or more, possibly remote, memcached servers.  Search google for memcached
for more information.

This package was originally written by Evan Martin of Danga.
Please do not contact Evan about maintenance.
Sean Reifschneider of tummy.com, ltd. has taken over maintenance of it.

====================
PyMySQL Installation
====================

.. contents::
..
   This package contains a pure-Python MySQL client library.
   Documentation on the MySQL client/server protocol can be found here:
   http://forge.mysql.com/wiki/MySQL_Internals_ClientServer_Protocol
   If you would like to run the test suite, edit the config parameters in
   pymysql/tests/base.py. The goal of pymysql is to be a drop-in
   replacement for MySQLdb and work on CPython 2.3+, Jython, IronPython, PyPy
   and Python 3. We test for compatibility by simply changing the import
   statements in the Django MySQL backend and running its unit tests as well
   as running it against the MySQLdb and myconnpy unit tests.

Requirements
-------------

+ Python 2.4 or higher

 * http://www.python.org/
 
 * 2.6 is the primary test environment.

* MySQL 4.1 or higher
    
 * protocol41 support, experimental 4.0 support

Installation
------------

# easy_install pymysql
# ... or ...
# python setup.py install

Python 3.0 Support
------------------

Simply run the build-py3k.sh script from the local directory. It will
build a working package in the ./py3k directory.

Version 0.46

Added EMF support.

Added more sophisticated scaling options.

See examples2.py for both.

Grant Edwards, grante@users.sourceforge.net



Version 0.45

Finally, image support!!!  Handles PNGs and JPGs.

See examples2.py for the gory details.

Simon Cusack, scusack@sourceforge.net

# pyuca: Python Unicode Collation Algorithm implementation
(http://jtauber.com/blog/2006/01/27/python_unicode_collation_algorithm/)

This is my preliminary attempt at a Python implementation of the
[Unicode Collation Algorithm (UCA)](http://unicode.org/reports/tr10/).
I originally posted it to my blog in 2006 but it seems to get enough
usage it really belongs here (and in PyPI).

What do you use it for? In short, sorting non-English strings properly.

The core of the algorithm involves multi-level comparison. For example,
``café`` comes before ``caff`` because at the primary level, the accent
is ignored and the first word is treated as if it were ``cafe``.
The secondary level (which considers accents) only applies then to words
that are equivalent at the primary level.

The Unicode Collation Algorithm and pyuca also support contraction and
expansion. **Contraction** is where multiple letters are treated as a
single unit. In Spanish, ``ch`` is treated as a letter coming between
``c`` and ``d`` so that, for example, words beginning ``ch`` should
sort after all other words beginnings with ``c``. **Expansion** is where
a single letter is treated as though it were multiple letters. In German,
``ä`` is sorted as if it were ``ae``, i.e. after ``ad`` but before ``af``.

## Here is how to use the ``pyuca`` module:
``
git clone https://github.com/jtauber/pyuca.git
cd pyuca
pip install pyuca
``

**Usage example:**
``
    from pyuca import Collator
    c = Collator("allkeys.txt")
    
    sorted_words = sorted(words, key=c.sort_key)
``

``allkeys.txt`` (1 MB) is available at

http://www.unicode.org/Public/UCA/latest/allkeys.txt


This folder contains example handlers. 
They must be copied to the web2py root folder in order to work properly.
They should not be used in their current location.

## Readme

web2py is a free open source full-stack framework for rapid development of fast, scalable, secure and portable database-driven web-based applications. 

It is written and programmable in Python. LGPLv3 License

Learn more at http://web2py.com


## Google App Engine deployment

    cp examples/app.yaml ./
    cp handlers/gaehandler.py ./
    
Then edit ./app.yaml and replace "yourappname" with yourappname.

## Tests

[![Build Status](https://travis-ci.org/web2py/web2py.png)](https://travis-ci.org/web2py/web2py)

[![Coverage Status](https://coveralls.io/repos/web2py/web2py/badge.png)](https://coveralls.io/r/web2py/web2py)

## Installation Instructions

To start web2py there is NO NEED to install it. Just unzip and do:

    python web2py.py

That's it!!!

## web2py directory structure

    project/
        README
        LICENSE
        VERSION                    > this web2py version
        web2py.py                  > the startup script
        anyserver.py               > to run with third party servers
        wsgihandler.py             > handler to connect to WSGI
        ...                        > other handlers and example files
        gluon/                     > the core libraries
            contrib/               > third party libraries
            tests/                 > unittests	
        applications/              > are the apps
            admin/                 > web based IDE
                ...
            examples/              > examples, docs, links
                ...
            welcome/               > the scaffolding app (they all copy it)
                ABOUT
                LICENSE
                models/
                views/
                controllers/
                sessions/
                errors/
                cache/
                static/
                uploads/
                modules/
                cron/
                tests/
            ...                    > your own apps
        examples/                  > example config files, mv .. and customize
        extras/                    > other files which are required for building web2py
        scripts/                   > utility and installation scripts
        site-packages/             > additional optional modules
        logs/                      > log files will go in there
        deposit/                   > a place where web2py stores apps temporarily

## Issues?

Report issues at http://code.google.com/p/web2py/issues/

