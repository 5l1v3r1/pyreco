__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# Richard documentation build configuration file, created by
# sphinx-quickstart on Sun Feb 12 11:15:53 2012.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import os
import sys

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.todo']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Richard'
copyright = u'2012, 2013 richard authors'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.

sys.path.append('..')
from richard import __version__ as version
release = version

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# -- Options for todo ----------------------------------------------------------

# http://sphinx.pocoo.org/ext/todo.html

todo_include_todos = True


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'Richarddoc'


# -- Options for LaTeX output --------------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'Richard.tex', u'Richard Documentation',
   u'Will Kahn-Greene', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'richard', u'Richard Documentation',
     [u'Will Kahn-Greene'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output ------------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'Richard', u'Richard Documentation',
   u'Will Kahn-Greene', 'Richard', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

########NEW FILE########
__FILENAME__ = manage
#!/usr/bin/env python

# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys


if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "richard.settings")

    from django.core.management import execute_from_command_line

    execute_from_command_line(sys.argv)

########NEW FILE########
__FILENAME__ = auth
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.conf import settings
from django.contrib.auth.models import User


class AutoLoginBackend(object):
    """Allow login without credentials.

    This is used to work on richard when a missing internet connection doesn't
    allow authentication with browserid (persona).

    `BROWSERID_AUTOLOGIN` is the email address to use to select a user.
    """

    def authenticate(self, **kwargs):
        email = getattr(settings, 'BROWSERID_AUTOLOGIN', None)
        if not email:
            return None

        try:
            return User.objects.get(email=email)
        except User.DoesNotExist:
            return None

    def get_user(self, user_id):
        try:
            return User.objects.get(pk=user_id)
        except User.DoesNotExist:
            return None

########NEW FILE########
__FILENAME__ = browserid
from __future__ import print_function
try:
    from urllib.parse import urlparse
except ImportError:
    from urlparse import urlparse

from django.http import HttpResponseRedirect

from django_browserid.views import Verify
from funfactory.urlresolvers import reverse

from fjord.base.models import Profile


class RichardVerify(Verify):
    def login_success(self):
        """Send to new_user view if new user, otherwise send on their way"""
        response = super(RichardVerify, self).login_success()
        # If this user has never logged in before, send them to our
        # super secret "Welcome!" page.
        try:
            self.user.profile
            return response

        except Profile.DoesNotExist:
            url = reverse('new_user')

            redirect_to = self.request.REQUEST.get('next')

            # Do not accept redirect URLs pointing to a different host.
            if redirect_to:
                netloc = urlparse(redirect_to).netloc
                if netloc and netloc != self.request.get_host():
                    redirect_to = None

            if redirect_to:
                url = url + '?next=' + redirect_to

            return HttpResponseRedirect(url)

########NEW FILE########
__FILENAME__ = context_processors
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
from django.conf import settings

from richard.notifications.models import Notification


def base(request):
    """Adds basic things to the context"""
    notifications = Notification.objects.get_live_notifications()

    return {
        'settings': settings,
        'notifications': notifications,
    }

########NEW FILE########
__FILENAME__ = middleware
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
from collections import namedtuple


Browser = namedtuple(
    'Browser', [
        'name', 'version', 'platform_version', 'mobile', 'tablet'])


def parse_ua(ua):
    # TODO: Flesh this out--it's ultra-basic and barely meets my
    # needs.
    data = {
        'name': '',
        'version': None,
        'platform_version': '',
        'mobile': False,
        'tablet': False
        }

    ua = ua.lower()
    if 'firefox' in ua:
        data['name'] = 'Firefox'

    if 'mobile' in ua:
        data['mobile'] = True
    elif 'tablet' in ua:
        data['tablet'] = True

    return Browser(**data)


class BrowserDetectMiddleware(object):
    """
    Detects browser bits from the UA and flags the request
    accordingly.
    """
    def process_request(self, request):
        ua = request.META.get('HTTP_USER_AGENT', '')
        request.BROWSER = parse_ua(ua)

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
from south.utils import datetime_utils as datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'Profile'
        db.create_table(u'base_profile', (
            (u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('user', self.gf('django.db.models.fields.related.OneToOneField')(to=orm['auth.User'], unique=True)),
        ))
        db.send_create_signal(u'base', ['Profile'])


    def backwards(self, orm):
        # Deleting model 'Profile'
        db.delete_table(u'base_profile')


    models = {
        u'auth.group': {
            'Meta': {'object_name': 'Group'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
        },
        u'auth.permission': {
            'Meta': {'ordering': "(u'content_type__app_label', u'content_type__model', u'codename')", 'unique_together': "((u'content_type', u'codename'),)", 'object_name': 'Permission'},
            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['contenttypes.ContentType']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
        },
        u'auth.user': {
            'Meta': {'object_name': 'User'},
            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "u'user_set'", 'blank': 'True', 'to': u"orm['auth.Group']"}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'related_name': "u'user_set'", 'blank': 'True', 'to': u"orm['auth.Permission']"}),
            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
        },
        u'base.profile': {
            'Meta': {'object_name': 'Profile'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'user': ('django.db.models.fields.related.OneToOneField', [], {'to': u"orm['auth.User']", 'unique': 'True'})
        },
        u'contenttypes.contenttype': {
            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
        }
    }

    complete_apps = ['base']
########NEW FILE########
__FILENAME__ = models
from django.contrib.auth.models import User
from django.db import models


class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)

########NEW FILE########
__FILENAME__ = batch
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
from django import template


register = template.Library()


@register.filter
def batch(elems, args):
    """Filter that batches an iterator into batchsize sized groups

    Takes a single string argument in one of two forms:

    1. batchsize as an int. e.g. ``batch:"4"``
    2. batchsize as an int followed by a comma followed by a string to
       pad the last row with. e.g. ``batch:"4,&nbsp"``

    """
    args = args.split(',')
    batchsize = int(args[0])
    if len(args) > 1:
        padwith = args[1]
    else:
        padwith = None

    if batchsize == 0:
        return []

    if batchsize == 1:
        return elems

    batch = []
    batches = []
    for i, elem in enumerate(elems):
        if i % batchsize == 0:
            if batch:
                batches.append(batch)
                batch = []

        batch.append(elem)

    if batch:
        if padwith is not None:
            while len(batch) % batchsize != 0:
                batch.append(padwith)

        batches.append(batch)

    return batches

########NEW FILE########
__FILENAME__ = duration
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
from django import template


register = template.Library()


@register.filter
def duration(duration):
    """Filter that converts a duration in seconds to something like 01:54:01
    """
    if duration is None:
        return ''

    duration = int(duration)
    seconds = duration % 60
    minutes = (duration // 60) % 60
    hours = (duration // 60) // 60

    s = '%02d' % (seconds)
    m = '%02d' % (minutes)
    h = '%02d' % (hours)

    output = []
    if hours > 0:
        output.append(h)
    output.append(m)
    output.append(s)
    return ':'.join(output)

########NEW FILE########
__FILENAME__ = md
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
from django import template

import markdown


register = template.Library()


@register.filter
def md(text):
    """Filter that converts Markdown text -> HTML."""
    return markdown.markdown(
        text,
        output_format='html5',
        safe_mode='replace',
        html_replacement_text='[HTML REMOVED]')

########NEW FILE########
__FILENAME__ = page_title
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
from django import template
from django.conf import settings


register = template.Library()


@register.simple_tag
def page_title(s=None):
    """Function that generates the page title."""
    if s is None:
        return settings.SITE_TITLE
    if len(s) > 80:
        s = s[:80] + u'...'
    return u'%s - %s' % (settings.SITE_TITLE, s)

########NEW FILE########
__FILENAME__ = test_filters
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import unittest

from nose.tools import eq_

from richard.base.templatetags.batch import batch
from richard.base.templatetags.duration import duration


class BatchFilterTest(unittest.TestCase):
    def test_batch(self):
        eq_(batch([], '2'), [])
        eq_(batch([1, 2, 3, 4, 5], '2'), [[1, 2], [3, 4], [5]])
        eq_(batch([1, 2, 3, 4, 5], '3'), [[1, 2, 3], [4, 5]])

    def test_batch_edgecases(self):
        eq_(batch([1, 2, 3, 4, 5], '0'), [])
        eq_(batch([1, 2, 3, 4, 5], '1'), [1, 2, 3, 4, 5])

    def test_padwith(self):
        eq_(batch([1, 2, 3, 4, 5], '2,FOO'), [[1, 2], [3, 4], [5, 'FOO']])


class DurationFilterTest(unittest.TestCase):
    def test_seconds(self):
        eq_("00:15", duration('15'))
        eq_("00:01", duration('1'))

    def test_minutes(self):
        eq_("01:01", duration('61'))
        eq_("01:00", duration('60'))
        eq_("02:00", duration('120'))

    def test_hours(self):
        eq_("01:00:00", duration('3600'))
        eq_("01:00:02", duration('3602'))
        eq_("02:00:00", duration('7200'))
        eq_("02:02:00", duration('7320'))
        eq_("02:02:01", duration('7321'))
        eq_("02:02:02", duration('7322'))

    def test_bad(self):
        eq_('', duration(None))

########NEW FILE########
__FILENAME__ = test_generatedata
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.core.management import call_command


def test_generate_data():
    """Make sure ./manage.py generatedata runs."""
    call_command('generatedata')

########NEW FILE########
__FILENAME__ = test_views
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.core.urlresolvers import reverse
from django.test import TestCase
from nose.tools import eq_

from richard.notifications.tests import notification
from richard.videos.tests import category, speaker, video


class RichardViewsTest(TestCase):
    """Tests for the project's views."""

    def test_home(self):
        url = reverse('home')

        resp = self.client.get(url)
        eq_(resp.status_code, 200)
        self.assertTemplateUsed(resp, 'home_branded.html')

    def test_notifications_on_home(self):
        """Test that notifications are displayed on the homepage."""
        n1 = notification(text=u'1, 2, 3 - test', save=True)
        n2 = notification(text=u'Just a test.', save=True)

        resp = self.client.get(reverse('home'))
        self.assertContains(resp, n1.text)
        self.assertContains(resp, n2.text)

    def test_stats(self):
        """Test the statistics page."""
        url = reverse('stats')

        resp = self.client.get(url)
        eq_(resp.status_code, 200)

    def test_sitemap(self):
        """Test for the sitemap.xml"""
        category(save=True)
        speaker(save=True)
        video(save=True)

        resp = self.client.get('/sitemap.xml')
        eq_(resp.status_code, 200)

    def test_404(self):
        """Test for 404 page"""
        resp = self.client.get('/carlspants')
        eq_(resp.status_code, 404)

########NEW FILE########
__FILENAME__ = urls
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


from django.conf.urls import patterns, url


urlpatterns = patterns(
    '',

    url(r'^$', 'richard.base.views.home', name='home'),
    url(r'^login-failure$', 'richard.base.views.login_failure',
        name='login_failure'),
    url(r'^new_user$', 'new_user', name='new_user'),
    url(r'^stats/$', 'richard.base.views.stats', name='stats'),
)

########NEW FILE########
__FILENAME__ = views
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.conf import settings
from django.core.urlresolvers import reverse
from django.db.models import Count
from django.http import HttpResponseRedirect
from django.shortcuts import render
from django.utils.http import is_safe_url

from richard.base.models import Profile
from richard.suggestions.models import Suggestion
from richard.videos.models import Video, Category, Speaker, Tag


def home(request):
    latest_categories = Category.objects.order_by('-added')[:10]
    latest_videos = Video.objects.live().order_by('-added')[:10]

    video_count = Video.objects.live().count()

    ret = render(
        request, 'home_branded.html',
        {'title': settings.SITE_TITLE,
         'latest_categories': latest_categories,
         'latest_videos': latest_videos,
         'video_count': video_count})
    return ret


def login_failure(request):
    return render(request, 'login_failure.html')


def new_user(request):
    if request.user.is_anonymous():
        # This is the AnonymousUser and they shouldn't be here
        # so push them home.
        return HttpResponseRedirect(reverse('home'))

    try:
        # If they have a profile, then this doesn't throw an error
        # and we can let them see the new user view again, but it's
        # not particularly interesting.
        request.user.profile
    except Profile.DoesNotExist:
        # They aren't anonymous and don't have a profile, so create
        # a profile for them.
        #
        # We could do more with this, but we're not at the moment.
        Profile.objects.create(user=request.user)

    next_url = request.GET.get('next', reverse('home'))
    if not is_safe_url(next_url):
        next_url = reverse('home')

    return render(request, 'new_user.html', {
        'next_url': next_url,
    })


def stats(request):
    """List statistics about the collection.

    E.g. number of videos, top 5 categories.
    """

    # Retrieve objects of model `m`, ordered by the number of videos they have
    most_videos = lambda m: (m.objects.filter(video__state=Video.STATE_LIVE)
                                      .annotate(count=Count('video'))
                                      .order_by('-count'))

    video_count = Video.objects.live().count()

    category_count = Category.objects.count()
    category_top5 = most_videos(Category)[:5]

    speaker_count = Speaker.objects.count()
    speaker_top5 = most_videos(Speaker)[:5]

    tag_count = Tag.objects.count()
    tag_top5 = most_videos(Tag)[:5]

    open_states = (Suggestion.STATE_NEW, Suggestion.STATE_IN_PROGRESS)
    suggestions = (Suggestion.objects.filter(
        state__in=open_states, is_reviewed=True).order_by('-state'))

    ret = render(
        request, 'stats.html',
        {'video_count': video_count,
         'category_count': category_count,
         'category_top5': category_top5,
         'speaker_count': speaker_count,
         'speaker_top5': speaker_top5,
         'tag_count': tag_count,
         'tag_top5': tag_top5,
         'suggestions': suggestions})
    return ret

########NEW FILE########
__FILENAME__ = admin
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.contrib import admin

from richard.notifications.models import Notification


class NotificationAdmin(admin.ModelAdmin):
    date_hierarchy = 'start_date'
    list_display = ('interjection', 'start_date', 'end_date')


admin.site.register(Notification, NotificationAdmin)

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
from south.utils import datetime_utils as datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'Notification'
        db.create_table('notifications_notification', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('interjection', self.gf('django.db.models.fields.CharField')(max_length=20)),
            ('text', self.gf('django.db.models.fields.CharField')(max_length=200)),
            ('start_date', self.gf('django.db.models.fields.DateField')()),
            ('end_date', self.gf('django.db.models.fields.DateField')(null=True)),
        ))
        db.send_create_signal('notifications', ['Notification'])


    def backwards(self, orm):
        # Deleting model 'Notification'
        db.delete_table('notifications_notification')


    models = {
        'notifications.notification': {
            'Meta': {'object_name': 'Notification'},
            'end_date': ('django.db.models.fields.DateField', [], {'null': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'interjection': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
            'start_date': ('django.db.models.fields.DateField', [], {}),
            'text': ('django.db.models.fields.CharField', [], {'max_length': '200'})
        }
    }

    complete_apps = ['notifications']
########NEW FILE########
__FILENAME__ = models
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.db import models
from django.utils.translation import ugettext_lazy as _

import datetime


class NotificationManager(models.Manager):
    def get_live_notifications(self):
        """Returns notifications in the "now" range

        This is anything that starts before now and either ends after now or
        had a null end date.

        """
        now = datetime.date.today()
        return (
            self.get_query_set()
            .filter(start_date__lte=now)
            .filter(
                models.Q(end_date__gt=now) | models.Q(end_date__isnull=True))
        )


class Notification(models.Model):
    """
    Allows you to add site-wide notifications which appear in a
    notification bubble at the top of every page.
    """
    interjection = models.CharField(
        max_length=20,
        help_text=_(u'Short interjection like "Alert!", "Information!", '
                    u'"Warning!", "Heads up!", "Whoops!"'))

    text = models.CharField(
        max_length=200,
        help_text=_(u'Use Markdown. Keep the text short. Add a link to '
                    u'sitenews for more information.'))

    start_date = models.DateField()
    end_date = models.DateField(null=True)

    objects = NotificationManager()

    class Meta(object):
        verbose_name = _(u'notification')
        verbose_name_plural = _(u'notifications')

########NEW FILE########
__FILENAME__ = test_models
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from datetime import datetime, timedelta

from django.test import TestCase
from nose.tools import eq_

from richard.notifications.tests import notification
from richard.notifications.models import Notification


class TestNotification(TestCase):

    def test_shown(self):
        """
        Test that notifications where now is between their start and end
        date are returned.
        """
        start = datetime.now() - timedelta(days=2)
        end = datetime.now() + timedelta(days=2)
        n1 = notification(start_date=start, end_date=end, save=True)

        start -= timedelta(days=1)
        n2 = notification(start_date=start, end_date=end, save=True)

        n3 = notification(start_date=start, save=True)

        eq_([x.pk for x in Notification.objects.get_live_notifications()],
            [n1.pk, n2.pk, n3.pk])

    def test_not_shown(self):
        """
        Test that notifications where now is before their start date or after
        their end date are not returned.
        """
        start = datetime.now() + timedelta(days=2)
        end = datetime.now() + timedelta(days=3)
        notification(start_date=start, end_date=end, save=True)

        start = datetime.now() - timedelta(days=2)
        end = datetime.now() - timedelta(days=1)
        notification(start_date=start, end_date=end, save=True)

        eq_(len(Notification.objects.get_live_notifications()), 0)

########NEW FILE########
__FILENAME__ = urls


########NEW FILE########
__FILENAME__ = views

########NEW FILE########
__FILENAME__ = sitemaps
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.conf import settings
from django.contrib.sitemaps import Sitemap
from django.core.urlresolvers import reverse


class PageSitemap(Sitemap):

    def items(self):
        return settings.PAGES

    def location(self, obj):
        return reverse('pages-page', kwargs={'page': obj})

########NEW FILE########
__FILENAME__ = test_views
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.core.urlresolvers import reverse
from django.test import TestCase
from django.test.utils import override_settings
from nose.tools import eq_


class TestPages(TestCase):
    """Tests for the ``pages`` apps views."""

    def test_about_page(self):
        """Test about page"""
        url = reverse('pages-page', kwargs={'page': 'about'},)

        resp = self.client.get(url)
        eq_(resp.status_code, 200)
        self.assertTemplateUsed(resp, 'pages/about.html')

    def test_nonexistent_page_throws_404(self):
        """Test that a page without matching template returns 404"""
        url = reverse('pages-page', kwargs={'page': 'doesnotexist'})

        resp = self.client.get(url)
        eq_(resp.status_code, 404)

    @override_settings(PAGES=[])
    def test_page_without_template_throws_404(self):
        """Test that a registered page without template returns 404"""
        url = reverse('pages-page', kwargs={'page': 'about'},)

        resp = self.client.get(url)
        eq_(resp.status_code, 404)

########NEW FILE########
__FILENAME__ = urls
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.conf.urls import patterns, url


urlpatterns = patterns(
    'richard.pages.views',

    url(r'^(?P<page>[\w-]+)/?$', 'pages_view', name='pages-page'),
    )

########NEW FILE########
__FILENAME__ = views
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.conf import settings
from django.http import Http404
from django.shortcuts import render
from django.template import TemplateDoesNotExist


def pages_view(request, page):
    """Show a simple page.

    Only pages that are defined in the PAGES setting will be shown, otherwise
    return a 404.
    """
    if page in settings.PAGES:
        try:
            return render(request, 'pages/%s.html' % page, {})
        except TemplateDoesNotExist:
            # there is no template for this page, raise a 404 below
            pass

    raise Http404

########NEW FILE########
__FILENAME__ = settings
# Django settings for richard project.

# ===================================================
# NOTE: Override settings for local instances in the
# richard/settings_local.py module.
# ===================================================

import imp
import os
import sys

# site_root is the parent directory
SITE_ROOT = os.path.dirname(os.path.dirname(__file__))

# site_url is the url for this site. it's important it's
# correct otherwise browserid authentication won't work.
SITE_URL = 'http://127.0.0.1:8000'
LOGIN_URL = '/'
LOGIN_REDIRECT_URL = '/'
LOGIN_REDIRECT_URL_FAILURE = '/login-failure'

# root is this directory
ROOT = os.path.dirname(__file__)

DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
    # ('Your Name', 'your_email@example.com'),
)

# Title of your site here
SITE_TITLE = u'richard'
GRAPPELLI_ADMIN_TITLE = u'Richard Admin'

MANAGERS = ADMINS


# =========================
# Richard-specific settings
# =========================

# See the configuration documentation for more details on these
# settings.

# This dictates whether django-browserid will create new users or not
# when people log in that it doesn't have a record for.
BROWSERID_CREATE_USER = False

# Verification class for django-browserid.
BROWSERID_VERIFY_CLASS = 'richard.base.browserid.RichardVerify'

# The (width, height) to use when you tell richard to pull down remote
# thumbnails, resize them, and store them locally.
VIDEO_THUMBNAIL_SIZE = (160, 120)

# Order that media items get sorted.
MEDIA_PREFERENCE = ('ogv', 'webm', 'mp4', 'flv',)

# List of "static pages". See the documentation for setting up a page.
PAGES = ['about']

# Feed size for Newly Updated Videos feed.
MAX_FEED_LENGTH = 30

# Whether or not to enable opensearch suggestions for search.  Note:
# Enabling this can cause a lot of work on your search system. If you
# enable this, keep an eye on your system performance.
OPENSEARCH_ENABLE_SUGGESTIONS = False

# Whether or not to enable Amara Universal Subtitles site-wide.
# http://www.universalsubtitles.org/en/
AMARA_SUPPORT = False

# Whether or not to enable the REST API. See the documentation for
# more about the API.
API = False


DATABASES = {
    'default': {
        # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        'ENGINE': 'django.db.backends.sqlite3',
        # Or path to database file if using sqlite3.
        'NAME': os.path.join(SITE_ROOT, 'database.db'),

        # The following settings are not used with sqlite3.
        'USER': '',
        'PASSWORD': '',
        # Set to empty string for localhost.
        'HOST': '',
        # Set to empty string for default.
        'PORT': '',
    }
}

HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        'PATH': os.path.join(SITE_ROOT, 'whoosh_index'),
    },
}

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# On Unix systems, a value of None will cause Django to use the same
# timezone as the operating system.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'America/Chicago'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale.
USE_L10N = True

# If you set this to False, Django will not use timezone-aware datetimes.
USE_TZ = False

# Fixture directory for easy bulk-loading
FIXTURE_DIRS = (
    os.path.join(ROOT, 'fixtures'),
)

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
MEDIA_ROOT = os.path.join(SITE_ROOT, 'media')

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = '/media/'

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = os.path.join(SITE_ROOT, 'static')

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'

# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'django.contrib.staticfiles.finders.FileSystemFinder',
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = ''

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',

    # Uncomment the next line for simple clickjacking protection:
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'richard.base.middleware.BrowserDetectMiddleware',

    # This should probably be last. It catches 404 errors, then checks
    # to see if we should be redirecting the url.
    'django.contrib.redirects.middleware.RedirectFallbackMiddleware',
)

ROOT_URLCONF = 'richard.urls'

# Python dotted path to the WSGI application used by Django's runserver.
WSGI_APPLICATION = 'richard.wsgi.application'

TEMPLATE_DIRS = (
    os.path.join(ROOT, 'templates'),
)

TEMPLATE_CONTEXT_PROCESSORS = (
    'django.contrib.auth.context_processors.auth',
    'django.contrib.messages.context_processors.messages',
    'django.core.context_processors.csrf',
    'django.core.context_processors.i18n',
    'django.core.context_processors.static',
    "django.core.context_processors.request",

    'richard.base.context_processors.base',
)

INSTALLED_APPS = (
    'django.contrib.auth',
    'django_browserid',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'grappelli',
    'django.contrib.admin',
    'django.contrib.redirects',
    'django.contrib.sitemaps',
    'haystack',
    'south',
    'rest_framework',
    'rest_framework.authtoken',
    'eadred',

    'richard.base',
    'richard.notifications',
    'richard.pages',
    'richard.suggestions',
    'richard.videos',
)

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'django_browserid.auth.BrowserIDBackend',
)

try:
    # Add django_nose for testing but only if it's installed.
    imp.find_module('django_nose')
    INSTALLED_APPS = tuple(list(INSTALLED_APPS) + ['django_nose'])
except ImportError:
    pass

TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'

# Django REST Framework configuration
REST_FRAMEWORK = {
    'DEFAULT_PERMISSON_CLASSES': (
        'rest_framework.permissions.IsAdminUser',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'PAGINATE_BY': 20
}

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}

MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

# Modify this list to prevent spam messages in public suggestions
SPAM_WORDS = []

try:
    from richard.settings_local import *
except ImportError:
    pass


if 'test' in sys.argv:
    try:
        from richard.settings_test import *
    except ImportError:
        pass

########NEW FILE########
__FILENAME__ = settings_test
# Override settings for test environment here

import os

# site_root is the parent directory
SITE_ROOT = os.path.dirname(os.path.dirname(__file__))

HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        'PATH': os.path.join(SITE_ROOT, '_test_whoosh_index'),
    },
}

DATABASES = {
    'default': {
        'NAME': ':memory:',
        'ENGINE': 'django.db.backends.sqlite3'
    }
}

API = True

SECRET_KEY = 'richard-test'

########NEW FILE########
__FILENAME__ = admin
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.contrib import admin

from richard.suggestions.models import Suggestion


def mark_as_spam(modeladmin, request, queryset):
    queryset.update(state=Suggestion.STATE_SPAM,
                    is_reviewed=True)


def mark_as_reviewed(modeladmin, request, queryset):
    queryset.update(is_reviewed=True)


class SuggestionAdmin(admin.ModelAdmin):
    date_hierarchy = 'submitted'
    list_display = ('state', 'is_reviewed', 'name', 'url', 'submitted',
                    'resolved')
    list_filter = ('state', 'is_reviewed',)
    search_fields = ('name', 'url',)
    radio_fields = {'state': admin.HORIZONTAL}
    exclude = ('resolved',)
    actions = [mark_as_spam, mark_as_reviewed]


admin.site.register(Suggestion, SuggestionAdmin)

########NEW FILE########
__FILENAME__ = forms
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.forms import ModelForm

from richard.suggestions.models import Suggestion


class SuggestionForm(ModelForm):
    class Meta:
        model = Suggestion
        fields = ('name', 'url', 'comment',)

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'Suggestion'
        db.create_table('suggestions_suggestion', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('state', self.gf('django.db.models.fields.IntegerField')(default=0)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=128)),
            ('url', self.gf('django.db.models.fields.URLField')(max_length=255)),
            ('comment', self.gf('django.db.models.fields.TextField')(blank=True)),
            ('whiteboard', self.gf('django.db.models.fields.CharField')(default=u'', max_length=255, blank=True)),
            ('resolution', self.gf('django.db.models.fields.CharField')(default=u'', max_length=128, blank=True)),
            ('submitted', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('resolved', self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)),
        ))
        db.send_create_signal('suggestions', ['Suggestion'])

    def backwards(self, orm):
        # Deleting model 'Suggestion'
        db.delete_table('suggestions_suggestion')

    models = {
        'suggestions.suggestion': {
            'Meta': {'object_name': 'Suggestion'},
            'comment': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'resolution': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '128', 'blank': 'True'}),
            'resolved': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'submitted': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '255'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['suggestions']
########NEW FILE########
__FILENAME__ = 0002_auto__add_field_suggestion_is_reviewed
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Suggestion.is_reviewed'
        db.add_column('suggestions_suggestion', 'is_reviewed',
                      self.gf('django.db.models.fields.BooleanField')(default=False),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'Suggestion.is_reviewed'
        db.delete_column('suggestions_suggestion', 'is_reviewed')


    models = {
        'suggestions.suggestion': {
            'Meta': {'object_name': 'Suggestion'},
            'comment': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_reviewed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'resolution': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '128', 'blank': 'True'}),
            'resolved': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'submitted': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '255'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['suggestions']
########NEW FILE########
__FILENAME__ = 0003_modify_existing_resolved
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models

class Migration(DataMigration):

    def forwards(self, orm):
        RESOLVED_STATES = (2, 3)
        Suggestion = orm['suggestions.Suggestion']
        Suggestion.objects.filter(
            resolution__in=RESOLVED_STATES).update(
                is_reviewed=True)
        # Note: Remember to use orm['appname.ModelName'] rather than "from appname.models..."

    def backwards(self, orm):
        "Write your backwards methods here."

    models = {
        'suggestions.suggestion': {
            'Meta': {'object_name': 'Suggestion'},
            'comment': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_reviewed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
            'resolution': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '128', 'blank': 'True'}),
            'resolved': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'submitted': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '255'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['suggestions']
    symmetrical = True

########NEW FILE########
__FILENAME__ = 0004_auto__add_unique_suggestion_name__add_unique_suggestion_url
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding unique constraint on 'Suggestion', fields ['name']
        db.create_unique('suggestions_suggestion', ['name'])

        # Adding unique constraint on 'Suggestion', fields ['url']
        db.create_unique('suggestions_suggestion', ['url'])


    def backwards(self, orm):
        # Removing unique constraint on 'Suggestion', fields ['url']
        db.delete_unique('suggestions_suggestion', ['url'])

        # Removing unique constraint on 'Suggestion', fields ['name']
        db.delete_unique('suggestions_suggestion', ['name'])


    models = {
        'suggestions.suggestion': {
            'Meta': {'object_name': 'Suggestion'},
            'comment': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'is_reviewed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'}),
            'resolution': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '128', 'blank': 'True'}),
            'resolved': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
            'submitted': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'unique': 'True', 'max_length': '255'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['suggestions']
########NEW FILE########
__FILENAME__ = models
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from datetime import datetime

from django.db import models
from django.utils.translation import ugettext_lazy as _
from django.utils.encoding import python_2_unicode_compatible


@python_2_unicode_compatible
class Suggestion(models.Model):
    """Represents a suggestion for videos to be added to the site."""

    STATE_NEW = 0
    STATE_IN_PROGRESS = 1
    STATE_COMPLETED = 2
    STATE_REJECTED = 3
    STATE_SPAM = 4

    RESOLVED_STATES = (STATE_COMPLETED, STATE_REJECTED)
    OPEN_STATES = (STATE_NEW, STATE_IN_PROGRESS)

    STATE_CHOICES = (
        (STATE_NEW, _(u'New')),
        (STATE_IN_PROGRESS, _(u'In progress')),
        (STATE_COMPLETED, _(u'Completed')),
        (STATE_REJECTED, _(u'Rejected')),
        (STATE_SPAM, _(u'Spam')),
        )

    state = models.IntegerField(choices=STATE_CHOICES, default=STATE_NEW)

    name = models.CharField(
        max_length=128,
        help_text=_(u'Name of video/collection of videos'),
        unique=True)
    url = models.URLField(
        max_length=255,
        help_text=_(u'Link to video/collection of videos'),
        unique=True)
    comment = models.TextField(
        blank=True,
        help_text=_(u'Additional information, urls, etc (optional)'))

    whiteboard = models.CharField(
        max_length=255, blank=True, default=u'',
        help_text=_(u'Editor notes for this suggestion.'))
    resolution = models.CharField(
        max_length=128, blank=True, default=u'',
        help_text=_(u'Describe how this suggestion was resolved.'))

    submitted = models.DateTimeField(auto_now_add=True)
    resolved = models.DateTimeField(blank=True, null=True)
    is_reviewed = models.BooleanField(default=False)

    def __str__(self):
        return self.name

    class Meta(object):
        verbose_name = _(u'suggestion')
        verbose_name_plural = _(u'suggestions')

    def save(self, *args, **kwargs):
        """When the suggestion is closed, set the resolved date."""
        if self.state in Suggestion.RESOLVED_STATES:
            self.resolved = datetime.now()
        else:
            # Reset resolved date when the suggestion is reopened
            self.resolved = None

        super(Suggestion, self).save(*args, **kwargs)

########NEW FILE########
__FILENAME__ = test_models
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.test import TestCase

from richard.suggestions.tests import suggestion
from richard.suggestions.models import Suggestion


class TestSuggestion(TestCase):

    def test_resolved_date_set_upon_save(self):
        """Test that the date is set when the suggestion is closed."""
        s = suggestion(save=True)
        assert s.resolved is None

        s.state = Suggestion.STATE_COMPLETED
        s.save()
        assert s.resolved is not None

    def test_no_resolved_date_for_open_states(self):
        """Test that the date is not set when the state is not closed."""
        s = suggestion(save=True)
        assert s.resolved is None

        s.state = Suggestion.STATE_IN_PROGRESS
        s.save()
        assert s.resolved is None

    def test_wipe_resolved_date_when_reopened(self):
        """Test that date is reset when the suggestion is reopened."""
        s = suggestion(save=True, state=Suggestion.STATE_COMPLETED)
        assert s.resolved is not None

        s.state = Suggestion.STATE_NEW
        s.save()
        assert s.resolved is None

########NEW FILE########
__FILENAME__ = test_utils
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.test import TestCase
from django.test.utils import override_settings

from nose.tools import eq_

from richard.suggestions import utils
from richard.suggestions.models import Suggestion
from richard.suggestions.tests import suggestion


class TestMarkIfSpam(TestCase):
    """Tests for mark_if_spam."""

    def test_mark_if_spam_no_spam_words(self):
        s = suggestion(name='foo', comment='foo', save=True)
        utils.mark_if_spam(s)

        eq_(s.state, Suggestion.STATE_NEW)

    @override_settings(SPAM_WORDS=['foo'])
    def test_mark_if_spam_with_words(self):
        # handle name
        s = suggestion(name='1 foo 2', comment='1 bar 2', save=True)
        utils.mark_if_spam(s)

        eq_(s.state, Suggestion.STATE_SPAM)

        # handle comment
        s = suggestion(name='1 bar 2', comment='1 foo 2', save=True)
        utils.mark_if_spam(s)

        eq_(s.state, Suggestion.STATE_SPAM)

        # not case-sensitive
        s = suggestion(name='1 FOO 2', comment='1 FOO 2', save=True)
        utils.mark_if_spam(s)

        eq_(s.state, Suggestion.STATE_SPAM)

        # don't flag superstrings
        s = suggestion(name='1 food 2', comment='1 food 2', save=True)
        utils.mark_if_spam(s)

        eq_(s.state, Suggestion.STATE_NEW)

########NEW FILE########
__FILENAME__ = test_views
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.core.urlresolvers import reverse
from django.test import TestCase

from nose.tools import eq_

from richard.suggestions.models import Suggestion
from richard.suggestions.tests import suggestion


class TestSuggestions(TestCase):
    """Tests for the ``suggestions`` app."""

    def test_not_reviewed_list(self):
        """Test the view of the listing of all suggestions."""
        s = suggestion(save=True)

        resp = self.client.get(reverse('suggestions-list'))
        eq_(resp.status_code, 200)
        self.assertTemplateUsed(resp, 'suggestions/suggestions_list.html')
        self.assertNotContains(resp, s.name)

    def test_reviewed_list(self):
        """Test the view of the listing of all suggestions."""
        s = suggestion(save=True)
        s.is_reviewed = True
        s.save()

        resp = self.client.get(reverse('suggestions-list'))
        eq_(resp.status_code, 200)
        self.assertTemplateUsed(resp, 'suggestions/suggestions_list.html')
        self.assertContains(resp, s.name)

    def test_list_without_spam(self):
        """Test that entries marked as spam do not show up."""
        s = suggestion(state=Suggestion.STATE_SPAM, save=True)

        resp = self.client.get(reverse('suggestions-list'))
        eq_(resp.status_code, 200)
        self.assertTemplateUsed(resp, 'suggestions/suggestions_list.html')
        self.assertNotContains(resp, s.name)

    def test_submit(self):
        """Test that submitting a suggestion works."""
        resp = self.client.post(
            reverse('suggestions-list'),
            {'name': u'Add boston group',
             'url': u'http://meetup.bostonpython.com/'},
            follow=True)
        eq_(resp.status_code, 200)
        assert Suggestion.objects.filter(name=u'Add boston group').exists()

########NEW FILE########
__FILENAME__ = urls
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.conf.urls import patterns, url


urlpatterns = patterns(
    'richard.suggestions.views',

    url(r'^videos/?$', 'suggestions', name='suggestions-list'),
)

########NEW FILE########
__FILENAME__ = utils
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
from django.conf import settings
from richard.suggestions.models import Suggestion


def mark_if_spam(suggestion):
    """
    Accepts a suggestion instance and checks it's name and comment
    fields for spam words specified in `settings.SPAM_WORDS`.

    If any words are found, it marks the item's state as spam.
    """
    if not settings.SPAM_WORDS:
        return suggestion

    s = ' '.join([suggestion.name, suggestion.comment])
    unique_words = set(
        ''.join(c for c in s.lower() if c.isalnum() or c.isspace()).split())

    for word in settings.SPAM_WORDS:
        if word in unique_words:
            suggestion.state = Suggestion.STATE_SPAM
            suggestion.save()
            break
    return suggestion

########NEW FILE########
__FILENAME__ = views
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.contrib import messages
from django.shortcuts import render, redirect
from django.views.decorators.csrf import csrf_protect

from richard.suggestions.forms import SuggestionForm
from richard.suggestions.models import Suggestion
from richard.suggestions.utils import mark_if_spam


@csrf_protect
def suggestions(request):
    """Show a list of all accepted suggestions and their status."""
    if request.method == 'POST':
        form = SuggestionForm(request.POST)
        if form.is_valid():
            obj = form.save()
            mark_if_spam(obj)
            messages.add_message(request, messages.INFO,
                                 'Suggestion submitted.')
            return redirect('suggestions-list')
    else:
        form = SuggestionForm()

    open_objs = Suggestion.objects.filter(
        state__in=Suggestion.OPEN_STATES,
        is_reviewed=True)
    resolved_objs = Suggestion.objects.filter(
        state__in=Suggestion.RESOLVED_STATES,
        is_reviewed=True)

    ret = render(
        request, 'suggestions/suggestions_list.html',
        {'form': form,
         'open_suggestions': open_objs,
         'resolved_suggestions': resolved_objs})
    return ret

########NEW FILE########
__FILENAME__ = urls
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.conf import settings
from django.conf.urls import patterns, include, url
from django.conf.urls.static import static
from django.contrib.auth.decorators import login_required

# enable the admin
from django.contrib import admin
admin.autodiscover()
admin.site.login = login_required(admin.site.login)

from richard.pages.sitemaps import PageSitemap
from richard.videos.sitemaps import (
    CategorySitemap, SpeakerSitemap, VideoSitemap)


sitemaps = {
    'page': PageSitemap,
    'category': CategorySitemap,
    'speaker': SpeakerSitemap,
    'video': VideoSitemap
}

urlpatterns = patterns(
    '',

    url(r'', include('richard.base.urls')),

    (r'^sitemap\.xml$', 'django.contrib.sitemaps.views.sitemap',
     {'sitemaps': sitemaps}),

    url(r'^grappelli/', include('grappelli.urls')),
    url(r'^admin/', include(admin.site.urls)),

    url(r'^pages/', include('richard.pages.urls')),
    url(r'^suggestions/', include('richard.suggestions.urls')),
    url(r'', include('richard.videos.urls')),

    url(r'', include('django_browserid.urls')),
)

urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

########NEW FILE########
__FILENAME__ = admin
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.contrib import admin
from django.contrib.admin import SimpleListFilter
from django.utils.translation import ugettext_lazy as _

from richard.videos.models import (Video, Category, Speaker, Tag,
                                   Language, RelatedUrl)


class WhiteboardFilter(SimpleListFilter):
    """Filter objects with whiteboard bits"""
    title = _('whiteboard')
    parameter_name = 'whiteboard'

    def lookups(self, request, model_admin):
        return (
            ('0', _('No')),
            ('1', _('Yes')),
        )

    def queryset(self, request, queryset):
        if self.value() == '0':
            return queryset.filter(whiteboard__exact='')
        if self.value() == '1':
            return queryset.exclude(whiteboard__exact='')


def make_live(modeladmin, request, queryset):
    queryset.update(state=1)
make_live.short_description = 'Make live'


def make_draft(modeladmin, request, queryset):
    queryset.update(state=2)
make_draft.short_description = 'Make draft'


class RelatedUrlInline(admin.TabularInline):
    model = RelatedUrl


class VideoAdmin(admin.ModelAdmin):
    date_hierarchy = 'recorded'
    list_display = ('title', 'category', 'whiteboard', 'state')
    list_filter = (WhiteboardFilter, 'state', 'category')
    search_fields = ('title',)
    radio_fields = {'state': admin.HORIZONTAL}
    filter_horizontal = ('tags', 'speakers',)
    save_on_top = True
    prepopulated_fields = {'slug': ('title',)}
    inlines = [RelatedUrlInline]
    actions = [make_live, make_draft]


admin.site.register(Video, VideoAdmin)


class CategoryAdmin(admin.ModelAdmin):
    list_display = ('title', 'linked_url', 'whiteboard')
    list_filter = (WhiteboardFilter,)
    search_fields = ('name', 'title', 'description')

    def linked_url(self, obj):
        return '<a href="%s">%s</a>' % (obj.url, obj.url)
    linked_url.allow_tags = True
    linked_url.short_description = 'URL'
    prepopulated_fields = {'slug': ('title',)}


admin.site.register(Category, CategoryAdmin)


class SpeakerAdmin(admin.ModelAdmin):
    list_display = ('name',)
    search_fields = ('name',)
    prepopulated_fields = {'slug': ('name',)}


admin.site.register(Speaker, SpeakerAdmin)


class TagAdmin(admin.ModelAdmin):
    list_display = ('tag',)
    search_fields = ('tag',)


admin.site.register(Tag, TagAdmin)


class LanguageAdmin(admin.ModelAdmin):
    list_display = ('iso639_1', 'name')
    search_fields = ('name',)


admin.site.register(Language, LanguageAdmin)

########NEW FILE########
__FILENAME__ = feeds
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from datetime import datetime, time

from django.conf import settings
from django.contrib.syndication.views import Feed
from django.core.urlresolvers import reverse
from django.shortcuts import get_object_or_404
from django.utils.feedgenerator import Rss201rev2Feed
from django.utils.translation import ugettext as _

from richard.videos.models import Speaker, Category, Video


class MediaRSSFeed(Rss201rev2Feed):
    """Implements parts of the Media RSS specification.

    http://www.rssboard.org/media-rss
    """
    def rss_attributes(self):
        attrs = super(MediaRSSFeed, self).rss_attributes()
        attrs[u'xmlns:media'] = u'http://search.yahoo.com/mrss/'
        return attrs

    def add_item_elements(self, handler, item):
        super(MediaRSSFeed, self).add_item_elements(handler, item)

        if 'enclosures' in item and len(item['enclosures']) > 1:
            handler.startElement(u'media:group', {})
            for e in item['enclosures']:
                handler.addQuickElement(u'media:content', '', e)
            handler.endElement(u'media:group')

        if 'keywords' in item:
            handler.addQuickElement(u"media:keywords", item['keywords'])

        for name, attrs in item.get('media', {}).items():
            handler.addQuickElement(u'media:%s' % name, '', attrs)


class CategoryFeed(Feed):
    """Feed of categories"""
    feed_type = Rss201rev2Feed
    ttl = 500
    description_template = 'videos/category_feed_video.html'

    def link(self):
        return reverse('videos-category-feed')

    def title(self):
        return _(u'{site_title}: Categories').format(
            site_title=settings.SITE_TITLE)

    def items(self):
        cats = (Category.objects.filter(video__state=Video.STATE_LIVE)
                                .order_by('-added'))
        return cats[:settings.MAX_FEED_LENGTH]

    def item_title(self, item):
        return item.title

    def item_pubdate(self, item):
        if item.start_date:
            return datetime.combine(item.start_date, time())
        else:
            return None

    def item_link(self, item):
        return item.get_absolute_url()


class BaseVideoFeed(Feed):
    feed_type = MediaRSSFeed
    ttl = 500

    # item_categories -- category + tags?
    # item_copyright

    def item_title(self, item):
        return item.title

    def item_description(self, video):
        desc = []
        if video.summary:
            desc.append(u'<p>Abstract</p>')
            desc.append(video.summary)
        if video.description:
            desc.append(u'<p>Description</p>')
            desc.append(video.description)
        return u'\n'.join(desc)

    def item_pubdate(self, video):
        # pubdate needs to be a datetime object, recorded is just a date
        if video.recorded:
            return datetime.combine(video.recorded, time())
        else:
            return None

    def item_link(self, video):
        return video.get_absolute_url()

    def item_author_name(self, video):
        # TODO: This returns a list of authors, but maybe there's
        # a better way to do that with MRSS
        return u','.join([s.name for s in video.speakers.all()])

    # MediaRSS specific

    def item_enclosures(self, item):
        enclosures = []
        for fmt in item.get_feed_formats():
            data = {'url': fmt['url']}
            if fmt.get('mime_type'):
                data['mime_type'] = fmt['mime_type']
            if fmt.get('length'):
                data['fileSize'] = str(fmt['length'])

            enclosures.append(data)
        return enclosures

    def item_media(self, item):
        # TODO no point in including a 'no thumbnail' image
        return {'thumbnail': {'url': item.get_thumbnail_url()}}

    def item_extra_kwargs(self, item):
        # provides us with an API similar to the rest of the Feed class
        return {'enclosures': self.item_enclosures(item),
                'media': self.item_media(item)}

    # RSS enclosure (fallback if MediaRSS is not supported by the client)
    # This uses the first format that is available, according to the
    # MEDIA_PREFERENCE setting.

    def item_enclosure_url(self, item):
        fmt = item.get_feed_formats()
        if fmt:
            return fmt[0]['url']
        else:
            return None

    def item_enclosure_length(self, item):
        fmt = item.get_feed_formats()
        if fmt:
            return fmt[0].get('length')
        else:
            return None

    def item_enclosure_mime_type(self, item):
        fmt = item.get_feed_formats()
        if fmt:
            return fmt[0].get('mime_type')
        else:
            return None


class CategoryVideosFeed(BaseVideoFeed):
    """Videos of a single category, e.g. of a conference."""
    def link(self, category):
        return reverse('videos-category-videos-feed',
                       kwargs={'category_id': category.pk,
                               'slug': category.slug})

    def title(self, category):
        return _(u'{site_title}: Videos of {category}').format(
            site_title=settings.SITE_TITLE, category=category.title)

    def get_object(self, request, category_id, slug):
        return get_object_or_404(Category, pk=category_id)

    def items(self, category):
        return category.video_set.live()


class SpeakerVideosFeed(BaseVideoFeed):
    """Videos of a single speaker."""
    def link(self, speaker):
        return reverse('videos-speaker-feed',
                       kwargs={'speaker_id': speaker.pk, 'slug': speaker.slug})

    def title(self, speaker):
        return _(u'{site_title}: Videos of {speaker}').format(
            site_title=settings.SITE_TITLE, speaker=speaker.name)

    def get_object(self, request, speaker_id, slug):
        return get_object_or_404(Speaker, pk=speaker_id)

    def items(self, speaker):
        return speaker.video_set.live()


class NewPostedVideoFeed(BaseVideoFeed):
    """Feed for newly posted videos."""
    def link(self):
        return reverse('videos-new-feed')

    def title(self):
        return _(u'{site_title}: Newly posted videos').format(
            site_title=settings.SITE_TITLE)

    def items(self):
        videos = Video.objects.live().order_by('-added')
        return videos[:settings.MAX_FEED_LENGTH]

########NEW FILE########
__FILENAME__ = checklinks
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


from collections import Counter
from optparse import make_option
from django.core.management.base import BaseCommand, CommandError

from richard.videos.models import Video, VideoUrlStatus


class Command(BaseCommand):
    args = '[<id id...>]'
    help = 'Check Video URLs for availability'

    states = [state[0] for state in Video.STATE_CHOICES]
    verbose = 0

    option_list = BaseCommand.option_list + (
        make_option('-a', '--all', action='store_true', dest='all', default=True,
            help='Check URL availability for all videos.'),
        make_option(
            '-s',
            '--state',
            dest='state',
            type='choice',
            choices=states,
            action='store',
            default=None,
            metavar='STATE',
            help='Check URL availability for videos in the requested state.'
                    + ' Valid choices: %s.' % states,
        ),
    )


    def handle(self, *args, **options):
        self.verbose = int(options.get('verbosity'))
        checked = 0
        status_counter = Counter()

        if options['all']:
            videos = Video.objects.all()
        elif options['state']:
            videos = Video.objects.filter(state=options['state'])
        elif len(args) > 0:
            videos = Video.objects.filter(id__in=args)
        else:
            raise CommandError('missing required options')

        total = len(videos)

        for ind, v in enumerate(videos):
            self.log('%d/%d: Checking URLs for id %s video %s' % (ind, total, v.id, v.title), min_verbose=2)
            ret = VideoUrlStatus.objects.create_for_video(v)
            if ret:
                self.log('       %s' % unicode(ret), min_verbose=2)
            status_counter += ret
            checked += 1
        self.log('Checked %d videos\n' % checked)
        self.log(unicode(status_counter))

    def log(self, msg, min_verbose=1):
        if self.verbose >= min_verbose:
            self.stdout.write(msg)

########NEW FILE########
__FILENAME__ = fetchvideothumbnails
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import StringIO
import os
from optparse import make_option

import requests
from django.conf import settings
from django.core.management.base import BaseCommand, CommandError

from videos.models import Video


class Command(BaseCommand):
    option_list = BaseCommand.option_list + (
        make_option('--overwrite', action='store_true', dest='overwrite',
                    default=False,
                    help='Overwrite existing thumbnails.'),
    )
    help = 'Fetch thumbnails of all videos and store them locally'

    def handle(self, *args, **options):
        verbose = int(options.get('verbosity'))

        # Make PIL only a dependency for this command, not the rest of
        # richard
        try:
            from PIL import Image
        except ImportError:
            raise CommandError('PIL is required for this command.')

        root = os.path.join(settings.MEDIA_ROOT, Video.LOCAL_THUMBNAIL_PATH)
        root = os.path.dirname(root)
        if not os.path.exists(root):
            os.mkdir(root)

        fetched = 0
        videos = Video.objects.exclude(thumbnail_url='')
        total = len(videos)

        for ind, v in enumerate(videos):
            # Don't overwrite existing thumbnails unless we were told so
            path = Video.LOCAL_THUMBNAIL_PATH % v.pk
            if ((not options.get('overwrite') and
                 os.path.exists(os.path.join(settings.MEDIA_ROOT, path)))):
                if verbose:
                    self.stdout.write('%d/%d: Skipping %s (%s)\n' % (
                            ind, total, path, v.title))
                continue

            if verbose:
                self.stdout.write('%d/%d: Fetching %s (%s)\n' % (
                        ind, total, path, v.title))

            res = requests.get(v.thumbnail_url)
            data = StringIO.StringIO(res.content)

            image = Image.open(data)
            image.thumbnail(settings.VIDEO_THUMBNAIL_SIZE, Image.ANTIALIAS)
            image.save(os.path.join(settings.MEDIA_ROOT, path))
            del image
            fetched += 1

        if verbose:
            self.stdout.write('Fetched %d images\n' % fetched)

########NEW FILE########
__FILENAME__ = videoreqs
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import json

from django.db.models import fields
from django.core.management.base import BaseCommand

from richard.videos.models import Video


class Command(BaseCommand):
    help = 'Generates a JSON file with requirements for video'

    def handle(self, *args, **options):
        # Generate the basic stuff
        reqs = []
        for field in Video._meta.fields:
            # Skip some things that shouldn't be in an API push
            if field.name in ['id', 'updated', 'added']:
                continue

            data = {
                'name': field.name,
                'type': field.get_internal_type(),
                'has_default': field.default is not fields.NOT_PROVIDED,
                'null': field.null,
                'empty_strings': field.empty_strings_allowed,
                'md': 'markdown' in field.help_text.lower(),
                'choices': [mem[0] for mem in field.choices]
                }

            if field.name == 'category':
                data.update({
                        'type': 'TextField',
                        'empty_strings': False,
                        'null': False,
                        'has_default': False,
                        'md': False,
                        'choices': []
                        })
            elif field.name == 'language':
                data.update({
                        'type': 'TextField',
                        'empty_strings': False,
                        'null': False,
                        'has_default': False,
                        'md': False,
                        'choices': []
                        })

            reqs.append(data)

        # Add tags and speakers which are M2M, but we do them funkily
        # in the API.
        reqs.append({
                'name': 'tags',
                'type': 'TextArrayField',
                'empty_strings': False,
                'null': True,
                'has_default': False,
                'md': False,
                'choices': []
                })
        reqs.append({
                'name': 'speakers',
                'type': 'TextArrayField',
                'empty_strings': False,
                'has_default': False,
                'null': True,
                'md': False,
                'choices': []
                })

        f = open('video_reqs.json', 'w')
        f.write(json.dumps(reqs, indent=2))
        f.close()

        self.stdout.write('Done!\n')

########NEW FILE########
__FILENAME__ = 0001_initial
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'CategoryKind'
        db.create_table('videos_categorykind', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=40)),
        ))
        db.send_create_signal('videos', ['CategoryKind'])

        # Adding model 'Category'
        db.create_table('videos_category', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('kind', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['videos.CategoryKind'])),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('description', self.gf('django.db.models.fields.TextField')(default=u'', blank=True)),
            ('url', self.gf('django.db.models.fields.URLField')(default=u'', max_length=200, blank=True)),
            ('start_date', self.gf('django.db.models.fields.DateField')(null=True, blank=True)),
            ('whiteboard', self.gf('django.db.models.fields.TextField')(default=u'', blank=True)),
            ('slug', self.gf('django.db.models.fields.SlugField')(unique=True, max_length=50)),
        ))
        db.send_create_signal('videos', ['Category'])

        # Adding model 'Speaker'
        db.create_table('videos_speaker', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('slug', self.gf('django.db.models.fields.SlugField')(unique=True, max_length=50)),
        ))
        db.send_create_signal('videos', ['Speaker'])

        # Adding model 'Tag'
        db.create_table('videos_tag', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('tag', self.gf('django.db.models.fields.CharField')(max_length=30)),
        ))
        db.send_create_signal('videos', ['Tag'])

        # Adding model 'Video'
        db.create_table('videos_video', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('state', self.gf('django.db.models.fields.IntegerField')(default=2)),
            ('title', self.gf('django.db.models.fields.CharField')(max_length=255)),
            ('summary', self.gf('django.db.models.fields.TextField')(default=u'', blank=True)),
            ('description', self.gf('django.db.models.fields.TextField')(default=u'', blank=True)),
            ('category', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['videos.Category'])),
            ('quality_notes', self.gf('django.db.models.fields.TextField')(default=u'', blank=True)),
            ('copyright_text', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('embed', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
            ('thumbnail_url', self.gf('django.db.models.fields.URLField')(max_length=255, null=True, blank=True)),
            ('video_ogv_length', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('video_ogv_url', self.gf('django.db.models.fields.URLField')(max_length=255, null=True, blank=True)),
            ('video_mp4_length', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('video_mp4_url', self.gf('django.db.models.fields.URLField')(max_length=255, null=True, blank=True)),
            ('video_webm_length', self.gf('django.db.models.fields.IntegerField')(null=True, blank=True)),
            ('video_webm_url', self.gf('django.db.models.fields.URLField')(max_length=255, null=True, blank=True)),
            ('source_url', self.gf('django.db.models.fields.URLField')(max_length=255, null=True, blank=True)),
            ('whiteboard', self.gf('django.db.models.fields.CharField')(default=u'', max_length=255, blank=True)),
            ('recorded', self.gf('django.db.models.fields.DateField')(null=True, blank=True)),
            ('added', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, blank=True)),
            ('updated', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
            ('slug', self.gf('django.db.models.fields.SlugField')(unique=True, max_length=50)),
        ))
        db.send_create_signal('videos', ['Video'])

        # Adding M2M table for field tags on 'Video'
        db.create_table('videos_video_tags', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('video', models.ForeignKey(orm['videos.video'], null=False)),
            ('tag', models.ForeignKey(orm['videos.tag'], null=False))
        ))
        db.create_unique('videos_video_tags', ['video_id', 'tag_id'])

        # Adding M2M table for field speakers on 'Video'
        db.create_table('videos_video_speakers', (
            ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),
            ('video', models.ForeignKey(orm['videos.video'], null=False)),
            ('speaker', models.ForeignKey(orm['videos.speaker'], null=False))
        ))
        db.create_unique('videos_video_speakers', ['video_id', 'speaker_id'])

        # Adding model 'RelatedUrl'
        db.create_table('videos_relatedurl', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('video', self.gf('django.db.models.fields.related.ForeignKey')(related_name='related_urls', to=orm['videos.Video'])),
            ('url', self.gf('django.db.models.fields.URLField')(max_length=255)),
            ('description', self.gf('django.db.models.fields.CharField')(default=u'', max_length=255, blank=True)),
        ))
        db.send_create_signal('videos', ['RelatedUrl'])

    def backwards(self, orm):
        # Deleting model 'CategoryKind'
        db.delete_table('videos_categorykind')

        # Deleting model 'Category'
        db.delete_table('videos_category')

        # Deleting model 'Speaker'
        db.delete_table('videos_speaker')

        # Deleting model 'Tag'
        db.delete_table('videos_tag')

        # Deleting model 'Video'
        db.delete_table('videos_video')

        # Removing M2M table for field tags on 'Video'
        db.delete_table('videos_video_tags')

        # Removing M2M table for field speakers on 'Video'
        db.delete_table('videos_video_speakers')

        # Deleting model 'RelatedUrl'
        db.delete_table('videos_relatedurl')

    models = {
        'videos.category': {
            'Meta': {'ordering': "['name', 'title']", 'object_name': 'Category'},
            'description': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['videos.CategoryKind']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'start_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'url': ('django.db.models.fields.URLField', [], {'default': "u''", 'max_length': '200', 'blank': 'True'}),
            'whiteboard': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'})
        },
        'videos.categorykind': {
            'Meta': {'object_name': 'CategoryKind'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'videos.relatedurl': {
            'Meta': {'object_name': 'RelatedUrl'},
            'description': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '255'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'related_urls'", 'to': "orm['videos.Video']"})
        },
        'videos.speaker': {
            'Meta': {'ordering': "['name']", 'object_name': 'Speaker'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})
        },
        'videos.tag': {
            'Meta': {'ordering': "['tag']", 'object_name': 'Tag'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '30'})
        },
        'videos.video': {
            'Meta': {'ordering': "['-recorded', 'title']", 'object_name': 'Video'},
            'added': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['videos.Category']"}),
            'copyright_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'embed': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'quality_notes': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'recorded': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'source_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'speakers': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['videos.Speaker']", 'symmetrical': 'False', 'blank': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '2'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['videos.Tag']", 'symmetrical': 'False', 'blank': 'True'}),
            'thumbnail_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'video_mp4_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_mp4_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_ogv_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_ogv_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_webm_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_webm_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['videos']
########NEW FILE########
__FILENAME__ = 0002_auto__chg_field_category_whiteboard
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Changing field 'Category.whiteboard'
        db.alter_column('videos_category', 'whiteboard', self.gf('django.db.models.fields.CharField')(max_length=255))
    def backwards(self, orm):

        # Changing field 'Category.whiteboard'
        db.alter_column('videos_category', 'whiteboard', self.gf('django.db.models.fields.TextField')())
    models = {
        'videos.category': {
            'Meta': {'ordering': "['name', 'title']", 'object_name': 'Category'},
            'description': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['videos.CategoryKind']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'start_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'url': ('django.db.models.fields.URLField', [], {'default': "u''", 'max_length': '200', 'blank': 'True'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        },
        'videos.categorykind': {
            'Meta': {'object_name': 'CategoryKind'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'videos.relatedurl': {
            'Meta': {'object_name': 'RelatedUrl'},
            'description': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '255'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'related_urls'", 'to': "orm['videos.Video']"})
        },
        'videos.speaker': {
            'Meta': {'ordering': "['name']", 'object_name': 'Speaker'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})
        },
        'videos.tag': {
            'Meta': {'ordering': "['tag']", 'object_name': 'Tag'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '30'})
        },
        'videos.video': {
            'Meta': {'ordering': "['-recorded', 'title']", 'object_name': 'Video'},
            'added': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['videos.Category']"}),
            'copyright_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'embed': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'quality_notes': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'recorded': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'source_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'speakers': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['videos.Speaker']", 'symmetrical': 'False', 'blank': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '2'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['videos.Tag']", 'symmetrical': 'False', 'blank': 'True'}),
            'thumbnail_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'video_mp4_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_mp4_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_ogv_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_ogv_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_webm_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_webm_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['videos']
########NEW FILE########
__FILENAME__ = 0003_auto__add_field_video_video_flv_length__add_field_video_video_flv_url
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Video.video_flv_length'
        db.add_column('videos_video', 'video_flv_length',
                      self.gf('django.db.models.fields.IntegerField')(null=True, blank=True),
                      keep_default=False)

        # Adding field 'Video.video_flv_url'
        db.add_column('videos_video', 'video_flv_url',
                      self.gf('django.db.models.fields.URLField')(max_length=255, null=True, blank=True),
                      keep_default=False)

    def backwards(self, orm):
        # Deleting field 'Video.video_flv_length'
        db.delete_column('videos_video', 'video_flv_length')

        # Deleting field 'Video.video_flv_url'
        db.delete_column('videos_video', 'video_flv_url')

    models = {
        'videos.category': {
            'Meta': {'ordering': "['name', 'title']", 'object_name': 'Category'},
            'description': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['videos.CategoryKind']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'start_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'url': ('django.db.models.fields.URLField', [], {'default': "u''", 'max_length': '200', 'blank': 'True'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        },
        'videos.categorykind': {
            'Meta': {'object_name': 'CategoryKind'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'videos.relatedurl': {
            'Meta': {'object_name': 'RelatedUrl'},
            'description': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '255'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'related_urls'", 'to': "orm['videos.Video']"})
        },
        'videos.speaker': {
            'Meta': {'ordering': "['name']", 'object_name': 'Speaker'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})
        },
        'videos.tag': {
            'Meta': {'ordering': "['tag']", 'object_name': 'Tag'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '30'})
        },
        'videos.video': {
            'Meta': {'ordering': "['-recorded', 'title']", 'object_name': 'Video'},
            'added': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['videos.Category']"}),
            'copyright_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'embed': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'quality_notes': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'recorded': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'source_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'speakers': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['videos.Speaker']", 'symmetrical': 'False', 'blank': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '2'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['videos.Tag']", 'symmetrical': 'False', 'blank': 'True'}),
            'thumbnail_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'video_flv_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_flv_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_mp4_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_mp4_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_ogv_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_ogv_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_webm_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_webm_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['videos']
########NEW FILE########
__FILENAME__ = 0004_auto__add_language__add_field_video_language
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'Language'
        db.create_table('videos_language', (
            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('iso639_1', self.gf('django.db.models.fields.CharField')(max_length=3)),
            ('name', self.gf('django.db.models.fields.CharField')(max_length=20)),
        ))
        db.send_create_signal('videos', ['Language'])

        # Adding field 'Video.language'
        db.add_column('videos_video', 'language',
                      self.gf('django.db.models.fields.related.ForeignKey')(to=orm['videos.Language'], null=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting model 'Language'
        db.delete_table('videos_language')

        # Deleting field 'Video.language'
        db.delete_column('videos_video', 'language_id')


    models = {
        'videos.category': {
            'Meta': {'ordering': "['name', 'title']", 'object_name': 'Category'},
            'description': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['videos.CategoryKind']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'start_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'url': ('django.db.models.fields.URLField', [], {'default': "u''", 'max_length': '200', 'blank': 'True'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        },
        'videos.categorykind': {
            'Meta': {'object_name': 'CategoryKind'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'videos.language': {
            'Meta': {'object_name': 'Language'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'iso639_1': ('django.db.models.fields.CharField', [], {'max_length': '3'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '20'})
        },
        'videos.relatedurl': {
            'Meta': {'object_name': 'RelatedUrl'},
            'description': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '255'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'related_urls'", 'to': "orm['videos.Video']"})
        },
        'videos.speaker': {
            'Meta': {'ordering': "['name']", 'object_name': 'Speaker'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})
        },
        'videos.tag': {
            'Meta': {'ordering': "['tag']", 'object_name': 'Tag'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '30'})
        },
        'videos.video': {
            'Meta': {'ordering': "['-recorded', 'title']", 'object_name': 'Video'},
            'added': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['videos.Category']"}),
            'copyright_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'embed': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['videos.Language']", 'null': 'True'}),
            'quality_notes': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'recorded': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'source_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'speakers': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['videos.Speaker']", 'symmetrical': 'False', 'blank': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '2'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['videos.Tag']", 'symmetrical': 'False', 'blank': 'True'}),
            'thumbnail_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'video_flv_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_flv_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_mp4_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_mp4_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_ogv_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_ogv_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_webm_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_webm_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['videos']
########NEW FILE########
__FILENAME__ = 0005_auto__add_field_video_video_ogv_download_only__add_field_video_video_m
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Video.video_ogv_download_only'
        db.add_column('videos_video', 'video_ogv_download_only',
                      self.gf('django.db.models.fields.BooleanField')(default=False),
                      keep_default=False)

        # Adding field 'Video.video_mp4_download_only'
        db.add_column('videos_video', 'video_mp4_download_only',
                      self.gf('django.db.models.fields.BooleanField')(default=False),
                      keep_default=False)

        # Adding field 'Video.video_webm_download_only'
        db.add_column('videos_video', 'video_webm_download_only',
                      self.gf('django.db.models.fields.BooleanField')(default=False),
                      keep_default=False)

        # Adding field 'Video.video_flv_download_only'
        db.add_column('videos_video', 'video_flv_download_only',
                      self.gf('django.db.models.fields.BooleanField')(default=False),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'Video.video_ogv_download_only'
        db.delete_column('videos_video', 'video_ogv_download_only')

        # Deleting field 'Video.video_mp4_download_only'
        db.delete_column('videos_video', 'video_mp4_download_only')

        # Deleting field 'Video.video_webm_download_only'
        db.delete_column('videos_video', 'video_webm_download_only')

        # Deleting field 'Video.video_flv_download_only'
        db.delete_column('videos_video', 'video_flv_download_only')


    models = {
        'videos.category': {
            'Meta': {'ordering': "['name', 'title']", 'object_name': 'Category'},
            'description': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'kind': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['videos.CategoryKind']"}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'start_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'url': ('django.db.models.fields.URLField', [], {'default': "u''", 'max_length': '200', 'blank': 'True'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        },
        'videos.categorykind': {
            'Meta': {'object_name': 'CategoryKind'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '40'})
        },
        'videos.language': {
            'Meta': {'object_name': 'Language'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'iso639_1': ('django.db.models.fields.CharField', [], {'max_length': '3'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '20'})
        },
        'videos.relatedurl': {
            'Meta': {'object_name': 'RelatedUrl'},
            'description': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '255'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'related_urls'", 'to': "orm['videos.Video']"})
        },
        'videos.speaker': {
            'Meta': {'ordering': "['name']", 'object_name': 'Speaker'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})
        },
        'videos.tag': {
            'Meta': {'ordering': "['tag']", 'object_name': 'Tag'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '30'})
        },
        'videos.video': {
            'Meta': {'ordering': "['-recorded', 'title']", 'object_name': 'Video'},
            'added': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['videos.Category']"}),
            'copyright_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'embed': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['videos.Language']", 'null': 'True'}),
            'quality_notes': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'recorded': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'source_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'speakers': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['videos.Speaker']", 'symmetrical': 'False', 'blank': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '2'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['videos.Tag']", 'symmetrical': 'False', 'blank': 'True'}),
            'thumbnail_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'video_flv_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_flv_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_flv_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_mp4_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_mp4_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_mp4_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_ogv_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_ogv_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_ogv_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_webm_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_webm_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_webm_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['videos']
########NEW FILE########
__FILENAME__ = 0006_auto__del_categorykind__del_field_category_kind__del_field_category_na
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Deleting model 'CategoryKind'
        db.delete_table('videos_categorykind')

        # Deleting field 'Category.kind'
        db.delete_column('videos_category', 'kind_id')

        # Deleting field 'Category.name'
        db.delete_column('videos_category', 'name')


    def backwards(self, orm):
        # User chose to not deal with backwards NULL issues for
        # 'Category.kind' and 'Category.name'
        raise RuntimeError("Cannot reverse this migration. 'Category.kind' "
                           "and 'Category.name' and its values cannot be restored.")

    models = {
        'videos.category': {
            'Meta': {'ordering': "['title']", 'object_name': 'Category'},
            'description': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'start_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'url': ('django.db.models.fields.URLField', [], {'default': "u''", 'max_length': '200', 'blank': 'True'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        },
        'videos.language': {
            'Meta': {'object_name': 'Language'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'iso639_1': ('django.db.models.fields.CharField', [], {'max_length': '3'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '20'})
        },
        'videos.relatedurl': {
            'Meta': {'object_name': 'RelatedUrl'},
            'description': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '255'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'related_urls'", 'to': "orm['videos.Video']"})
        },
        'videos.speaker': {
            'Meta': {'ordering': "['name']", 'object_name': 'Speaker'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})
        },
        'videos.tag': {
            'Meta': {'ordering': "['tag']", 'object_name': 'Tag'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '30'})
        },
        'videos.video': {
            'Meta': {'ordering': "['-recorded', 'title']", 'object_name': 'Video'},
            'added': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['videos.Category']"}),
            'copyright_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'embed': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['videos.Language']", 'null': 'True'}),
            'quality_notes': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'recorded': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'source_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'speakers': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['videos.Speaker']", 'symmetrical': 'False', 'blank': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '2'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['videos.Tag']", 'symmetrical': 'False', 'blank': 'True'}),
            'thumbnail_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'video_flv_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_flv_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_flv_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_mp4_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_mp4_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_mp4_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_ogv_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_ogv_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_ogv_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_webm_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_webm_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_webm_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['videos']

########NEW FILE########
__FILENAME__ = 0007_auto__add_field_category_added
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Category.added'
        db.add_column('videos_category', 'added',
                      self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, null=True, blank=True),
                      keep_default=False)

        if not db.dry_run:
            # Set the added field to start_date for all existing
            # categories.
            for cat in orm.Category.objects.all():
                cat.added = cat.start_date
                cat.save()

    def backwards(self, orm):
        # Deleting field 'Category.added'
        db.delete_column('videos_category', 'added')


    models = {
        'videos.category': {
            'Meta': {'ordering': "['title']", 'object_name': 'Category'},
            'added': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'start_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'url': ('django.db.models.fields.URLField', [], {'default': "u''", 'max_length': '200', 'blank': 'True'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        },
        'videos.language': {
            'Meta': {'object_name': 'Language'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'iso639_1': ('django.db.models.fields.CharField', [], {'max_length': '3'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '20'})
        },
        'videos.relatedurl': {
            'Meta': {'object_name': 'RelatedUrl'},
            'description': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '255'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'related_urls'", 'to': "orm['videos.Video']"})
        },
        'videos.speaker': {
            'Meta': {'ordering': "['name']", 'object_name': 'Speaker'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})
        },
        'videos.tag': {
            'Meta': {'ordering': "['tag']", 'object_name': 'Tag'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '30'})
        },
        'videos.video': {
            'Meta': {'ordering': "['-recorded', 'title']", 'object_name': 'Video'},
            'added': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['videos.Category']"}),
            'copyright_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'embed': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['videos.Language']", 'null': 'True'}),
            'quality_notes': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'recorded': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'source_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'speakers': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['videos.Speaker']", 'symmetrical': 'False', 'blank': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '2'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['videos.Tag']", 'symmetrical': 'False', 'blank': 'True'}),
            'thumbnail_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'video_flv_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_flv_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_flv_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_mp4_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_mp4_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_mp4_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_ogv_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_ogv_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_ogv_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_webm_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_webm_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_webm_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['videos']

########NEW FILE########
__FILENAME__ = 0008_auto__add_field_video_duration
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding field 'Video.duration'
        db.add_column('videos_video', 'duration',
                      self.gf('django.db.models.fields.IntegerField')(null=True, blank=True),
                      keep_default=False)


    def backwards(self, orm):
        # Deleting field 'Video.duration'
        db.delete_column('videos_video', 'duration')


    models = {
        'videos.category': {
            'Meta': {'ordering': "['title']", 'object_name': 'Category'},
            'added': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'start_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'url': ('django.db.models.fields.URLField', [], {'default': "u''", 'max_length': '200', 'blank': 'True'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        },
        'videos.language': {
            'Meta': {'object_name': 'Language'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'iso639_1': ('django.db.models.fields.CharField', [], {'max_length': '3'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '20'})
        },
        'videos.relatedurl': {
            'Meta': {'object_name': 'RelatedUrl'},
            'description': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '255'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'related_urls'", 'to': "orm['videos.Video']"})
        },
        'videos.speaker': {
            'Meta': {'ordering': "['name']", 'object_name': 'Speaker'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})
        },
        'videos.tag': {
            'Meta': {'ordering': "['tag']", 'object_name': 'Tag'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '30'})
        },
        'videos.video': {
            'Meta': {'ordering': "['-recorded', 'title']", 'object_name': 'Video'},
            'added': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['videos.Category']"}),
            'copyright_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'duration': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'embed': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['videos.Language']", 'null': 'True'}),
            'quality_notes': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'recorded': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'source_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'speakers': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['videos.Speaker']", 'symmetrical': 'False', 'blank': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '2'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['videos.Tag']", 'symmetrical': 'False', 'blank': 'True'}),
            'thumbnail_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'video_flv_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_flv_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_flv_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_mp4_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_mp4_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_mp4_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_ogv_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_ogv_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_ogv_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_webm_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_webm_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_webm_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['videos']
########NEW FILE########
__FILENAME__ = 0009_fix_data
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import DataMigration
from django.db import models

class Migration(DataMigration):

    def forwards(self, orm):
        for vid in orm.Video.objects.all():
            if vid.copyright_text is None:
                vid.copyright_text = ''

            if vid.embed is None:
                vid.embed = ''

            vid.save()

    def backwards(self, orm):
        pass

    models = {
        'videos.category': {
            'Meta': {'ordering': "['title']", 'object_name': 'Category'},
            'added': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'start_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'url': ('django.db.models.fields.URLField', [], {'default': "u''", 'max_length': '200', 'blank': 'True'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        },
        'videos.language': {
            'Meta': {'object_name': 'Language'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'iso639_1': ('django.db.models.fields.CharField', [], {'max_length': '3'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '20'})
        },
        'videos.relatedurl': {
            'Meta': {'object_name': 'RelatedUrl'},
            'description': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '255'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'related_urls'", 'to': "orm['videos.Video']"})
        },
        'videos.speaker': {
            'Meta': {'ordering': "['name']", 'object_name': 'Speaker'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})
        },
        'videos.tag': {
            'Meta': {'ordering': "['tag']", 'object_name': 'Tag'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '30'})
        },
        'videos.video': {
            'Meta': {'ordering': "['-recorded', 'title']", 'object_name': 'Video'},
            'added': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['videos.Category']"}),
            'copyright_text': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'duration': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'embed': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['videos.Language']", 'null': 'True', 'blank': 'True'}),
            'quality_notes': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'recorded': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'source_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'speakers': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['videos.Speaker']", 'symmetrical': 'False', 'blank': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '2'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['videos.Tag']", 'symmetrical': 'False', 'blank': 'True'}),
            'thumbnail_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'video_flv_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_flv_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_flv_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_mp4_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_mp4_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_mp4_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_ogv_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_ogv_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_ogv_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_webm_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_webm_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_webm_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['videos']
    symmetrical = True

########NEW FILE########
__FILENAME__ = 0010_auto__chg_field_video_copyright_text__chg_field_video_embed
# -*- coding: utf-8 -*-
import datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):

        # Changing field 'Video.copyright_text'
        db.alter_column('videos_video', 'copyright_text', self.gf('django.db.models.fields.TextField')(default=''))

        # Changing field 'Video.embed'
        db.alter_column('videos_video', 'embed', self.gf('django.db.models.fields.TextField')(default=''))

    def backwards(self, orm):

        # Changing field 'Video.copyright_text'
        db.alter_column('videos_video', 'copyright_text', self.gf('django.db.models.fields.TextField')(null=True))

        # Changing field 'Video.embed'
        db.alter_column('videos_video', 'embed', self.gf('django.db.models.fields.TextField')(null=True))

    models = {
        'videos.category': {
            'Meta': {'ordering': "['title']", 'object_name': 'Category'},
            'added': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'start_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'url': ('django.db.models.fields.URLField', [], {'default': "u''", 'max_length': '200', 'blank': 'True'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        },
        'videos.language': {
            'Meta': {'object_name': 'Language'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'iso639_1': ('django.db.models.fields.CharField', [], {'max_length': '3'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '20'})
        },
        'videos.relatedurl': {
            'Meta': {'object_name': 'RelatedUrl'},
            'description': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '255'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'related_urls'", 'to': "orm['videos.Video']"})
        },
        'videos.speaker': {
            'Meta': {'ordering': "['name']", 'object_name': 'Speaker'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})
        },
        'videos.tag': {
            'Meta': {'ordering': "['tag']", 'object_name': 'Tag'},
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '30'})
        },
        'videos.video': {
            'Meta': {'ordering': "['-recorded', 'title']", 'object_name': 'Video'},
            'added': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['videos.Category']"}),
            'copyright_text': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'duration': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'embed': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['videos.Language']", 'null': 'True'}),
            'quality_notes': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'recorded': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'source_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'speakers': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['videos.Speaker']", 'symmetrical': 'False', 'blank': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '2'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['videos.Tag']", 'symmetrical': 'False', 'blank': 'True'}),
            'thumbnail_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'video_flv_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_flv_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_flv_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_mp4_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_mp4_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_mp4_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_ogv_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_ogv_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_ogv_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_webm_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_webm_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_webm_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        }
    }

    complete_apps = ['videos']
########NEW FILE########
__FILENAME__ = 0011_bad_url_tracking
# -*- coding: utf-8 -*-
from south.utils import datetime_utils as datetime
from south.db import db
from south.v2 import SchemaMigration
from django.db import models


class Migration(SchemaMigration):

    def forwards(self, orm):
        # Adding model 'VideoUrlStatus'
        db.create_table(u'videos_videourlstatus', (
            (u'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
            ('check_date', self.gf('django.db.models.fields.DateTimeField')()),
            ('status_code', self.gf('django.db.models.fields.IntegerField')()),
            ('status_message', self.gf('django.db.models.fields.CharField')(max_length=255, blank=True)),
            ('url', self.gf('django.db.models.fields.URLField')(max_length=255)),
            ('video', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['videos.Video'])),
        ))
        db.send_create_signal(u'videos', ['VideoUrlStatus'])


    def backwards(self, orm):
        # Deleting model 'VideoUrlStatus'
        db.delete_table(u'videos_videourlstatus')


    models = {
        u'videos.category': {
            'Meta': {'ordering': "['title']", 'object_name': 'Category'},
            'added': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'start_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'url': ('django.db.models.fields.URLField', [], {'default': "u''", 'max_length': '200', 'blank': 'True'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        },
        u'videos.language': {
            'Meta': {'object_name': 'Language'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'iso639_1': ('django.db.models.fields.CharField', [], {'max_length': '3'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '20'})
        },
        u'videos.relatedurl': {
            'Meta': {'object_name': 'RelatedUrl'},
            'description': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '255'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'related_urls'", 'to': u"orm['videos.Video']"})
        },
        u'videos.speaker': {
            'Meta': {'ordering': "['name']", 'object_name': 'Speaker'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'name': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})
        },
        u'videos.tag': {
            'Meta': {'ordering': "['tag']", 'object_name': 'Tag'},
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'tag': ('django.db.models.fields.CharField', [], {'max_length': '30'})
        },
        u'videos.video': {
            'Meta': {'ordering': "['-recorded', 'title']", 'object_name': 'Video'},
            'added': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),
            'category': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['videos.Category']"}),
            'copyright_text': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            'description': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'duration': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'embed': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'language': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['videos.Language']", 'null': 'True'}),
            'quality_notes': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'recorded': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}),
            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
            'source_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'speakers': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['videos.Speaker']", 'symmetrical': 'False', 'blank': 'True'}),
            'state': ('django.db.models.fields.IntegerField', [], {'default': '2'}),
            'summary': ('django.db.models.fields.TextField', [], {'default': "u''", 'blank': 'True'}),
            'tags': ('django.db.models.fields.related.ManyToManyField', [], {'to': u"orm['videos.Tag']", 'symmetrical': 'False', 'blank': 'True'}),
            'thumbnail_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'title': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
            'updated': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
            'video_flv_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_flv_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_flv_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_mp4_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_mp4_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_mp4_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_ogv_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_ogv_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_ogv_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'video_webm_download_only': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
            'video_webm_length': ('django.db.models.fields.IntegerField', [], {'null': 'True', 'blank': 'True'}),
            'video_webm_url': ('django.db.models.fields.URLField', [], {'max_length': '255', 'null': 'True', 'blank': 'True'}),
            'whiteboard': ('django.db.models.fields.CharField', [], {'default': "u''", 'max_length': '255', 'blank': 'True'})
        },
        u'videos.videourlstatus': {
            'Meta': {'object_name': 'VideoUrlStatus'},
            'check_date': ('django.db.models.fields.DateTimeField', [], {}),
            u'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
            'status_code': ('django.db.models.fields.IntegerField', [], {}),
            'status_message': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
            'url': ('django.db.models.fields.URLField', [], {'max_length': '255'}),
            'video': ('django.db.models.fields.related.ForeignKey', [], {'to': u"orm['videos.Video']"})
        }
    }

    complete_apps = ['videos']
########NEW FILE########
__FILENAME__ = models
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import collections
import datetime
import os
try:
    from urllib.parse import urlparse
except ImportError:
    from urlparse import urlparse
import requests
import requests.exceptions

from django.conf import settings
from django.core.exceptions import ObjectDoesNotExist, ValidationError
from django.db import models
from django.utils.encoding import python_2_unicode_compatible
from django.utils.translation import ugettext_lazy as _

from rest_framework import serializers

from richard.videos.utils import generate_unique_slug


MIMETYPES_MAP = {
    'ogv': 'video/ogg',
    'mp4': 'video/mp4',
    'webm': 'video/webm',
    'flv': 'video/x-flv'
}
USE_MARKDOWN_HELP_TEXT = _(u'Use Markdown')


@python_2_unicode_compatible
class Category(models.Model):
    title = models.CharField(
        max_length=255,
        help_text=_(u'The complete title for the category. e.g. '
                    u'PyCon 2010'))
    description = models.TextField(
        blank=True, default=u'',
        help_text=USE_MARKDOWN_HELP_TEXT)
    url = models.URLField(
        blank=True, default=u'',
        help_text=_(u'URL for the category. e.g. If this category was a '
                    u'conference, this would be the url for the conference '
                    u'web-site.'))
    start_date = models.DateField(
        blank=True, null=True,
        help_text=_(u'If the category was an event, then this is the start '
                    u'date for the event.'))

    whiteboard = models.CharField(
        blank=True, max_length=255, default=u'',
        help_text=_(u'Editor notes for this category.'))

    slug = models.SlugField(unique=True)

    # when the category was added to this site
    added = models.DateTimeField(null=True, auto_now_add=True)

    def __str__(self):
        return self.title

    def __repr__(self):
        return '<Category %s>' % self.title.encode('ascii', 'ignore')

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = generate_unique_slug(self, u'title', u'slug')
        super(Category, self).save(*args, **kwargs)

    class Meta(object):
        ordering = ["title"]
        verbose_name = _(u'category')
        verbose_name_plural = _(u'categories')

    @models.permalink
    def get_absolute_url(self):
        return ('videos-category', (self.pk, self.slug))


@python_2_unicode_compatible
class Speaker(models.Model):
    name = models.CharField(max_length=255)
    slug = models.SlugField(unique=True)

    def __str__(self):
        return self.name

    def __repr__(self):
        return '<Speaker %s: %s>' % (
            self.id, self.name.encode('ascii', 'ignore'))

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = generate_unique_slug(self, u'name', u'slug')
        super(Speaker, self).save(*args, **kwargs)

    class Meta(object):
        ordering = ['name']
        verbose_name = _(u'speaker')
        verbose_name_plural = _(u'speakers')

    @models.permalink
    def get_absolute_url(self):
        return ('videos-speaker', (self.pk, self.slug))


@python_2_unicode_compatible
class Tag(models.Model):
    tag = models.CharField(max_length=30)

    def __str__(self):
        return self.tag

    def __repr__(self):
        return '<Tag %s>' % self.tag.encode('ascii', 'ignore')

    class Meta(object):
        ordering = ['tag']
        verbose_name = _(u'tag')
        verbose_name_plural = _(u'tags')


@python_2_unicode_compatible
class Language(models.Model):
    iso639_1 = models.CharField(max_length=3)
    name = models.CharField(max_length=20)

    def __str__(self):
        return self.name


class VideoManager(models.Manager):
    def live(self):
        return self.get_query_set().filter(state=Video.STATE_LIVE)

    def live_order_by_title(self):
        return self.live().order_by('title')


@python_2_unicode_compatible
class Video(models.Model):
    STATE_LIVE = 1
    STATE_DRAFT = 2

    STATE_CHOICES = (
        (STATE_LIVE, u'Live'),
        (STATE_DRAFT, u'Draft'),
        )

    LOCAL_THUMBNAIL_PATH = 'video/thumbnails/%d.jpg'

    state = models.IntegerField(choices=STATE_CHOICES, default=STATE_DRAFT)

    title = models.CharField(max_length=255)
    summary = models.TextField(blank=True, default=u'',
                               help_text=USE_MARKDOWN_HELP_TEXT)
    description = models.TextField(blank=True, default=u'',
                                   help_text=USE_MARKDOWN_HELP_TEXT)
    tags = models.ManyToManyField(Tag, blank=True)
    category = models.ForeignKey(Category)
    speakers = models.ManyToManyField(Speaker, blank=True)

    # notes for quality issues (audio or video) in the video
    quality_notes = models.TextField(blank=True, default=u'')

    # the primary language the video is in
    language = models.ForeignKey(Language, null=True)

    # text for copyright/license--for now it's loose form.
    # if null, use source video link.
    # TODO: rename this to license
    copyright_text = models.TextField(blank=True)

    # embed for flash player things
    embed = models.TextField(blank=True)

    # url for the thumbnail
    thumbnail_url = models.URLField(max_length=255, null=True, blank=True)

    # duration in seconds
    duration = models.IntegerField(null=True, blank=True, help_text='In seconds')

    # TODO: fix this- each video type should have a filesize

    # TODO: add video_m4v

    # these are downloadable urls
    video_ogv_length = models.IntegerField(null=True, blank=True)
    video_ogv_url = models.URLField(max_length=255, null=True, blank=True)
    video_ogv_download_only = models.BooleanField(default=False)
    video_mp4_length = models.IntegerField(null=True, blank=True)
    video_mp4_url = models.URLField(max_length=255, null=True, blank=True)
    video_mp4_download_only = models.BooleanField(default=False)
    video_webm_length = models.IntegerField(null=True, blank=True)
    video_webm_url = models.URLField(max_length=255, null=True, blank=True)
    video_webm_download_only = models.BooleanField(default=False)
    video_flv_length = models.IntegerField(null=True, blank=True)
    video_flv_url = models.URLField(max_length=255, null=True, blank=True)
    video_flv_download_only = models.BooleanField(default=False)

    # source url in case we need to find things again
    source_url = models.URLField(max_length=255, null=True, blank=True)

    # whiteboard for editor notes
    whiteboard = models.CharField(max_length=255, blank=True, default=u'')

    # when the video was originally recorded
    recorded = models.DateField(null=True, blank=True)

    # when the video was added to this site
    added = models.DateTimeField(auto_now_add=True)

    # when the video metadata was last updated
    updated = models.DateTimeField(auto_now=True)

    slug = models.SlugField(unique=True)

    objects = VideoManager()

    def __str__(self):
        return self.title

    def __repr__(self):
        return '<Video %s (%s)>' % (self.title[:30].encode('ascii', 'ignore'),
                                    self.category)

    def save(self, *args, **kwargs):
        if self.title and not self.slug:
            self.slug = generate_unique_slug(self, u'title', u'slug')
        super(Video, self).save(*args, **kwargs)

    class Meta(object):
        get_latest_by = 'recorded'
        ordering = ['-recorded', 'title']
        verbose_name = _(u'video')
        verbose_name_plural = _(u'videos')

    @models.permalink
    def get_absolute_url(self):
        return ('videos-video', (self.pk, self.slug))

    def get_thumbnail_url(self):
        """Find a thumbnail for this video in the following order:

        1. use a local image
        2. use the remote image in `thumbnail_url`
        3. show a placeholder image
        """
        no_thumbnail = settings.STATIC_URL + 'videos/img/no_thumbnail.png'

        local_path = self.LOCAL_THUMBNAIL_PATH % self.pk
        if os.path.exists(os.path.join(settings.MEDIA_ROOT, local_path)):
            return settings.MEDIA_URL + local_path
        else:
            return self.thumbnail_url or no_thumbnail

    @property
    def thumbnail_width(self):
        return settings.VIDEO_THUMBNAIL_SIZE[0]

    @property
    def thumbnail_height(self):
        return settings.VIDEO_THUMBNAIL_SIZE[1]

    def is_live(self):
        return self.state == self.STATE_LIVE

    def get_all_formats(self):
        """Return formats ordered by MEDIA_PREFERENCE setting.

        Looks through all video_url/video_length fields on the model and
        selects those that are available, i.e. that have a value. The
        elements in the returned list are ordered by their format.

        """
        result = []
        for fmt in settings.MEDIA_PREFERENCE:
            url = getattr(self, 'video_%s_url' % fmt, None)

            # skip empty urls and unsupported formats
            if not url:
                continue

            try:
                mime_type = MIMETYPES_MAP[fmt]
            except KeyError:
                raise LookupError('No mimetype registered for "%s"' % fmt)

            result.append({
                'url': url,
                'length': getattr(self, 'video_%s_length' % fmt),
                'display': mime_type.split('/')[1],
                'mime_type': mime_type,
                'download_only': getattr(self, 'video_%s_download_only' % fmt),
            })

        return result

    def get_html5_formats(self):
        """Gets all formats appropriate for html5 video tag"""
        return [fmt for fmt in self.get_all_formats()
                if not fmt['download_only']]

    def is_youtube(self):
        """Is this a video on YouTube?"""
        if not self.source_url:
            return False
        parsed = urlparse(self.source_url.lower())
        return 'youtube' in parsed.netloc or 'youtu.be' in parsed.netloc

    def get_feed_formats(self):
        """Gets all formats appropriate for feed

        Note: We if this video is on YouTube, we add the YouTube url
        to the available formats because we want to make sure this
        works with Miro. We put it last in the list because most
        options are # better than this one.

        """
        fmts = self.get_all_formats()
        if self.is_youtube():
            fmts.append({
                'url': self.source_url,
                'mime_type': 'video/flv',
            })
        return fmts

    def get_download_formats(self):
        """Gets all formats appropriate for file download list"""
        return self.get_all_formats()

    @property
    def all_urls(self):
        """Returns a list of all the populated URLs of this Video
        """
        return [url for url in
                [
                    self.thumbnail_url,
                    self.video_ogv_url,
                    self.video_mp4_url,
                    self.video_webm_url,
                    self.video_flv_url,
                    self.source_url,
                ]
                if url is not None and url != ''
        ]


@python_2_unicode_compatible
class RelatedUrl(models.Model):
    video = models.ForeignKey(Video, related_name='related_urls')
    url = models.URLField(max_length=255)
    description = models.CharField(max_length=255, blank=True, default=u'')

    def __str__(self):
        return self.url

    def __repr__(self):
        return '<URL %s>' % self.url

    def display(self):
        """For showing the url

        This reduces long urls to 50 characters for display.

        """
        return self.url[:50]


class VideoUrlStatusManager(models.Manager):
    def create_for_video(self, video):
        """Create VideoUrlStatus objects for each failed url in a video

        :return: The number of VidoeUrlStatuses created
        """
        def check_urls(urls):
            for url in urls:
                try:
                    r = requests.head(url)
                    if not r.ok:
                        yield url, r.status_code, r.reason
                except requests.exceptions.RequestException as e:
                    yield url, 9999, unicode(e)

        video_url_status = [
            VideoUrlStatus(
                video=video,
                url=url,
                check_date=datetime.datetime.now(),
                status_code=status_code,
                status_message=status_message)
            for url, status_code, status_message in check_urls(video.all_urls)
        ]
        if video_url_status:
            self.bulk_create(video_url_status)
        return collections.Counter(video.status_code for video in video_url_status)


class VideoUrlStatus(models.Model):
    objects = VideoUrlStatusManager()

    check_date = models.DateTimeField(null=False, blank=False)
    status_code = models.IntegerField(null=False, blank=False)
    status_message = models.CharField(max_length=255, null=False, blank=True)
    url = models.URLField(max_length=255, null=False, blank=False)
    video = models.ForeignKey(Video)


class CategorySerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = Category
        lookup_field = 'slug'


class SpeakerSerializer(serializers.ModelSerializer):
    class Meta:
        model = Speaker


class ShrodingersSlugRelatedField(serializers.SlugRelatedField):
    """Less fussy SlugRelatedField

    It's just like SlugRelatedField, but allows for the object not to
    exist. If it doesn't exist, then it'll get created.

    """
    def from_native(self, data):
        data = data.strip()
        if self.queryset is None:
            raise Exception('Need "queryset" argument')
        try:
            return self.queryset.get(**{self.slug_field: data})
        except ObjectDoesNotExist:
            obj = self.queryset.model(**{self.slug_field: data})
            obj.save()
            return obj
        except (TypeError, ValueError):
            msg = self.error_messages['invalid']
            raise ValidationError(msg)


class VideoSerializer(serializers.ModelSerializer):
    category = serializers.SlugRelatedField(many=False, slug_field='title')
    language = serializers.SlugRelatedField(
        many=False, required=False, slug_field='name')
    slug = serializers.SlugField(read_only=True)

    # These are a little funky since we denormalize them for the API.
    speakers = ShrodingersSlugRelatedField(many=True, slug_field='name')
    tags = ShrodingersSlugRelatedField(many=True, slug_field='tag')

    class Meta:
        model = Video



########NEW FILE########
__FILENAME__ = sampledata
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from datetime import datetime, date
from textwrap import dedent

from richard.videos.models import Video
from richard.videos.tests import category, speaker, tag, video


def generate_sampledata(options):
    pycon2011 = category(
        title=u'Pycon 2011',
        slug=u'pycon-2011',
        description=u'PyCon 2011 in Atlanta, GA',
        url=u'http://us.pycon.org/2011/home/',
        save=True)

    pycon2012 = category(
        title=u'Pycon 2012',
        slug=u'pycon-2012',
        description=u'PyCon 2011 in Santa Clara, CA',
        url=u'http://us.pycon.org/2012/',
        save=True)

    sp1 = speaker(name=u'Jessica McKellar', save=True)
    sp2 = speaker(name=u'Asheesh Laroia', save=True)
    sp3 = speaker(name=u'Jacob Kaplan-Moss', save=True)

    tag1 = tag(tag=u'documentation', save=True)
    tag2 = tag(tag=u'sphinx', save=True)

    v = video(
        state=Video.STATE_LIVE, category=pycon2011,
        title=u'Writing great documentation',
        summary=dedent("""\
        Writing great documentation

        Presented by Jacob Kaplan-Moss
        """),
        description=dedent("""\
        This talk looks at tips, tools, and techniques you can
        use to produce great technical documentation.
        """),
        copyright_text=u'CC-SA-NC 3.0',
        recorded=date(2011, 3, 11),
        updated=datetime(2011, 3, 14, 3, 47, 59),
        source_url=u'http://blip.tv/file/4881071',
        video_mp4_url=(
            u'http://05d2db1380b6504cc981-8cbed8cf7e3a131cd8f1c3e383d10041'
            u'.r93.cf2.rackcdn.com/pycon-us-2011/'
            u'403_writing-great-documentation.mp4'
        ),
        thumbnail_url=(
            u'http://a.images.blip.tv/'
            u'Pycon-PyCon2011WritingGreatDocumentation902.png'
        ),
        save=True)

    v.speakers.add(sp3)
    v.tags.add(tag1, tag2)

    v = video(
        state=Video.STATE_LIVE,
        category=pycon2012,
        title=dedent("""\
        Diversity in practice: How the Boston Python User Group grew
        to 1700 people and over 15% women
        """),
        summary=dedent(u"""\
        How do you bring more women into programming communities with
        long-term, measurable results? In this talk we'll analyze our
        successful effort, the Boston Python Workshop, which brought over
        200 women into Boston's Python community this year.
        """),
        recorded=date(2012, 3, 11),
        updated=datetime(2012, 3, 13, 16, 15, 17),
        source_url=u'https://www.youtube.com/watch?v=QrITN6GZDu4',
        embed=dedent("""\
        <object width="425" height="344">
        <param name="movie"
        value="http://www.youtube.com/v/QrITN6GZDu4&amp;hl=en&amp;fs=1">
        <param name="allowFullScreen" value="true">
        <param name="allowscriptaccess" value="always">
        <embed src="http://www.youtube.com/v/QrITN6GZDu4&amp;hl=en&amp;fs=1"
        allowscriptaccess="always" height="344"
        width="425" allowfullscreen="true"
        type="application/x-shockwave-flash"></embed>
        </object>
        """),
        thumbnail_url=u'http://img.youtube.com/vi/QrITN6GZDu4/hqdefault.jpg',
        save=True)

    v.speakers.add(sp1, sp2)

    v = video(
        state=Video.STATE_DRAFT,
        category=pycon2012,
        title=u'Draft video',
        summary=u'This is a draft',
        recorded=date(2012, 3, 11),
        updated=datetime(2012, 3, 13, 16, 15, 17),
        save=True)

########NEW FILE########
__FILENAME__ = search_indexes
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from haystack import indexes

from richard.videos.models import Video


class VideoIndex(indexes.SearchIndex, indexes.Indexable):
    text = indexes.CharField(document=True, use_template=True)
    category = indexes.CharField(indexed=True)
    summary = indexes.CharField(model_attr='summary', indexed=False)
    recorded = indexes.DateTimeField(model_attr='recorded', null=True)
    video_id = indexes.IntegerField(model_attr='id', indexed=False)
    slug = indexes.CharField(model_attr='slug', indexed=False)
    tags = indexes.MultiValueField()
    speakers = indexes.MultiValueField(indexed=True)

    # Used for suggestions in opensearch
    title_auto = indexes.EdgeNgramField(model_attr='title')

    def prepare(self, obj):
        self.prepared_data = super(VideoIndex, self).prepare(obj)

        self.prepared_data['category'] = obj.category.title
        self.prepared_data['tags'] = [
            t.tag.lower() for t in obj.tags.all()]
        self.prepared_data['speakers'] = [
            s.name.lower() for s in obj.speakers.all()]

        return self.prepared_data

    def get_model(self):
        return Video

    def index_queryset(self, **kwargs):
        return self.get_model().objects.all()

########NEW FILE########
__FILENAME__ = sitemaps
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.contrib.sitemaps import GenericSitemap

from richard.videos.models import Category, Speaker, Video


CategorySitemap = GenericSitemap({'queryset': Category.objects.all()})
SpeakerSitemap = GenericSitemap({'queryset': Speaker.objects.all()})
VideoSitemap = GenericSitemap({'queryset': Video.objects.live(),
                               'date_field': 'updated'},
                              priority=0.8)

# TODO add sitemap for tags once they have their own page

########NEW FILE########
__FILENAME__ = video_summary
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
from django import template


register = template.Library()


@register.inclusion_tag('videos/includes/video_summary.html')
def video_summary(video, show_category=True):
    """Function that generates a video summary."""
    return {
        'video': video,
        'show_category': show_category
    }

########NEW FILE########
__FILENAME__ = test_api
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import datetime
import json
from functools import partial
from imp import reload

from django.contrib.auth.models import User
from django.test import TestCase
from django.utils.encoding import smart_text

from nose.tools import eq_
from rest_framework.authtoken.models import Token

from richard.videos.tests import category, language, speaker, tag, video
from richard.videos.models import Video
from richard.videos import urls as video_urls_module


class TestNoAPI(TestCase):
    def test_api_disabled(self):
        """Test that disabled api kicks up 404"""
        with self.settings(API=False):
            reload(video_urls_module)
            vid = video(state=Video.STATE_LIVE, save=True)

            # anonymous user
            resp = self.client.get('/api/v2/video/%d/' % vid.pk,
                                   {'format': 'json'})
            eq_(resp.status_code, 404)

        reload(video_urls_module)


class TestAPIBase(TestCase):
    def setUp(self):
        """Create superuser with API key."""
        super(TestAPIBase, self).setUp()

        user = User.objects.create_superuser(
            username='api_user', email='api@example.com', password='password')
        user.save()
        token = Token.objects.create(user=user)
        token.save()

        headers = {
            'HTTP_AUTHORIZATION': 'Token {0}'.format(token.key)
        }

        self.auth_post = partial(self.client.post, **headers)
        self.auth_put = partial(self.client.put, **headers)
        self.auth_get = partial(self.client.get, **headers)


class TestCategoryAPI(TestAPIBase):
    def test_get_category_list(self):
        """Test that a category can be retrieved."""
        category(save=True)
        category(save=True)
        category(save=True)

        resp = self.client.get('/api/v2/category/',
                               {'format': 'json'})
        eq_(resp.status_code, 200)
        content = json.loads(smart_text(resp.content))
        eq_(len(content['results']), 3)

    def test_get_category(self):
        """Test that a category can be retrieved."""
        cat = category(save=True)

        resp = self.client.get('/api/v2/category/%s/' % cat.slug,
                               {'format': 'json'})
        eq_(resp.status_code, 200)
        content = json.loads(smart_text(resp.content))
        eq_(content['title'], cat.title)


class TestSpeakerAPI(TestAPIBase):
    def test_get_speakers_list(self):
        """Test that a list of speakers can be retrieved."""
        speaker(name=u'Guido van Rossum', save=True)
        speaker(name=u'Raymond Hettinger', save=True)

        resp = self.client.get('/api/v2/speaker/',
                               {'format': 'json'})
        eq_(resp.status_code, 200)
        content = json.loads(smart_text(resp.content))
        eq_(len(content['results']), 2)
        names = set([result['name'] for result in content['results']])
        eq_(names, set([u'Guido van Rossum', u'Raymond Hettinger']))


class TestAPI(TestAPIBase):
    def test_get_video(self):
        """Test that a video can be retrieved."""
        vid = video(state=Video.STATE_LIVE, save=True)

        # anonymous user
        resp = self.client.get('/api/v2/video/%d/' % vid.pk,
                               {'format': 'json'})
        eq_(resp.status_code, 200)
        eq_(json.loads(smart_text(resp.content))['title'], vid.title)

        # authenticated user
        resp = self.auth_get('/api/v2/video/%d/' % vid.pk,
                             {'format': 'json'})
        eq_(resp.status_code, 200)
        eq_(json.loads(smart_text(resp.content))['title'], vid.title)

    def test_get_video_data(self):
        cat = category(title=u'Foo Title', save=True)
        vid = video(title=u'Foo Bar', category=cat, state=Video.STATE_LIVE,
                    save=True)
        t = tag(tag=u'tag', save=True)
        vid.tags = [t]
        s = speaker(name=u'Jim', save=True)
        vid.speakers = [s]

        resp = self.client.get('/api/v2/video/%d/' % vid.pk,
                               {'format': 'json'})
        eq_(resp.status_code, 200)
        content = json.loads(smart_text(resp.content))
        eq_(content['title'], vid.title)
        eq_(content['slug'], 'foo-bar')
        # This should be the category title--not api url
        eq_(content['category'], cat.title)
        # This should be the tag--not api url
        eq_(content['tags'], [t.tag])
        # This should be the speaker name--not api url
        eq_(content['speakers'], [s.name])

    def test_only_live_videos_for_anonymous_users(self):
        """Test that not authenticated users can't see draft videos."""
        vid_live = video(state=Video.STATE_LIVE, title=u'Foo', save=True)
        video(state=Video.STATE_DRAFT, title=u'Bar', save=True)

        resp = self.client.get('/api/v2/video/',
                               content_type='application/json')

        data = json.loads(smart_text(resp.content))
        eq_(len(data['results']), 1)
        eq_(data['results'][0]['title'], vid_live.title)

    def test_all_videos_for_admins(self):
        """Test that admins can see all videos."""
        video(state=Video.STATE_LIVE, title=u'Foo', save=True)
        video(state=Video.STATE_DRAFT, title=u'Bar', save=True)

        resp = self.auth_get('/api/v2/video/',
                             content_type='application/json')

        data = json.loads(smart_text(resp.content))
        eq_(len(data['results']), 2)

    def test_videos_by_tag(self):
        tag1 = tag(tag='boat', save=True)
        v1 = video(state=Video.STATE_LIVE, title=u'Foo1', save=True)
        v1.tags = [tag1]
        v1.save()
        v2 = video(state=Video.STATE_LIVE, title=u'Foo2', save=True)
        v2.tags = [tag1]
        v2.save()
        video(state=Video.STATE_LIVE, title=u'Foo3', save=True)

        resp = self.auth_get('/api/v2/video/?tag=boat',
                             content_type='application/json')

        data = json.loads(smart_text(resp.content))
        eq_(len(data['results']), 2)

    def test_videos_by_speaker(self):
        speaker1 = speaker(name='webber', save=True)
        v1 = video(state=Video.STATE_LIVE, title=u'Foo1', save=True)
        v1.speakers = [speaker1]
        v1.save()
        v2 = video(state=Video.STATE_LIVE, title=u'Foo2', save=True)
        v2.speakers = [speaker1]
        v2.save()
        video(state=Video.STATE_LIVE, title=u'Foo3', save=True)

        # Filter by full name.
        resp = self.auth_get('/api/v2/video/?speaker=webber',
                             content_type='application/json')

        data = json.loads(smart_text(resp.content))
        eq_(len(data['results']), 2)

        # Filter by partial name.
        resp = self.auth_get('/api/v2/video/?speaker=web',
                             content_type='application/json')

        data = json.loads(smart_text(resp.content))
        eq_(len(data['results']), 2)

    def test_videos_by_category(self):
        cat1 = category(slug="pycon-us-2014", save=True)
        cat2 = category(slug="scipy-2013", save=True)
        video(state=Video.STATE_LIVE, title=u'Foo1',
              category=cat1, save=True)
        video(state=Video.STATE_LIVE, title=u'Foo2',
              category=cat1, save=True)
        video(state=Video.STATE_LIVE, title=u'Foo3',
              category=cat2, save=True)

        resp = self.auth_get('/api/v2/video/?category=pycon-us-2014',
                             content_type='application/json')

        data = json.loads(smart_text(resp.content))
        eq_(len(data['results']), 2)

    def test_videos_by_order(self):
        video(state=Video.STATE_LIVE, title=u'FooC',
              recorded=datetime.datetime(2014, 1, 1, 10, 0),
              save=True)
        video(state=Video.STATE_LIVE, title=u'FooA',
              recorded=datetime.datetime(2013, 1, 1, 10, 0),
              save=True)
        video(state=Video.STATE_LIVE, title=u'FooB',
              recorded=datetime.datetime(2014, 2, 1, 10, 0),
              save=True)

        # Filter by title.
        resp = self.auth_get('/api/v2/video/?ordering=title',
                             content_type='application/json')
        data = json.loads(smart_text(resp.content))
        eq_([v['title'] for v in data['results']], [u'FooA', u'FooB', u'FooC'])

        # Filter by recorded.
        resp = self.auth_get('/api/v2/video/?ordering=recorded',
                             content_type='application/json')
        data = json.loads(smart_text(resp.content))
        eq_([v['title'] for v in data['results']], [u'FooA', u'FooC', u'FooB'])

        # Filter by added (reverse order).
        resp = self.auth_get('/api/v2/video/?ordering=-added',
                             content_type='application/json')
        data = json.loads(smart_text(resp.content))
        eq_([v['title'] for v in data['results']], [u'FooB', u'FooA', u'FooC'])


class TestVideoPostAPI(TestAPIBase):
    def test_post_video(self):
        """Test that authenticated user can create videos."""
        cat = category(save=True)
        lang = language(name='English', save=True)

        data = {'title': 'Creating delicious APIs for Django apps since 2010.',
                'language': lang.name,
                'category': cat.title,
                'speakers': ['Guido'],
                'tags': ['django', 'api'],
                'state': Video.STATE_LIVE}

        resp = self.auth_post('/api/v2/video/', json.dumps(data),
                              content_type='application/json')
        eq_(resp.status_code, 201)
        eq_(json.loads(smart_text(resp.content))['title'], data['title'])

        vid = Video.objects.get(title=data['title'])
        eq_(vid.title, data['title'])
        eq_(vid.slug, u'creating-delicious-apis-for-django-apps-since-201')
        eq_(list(vid.speakers.values_list('name', flat=True)), ['Guido'])
        eq_(sorted(vid.tags.values_list('tag', flat=True)),
            [u'api', u'django'])

    def test_post_video_no_title(self):
        """Test that no title throws an error."""
        cat = category(save=True)

        data = {'title': '',
                'category': cat.title,
                'state': Video.STATE_LIVE}

        resp = self.auth_post('/api/v2/video/', json.dumps(data),
                              content_type='application/json')
        eq_(resp.status_code, 400)

    def test_post_with_bad_state(self):
        """Test that a bad state is rejected"""
        cat = category(save=True)

        data = {'title': 'test1',
                'category': cat.title,
                'state': 0}

        resp = self.auth_post('/api/v2/video/', json.dumps(data),
                              content_type='application/json')
        eq_(resp.status_code, 400)

    def test_post_with_used_slug(self):
        """Test that already used slug creates second video with new slug."""
        cat = category(save=True)
        lang = language(save=True)
        video(title='test1', slug='test1', save=True)

        data = {'title': 'test1',
                'category': cat.title,
                'language': lang.name,
                'state': Video.STATE_DRAFT,
                'slug': 'test1'}

        resp = self.auth_post('/api/v2/video/', json.dumps(data),
                              content_type='application/json')
        eq_(resp.status_code, 201)

    def test_put(self):
        """Test that passing in an id, but no slug with a PUT works."""
        cat = category(save=True)
        lang = language(save=True)
        vid = video(title='test1', save=True)

        data = {'id': vid.pk,
                'title': vid.title,
                'category': cat.title,
                'language': lang.name,
                'speakers': ['Guido'],
                'tags': ['foo'],
                'state': Video.STATE_DRAFT}

        resp = self.auth_put('/api/v2/video/%d/' % vid.pk,
                             json.dumps(data),
                             content_type='application/json')
        eq_(resp.status_code, 200)

        # Get the video from the db and compare data.
        vid = Video.objects.get(pk=vid.pk)
        eq_(vid.title, u'test1')
        eq_(vid.slug, u'test1')
        eq_(list(vid.speakers.values_list('name', flat=True)), ['Guido'])
        eq_(list(vid.tags.values_list('tag', flat=True)), ['foo'])

    def test_put_fails_with_live_videos(self):
        """Test that passing in an id, but no slug with a PUT works."""
        cat = category(save=True)
        lang = language(save=True)
        vid = video(
            title='test1',
            category=cat,
            language=lang,
            state=Video.STATE_LIVE,
            save=True)

        data = {'id': vid.pk,
                'title': 'new title',
                'category': cat.title,
                'language': lang.name,
                'speakers': ['Guido'],
                'tags': ['foo'],
                'state': Video.STATE_DRAFT}

        resp = self.auth_put('/api/v2/video/%d/' % vid.pk,
                             json.dumps(data),
                             content_type='application/json')
        eq_(resp.status_code, 403)

    def test_post_with_tag_name(self):
        """Test that you can post video with url tags or real tags"""
        cat = category(save=True)
        lang = language(save=True)

        footag = u'footag'
        data = {
            'title': 'test1',
            'category': cat.title,
            'language': lang.name,
            'state': Video.STATE_DRAFT,
            'tags': [footag],
        }

        resp = self.auth_post('/api/v2/video/', json.dumps(data),
                              content_type='application/json')
        eq_(resp.status_code, 201)

        # Verify the tag
        vid = Video.objects.get(title=data['title'])
        eq_(vid.tags.values_list('tag', flat=True)[0], footag)

    def test_post_with_bad_tag_string(self):
        cat = category(save=True)

        data = {'title': 'test1',
                'category': cat.title,
                'state': Video.STATE_DRAFT}

        data.update({'tags': ['']})

        resp = self.auth_post('/api/v2/video/', json.dumps(data),
                              content_type='application/json')
        eq_(resp.status_code, 400)

        data.update({'tags': ['/api/v2/tag/1']})

        resp = self.auth_post('/api/v2/video/', json.dumps(data),
                              content_type='application/json')
        eq_(resp.status_code, 400)

    def test_post_with_speaker_name(self):
        """Test that you can post videos with speaker names"""
        cat = category(save=True)
        lang = language(save=True)

        fooperson = u'Carl'
        data = {
            'title': 'test1',
            'category': cat.title,
            'language': lang.name,
            'state': Video.STATE_DRAFT,
            'speakers': [fooperson],
        }

        resp = self.auth_post('/api/v2/video/', json.dumps(data),
                              content_type='application/json')
        eq_(resp.status_code, 201)

        # Verify the speaker
        vid = Video.objects.get(title=data['title'])
        eq_(vid.speakers.values_list('name', flat=True)[0], fooperson)

    def test_post_with_speaker_with_extra_spaces(self):
        """Test that you can post videos with speaker names"""
        cat = category(save=True)
        lang = language(save=True)

        fooperson = u' Carl '
        data = {
            'title': 'test1',
            'category': cat.title,
            'language': lang.name,
            'state': Video.STATE_DRAFT,
            'speakers': [fooperson],
        }

        resp = self.auth_post('/api/v2/video/', json.dumps(data),
                              content_type='application/json')
        eq_(resp.status_code, 201)

        # Verify the speaker
        vid = Video.objects.get(title=data['title'])
        eq_(vid.speakers.values_list('name', flat=True)[0], fooperson.strip())

    def test_post_with_bad_speaker_string(self):
        cat = category(save=True)

        data = {'title': 'test1',
                'category': cat.title,
                'state': Video.STATE_DRAFT}

        data.update({'speakers': ['']})

        resp = self.auth_post('/api/v2/video/', json.dumps(data),
                              content_type='application/json')
        eq_(resp.status_code, 400)

        data.update({'speakers': ['/api/v2/speaker/1']})

        resp = self.auth_post('/api/v2/video/', json.dumps(data),
                              content_type='application/json')
        eq_(resp.status_code, 400)

    def test_post_with_category_title(self):
        """Test that a category title works"""
        cat = category(title='testcat', save=True)
        lang = language(name='English', save=True)

        data = {'title': 'test1',
                'language': lang.name,
                'category': cat.title,
                'state': Video.STATE_DRAFT,
                'slug': 'foo'}

        resp = self.auth_post('/api/v2/video/', json.dumps(data),
                              content_type='application/json')
        eq_(resp.status_code, 201)

    def test_post_with_no_category(self):
        """Test that lack of category is rejected"""
        data = {'title': 'test1',
                'state': Video.STATE_DRAFT}
        resp = self.auth_post('/api/v2/video/', json.dumps(data),
                              content_type='application/json')
        eq_(resp.status_code, 400)

    def test_post_with_bad_language(self):
        """Test that a bad state is rejected"""
        cat = category(title='testcat', save=True)

        data = {'title': 'test1',
                'category': cat.title,
                'state': Video.STATE_DRAFT,
                'language': 'lolcats'}

        resp = self.auth_post('/api/v2/video/', json.dumps(data),
                              content_type='application/json')
        eq_(resp.status_code, 400)

    def test_post_video_no_data(self):
        """Test that an attempt to create a video without data is rejected."""
        data = {}

        resp = self.auth_post('/api/v2/video/', json.dumps(data),
                              content_type='application/json')
        eq_(resp.status_code, 400)

    def test_post_video_not_authenticated(self):
        """Test that not authenticated users can't write."""
        cat = category(save=True)
        data = {'title': 'Creating delicious APIs since 2010.',
                'category': cat.title,
                'state': Video.STATE_LIVE}

        resp = self.client.post('/api/v2/video/', json.dumps(data),
                                content_type='application/json')
        eq_(resp.status_code, 401)

########NEW FILE########
__FILENAME__ = test_feeds
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.core.urlresolvers import reverse
from django.template.loader import get_template
from django.template.base import TemplateDoesNotExist
from django.test import TestCase

from nose.tools import eq_

from richard.videos.feeds import CategoryFeed
from richard.videos.models import Video
from richard.videos.tests import category, video, speaker


class FeedTest(TestCase):

    def test_category_feed(self):
        """Tests for Category rss feed"""

        # Test that only categories with live videos are included.
        feed = CategoryFeed()

        cat = category(save=True)
        video(category=cat, save=True)
        v2 = video(category=cat, save=True)

        # No live videos, no category in feed
        eq_(len(feed.items()), 0)

        # At least one video is live, category is included
        v2.state = Video.STATE_LIVE
        v2.save()
        eq_([x.pk for x in feed.items()], [cat.pk])

        # Category feed description_template exists.
        found_tpl = True
        try:
            get_template(feed.description_template)
        except TemplateDoesNotExist:
            found_tpl = False
        eq_(found_tpl, True)

        # Category list feeds is accessible.
        resp = self.client.get(reverse('videos-category-feed'))
        eq_(resp.status_code, 200)

        # Category videos feed is accessible.
        resp = self.client.get(
            reverse(
                'videos-category-videos-feed',
                kwargs={'category_id': cat.id, 'slug': cat.slug}))
        eq_(resp.status_code, 200)

        # Category videos feed returns 404, invalid category_id.
        resp = self.client.get(
            reverse(
                'videos-category-videos-feed',
                kwargs={'category_id': 50, 'slug': 'fake-slug'}))
        eq_(resp.status_code, 404)

    def test_speaker_feed(self):
        """Tests for Speaker rss feed"""

        spk = speaker(save=True)

        # Speaker feed is accessible
        resp = self.client.get(
            reverse(
                'videos-speaker-feed',
                kwargs={'speaker_id': spk.id, 'slug': spk.slug}))
        eq_(resp.status_code, 200)

        # Speaker feed returns 404, invalid speaker_id.
        resp = self.client.get(
            reverse(
                'videos-speaker-feed',
                kwargs={'speaker_id': 50, 'slug': 'fake-slug'}))
        eq_(resp.status_code, 404)

    def test_video_feed(self):
        """Tests for Video rss feed"""

        # Video feed is accessible
        resp = self.client.get(reverse('videos-new-feed'))
        eq_(resp.status_code, 200)

    def test_video_feed_enclosures(self):
        """Test for encolures of video feeds"""

        # Since video feeds that has enclosure enabled are inherited from the
        # same base feed class ``BaseVideoFeed``, we only need to create a
        # general enclosure test for it.

        # Note: Feed content tests will be applied against `newly posted video`
        # feeds, for the sake of simplicity.
        feeds_url = reverse('videos-new-feed')

        example_url = 'http://example.com/123456'
        youtube_source_url = 'http://www.youtube.com/watch?v=123456'

        vid = video(state=Video.STATE_LIVE, save=True)

        # No video & source urls specified, no enclosures available in feeds.
        resp = self.client.get(feeds_url)
        self.assertNotContains(resp, 'enclosure')

        # `source_url` specified, but not a youtube url.
        vid.source_url = example_url
        vid.save()
        resp = self.client.get(feeds_url)
        self.assertNotContains(resp, 'enclosure')

        # `source_url` specified, this time a youtube url. Enclosure available.
        vid.source_url = youtube_source_url
        vid.save()
        resp = self.client.get(feeds_url)
        self.assertContains(resp, 'enclosure')
        self.assertContains(resp, youtube_source_url)

        # video urls available, correct urls displayed in feeds.
        vid.video_ogv_url = example_url + '.ogv'
        vid.video_webm_url = example_url + '.webm'
        vid.video_mp4_url = example_url + '.mp4'
        vid.video_flv_url = example_url + '.flv'
        vid.save()
        resp = self.client.get(feeds_url)
        self.assertContains(resp, vid.video_ogv_url)
        self.assertContains(resp, vid.video_webm_url)
        self.assertContains(resp, vid.video_mp4_url)
        self.assertContains(resp, vid.video_flv_url)

########NEW FILE########
__FILENAME__ = test_models
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.test import TestCase
from httmock import urlmatch, HTTMock
from nose.tools import eq_

from richard.videos.tests import video
from richard.videos import models


class TestVideoModel(TestCase):
    def test_slug_creation(self):
        v = video(title=u'Foo Bar Baz', save=True)
        eq_(v.slug, 'foo-bar-baz')

        v = video(title=u'Foo Bar Baz', slug='baz', save=True)
        eq_(v.slug, 'baz')


class TestVideoUrlStatusModel(TestCase):
    @staticmethod
    @urlmatch(netloc='500.com')
    def bad_500(url, request):
        return {'status_code': 500,
                'reason': 'Server error'}

    @staticmethod
    @urlmatch(netloc='400.com')
    def bad_404(url, request):
        return {'status_code': 404,
                'reason': 'Not Found'}

    @staticmethod
    @urlmatch(netloc='200.com')
    def ok_200(url, request):
        return {'status_code': 200,
                'content': 'some shiney content'}

    def test_good_video(self):
        with HTTMock(self.ok_200), HTTMock(self.bad_404), HTTMock(self.bad_500):
            vid = video(title=u'Foo', source_url='http://200.com')
            vid.save()
            result = models.VideoUrlStatus.objects.create_for_video(vid)
        eq_(result, {})

    def test_bad_video(self):
        with HTTMock(self.ok_200), HTTMock(self.bad_404), HTTMock(self.bad_500):
            vid = video(title=u'Foo', source_url='http://400.com')
            vid.save()
            result = models.VideoUrlStatus.objects.create_for_video(vid)
        eq_(result, {404: 1})

    def test_bad_video_multiple_links(self):
        with HTTMock(self.ok_200), HTTMock(self.bad_404), HTTMock(self.bad_500):
            vid = video(title=u'Foo',
                        source_url='http://400.com',
                        thumbnail_url='http://500.com',
                        video_ogv_url='http://200.com',
                        video_mp4_url='http://400.com',
                        video_flv_url='http://400.com',
                        )
            vid.save()
            result = models.VideoUrlStatus.objects.create_for_video(vid)
        eq_(result, {404: 3,
                     500: 1})


########NEW FILE########
__FILENAME__ = test_steve_and_api
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from functools import partial

from django.contrib.auth.models import User
from django.test import LiveServerTestCase

from nose.tools import eq_
from rest_framework.authtoken.models import Token
if sys.version_info < (3, 0):
    from steve import richardapi

    from richard.videos.models import Category, Video
    from richard.videos.tests import category, language


    class TestSteveAndAPI(LiveServerTestCase):
        # LiveServerTestCase launches richard on setup and shuts it down
        # on teardown--that's per test.
        #
        # URL is self.live_server_url
        @property
        def api_url(self):
            return self.live_server_url + '/api/v2/'

        def setUp(self):
            super(TestSteveAndAPI, self).setUp()
            """Create superuser with API key."""
            self.user = User.objects.create_superuser(
                username='api_user', email='api@example.com', password='password')
            self.user.save()
            self.token = Token.objects.create(user=self.user)
            self.token.save()

        def test_get_categories(self):
            cat = category(save=True)
            cats = richardapi.get_all_categories(self.api_url)
            eq_(len(cats), 1)
            cats[0]['title'] = cat.title

        def test_get_category(self):
            cat = category(save=True)
            cat_from_api = richardapi.get_category(self.api_url, cat.title)
            eq_(cat_from_api['title'], cat.title)

        def test_create_and_update_video(self):
            cat = category(save=True)
            lang = language(name=u'English', save=True)

            ret = richardapi.create_video(
                self.api_url,
                auth_token=self.token.key,
                video_data={
                    'title': 'Test video',
                    'language': lang.name,
                    'category': cat.title,
                    'state': 2,  # Has to be draft so update works
                    'speakers': ['Jimmy'],
                    'tags': ['foo'],
                })

            video = Video.objects.get(title='Test video')

            eq_(video.title, ret['title'])
            eq_(video.state, ret['state'])
            eq_(video.id, ret['id'])

            ret['title'] = 'Video Test'
            ret = richardapi.update_video(
                self.api_url,
                auth_token=self.token.key,
                video_id=ret['id'],
                video_data=ret
            )

            video = Video.objects.get(title='Video Test')
            eq_(video.title, ret['title'])

########NEW FILE########
__FILENAME__ = test_utils
# -*- coding: utf-8 -*-
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.test import TestCase
from nose.tools import eq_

from richard.videos.tests import video
from richard.videos.utils import generate_unique_slug


class TestGenerateUniqueSlug(TestCase):
    def test_slug_creation(self):
        """Slug is based on title."""
        v = video(title=u'Foo Bar')
        eq_(generate_unique_slug(v, u'title', u'slug'),
            u'foo-bar')

    def test_unique_slug(self):
        """Generate unique slug using incrementing ending."""
        # These all have the same title, so they get increasingly
        # lame slugs.
        video(title=u'Foo', save=True)
        video(title=u'Foo', save=True)
        video(title=u'Foo', save=True)
        video(title=u'Foo', save=True)
        video(title=u'Foo', save=True)

        v2 = video(title=u'Foo')
        eq_(generate_unique_slug(v2, u'title', u'slug'),
            u'foo-4')

    def test_unicode_title(self):
        v = video(title=u'Nebenläufige Programme mit Python')
        eq_(generate_unique_slug(v, u'title', u'slug'),
            u'nebenlaufige-programme-mit-python')

########NEW FILE########
__FILENAME__ = test_views
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import json
import shutil

from django.conf import settings
from django.core import management
from django.core.urlresolvers import reverse
from django.test import TestCase
from django.test.utils import override_settings
from django.utils.encoding import smart_text

from nose.tools import eq_

from richard.videos.tests import category, speaker, video, related_url
from richard.videos.models import Video


class TestVideos(TestCase):
    """Tests for the ``videos`` app."""

    # category

    def test_category_list_empty(self):
        """Test the view of the listing of all categories."""
        url = reverse('videos-category-list')

        resp = self.client.get(url)
        eq_(resp.status_code, 200)
        self.assertTemplateUsed(resp, 'videos/category_list.html')

    def test_category_list_with_categories(self):
        """Test the view of the listing of all categories."""
        category(save=True)
        category(save=True)
        category(save=True)

        url = reverse('videos-category-list')

        resp = self.client.get(url)
        eq_(resp.status_code, 200)
        self.assertTemplateUsed(resp, 'videos/category_list.html')

    def test_category_urls(self):
        """Test the view of an category."""
        cat = category(save=True)

        cases = [
            cat.get_absolute_url(),
            u'/category/%s/%s/' % (cat.id, cat.slug),   # with slug and /
            u'/category/%s/%s' % (cat.id, cat.slug),    # with slug and no /
            u'/category/%s/' % cat.id,                  # no slug and /
            u'/category/%s' % cat.id,                   # no slug and no /
        ]

        for url in cases:
            resp = self.client.get(url)
            eq_(resp.status_code, 200)
            self.assertTemplateUsed(resp, 'videos/category.html')

    def test_category_raise_404_when_does_not_exist(self):
        """
        Test that trying to view a non-existent category returns
        a HTTP 404 error.
        """
        url = reverse('videos-category',
                      args=(1234, 'slug'))

        resp = self.client.get(url)
        eq_(resp.status_code, 404)

    # speaker

    def test_speaker_list_with_no_speakers_in_database(self):
        """Test the view of the listing of all speakers."""
        url = reverse('videos-speaker-list')

        resp = self.client.get(url)
        eq_(resp.status_code, 200)
        self.assertTemplateUsed(resp, 'videos/speaker_list.html')

    def test_speaker_list_empty_character(self):
        """
        Test the view of the listing of all speakers given a empty
        `character` GET parameter. It should fallback to showing the
        speakers starting from the lowest possible character.
        """
        s1 = speaker(name=u'Random Speaker', save=True)
        s2 = speaker(name=u'Another Speaker', save=True)

        url = reverse('videos-speaker-list')
        data = {'character': ''}

        resp = self.client.get(url, data)
        eq_(resp.status_code, 200)
        self.assertTemplateUsed(resp, 'videos/speaker_list.html')
        self.assertNotContains(resp, s1.name)
        self.assertContains(resp, s2.name)

    def test_speaker_list_character(self):
        """
        Test the view of the listing of all speakers whose names start
        with certain character.
        """
        s1 = speaker(name=u'Another Speaker', save=True)
        s2 = speaker(name=u'Random Speaker', save=True)

        url = reverse('videos-speaker-list')
        data = {'character': 'r'}

        resp = self.client.get(url, data)
        eq_(resp.status_code, 200)
        self.assertTemplateUsed(resp, 'videos/speaker_list.html')
        self.assertNotContains(resp, s1.name)
        self.assertContains(resp, s2.name)

    def test_speaker_list_character_with_string(self):
        """
        Test the view of the listing of all speakers giving a invalid
        character argument. The view should fallback to showing the
        speakers starting from the lowest possible character.
        """
        s1 = speaker(name=u'Random Speaker', save=True)
        s2 = speaker(name=u'Another Speaker', save=True)

        url = reverse('videos-speaker-list')
        data = {'character': 'richard'}

        resp = self.client.get(url, data)
        eq_(resp.status_code, 200)
        self.assertTemplateUsed(resp, 'videos/speaker_list.html')
        self.assertNotContains(resp, s1.name)
        self.assertContains(resp, s2.name)

    def test_speaker_list_not_string_character(self):
        """
        Test the view of the listing of all speakers giving a invalid
        character argument. The view should fallback to showing the
        speakers starting from the lowest possible character.
        """
        s1 = speaker(name=u'Random Speaker', save=True)
        s2 = speaker(name=u'Another Speaker', save=True)

        url = reverse('videos-speaker-list')
        data = {'character': 42}

        resp = self.client.get(url, data)
        eq_(resp.status_code, 200)
        self.assertTemplateUsed(resp, 'videos/speaker_list.html')
        self.assertNotContains(resp, s1.name)
        self.assertContains(resp, s2.name)

    def test_speaker_urls(self):
        """Test the view of a speaker."""
        spe = speaker(name=u'Random Speaker', save=True)

        cases = [
            spe.get_absolute_url(),     # returns the URL with pk and slug
            u'/speaker/%s/%s/' % (spe.id, spe.slug),    # with slug and /
            u'/speaker/%s/%s' % (spe.id, spe.slug),     # with slug and no /
            u'/speaker/%s/' % spe.id,                   # no slug and /
            u'/speaker/%s' % spe.id,                    # no slug and no /
        ]

        for url in cases:
            resp = self.client.get(url)
            eq_(resp.status_code, 200)
            self.assertTemplateUsed(resp, 'videos/speaker.html')

    # videos

    def test_video_urls(self):
        """Test the view of a video."""
        vid = video(save=True)

        cases = [
            vid.get_absolute_url(),
            u'/video/%s/%s/' % (vid.id, vid.slug),  # with slug and /
            u'/video/%s/%s' % (vid.id, vid.slug),   # with slug and no /
            u'/video/%s/' % vid.id,                 # no slug and /
            u'/video/%s' % vid.id,                  # no slug and no /
        ]

        for url in cases:
            resp = self.client.get(url)
            eq_(resp.status_code, 200)
            self.assertTemplateUsed(resp, 'videos/video.html')

    def test_active_video_speaker_page(self):
        """Active video should show up on it's speaker's page."""
        s = speaker(save=True)
        vid = video(state=Video.STATE_LIVE, save=True)
        vid.speakers.add(s)

        speaker_url = s.get_absolute_url()

        resp = self.client.get(speaker_url)
        self.assertContains(resp, vid.title)

    def test_active_video_category_page(self):
        """Active video should shows up on category page."""
        vid = video(state=Video.STATE_LIVE, save=True)

        category_url = vid.category.get_absolute_url()

        resp = self.client.get(category_url)
        self.assertContains(resp, vid.title)

    def test_inactive_video_category_page(self):
        """Inactive video should not show up on category page."""
        vid = video(save=True)

        category_url = vid.category.get_absolute_url()

        resp = self.client.get(category_url)
        self.assertNotContains(resp, vid.title)

    def test_inactive_video_speaker_page(self):
        """Inactive video should not show up on it's speaker's page."""
        s = speaker(save=True)
        vid = video(save=True)
        vid.speakers.add(s)

        speaker_url = s.get_absolute_url()

        resp = self.client.get(speaker_url)
        self.assertNotContains(resp, vid.title)

    def test_related_url(self):
        """Related urls should show up on the page."""
        v = video(save=True)
        rurl = related_url(video_id=v.id, url=u'http://example.com/foo',
                           description=u'Example related url',
                           save=True)

        resp = self.client.get(v.get_absolute_url())
        self.assertContains(resp, rurl.description)

    def test_download_only(self):
        """Video urls marked as download-only shouldn't be in video tag."""
        v = video(video_ogv_url='http://example.com/OGV_VIDEO',
                  video_ogv_download_only=False,
                  video_mp4_url='http://example.com/MP4_VIDEO',
                  video_mp4_download_only=True,
                  save=True)

        resp = self.client.get(v.get_absolute_url())
        # This shows up in video tag and in downloads area
        eq_(resp.content.count(b'OGV_VIDEO'), 2)
        # This only shows up in downloads area
        eq_(resp.content.count(b'MP4_VIDEO'), 1)


class TestVideoSearch(TestCase):
    def tearDown(self):
        """Remove the search index after each test run.

        The path is set in richard/settings_test.py."""
        path = settings.HAYSTACK_CONNECTIONS['default']['PATH']
        if os.path.exists(path):
            shutil.rmtree(path)

    def test_search(self):
        """Test the search view."""
        url = reverse('videos-search')

        resp = self.client.get(url)
        eq_(resp.status_code, 200)

    def test_opensearch_description(self):
        """Test the opensearch description view."""
        url = reverse('videos-opensearch')

        resp = self.client.get(url)
        eq_(resp.status_code, 200)

    @override_settings(OPENSEARCH_ENABLE_SUGGESTIONS=True)
    def test_opensearch_description_with_suggestions(self):
        """Test the opensearch description view."""
        url = reverse('videos-opensearch')

        resp = self.client.get(url)
        eq_(resp.status_code, 200)

    @override_settings(OPENSEARCH_ENABLE_SUGGESTIONS=True)
    def test_opensearch_suggestions(self):
        """Test the opensearch suggestions view."""
        video(title='introduction to pypy', save=True)
        video(title='django testing', save=True)
        video(title='pycon 2012 keynote', save=True)
        video(title='Speedily Practical Large-Scale Tests', save=True)
        management.call_command('rebuild_index', interactive=False)

        url = reverse('videos-opensearch-suggestions')

        response = self.client.get(url, {'q': 'test'})
        eq_(response.status_code, 200)
        data = json.loads(smart_text(response.content))
        eq_(data[0], 'test')
        eq_(set(data[1]),
            set(['django testing', 'Speedily Practical Large-Scale Tests']))

    def test_opensearch_suggestions_disabled(self):
        """Test that when suggestions are disabled, the view does nothing."""
        url = reverse('videos-opensearch-suggestions')

        response = self.client.get(url, {'q': 'test'})
        eq_(response.status_code, 404)

########NEW FILE########
__FILENAME__ = urls
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.conf import settings
from django.conf.urls import patterns, url

from richard.videos.feeds import (
    CategoryFeed, CategoryVideosFeed, SpeakerVideosFeed,
    NewPostedVideoFeed)
from richard.videos.views import (
    CategoryListAPI, CategoryRetrieveAPI, VideoListCreateAPI,
    VideoRetrieveUpdateAPI, SpeakerListAPI)


urlpatterns = patterns(
    'richard.videos.views',

    # categories
    url(r'^category/?$',
        'category_list', name='videos-category-list'),
    url(r'^category/(?P<category_id>[0-9]+)(?:/(?P<slug>[\w-]*))?/?$',
        'category', name='videos-category'),
    url(r'^category/rss/?$',
        CategoryFeed(), name='videos-category-feed'),
    url(r'^category/(?P<category_id>[0-9]+)(?:/(?P<slug>[\w-]*))?/rss/?$',
        CategoryVideosFeed(), name='videos-category-videos-feed'),
    url(r'^category/(?P<category_id>[0-9]+)(?:/(?P<slug>[\w-]*))?/files/?$',
        'category_files', name='videos-category-files'),

    # speakers
    url(r'^speaker/$',
        'speaker_list', name='videos-speaker-list'),
    url(r'^speaker/(?P<speaker_id>[0-9]+)(?:/(?P<slug>[\w-]*))?/?$',
        'speaker', name='videos-speaker'),
    url(r'^speaker/(?P<speaker_id>[0-9]+)(?:/(?P<slug>[\w-]*))?/rss/?$',
        SpeakerVideosFeed(), name='videos-speaker-feed'),

    # videos
    url(r'^video/(?P<video_id>[0-9]+)(?:/(?P<slug>[\w-]*))?/?$',
        'video', name='videos-video'),
    url(r'^video/rss/?$', NewPostedVideoFeed(), name='videos-new-feed'),

    # search
    url(r'^search/?$',
        'search', name='videos-search'),
    url(r'^search/xml/?$',
        'opensearch', name='videos-opensearch'),
    url(r'^search/suggestions/$',
        'opensearch_suggestions', name='videos-opensearch-suggestions'),

    # faux api for carl
    url(r'^api/1.0/videos/urlforsource$',
        'apiurlforsource', name='videos-api-urlforsource'),
)


def build_api_urls():
    """Builds the API-related urls"""
    return patterns(
        '',

        # v1 was done with tastypie. It's been dumped for v1 which was
        # redone with Django-REST-Framework.
        url(r'^api/v2/category/?$', CategoryListAPI.as_view()),
        url(r'^api/v2/category/(?P<slug>[\w-]*)/?$',
            CategoryRetrieveAPI.as_view()),

        url(r'^api/v2/speaker/?$', SpeakerListAPI.as_view()),

        url(r'^api/v2/video/?$', VideoListCreateAPI.as_view()),
        url(r'^api/v2/video/(?P<pk>\d+)/?$',
            VideoRetrieveUpdateAPI.as_view(), name='videos-api-view'),

    )


# API is disabled by default. To enable it, add ``API = True`` to your
# settings.py file.
if settings.API:
    urlpatterns += build_api_urls()

########NEW FILE########
__FILENAME__ = utils
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.utils.six import text_type
from django.utils.text import slugify


def generate_unique_slug(obj, slug_from, slug_field='slug'):
    text = getattr(obj, slug_from)[:49]
    root_text = text
    for i in range(100):
        slug = slugify(text_type(text))
        try:
            d = {slug_field: slug}
            obj.__class__.objects.get(**d)
        except obj.__class__.DoesNotExist:
            return slug

        ending = u'-%s' % i
        text = root_text + ending

    raise ValueError('No valid slugs available.')


########NEW FILE########
__FILENAME__ = views
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import bleach
import json

from django.db.models import Count
from django.conf import settings
from django.contrib.sites.models import Site
from django.core.paginator import EmptyPage, Paginator
from django.http import Http404, HttpResponse
from django.shortcuts import get_object_or_404, render

from haystack.query import SearchQuerySet
from rest_framework import generics
from rest_framework import permissions
from rest_framework import filters

from richard.videos import models


def split_year(title):
    """Returns (title base, year)

    Some categories have a year at the end. This detects that
    and returns a split.

    Example:
    >>> split_year('Foo')
    ('Foo', None)
    >>> split_year('PyCon 2013')
    ('PyCon', 2013)

    """
    try:
        title = title.strip()
        return title[:-4].strip(), int(title[-4:])
    except (IndexError, ValueError):
        return title, None


def category_list(request):
    categories = models.Category.objects.order_by('title')

    # category title -> list of categories
    cats = {}
    for cat in categories:
        title, year = split_year(cat.title)
        cat.title_year = year
        cats.setdefault(title, []).append(cat)

    # convert to dicts
    cats = [{'title': key, 'cats': val} for key, val in cats.items()]
    ret = render(request, 'videos/category_list.html', {
        'cats_by_group': cats
    })
    return ret


def category(request, category_id, slug):
    obj = get_object_or_404(models.Category, pk=category_id)

    if request.user.is_staff:
        videos = obj.video_set.all()
    else:
        videos = obj.video_set.live()

    videos = videos.select_related('category').prefetch_related('speakers')

    ret = render(
        request, 'videos/category.html',
        {'view': 'videos',
         'category': obj,
         'videos': videos})
    return ret


def category_files(request, category_id, slug):
    obj = get_object_or_404(models.Category, pk=category_id)

    videos = obj.video_set.live().prefetch_related('speakers')

    ret = render(
        request, 'videos/category.html',
        {'view': 'files',
         'category': obj,
         'videos': videos})
    return ret


def speaker_list(request):
    # TODO: Should cache this--no need to look it up every time.
    qs = models.Speaker.objects.values_list('name', flat=True)
    chars = list(set(sname[0].lower() for sname in qs))
    chars.sort()

    c = request.GET.get('character', 'a')

    # make sure that there are speakers in the DB
    if chars:
        if len(c) != 1 or c not in chars:
            c = chars[0]

    speakers = (models.Speaker.objects.filter(name__istartswith=c)
                                      .annotate(video_count=Count('video')))

    ret = render(
        request, 'videos/speaker_list.html',
        {'chars': chars,
         'active_char': c,
         'speakers': speakers})
    return ret


def speaker(request, speaker_id, slug=None):
    obj = get_object_or_404(models.Speaker, pk=speaker_id)

    if request.user.is_staff:
        videos = obj.video_set.all()
    else:
        videos = obj.video_set.live()

    videos = videos.select_related('category').prefetch_related('speakers')

    ret = render(
        request, 'videos/speaker.html',
        {'speaker': obj,
         'videos': videos})
    return ret


def video(request, video_id, slug):
    obj = get_object_or_404(models.Video, pk=video_id)

    meta = [
        ('keywords', ",".join([t.tag for t in obj.tags.all()]))
        ]
    if obj.summary:
        meta.append(('description',
                     bleach.clean(obj.summary, tags=[], strip=True)))

    # Figure out how we're going to embed the video.
    # This is used by JavaScript code to seek to a specific video position.

    if obj.source_url and 'youtube' in obj.source_url:
        # Universal Subtitles is hardcoded for YouTube videos
        embed_type = 'unisubs'
    elif obj.embed:
        embed_type = 'custom'
    else:
        embed_type = 'html5'

    embed = obj.embed
    html5_formats = obj.get_html5_formats()
    if obj.is_youtube():
        video_url = obj.source_url
    elif html5_formats:
        video_url = html5_formats[0]['url']
    else:
        video_url = None

    use_amara = settings.AMARA_SUPPORT

    ret = render(request, 'videos/video.html', {
        'meta': meta,
        'v': obj,
        'use_amara': use_amara,
        'video_url': video_url,
        'embed': embed,
        'embed_type': embed_type,
        'html5_formats': html5_formats
    })
    return ret


def search(request):
    q = request.GET.get('q', '')
    facet_counts = {}
    if q:
        cat_filter = request.GET.get('category')

        qs = SearchQuerySet()
        qs = qs.filter(content=q)
        qs = qs.filter_or(speakers__startswith=q.lower())

        if cat_filter:
            # TODO: This doesn't work quite right. It should filter
            # out anything that's not *exactly* cat_filter but it's
            # not. Could be a problem here or with the indexing. The
            # haystack docs are mysterious.
            qs = qs.filter_and(category__exact=cat_filter)

        # TODO: Whoosh doesn't handle faceting, so we have to do it
        # manually. Fix this so it detects whether the haystack backend
        # supports facets and if so, uses the backend and not the db.
        cat_counts = {}
        for mem in qs:
            cat_counts[mem.category] = cat_counts.get(mem.category, 0) + 1

        facet_counts['category'] = sorted(
            cat_counts.items(), key=lambda pair: pair[1], reverse=True)

        page = Paginator(qs, 25)
        p = request.GET.get('p', '1')
        try:
            p = max(1, int(p))
        except ValueError:
            p = 1

        try:
            page = page.page(p)
        except EmptyPage:
            page = page.page(1)

    else:
        page = None

    if q:
        title = u'Search: {query}'.format(query=q)
    else:
        title = u'Search'

    get_params = request.GET.copy()
    if 'category' in get_params:
        get_params.pop('category')
    base_url = request.path + '?' + get_params.urlencode()

    return render(
        request,
        'videos/search.html', {
            'query': q,
            'base_url': base_url,
            'title': title,
            'facet_counts': facet_counts,
            'page': page
        })


def opensearch(request):
    """Return opensearch description document."""
    ret = render(
        request, 'videos/opensearch.xml',
        {'site': Site.objects.get_current()},
        content_type='application/opensearchdescription+xml')
    return ret


def opensearch_suggestions(request):
    """Return suggestions for a search query.

    Implements the OpenSearch suggestions extension.
    """
    if not settings.OPENSEARCH_ENABLE_SUGGESTIONS:
        raise Http404

    query = request.GET.get('q', '')
    sqs = (SearchQuerySet().filter(title_auto=query)
                           .values_list('title_auto', flat=True))
    result = [query, list(sqs)]

    return JSONResponse(json.dumps(result))


class IsAdminOrReadOnly(permissions.BasePermission):
    """Only admins get write access to resources"""
    def has_permission(self, request, view):
        if request.method in permissions.SAFE_METHODS:
            return True

        return request.user.is_staff

    def has_object_permission(self, request, view, obj):
        # We restrict PUT to only videos in DRAFT mode. Once it's
        # live, you can only change metadata via the web interface.
        if request.method == 'PUT' and obj.state == models.Video.STATE_LIVE:
            return False

        return True


class CategoryListAPI(generics.ListAPIView):
    queryset = models.Category.objects.all()
    serializer_class = models.CategorySerializer
    permission_classes = (IsAdminOrReadOnly,)
    lookup_field = 'slug'
    paginate_by = 50


class CategoryRetrieveAPI(generics.RetrieveAPIView):
    queryset = models.Category.objects.all()
    serializer_class = models.CategorySerializer
    permission_classes = (IsAdminOrReadOnly,)
    lookup_field = 'slug'


class SpeakerListAPI(generics.ListAPIView):
    queryset = models.Speaker.objects.all()
    serializer_class = models.SpeakerSerializer
    permission_classes = (IsAdminOrReadOnly,)
    paginate_by = 50


class VideoListCreateAPI(generics.ListCreateAPIView):
    serializer_class = models.VideoSerializer
    permission_classes = (IsAdminOrReadOnly,)
    filter_backends = (filters.OrderingFilter,)
    ordering_fields = ('added', 'recorded', 'title')

    def get_queryset(self):
        if self.request.user.is_staff:
            queryset = models.Video.objects.all()
        else:
            queryset = models.Video.objects.live().all()

        speaker = self.request.QUERY_PARAMS.get('speaker', None)
        if speaker is not None:
            queryset = queryset.filter(
                speakers__in=(
                    models.Speaker.objects
                    .filter(name__icontains=speaker)
                    .values_list('pk', flat=True)))

        tag = self.request.QUERY_PARAMS.get('tag', None)
        if tag is not None:
            queryset = queryset.filter(
                tags__in=(
                    models.Tag.objects
                    .filter(tag__icontains=tag)
                    .values_list('pk', flat=True)))

        category = self.request.QUERY_PARAMS.get('category', None)
        if category is not None:
            queryset = queryset.filter(
                category__slug=category)

        return queryset


class VideoRetrieveUpdateAPI(generics.RetrieveUpdateAPIView):
    queryset = models.Video.objects.all()
    serializer_class = models.VideoSerializer
    permission_classes = (IsAdminOrReadOnly,)

    def get_queryset(self):
        if self.request.user.is_staff:
            queryset = models.Video.objects.all()
        else:
            queryset = models.Video.objects.live().all()

        return queryset


# TODO: Move this elsewhere

class JSONResponse(HttpResponse):
    def __init__(self, content):
        super(JSONResponse, self).__init__(
            content, content_type='application/json')


def apiurlforsource(request):
    host_url = request.GET.get('host_url')
    if not host_url:
        raise Http404

    obj = get_object_or_404(models.Video, source_url=host_url)
    return JSONResponse('{"source_url": "http://pyvideo.org%s"}' %
                        obj.get_absolute_url())

########NEW FILE########
__FILENAME__ = wsgi
# richard -- video index system
# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""
WSGI config for richard project.

This module contains the WSGI application used by Django's development server
and any production WSGI deployments. It should expose a module-level variable
named ``application``. Django's ``runserver`` and ``runfcgi`` commands discover
this application via the ``WSGI_APPLICATION`` setting.

Usually you will have the standard Django WSGI application here, but it also
might make sense to replace the whole Django WSGI application with a custom one
that later delegates to the Django one. For example, you could introduce WSGI
middleware here, or combine a Django application with an application of another
framework.

"""
import os

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "richard.settings")

# This application object is used by any WSGI server configured to use this
# file. This includes Django's development server, if the WSGI_APPLICATION
# setting points here.
from django.core.wsgi import get_wsgi_application
application = get_wsgi_application()

# Apply WSGI middleware here.
# from helloworld.wsgi import HelloWorldApplication
# application = HelloWorldApplication(application)

########NEW FILE########
__FILENAME__ = update_copyrights
#!/usr/bin/env python
"""
Updates copyright statements in all html and python files.
"""

from __future__ import print_function
import os
import re
import sys


COPYRIGHT_RE = re.compile('# Copyright \\(C\\).*?richard.*?\\n')
COPYRIGHT = '# Copyright (C) 2012, 2013 richard contributors.  See AUTHORS.'


def copyright_py(filename):
    f = open(filename, 'r')
    data = f.read()
    f.close()

    if COPYRIGHT_RE.search(data) != None:
        data = COPYRIGHT_RE.sub(COPYRIGHT, data)
        f = open(filename, 'w')
        f.write(data)
        f.close()


def main(argv):
    if '--doit' not in argv:
        print('Usage: {0} --doit'.format(__file__))
        print('Updates the copyright on all Python files.')
        return 1

    top_level = os.path.abspath(
        os.path.join(os.path.dirname(__file__), os.pardir))

    print('Starting at {0}'.format(top_level))

    for root, dirs, files in os.walk(top_level):
        for name in files:
            # Don't update this file!
            if name == __file__:
                continue

            if name.endswith(('.py', '.html')):
                filename = os.path.join(root, name)
                print('Fixing {0}'.format(filename))
                copyright_py(filename)

    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))

########NEW FILE########
