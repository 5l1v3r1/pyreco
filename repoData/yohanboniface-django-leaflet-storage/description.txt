# django-leaflet-storage changelog

## 0.5.x
- internal storage structure totally reviewed: datalayers are stored as geojson files,
  instead of being split in features stored in PostGIS
- upload and download moved to client side (see Leaflet.Storage)
- cloned map name is now prefixed by "Clone of "
- added Transifex config
- workaround for non asciiable map names
- add a share_status fielf in Map model


## 0.4.0
- renamed internally category in datalayer
- add a rank column to tilelayer to control their order in the tilelayer edit box
- fix description that was not exported in the GeoJSON export
- return proper 403 if bad signature on anonymous_edit_url access
- refactored tilelayer management
- smarter encoding management at import
- smarter errors management at import
- handle other delimiters than just comma for CSV import
- Spanish translation, thanks to @ikks
- map clone possibility

## 0.3.0
- handle anonymous map creation
- Fix color no more displayed in map info box (cf #70)
- portuguese translation (thanks @FranciscoDS)
- fix bug when the map title was too long (making the slug too long, and so over the
  database limit for this field)
- add a setting to display map caption on map load (cf Leaflet.Storage#50)
- update to django 1.5
- first version of a CSV import
- add a Textarea in import form
- first version of data export (GeoJSON only for now)

## 0.2.0

- handle map settings management from front-end
- handle path styling options (https://github.com/yohanboniface/Leaflet.Storage/issues/26)
- remove Category.rank (https://github.com/yohanboniface/django-leaflet-storage/issues/46)
- Marker has now icon_class and pictogram fields (https://github.com/yohanboniface/django-leaflet-storage/issues/21)
- handle scale control
- basic short URL management
- fixed a bug where imports were failing if the category had a custom marker image

## 0.1.0

- first packaged version
---------
Important
---------

Version 0.5 totally review the modelisation: instead of one model per feature (Marker, Polygon, Polyline),
now all data are stored as geojson attached to the DataLayer.


======================
Django-Leaflet-Storage
======================

Provide collaborative maps for your Django project.

Django-Leaflet-Storage is a backend for `Leaflet.Storage <https://github.com/yohanboniface/Leaflet.Storage>`_, built on top of `Geodjango <http://geodjango.org/>`_ and `Leaflet <http://leaflet.cloudmade.com/>`_.

Check the demo `here <http://umap.fluv.io>`_




-----------------------
Maintained repositories
-----------------------

* `Github <https://github.com/yohanboniface/django-leaflet-storage>`_
* `Bitbucket <https://bitbucket.org/yohanboniface/django-leaflet-storage>`_


------------
Installation
------------

.. note::
   You will need a geo aware database. See `Geodjango doc <https://docs.djangoproject.com/en/dev/ref/contrib/gis/install/>`_ for backend installation.

Then you can pip install the app::

    pip install django-leaflet-storage

Add `leaflet_storage` to you apps::

    INSTALLED_APPS = (
        ...
        "leaflet_storage",
    )

Include `leaflet_storage` urls::

   (r'', include('leaflet_storage.urls')),

Create tables (add `--migrate` if you are using `South <http://south.aeracode.org/>`_::

    python manage.py syncdb --migrate


-----------
Basic usage
-----------

From the Django admin (for now), you need to create at least:

- one TileLayer instance
- one Licence instance

Then, go to the map creation page (something like http://localhost:8017/map/new), and you will be able to add features (Marker, Polygon...).

