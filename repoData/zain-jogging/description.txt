Jogging は Django でのロギングを簡単にするための、Python の logging のラッパです。
これはすべてのロガーの設定を一箇所でできるようにし、ロガーをインポートする標準の場所の提供や、一般的なロギングユースケースを簡潔にすることができます。

Jogging を使えば、保存場所やフォーマット、適切な粒度の詳細ログの管理が可能です。
モジュールレベルのロギング設定も、特定の関数のロギング設定のように簡単に実現できます。

使用するには、settings.py に数行設定を追加し、Python のログ関数の変りに Jogging のログ関数をインポートします。そしていつものようにログを取るだけです。

Python の logging モジュールが全ての重要な処理を担っているため、Jogging から既に存在するコードのロギングの設定を行なうことができます。
また抽象化によって logging の威力が損なわれないようにしています。


============
ダウンロード
============

最新リリース版 を `ダウンロード <http://github.com/zain/jogging/downloads>`_ セクションから取得できます。


============
インストール
============

1. ``INSTALLED_APPS`` に ``'jogging'`` を追加
2. ``MIDDLEWARE_CLASSES`` に ``'jogging.middleware.LoggingMiddleware'`` を追加


====
設定
====

言葉で説明するよりコードサンプルの方が簡単なので、いくつかのサンプルを載せます。
これらを settings.py に記述して下さい。


基本的な設定例
--------------

::

    from jogging.handlers import DatabaseHandler
    import logging

    GLOBAL_LOG_LEVEL = logging.INFO
    GLOBAL_LOG_HANDLERS = [DatabaseHandler()] # takes any Handler object that Python's logging takes

INFO レベル以上のログがデータベースへ保存されます。

Jogging はハンドラをラップしないことに注意して下さい; ハンドラは logging と同様のオブジェクトです。
これは logging.Hander でできることは全てできる、ということであり、Jogging にハンドラオブジェクトを渡すことができる、ということです。


中間的な設定例
--------------

::

    from jogging.handlers import DatabaseHandler
    from logging import StreamHandler
    import logging

    LOGGING = {
        # myapp1 の全てのログをデータベースに
        'myapp1': {
            'handler': DatabaseHandler(), # an initialized handler object
            'level': logging.DEBUG,
        },
    
        # ... この view だけは stderr に CRITICAL なログを吐く
        'myapp1.views.super_important_view': {
            'handler': StreamHandler(),
            'level': logging.CRITICAL,
        },
    }

特定のロガーだけにマッチします(この例では ``super_important_view()`` ではデータベースにログを残しません)


高度な設定例
------------

::

    from jogging.handlers import DatabaseHandler
    from logging import StreamHandler, FileHandler
    import logging

    LOGGING = {
        # myapp1 の全てのログをデータベースに
        'myapp1': {
            'handler': DatabaseHandler(),
            'level': logging.DEBUG,
        },
    
        # 今回も super_important_view だけ CRITICAL なログを stderr に吐くが、
        # それ以外のレベルのログはデータベースに吐く
        'myapp1.views.super_important_view': {
            'handlers': [
                { 'handler': StreamHandler(), 'level': logging.CRITICAL, 
                    'format': "%(asctime)-15s %(source): %(message)s %(foo)s" },
                { 'handler': DatabaseHandler(), 'level': logging.DEBUG },
            ]
        },
    
        # サードパーティのアプリにおいて、既にログをとっている場合のロガー名。
        # これも他の設定と同様に記述できる。
        'simple_example': {
            'handler': StreamHandler(),
            'level': logging.CRITICAL,
        }
    }

ハンドラのフォーマットプロパティは Python の logging の書式化文字列に加え、以下の拡張文字列があります:

- ``%(source)s`` はロギング呼び出し元のメソッド
- ``%(foo)s`` はロギング呼び出し時に渡されたパラメータ


=====
Usage
=====

::

    from jogging import logging
    logging.info("I'm an info message")
    logging.debug(msg="I'm a debug message", foo="bar")

``%(foo)s`` は上記の高度な例で言及した ``'format'`` プロパティにあったということを覚えてるでしょうか？
これはデバッグ呼び出し時には ``"bar"`` として与えられます。


================
カスタムハンドラ
================

``jogging.handlers.DatabaseHandler``
  データベースにログを保存し、管理画面において閲覧/検索/絞り込みが可能になります。

``jogging.handlers.EmailHandler``
  ログをEメールで送信します。

``jogging.handlers.InlineOnPageHandler``
  作成予定。レンダーしたページの下部にログを表示します。


===
FAQ
===

Jogging と django-logging の違いは？
    Djagno logging は単一のルートロガーを提供しますが、Jogging は異なるモジュールで異なるロガーを使うことができます。
    上述の "基本的な設定例" のように設定することで、django-logging の同じような使い方ができます。

Jogging と django-db-log の違いは？
    django-db-log は例外のログをデータベースに保存してくれるだけです。
    これはデバッグや一般的なロギングの目的には合っていませんし、Python の logging モジュールで提供するような機能は何もありません。
    Jogging は DatabaseHandler というハンドラを使えば、django-db-log のように例外ログ(だけでなくなんでも)データベースへ保存することができます。

logging の log 関数と Jogging を併用できるか？また Jogging の log 関数を使ったほうがいい理由は？
    二つの理由があります: まずひとつめは、ロガーのフォーマッタにおいて、呼び出し関数名として ``source`` 変数を使うことができます。
    ふたつめは、Jogging の log 関数は自動的に正しいロガーを選択するため、どのロガーが設定されているのか気にする必要がありません。


============
実装について
============

`Django's logging proposal <http://groups.google.com/group/django-developers/browse_thread/thread/8551ecdb7412ab22>`_ から多大なインスピレーションを受けています。

Jogging は Jogging によって管理するロガーの(名前の)定義辞書 ``settings.LOGGING`` の設定が必要です。Jogging の動作は:

1. 全てのロガーはサーバの起動時に ``settings.LOGGING`` から作成されます
   (初期化コードは、ちょうどいい場所がなかったので、ミドルウェア内の ``__init__`` にしています)。
   ハンドラは定義通りにロガーに追加され、ログレベルがセットされます。
2. アプリケーションが Jogging の log 関数を呼び出す際、呼び出し元の関数は ``settings.LOGGING`` で設定されたロガー名から
   合ったものを探し、より具体的なロガー名が選択されます。
   例えば、呼び出し元を ``myproj.myapp.views.func()`` とした場合、次の名前のロガーからマッチするロガー名を探します。 ``myproj.myapp.views.func``, ``myproj.myapp.views``, ``myproj.myapp``, ``myproj`` 。
   この場合、最初の(そしてより具体的な)ロガーがマッチして選択されます。
3. ``log()`` は選択されたロガーから呼び出され、Python の logging モジュールに渡されます。


========
リソース
========

Python logging モジュールのハンドラ一覧:
http://docs.python.org/library/logging.html#handler-objects

Python loggign モジュールの書式化文字列:
http://docs.python.org/library/logging.html#formatter-objects


====
ToDo
====

- Instantiate handlers outside of settings.py (e.g. so the ORM can be used)
- settings.py より外でハンドラのインスタンス化を行なうようにする(例えば ORM で使えるように)
- もっとカスタムハンドラを作成する


============
名前について
============

最初の "j" は発音せずに "ヨギング" と読みます。

Jogging is a thin wrapper around Python's logging functionality to make Django logging easier. It provides a central place to configure all your loggers, a standard location to import loggers, and makes common logging use cases simpler.

With Jogging, you can control the destination, format, and verbosity of logs with fine granularity. Configuring module-level logging is just as easy as configuring logging for specific functions.

To use it, you add a few configurations to settings.py, import Jogging's log functions instead of Python's, and then log away like you normally do. 

Python's logging module does all the heavy lifting. As a result, you can use Jogging to configure logging for code that already exists. And great care has been taken to make sure logging's power isn't hidden away behind abstractions.


===========
Download
===========
You can grab the latest release from the `Downloads <http://github.com/zain/jogging/downloads>`_ section, or by running ``pip install jogging``.


===========
Install
===========
1. Add ``'jogging'`` to your ``INSTALLED_APPS``
2. Add ``'jogging.middleware.LoggingMiddleware'`` to your ``MIDDLEWARE_CLASSES``


===========
Configure
===========
Code samples are easier than words, so here's a few of them. These go in settings.py.

Basic
--------

::

    from jogging.handlers import DatabaseHandler
    import logging

    GLOBAL_LOG_LEVEL = logging.INFO
    GLOBAL_LOG_HANDLERS = [DatabaseHandler()] # takes any Handler object that Python's logging takes

Everything INFO and above will get logged to the database.

Note that Jogging doesn't wrap Handlers; they're the same as in logging. This means you can do everything logging.Handler lets you do, and then throw the Handler objects into Jogging.


Intermediate
----------------

::

    from jogging.handlers import DatabaseHandler
    from logging import StreamHandler
    import logging

    LOGGING = {
        # all logs from myapp1 go to the database
        'myapp1': {
            'handler': DatabaseHandler(), # an initialized handler object
            'level': logging.DEBUG,
        },
    
        # ...except for this one view which will log CRITICAL to stderr
        'myapp1.views.super_important_view': {
            'handler': StreamHandler(),
            'level': logging.CRITICAL,
        },
    }

Only the most specific logger will be matched (i.e. ``super_important_view()`` won't log to the database in this example).


Advanced
----------------

::

    from jogging.handlers import DatabaseHandler
    from logging import StreamHandler, FileHandler
    import logging

    LOGGING = {
        # all logs from myapp1 go to the database
        'myapp1': {
            'handler': DatabaseHandler(),
            'level': logging.DEBUG,
        },
    
        # this time, we'll have super_important_view log CRITICAL to stderr again, but
        # we'll also have it log everything to the database
        'myapp1.views.super_important_view': {
            'handlers': [
                { 'handler': StreamHandler(), 'level': logging.CRITICAL, 
                    'format': "%(asctime)-15s %(source): %(message)s %(foo)s" },
                { 'handler': DatabaseHandler(), 'level': logging.DEBUG },
            ]
        },
    
        # this is the name of a logger that a third party app already logs to. 
        # you can configure it just like the others, without breaking anything.
        'simple_example': {
            'handler': StreamHandler(),
            'level': logging.CRITICAL,
        }
    }

The format property on handlers takes the same specifiers as Python's logging, plus some extras:

- ``%(source)s`` is the method that made the logging call.
- ``%(foo)s`` is a parameter passed into the logging call.


===========
Usage
===========

::

    from jogging import logging
    logging.info("I'm an info message")
    logging.debug(msg="I'm a debug message", foo="bar")

Remember ``%(foo)s`` from the ``'format'`` property in the Advanced configuration above? It will be populated with ``"bar"`` in the debug call.


======================
Custom Handlers
======================
``jogging.handlers.DatabaseHandler``
  Logs to the database, so logs are browsable/searchable/filterable in the admin.

``jogging.handlers.EmailHandler``
  Logs to emails.

``jogging.handlers.InlineOnPageHandler``
  Coming soon. Append logs to the bottom of the rendered page.


======================
FAQ
======================
What's the difference between Jogging and django-logging?
    Django logging just sets up a single root logger for you. Jogging lets you set up different loggers for different modules. The "basic" configuration above solves the same use case as django-logging.

What's the difference between Jogging and django-db-log?
    django-db-log just logs exceptions to the database. It's not for debug or general purpose logging, and doesn't have anything to do with Python's logging module. Jogging comes with a handler called DatabaseHandler that logs exceptions (and anything else you want) to the database just like django-db-log does.

If you can use logging's log functions and still use Jogging, what's the benefit of using Jogging's log functions?
    Two reasons: firstly, you get a ``source`` variable you can use in your logger's formatter that is populated with the name of the calling function; and secondly, Jogging's log functions pick the right logger for you automatically, so you don't have to worry about whether the logger is already set up.


======================
Implementation
======================
Much inspiration was taken from `Django's logging proposal <http://groups.google.com/group/django-developers/browse_thread/thread/8551ecdb7412ab22>`_.

Jogging requires a dictionary, ``settings.LOGGING``, that defines the loggers you want to control through Jogging (by name). Here is how Jogging works:

1. All loggers are created on server startup from ``settings.LOGGING`` (the init code is in models.py, for lack of a better place). Handlers are added to the loggers as defined, and levels are set.
2. When your app calls Jogging's log functions, the calling function is matched against the logger names in ``settings.LOGGING`` and the most specific logger is chosen. For example, say ``myproj.myapp.views.func()`` is the caller; it will match loggers named ``myproj.myapp.views.func``, ``myproj.myapp.views``, ``myproj.myapp``, and ``myproj``. The first (most specific) one that matches will be chosen.
3. ``log()`` is called on the chosen logger, and Python's logging module takes over from here.


===========
Resources
===========
List of handlers in Python's logging module: 
http://docs.python.org/library/logging.html#handler-objects

Format specifiers for Python's logging module:
http://docs.python.org/library/logging.html#formatter-objects


===========
The name
===========
It's pronounced "yogging" actually -- the "j" is silent.

