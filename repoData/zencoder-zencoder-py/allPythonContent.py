__FILENAME__ = conf
# -*- coding: utf-8 -*-
#
# zencoder-py documentation build configuration file, created by
# sphinx-quickstart on Wed Jul 18 21:05:59 2012.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys, os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
sys.path.insert(0, os.path.abspath('..'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.coverage']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'zencoder-py'
copyright = u'2012, Alex Schworer'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.6'
# The full version, including alpha/beta/rc tags.
release = '0.6.5'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'zencoder-pydoc'


# -- Options for LaTeX output --------------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'zencoder-py.tex', u'zencoder-py Documentation',
   u'Alex Schworer', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'zencoder-py', u'zencoder-py Documentation',
     [u'Alex Schworer'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output ------------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'zencoder-py', u'zencoder-py Documentation',
   u'Alex Schworer', 'zencoder-py', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

########NEW FILE########
__FILENAME__ = test_accounts
import unittest
from mock import patch

from test_util import TEST_API_KEY, load_response
from zencoder import Zencoder

class TestAccounts(unittest.TestCase):
    def setUp(self):
        self.zen = Zencoder(api_key=TEST_API_KEY)

    @patch("requests.Session.post")
    def test_account_create(self, post):
        post.return_value = load_response(201, 'fixtures/account_create.json')

        response = self.zen.account.create('test@example.com', tos=1)

        self.assertEquals(response.code, 201)
        self.assertEquals(response.body['password'], 'foo')
        self.assertEquals(response.body['api_key'], 'abcd1234')

    @patch("requests.Session.get")
    def test_account_details(self, get):
        get.return_value = load_response(200, 'fixtures/account_details.json')
        resp = self.zen.account.details()

        self.assertEquals(resp.code, 200)
        self.assertEquals(resp.body['account_state'], 'active')
        self.assertEquals(resp.body['minutes_used'], 12549)

    @patch("requests.Session.put")
    def test_account_integration(self, put):
        put.return_value = load_response(204)

        resp = self.zen.account.integration()

        self.assertEquals(resp.code, 204)
        self.assertEquals(resp.body, None)

    @patch("requests.Session.put")
    def test_account_live_unauthorized(self, put):
        put.return_value = load_response(402)

        resp = self.zen.account.live()
        self.assertEquals(resp.code, 402)

    @patch("requests.Session.put")
    def test_account_live_authorized(self, put):
        put.return_value = load_response(204)

        resp = self.zen.account.live()
        self.assertEquals(resp.code, 204)

if __name__ == "__main__":
    unittest.main()


########NEW FILE########
__FILENAME__ = test_inputs
import unittest
from zencoder import Zencoder

from mock import patch

from test_util import TEST_API_KEY, load_response
from zencoder import Zencoder

class TestInputs(unittest.TestCase):
    def setUp(self):
        self.zen = Zencoder(api_key=TEST_API_KEY)

    @patch("requests.Session.get")
    def test_input_details(self, get):
        get.return_value = load_response(200, 'fixtures/input_details.json')

        resp = self.zen.input.details(15432)
        self.assertEquals(resp.code, 200)
        self.assertTrue(resp.body['id'] > 0)

    @patch("requests.Session.get")
    def test_input_progress(self, get):
        get.return_value = load_response(200, 'fixtures/input_progress.json')

        resp = self.zen.input.progress(14325)
        self.assertEquals(resp.code, 200)
        self.assertEquals(resp.body['state'], 'processing')

if __name__ == "__main__":
    unittest.main()


########NEW FILE########
__FILENAME__ = test_jobs
import unittest
from mock import patch

from test_util import TEST_API_KEY, load_response
from zencoder import Zencoder

class TestJobs(unittest.TestCase):

    def setUp(self):
        self.zen = Zencoder(api_key=TEST_API_KEY)

    @patch("requests.Session.post")
    def test_job_create(self, post):
        post.return_value = load_response(201, 'fixtures/job_create.json')

        resp = self.zen.job.create('s3://zencodertesting/test.mov')

        self.assertEquals(resp.code, 201)
        self.assertTrue(resp.body['id'] > 0)
        self.assertEquals(len(resp.body['outputs']), 1)

    @patch("requests.Session.post")
    def test_job_create_list(self, post):
        post.return_value = load_response(201, 'fixtures/job_create_live.json')

        resp = self.zen.job.create(live_stream=True)

        self.assertEquals(resp.code, 201)
        self.assertTrue(resp.body['id'] > 0)
        self.assertEquals(len(resp.body['outputs']), 1)

    @patch("requests.Session.get")
    def test_job_details(self, get):
        get.return_value = load_response(200, 'fixtures/job_details.json')

        resp = self.zen.job.details(1234)
        self.assertEquals(resp.code, 200)
        self.assertTrue(resp.body['job']['id'] > 0)
        self.assertEquals(len(resp.body['job']['output_media_files']), 1)

    @patch("requests.Session.get")
    def test_job_progress(self, get):
        get.return_value = load_response(200, 'fixtures/job_progress.json')

        resp = self.zen.job.progress(12345)
        self.assertEquals(resp.code, 200)
        self.assertEquals(resp.body['state'], 'processing')

    @patch("requests.Session.put")
    def test_job_cancel(self, put):
        put.return_value = load_response(204)

        resp = self.zen.job.cancel(5555)
        self.assertEquals(resp.code, 204)
        self.assertEquals(resp.body, None)

    @patch("requests.Session.put")
    def test_job_resubmit(self, put):
        put.return_value = load_response(204)

        resp = self.zen.job.resubmit(5555)
        self.assertEquals(resp.code, 204)
        self.assertEquals(resp.body, None)

    @patch("requests.Session.get")
    def test_job_list(self, get):
        get.return_value = load_response(200, 'fixtures/job_list.json')

        resp = self.zen.job.list()
        self.assertEquals(resp.code, 200)
        self.assertEquals(len(resp.body), 3)

    @patch("requests.Session.get")
    def test_job_list_limit(self, get):
        get.return_value = load_response(200, 'fixtures/job_list_limit.json')

        resp = self.zen.job.list(per_page=1)
        self.assertEquals(resp.code, 200)
        self.assertEquals(len(resp.body), 1)

    @patch("requests.Session.put")
    def test_job_finish(self, put):
        put.return_value = load_response(204)

        resp = self.zen.job.finish(99999)
        self.assertEquals(resp.code, 204)

if __name__ == "__main__":
    unittest.main()


########NEW FILE########
__FILENAME__ = test_outputs
import unittest
from zencoder import Zencoder

from mock import patch

from test_util import TEST_API_KEY, load_response
from zencoder import Zencoder

class TestOutputs(unittest.TestCase):
    def setUp(self):
        self.zen = Zencoder(api_key=TEST_API_KEY)

    @patch("requests.Session.get")
    def test_output_details(self, get):
        get.return_value = load_response(200, 'fixtures/output_details.json')

        resp = self.zen.output.details(22222)
        self.assertEquals(resp.code, 200)
        self.assertTrue(resp.body['id'] > 0)

    @patch("requests.Session.get")
    def test_output_progress(self, get):
        get.return_value = load_response(200, 'fixtures/output_progress.json')

        resp = self.zen.output.progress(123456)
        self.assertEquals(resp.code, 200)
        self.assertEquals(resp.body['state'], 'processing')

if __name__ == "__main__":
    unittest.main()


########NEW FILE########
__FILENAME__ = test_reports
import unittest
from mock import patch

from test_util import TEST_API_KEY, load_response
from zencoder import Zencoder

import datetime

class TestReports(unittest.TestCase):
    def setUp(self):
        self.zen = Zencoder(api_key=TEST_API_KEY)

    @patch("requests.Session.get")
    def test_reports_vod(self, get):
        get.return_value = load_response(200, 'fixtures/report_vod.json')

        resp = self.zen.report.vod()

        self.assertEquals(resp.code, 200)
        self.assertEquals(resp.body['total']['encoded_minutes'], 6)
        self.assertEquals(resp.body['total']['billable_minutes'], 8)

    @patch("requests.Session.get")
    def test_reports_live(self, get):
        get.return_value = load_response(200, 'fixtures/report_live.json')

        resp = self.zen.report.live()

        self.assertEquals(resp.code, 200)
        self.assertEquals(resp.body['total']['stream_hours'], 5)
        self.assertEquals(resp.body['total']['encoded_hours'], 5)
        self.assertEquals(resp.body['statistics']['length'], 5)

    @patch("requests.Session.get")
    def test_reports_all(self, get):
        get.return_value = load_response(200, 'fixtures/report_all.json')

        resp = self.zen.report.all()

        self.assertEquals(resp.code, 200)

        self.assertEquals(resp.body['total']['live']['stream_hours'], 5)
        self.assertEquals(resp.body['total']['live']['encoded_hours'], 5)
        self.assertEquals(resp.body['total']['vod']['encoded_minutes'], 6)
        self.assertEquals(resp.body['total']['vod']['billable_minutes'], 8)
        self.assertEquals(resp.body['statistics']['live']['length'], 2)

    @patch("requests.Session.get")
    def test_reports_all_date_filter(self, get):
        get.return_value = load_response(200, 'fixtures/report_all_date.json')

        start = datetime.date(2013, 5, 13)
        end = datetime.date(2013, 5, 13)
        resp = self.zen.report.all(start_date=start, end_date=end)

        self.assertEquals(resp.code, 200)

        self.assertEquals(resp.body['statistics']['vod'][0]['encoded_minutes'], 5)
        self.assertEquals(resp.body['statistics']['vod'][0]['billable_minutes'], 0)
        self.assertEquals(resp.body['statistics']['live'][0]['stream_hours'], 1)
        self.assertEquals(resp.body['statistics']['live'][0]['total_hours'], 2)

        self.assertEquals(resp.body['total']['vod']['encoded_minutes'], 5)
        self.assertEquals(resp.body['total']['vod']['billable_minutes'], 0)
        self.assertEquals(resp.body['total']['live']['stream_hours'], 1)
        self.assertEquals(resp.body['total']['live']['total_hours'], 2)

if __name__ == "__main__":
    unittest.main()


########NEW FILE########
__FILENAME__ = test_util
from collections import namedtuple
import json
import os

TEST_API_KEY = 'abcd123'

MockResponse = namedtuple("Response", "status_code, json, content")

CUR_DIR = os.path.split(__file__)[0]

def load_response(code, fixture=None):
    if fixture:
        with open(os.path.join(CUR_DIR, fixture), 'r') as f:
            content = f.read()
    else:
        content = None

    return MockResponse(code, lambda: json.loads(content), content)


########NEW FILE########
__FILENAME__ = test_zencoder
import unittest
import os
from zencoder import Zencoder
import zencoder

class TestZencoder(unittest.TestCase):
    def setUp(self):
        """ Initialize Zencoder for testing """
        pass

    def test_api_key(self):
        """ initialize zencoder object and test api key """
        api_key = 'testapikey'
        zc = Zencoder(api_key=api_key)
        self.assertEquals(zc.api_key, api_key)

    def test_api_key_env_var(self):
        """ tests the ZENOCODER_API_KEY environment var """
        os.environ['ZENCODER_API_KEY'] = 'abcd123'
        zc = Zencoder()
        self.assertEquals(zc.api_key, 'abcd123')

    def test_default_api_version(self):
        os.environ['ZENCODER_API_KEY'] = 'abcd123'
        zc = Zencoder()
        self.assertEquals(zc.base_url, 'https://app.zencoder.com/api/v2/')

    def test_set_api_version(self):
        os.environ['ZENCODER_API_KEY'] = 'abcd123'
        zc = Zencoder(api_version='v1')
        self.assertEquals(zc.base_url, 'https://app.zencoder.com/api/v1/')

    def test_set_api_edge_version(self):
        os.environ['ZENCODER_API_KEY'] = 'abcd123'
        zc = Zencoder(api_version='edge')
        self.assertEquals(zc.base_url, 'https://app.zencoder.com/api/')

    def test_set_base_url(self):
        os.environ['ZENCODER_API_KEY'] = 'abcd123'
        zc = Zencoder(base_url='https://localhost:800/foo/')
        self.assertEquals(zc.base_url, 'https://localhost:800/foo/')

    def test_set_base_url_and_version_fails(self):
        os.environ['ZENCODER_API_KEY'] = 'abcd123'

        self.assertRaises(zencoder.core.ZencoderError,
                          Zencoder,
                          base_url='https://localhost:800/foo/',
                          api_version='v3')

    def test_set_timeout(self):
        api_key = 'testapikey'
        zc = Zencoder(api_key=api_key, timeout=999)

        self.assertEquals(zc.job.requests_params['timeout'], 999)

    def test_set_proxies(self):
        api_key = 'testapikey'
        proxies = {
            'https': 'https://10.10.1.10:1080'
        }
        zc = Zencoder(api_key=api_key, proxies=proxies)

        self.assertEquals(zc.job.requests_params['proxies'], proxies)

    def test_set_verify_false(self):
        api_key = 'testapikey'
        zc = Zencoder(api_key=api_key, verify=False)

        self.assertEquals(zc.job.requests_params['verify'], False)

    def test_set_cert_path(self):
        api_key = 'testapikey'
        cert = '/path/to/cert.pem'
        zc = Zencoder(api_key=api_key, cert=cert)

        self.assertEquals(zc.job.requests_params['cert'], cert)

if __name__ == "__main__":
    unittest.main()


########NEW FILE########
__FILENAME__ = core
import os
import requests
from datetime import datetime

# Note: I've seen this pattern for dealing with json in different versions of
# python in a lot of modules -- if there's a better way, I'd love to use it.
try:
    # python 2.6 and greater
    import json
except ImportError:
    try:
        # python 2.5
        import simplejson
        json = simplejson
    except ImportError:
        # if we're in django or Google AppEngine land
        # use this as a last resort
        from django.utils import simplejson
        json = simplejson

__version__ = '0.6.5'

class ZencoderError(Exception):
    pass

class ZencoderResponseError(Exception):
    def __init__(self, http_response, content):
        self.http_response = http_response
        self.content = content

class HTTPBackend(object):
    """ Abstracts out an HTTP backend. Required argument are ``base_url`` and
    ``api_key``. """
    def __init__(self,
                 base_url,
                 api_key,
                 resource_name=None,
                 timeout=None,
                 test=False,
                 version=None,
                 proxies=None,
                 cert=None,
                 verify=True):

        self.base_url = base_url

        if resource_name:
            self.base_url = self.base_url + resource_name

        self.http = requests.Session()

        # set requests additional settings.
        # `None` is default for all of these settings.
        self.requests_params = {
            'timeout': timeout,
            'proxies': proxies,
            'cert': cert,
            'verify': verify
        }

        self.api_key = api_key
        self.test = test
        self.version = version

        # sets request headers for the entire session
        self.http.headers.update(self.headers)

    @property
    def headers(self):
        """ Returns default headers, by setting the Content-Type, Accepts,
        User-Agent and API Key headers. """

        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Zencoder-Api-Key': self.api_key,
            'User-Agent': 'zencoder-py v{0}'.format(__version__)
        }

        return headers

    def delete(self, url, params=None):
        """ Executes an HTTP DELETE request for the given URL.

            ``params`` should be a dictionary
        """
        response = self.http.delete(url,
                                    params=params,
                                    **self.requests_params)
        return self.process(response)

    def get(self, url, data=None):
        """ Executes an HTTP GET request for the given URL.

            ``data`` should be a dictionary of url parameters
        """
        response = self.http.get(url,
                                 headers=self.headers,
                                 params=data,
                                 **self.requests_params)
        return self.process(response)

    def post(self, url, body=None):
        """ Executes an HTTP POST request for the given URL. """
        response = self.http.post(url,
                                  headers=self.headers,
                                  data=body,
                                  **self.requests_params)

        return self.process(response)

    def put(self, url, data=None, body=None):
        """ Executes an HTTP PUT request for the given URL. """
        response = self.http.put(url,
                                 headers=self.headers,
                                 data=body,
                                 params=data,
                                 **self.requests_params)

        return self.process(response)

    def process(self, response):
        """ Returns HTTP backend agnostic ``Response`` data. """

        try:
            code = response.status_code

            # 204 - No Content
            if code == 204:
                body = None
            # add an error message to 402 errors
            elif code == 402:
                body = {
                    "message": "Payment Required",
                    "status": "error"
                }
            else:
                body = response.json()

            return Response(code, body, response.content, response)
        except ValueError:
            raise ZencoderResponseError(response, response.content)

class Zencoder(object):
    """ This is the entry point to the Zencoder API. You must have a valid
    ``api_key``.

    You can pass in the api_key as an argument, or set ``ZENCODER_API_KEY``
    as an environment variable, and it will use that, if ``api_key`` is
    unspecified.

    Set ``api_version='edge'`` to get the Zencoder development API.
    (defaults to 'v2')

    ``timeout``, ``proxies`` and ``verify`` can be set to control the
    underlying HTTP requests that are made.
    """
    def __init__(self,
                 api_key=None,
                 api_version=None,
                 base_url=None,
                 timeout=None,
                 test=False,
                 proxies=None,
                 cert=None,
                 verify=True):

        if base_url and api_version:
            raise ZencoderError('Cannot set both `base_url` and `api_version`.')

        if base_url:
            self.base_url = base_url
        else:
            self.base_url = 'https://app.zencoder.com/api/'

            if not api_version:
                api_version = 'v2'

            if api_version != 'edge':
                self.base_url = '{0}{1}/'.format(self.base_url, api_version)

        if not api_key:
            try:
                self.api_key = os.environ['ZENCODER_API_KEY']
            except KeyError:
                raise ZencoderError('ZENCODER_API_KEY not set')
        else:
            self.api_key = api_key

        self.test = test

        args = (self.base_url, self.api_key)

        kwargs = dict(timeout=timeout,
                      test=self.test,
                      version=api_version,
                      proxies=proxies,
                      cert=cert,
                      verify=verify)

        self.job = Job(*args, **kwargs)
        self.account = Account(*args, **kwargs)
        self.output = Output(*args, **kwargs)
        self.input = Input(*args, **kwargs)
        self.report = None
        if api_version == 'v2':
            self.report = Report(*args, **kwargs)

class Response(object):
    """ The Response object stores the details of an API request.

    `Response.body` contains the loaded JSON response from the API.
    """
    def __init__(self, code, body, raw_body, raw_response):
        self.code = code
        self.body = body
        self.raw_body = raw_body
        self.raw_response = raw_response

class Account(HTTPBackend):
    """ Contains all API methods relating to Accounts.

    https://app.zencoder.com/docs/api/inputs

    """
    def __init__(self, *args, **kwargs):
        kwargs['resource_name'] = 'account'
        super(Account, self).__init__(*args, **kwargs)

    def create(self, email, tos=1, options=None):
        """ Creates an account with Zencoder, no API Key necessary.

        https://app.zencoder.com/docs/api/accounts/create

        """
        data = {'email': email,
                'terms_of_service': str(tos)}
        if options:
            data.update(options)

        return self.post(self.base_url, body=json.dumps(data))

    def details(self):
        """ Gets account details.

        https://app.zencoder.com/docs/api/accounts/show

        """
        return self.get(self.base_url)

    def integration(self):
        """ Puts the account into integration mode.

        https://app.zencoder.com/docs/api/accounts/integration

        """
        return self.put(self.base_url + '/integration')

    def live(self):
        """ Puts the account into live mode.

        https://app.zencoder.com/docs/api/accounts/integration

        """
        return self.put(self.base_url + '/live')

class Output(HTTPBackend):
    """ Contains all API methods relating to Outputs.

    https://app.zencoder.com/docs/api/outputs

    """
    def __init__(self, *args, **kwargs):
        kwargs['resource_name'] = 'outputs'
        super(Output, self).__init__(*args, **kwargs)

    def progress(self, output_id):
        """ Returns the progress for the given ``output_id``.

        https://app.zencoder.com/docs/api/outputs/progress

        """
        return self.get(self.base_url + '/%s/progress' % str(output_id))

    def details(self, output_id):
        """ Returns the details of the given ``output_id``.

        https://app.zencoder.com/docs/api/outputs/show

        """
        return self.get(self.base_url + '/%s' % str(output_id))

class Input(HTTPBackend):
    """ Contains all API methods relating to Inputs.

    https://app.zencoder.com/docs/api/inputs

    """
    def __init__(self, *args, **kwargs):
        kwargs['resource_name'] = 'inputs'
        super(Input, self).__init__(*args, **kwargs)

    def progress(self, input_id):
        """ Returns the progress of the given ``input_id``.

        https://app.zencoder.com/docs/api/inputs/progress

        """
        return self.get(self.base_url + '/%s/progress' % str(input_id))

    def details(self, input_id):
        """ Returns the detials of the given ``input_id``.

        https://app.zencoder.com/docs/api/inputs/show

        """
        return self.get(self.base_url + '/%s' % str(input))

class Job(HTTPBackend):
    """ Contains all API methods relating to transcoding Jobs.

    https://app.zencoder.com/docs/api/jobs

    """
    def __init__(self, *args, **kwargs):
        kwargs['resource_name'] = 'jobs'
        super(Job, self).__init__(*args, **kwargs)

    def create(self, input=None, live_stream=False, outputs=None, options=None):
        """ Creates a transcoding job. Here are some examples::

            job.create('s3://zencodertesting/test.mov')
            job.create(live_stream=True)
            job.create(input='http://example.com/input.mov',
                       outputs=({'label': 'test output'},))

        https://app.zencoder.com/docs/api/jobs/create

        """
        data = {"input": input, "test": self.test}
        if outputs:
            data['outputs'] = outputs

        if options:
            data.update(options)

        if live_stream:
            data['live_stream'] = live_stream

        return self.post(self.base_url, body=json.dumps(data))

    def list(self, page=1, per_page=50):
        """ Lists Jobs.

        https://app.zencoder.com/docs/api/jobs/list

        """
        data = {"page": page,
                "per_page": per_page}
        return self.get(self.base_url, data=data)

    def details(self, job_id):
        """ Returns details of the given ``job_id``.

        https://app.zencoder.com/docs/api/jobs/show

        """
        return self.get(self.base_url + '/%s' % str(job_id))

    def progress(self, job_id):
        """ Returns the progress of the given ``job_id``.

        https://app.zencoder.com/docs/api/jobs/progress

        """
        return self.get(self.base_url + '/%s/progress' % str(job_id))

    def resubmit(self, job_id):
        """ Resubmits the given ``job_id``.

        https://app.zencoder.com/docs/api/jobs/resubmit

        """
        url = self.base_url + '/%s/resubmit' % str(job_id)
        return self.put(url)

    def cancel(self, job_id):
        """ Cancels the given ``job_id``.

        https://app.zencoder.com/docs/api/jobs/cancel

        """
        if self.version == 'v1':
            verb = self.get
        else:
            verb = self.put

        url = self.base_url + '/%s/cancel' % str(job_id)
        return verb(url)

    def delete(self, job_id):
        """ Deletes the given ``job_id``.

        WARNING: This method is aliased to `Job.cancel` -- it is deprecated in
                 API version 2 and greater.
        """
        return self.cancel(job_id)

    def finish(self, job_id):
        """ Finishes the live stream for ``job_id``.

        https://app.zencoder.com/docs/api/jobs/finish

        """
        return self.put(self.base_url + '/%s/finish' % str(job_id))

class Report(HTTPBackend):
    def __init__(self, *args, **kwargs):
        """ Contains all API methods relating to Reports.

            https://app.zencoder.com/docs/api/reports

        """
        kwargs['resource_name'] = 'reports'
        super(Report, self).__init__(*args, **kwargs)

    def __format(self, start_date=None, end_date=None, grouping=None):
        data = {'api_key': self.api_key}

        date_format = '%Y-%m-%d'
        if start_date:
            data['from'] = start_date.strftime(date_format)

        if end_date:
            data['to'] = end_date.strftime(date_format)

        if grouping:
            data['grouping'] = grouping

        return data

    def minutes(self, start_date=None, end_date=None, grouping=None):
        """ Gets a detailed Report of encoded minutes and billable minutes for a
        date range.

        **Warning**: ``start_date`` and ``end_date`` must be ``datetime.date`` objects.

        Example::
            import datetime
            start = datetime.date(2012, 12, 31)
            end = datetime.today()
            data = z.report.minutes(start, end)


        https://app.zencoder.com/docs/api/reports/minutes

        """

        data = self.__format(start_date, end_date)

        url = self.base_url + '/minutes'
        return self.get(url, data=data)

    def vod(self, start_date=None, end_date=None, grouping=None):
        """ Returns a report of VOD usage.

         https://app.zencoder.com/docs/api/reports/vod

        """
        data = self.__format(start_date, end_date, grouping)

        url = self.base_url + '/vod'
        return self.get(url, data=data)

    def live(self, start_date=None, end_date=None, grouping=None):
        """ Returns a report of Live usage.

        https://app.zencoder.com/docs/api/reports/vod

        """
        data = self.__format(start_date, end_date, grouping)

        url = self.base_url + '/live'
        return self.get(url, data=data)

    def all(self, start_date=None, end_date=None, grouping=None):
        """ Returns a report of both VOD and Live usage.

        https://app.zencoder.com/docs/api/reports/all

        """
        data = self.__format(start_date, end_date, grouping)

        url = self.base_url + '/all'
        return self.get(url, data=data)


########NEW FILE########
