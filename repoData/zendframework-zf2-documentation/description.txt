# CONTRIBUTING

To contribute to the Zend Framework 2 documentation you can send us a
[pull request](https://help.github.com/articles/using-pull-requests) using GitHub, that's it!

If you are not familiar with github you can read the
[Zend Framework Git Guide](http://framework.zend.com/wiki/display/ZFDEV2/Zend+Framework+Git+Guide)
using the repository `git://github.com/zendframework/zf2-documentation.git` instead of
`git://github.com/zendframework/zf2.git`.

We only ask you to use a couple of conventions:

 - If you want to propose a new doc we use the `feature/<doc>` branch name convention,
   where `<doc>` is the name of the document that you want to create;

 - To fix or update a document we use the `fix/<doc>` branch name convention,
   where `<doc>` is the name of the document that you want to fix or update;

If you want to work on a document in a language different from English, please
include the name of the language in the branch name.

For instance, if you want to propose a new document in Italian you have to use the
following naming convention: `feature/it/<doc>`, where `it` is Italian.
The same convention is applied on the fix or update: `fix/it/<doc>`.

You can find the supported languages in the `docs/languages` subdirectory.


## DOCUMENT FORMAT

The Zend Framework 2 documentation is written using the
[reStructuredText](http://en.wikipedia.org/wiki/ReStructuredText) format.

If you are not familiar with this format we suggest to have a look at this
[reStructuredText primer](http://sphinx.pocoo.org/rest.html).

To render the documentation we use the [Sphinx](http://sphinx.pocoo.org/) project. At the moment we support only
the **HTML** render format but we are going to support soon the **PDF** and **ePub** formats.

There is a soft limit on the max line length of 115 characters. It is recommended to keep this limit whenever
possible.

## RENDER THE DOCUMENTATION

In order to render the documentation you have to install [Sphinx](http://sphinx.pocoo.org/) version 1.1.0 or newer.
Sphinx requires Python and several Python libraries to run.

If your system already has a package with Sphinx, make sure that it is version 1.1 or higher. At the time of writing
this, Debian systems provide Sphinx version 0.6 or 1.0.8 and will refuse to work correctly with this documentation.

To install latest Sphinx on a Debian-based system, use the following commands:

    > apt-get install python-setuptools python-pygments
    > easy_install -U Sphinx
    > sphinx-build --version
      Sphinx v1.1.3
      Usage: /usr/local/bin/sphinx-build ....

To render the documentation in HTML format:

 1. Clone the [git repository](git://github.com/zendframework/zf2-documentation.git) or download and extract an
 archive with documentation.
 1. Enter the `docs/` subdirectory;
 1. Run `make html`

The HTML documentation will be generated in `docs/_build/html`.

By default, the `make html` command renders the documentation in English.
To render in a different language you have to specify the LANG in the command line.

For instance, to render the documentation in Italian (`it`), execute the following command:

    make html LANG=it

You can find the supported languages in the `docs/languages` subdirectory.

After you've made changes to .rst files, you can run `make html` again to update HTML for changed pages.

## TRANSLATION

If you want to begin a new translation, you need to create a new subdirectory in the 'docs/languages' directory.
The name of the directory must be the [ISO 639-1 code](http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
for your language.

The compilation process takes all English files in the directory 'docs/languages/en' and overwrites them with those
in your language directory if it exists with the same filename in the same tree. If you want to translate a file,
copy the English file to your directory and start the translation. When the translation is completed, you have
to add a revcheck tag like '.. EN-Revision: 1a526e4' at the top of the file. '1a526e4' are the 7 first characters
of the English commit on which your translation is based. This helps the maintainer of the translation to know if
there exist one or multiple modifications of the English file that need to be added to the translation.

All revcheck tags have been initialized to 'none'. This indicates to all maintainers of translations that it needs
at least one review of the file after the automatic migration from ZF1 (Docbook to reST). We will provide in a
next future a visual tool for translators to be able to detect non-translated files or outdated files (based on
the revcheck tag).

In this philosophy, you can translate an image if you want. But there are 2 specific files at the
root of the English directory that you must not translate:
 - 'index.rst'
 - 'snippets.rst'

All sentences in these files that need a translation are handled by the reST substitution syntax. You can find them
in the 'translated-snippets.rst' file.

# Welcome to the *Zend Framework 2* documentation

## RELEASE INFORMATION

This documentation is based on *Zend Framework 2* (master branch)


## VIEW THE DOCUMENTATION ONLINE

We used the [readthedocs.org](http://readthedocs.org/) project to render online the development version of the
documentation of Zend Framework 2.

You can read the development online documentation in 
[http://zf2.readthedocs.org](http://zf2.readthedocs.org/en/latest/index.html).

You can read the last stable documentation in 
[http://packages.zendframework.com/docs/latest/manual/en/](http://packages.zendframework.com/docs/latest/manual/en/).

## BUILDING DOCUMENTATION

Building the documentation requires [Sphinx](http://sphinx-doc.org/).

Descend into the `docs/` directory, and run `make` with one of the following
targets:

- `epub` - build epub (ebook) documentation (requires
  [Calibre](http://calibre-ebook.com/) to build cross-platform epub versions)
- `help` - build Windows help files
- `html` - build HTML documentation
- `info` - build Unix info pages
- `latexpdf` - build PDF documentation (requires a working `latex` toolchain)
- `man` - build Unix manpages
- `text` - build ANSI text manual files

Examples:

```sh
make html
```

You can cleanup by running `make clean`.

## CONTRIBUTING

If you wish to contribute to the documentation of Zend Framework 2, please read the
CONTRIBUTING.md file.

If you don't know where to begin, or where you can best help, please review the
TODO.md file.

## LICENSE

The files in this archive are released under the Zend Framework license.
You can find a copy of this license in LICENSE.txt.

## ACKNOWLEDGEMENTS

The Zend Framework team would like to thank all the [contributors](https://github.com/zendframework/zf2-documentation/contributors) to the Zend
Framework Documentation project, our corporate sponsor, and you, the Zend Framework user.
Please visit us sometime soon at http://framework.zend.com.

TODO
====

The ZF2 documentation has its roots in the ZF1 documentation. Therefore, some sections are outdated, some are missing,
and some are just plain wrong. The following is the list of documentation sections that need work.
Everyone is welcome to fork and edit the documentation, but if you plan to seriously work on a component,
please first drop a note to the ZF contributors mailing list (http://framework.zend.com/archives/contributors)
and/or to the [#zftalk.dev IRC channel](irc://irc.freenode.net/zftalk.dev).

Alternatively, some issues are reported to the
[documentation issue tracker](https://github.com/zendframework/zf2-documentation/issues), if you're looking
for issues to fix, you can pick an issue there as well.

Components that need refactoring
--------------------------------

The following documentation sections need to be refactored from the ZF1 docs.
Typically, this will mean updating class names to reference namespaced versions,
and potentially updating code samples to reflect any API changes.

- Dom  (Lead: Matthew Weier O'Phinney (weierophinney))
- File (Lead: Chris Martin (cgmartin))
- Json (Lead: Matthew Weier O'Phinney (weierophinney)); work begun by Robert Basic (robertbasic))
- Markup (Note that this is now in its own repository, and the API may change in
  the future)
- Navigation (Lead: Kyle Spraggs (spiffyjr))
- Paginator (Lead: Matthew Weier O'Phinney (weierophinney))
- ProgressBar (Lead: Ben Scholzen (DASPRiD))
- Serializer (Lead: Marc Bennewitz (marc-mabe))

New Components with no documentation
------------------------------------

The following are new components in need of documentation. In some cases, the
components existed previously, but have been rewritten.

- Escaper (Lead: PÃ¡draic Brady (PadraicB))
- Math (Lead: Enrico Zimuel (ezimuel))
- Session (Enrico Zimuel has begun this)
- Uri (Lead: Shahar Evron (shahar))

Incomplete documentation
------------------------

The following documentation sections are incomplete. Typically, a quickstart and/or
example section is present, but full documentation is missing.

- Code (Lead: Ralph Schindler (ralphschindler))
- Console (Needs quickstart and examples) (Lead: Artur Bodera (ThinkScape);
  work begun by weierophinney)
- Crypt (Lead: Enrico Zimuel (ezimuel))
- Db (Lead: Ralph Schindler (ralphschindler))
- Di (Lead: Ralph Schindler (ralphschindler))
- EventManager (Lead: Matthew Weier O'Phinney (weierophinney))
- Form (Lead: Chris Martin (cgmartin) and Michael Gallego (Bakura))
- I18n (Lead: Ben Scholzen (DASPRiD))
- InputFilter (Lead: Matthew Weier O'Phinney (weierophinney))
- Log (Lead: Enrico Zimuel (ezimuel))
- Mail (Lead: Dolf Schimmel (Freeaqingme))
- ServiceManager (Lead: Ralph Schindler (ralphschindler))
- Stdlib (Lead: Matthew Weier O'Phinney (weierophinney))
- View (Lead: Matthew Weier O'Phinney (weierophinney))

Broken documentation
--------------------

The following documentation sections are complete, but incorrect, due to API changes
that happened before release. You will likely need to contact somebody in IRC or
on the mailing list to determine what needs to be fixed.

- Cache (Lead: Marc Bennewitz (marc-mabe))
- Http (Lead: Dolf Schimmel (Freeaqingme)); work begun by Adam Lundrigan (adamlundrigan)
- Loader (Lead: Matthew Weier O'Phinney (weierophinney))
- ModuleManager (Lead: Evan Coury (EvanDotPro))
- Mvc (Lead: Matthew Weier O'Phinney (weierophinney))
- Learning Dependency Injection

